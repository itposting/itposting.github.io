{"pageProps":{"post":{"title":"Ansible로 윈도우 업데이트 마스터하기 종합 가이드","description":"","date":"2024-06-30 23:20","slug":"2024-06-30-MasteringWindowsUpdateswithAnsibleAComprehensiveGuide","content":"\n\n윈도우 시스템에서 업데이트를 관리하는 것은 여러 대의 서버가 있는 환경에서 특히 어려울 수 있습니다. 일반적으로 윈도우 업데이트는 GUI를 통해 관리되어왔는데, 이는 시간이 많이 소요되고 오류가 발생하기 쉽습니다. 그러나 Ansible을 사용하면 전체 프로세스를 자동화하여 최소한의 노력으로 시스템이 최신 상태를 유지할 수 있습니다. 이 블로그에서는 Ansible을 사용하여 윈도우 업데이트를 설정하고 관리하는 과정을 안내해 드리겠습니다.\n\n![이미지](/assets/img/2024-06-30-MasteringWindowsUpdateswithAnsibleAComprehensiveGuide_0.png)\n\n## 사전 준비 사항\n\nAnsible 구성으로 진입하기 전에 필요한 사전 준비 사항이 갖춰져 있는지 확인해 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n- Ansible 제어 머신: 제어 머신에 Ansible이 설치되어 있는지 확인해주세요. 그렇지 않은 경우, 다음 명령을 사용하여 설치할 수 있습니다:\n\n```js\npip install ansible\n```\n\n2. Windows 시스템: Windows 시스템이 WinRM(Windows 원격 관리)이 활성화되어 있고 올바르게 구성되어 있는지 확인해주세요. 이는 Ansible이 Windows 호스트와 통신할 수 있게 합니다.\n\n3. Ansible Windows Collection: Windows 업데이트를 관리하기 위한 필요한 모듈이 있는지 확인하기 위해 ansible.windows 컬렉션을 설치해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nansible-galaxy collection install ansible.windows\n```\n\n## Windows에서 WinRM 구성하기\n\nWindows 업데이트를 관리하기 위해 Ansible이 각 Windows 머신에서 올바르게 구성되어야 합니다. Windows 시스템에서 WinRM을 구성하기 위해 실행할 수 있는 스크립트가 있습니다:\n\n```js\n# PSRemoting 활성화\nEnable-PSRemoting -Force\n\n# 암호화되지 않은 트래픽 허용\nSet-Item -Path WSMan:\\localhost\\Service\\AllowUnencrypted -Value $true\n\n# 기본 인증 허용\nSet-Item -Path WSMan:\\localhost\\Service\\Auth\\Basic -Value $true\n\n# TrustedHosts 설정\nSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value “*” -Force\n\n# WinRM 트래픽을 허용하는 방화벽 규칙 생성\nNew-NetFirewallRule -Name “Allow WinRM HTTP-In” -DisplayName “Allow WinRM HTTP-In” -Protocol TCP -LocalPort 5985 -Action Allow -Profile Any\nNew-NetFirewallRule -Name “Allow WinRM HTTPS-In” -DisplayName “Allow WinRM HTTPS-In” -Protocol TCP -LocalPort 5986 -Action Allow -Profile Any\n\n# 자체 서명 인증서 생성\n$cert = New-SelfSignedCertificate -DnsName “localhost” -CertStoreLocation Cert:\\LocalMachine\\My\n\n# 새 인증서를 사용하여 WinRM을 HTTPS로 구성\nwinrm create winrm/config/Listener?Address=*+Transport=HTTPS “@{Hostname=`”localhost`”;CertificateThumbprint=`”$($cert.Thumbprint)`”}”\n\n# WinRM 서비스 재시작\nRestart-Service -Name “WinRM\"\n```\n\n<div class=\"content-ad\"></div>\n\n## Ansible 인벤토리 설정\n\n다음으로는 Ansible 인벤토리를 구성하여 Windows 호스트를 포함해야합니다. 다음은 인벤토리 파일(inventory.ini)의 예시입니다:\n\n```js\n[windows]\nwin_host1 ansible_host=192.168.1.100\nwin_host2 ansible_host=192.168.1.101\n\n[windows:vars]\nansible_user=your_username\nansible_password=your_password\nansible_port=5986\nansible_connection=winrm\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\n```\n\n<div class=\"content-ad\"></div>\n\n이제 Windows 호스트에서 업데이트를 확인하고 설치하는 Ansible 플레이북을 만들어봅시다. win_updates.yaml이라는 파일을 생성하고 다음 내용을 추가하세요:\n\n```yaml\n---\n- name: Check and print installed and pending updates on Windows 10\n  hosts: windows\n  gather_facts: no\n  tasks:\n    - name: Gather facts\n      ansible.windows.setup\n\n    - name: Check for installed updates\n      win_updates:\n        category_names: []\n        state: installed\n      register: installed_updates\n      retries: 3\n      delay: 5\n      until: installed_updates is succeeded\n\n    - name: Print installed updates\n      debug:\n        msg: \"Installed updates: { installed_updates.updates }\"\n\n    - name: Check for pending updates\n      win_updates:\n        category_names: []\n        state: searched\n      register: pending_updates\n      retries: 3\n      delay: 5\n      until: pending_updates is succeeded\n\n    - name: Print pending updates\n      debug:\n        msg: \"Pending updates: { pending_updates.updates }\"\n```\n\n이 플레이북은 다음 작업을 수행합니다:\n\n- 정보 수집: Windows 호스트에 대한 기본 정보를 수집합니다.\n- 설치된 업데이트 확인: win_updates 모듈을 사용하여 모든 설치된 업데이트를 나열합니다.\n- 설치된 업데이트 출력: 설치된 업데이트 목록을 출력합니다.\n- 대기 중인 업데이트 확인: win_updates 모듈을 사용하여 대기 중인 업데이트를 검색합니다.\n- 대기 중인 업데이트 출력: 대기 중인 업데이트 목록을 출력합니다.\n\n<div class=\"content-ad\"></div>\n\n## Playbook 실행 방법\n\n플레이북을 실행하려면 다음 명령어를 사용하십시오:\n\n```js\nansible-playbook -i inventory.ini win_updates.yaml -l win_host1\n```\n\n이 명령어는 지정된 호스트(win_host1)에서 플레이북을 실행합니다. -l 옵션을 생략하여 모든 Windows 호스트에서 실행할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 문제 해결\n\nPlaybook 실행 중 문제가 발생하면 자세한 오류 메시지를 얻기 위해 상세도를 높일 수 있습니다:\n\n```js\nansible-playbook -i inventory.ini win_updates.yaml -l win_host1 -vvv\n```\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n이 가이드를 따라하면 Ansible을 사용하여 Windows 시스템에서 업데이트를 확인하고 설치하는 프로세스를 자동화할 수 있습니다. 이는 시간을 절약하는 뿐만 아니라 환경 전반에 걸쳐 일관성을 보장합니다. Ansible의 강력한 자동화 기능은 혼합된 환경을 관리하는 시스템 관리자 및 DevOps 엔지니어에게 귀중한 도구가 됩니다.\n\n특정 요구 사항에 맞게 이 플레이북을 수정하고 확장하십시오. 즐거운 자동화하세요!","ogImage":{"url":"/assets/img/2024-06-30-MasteringWindowsUpdateswithAnsibleAComprehensiveGuide_0.png"},"coverImage":"/assets/img/2024-06-30-MasteringWindowsUpdateswithAnsibleAComprehensiveGuide_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>윈도우 시스템에서 업데이트를 관리하는 것은 여러 대의 서버가 있는 환경에서 특히 어려울 수 있습니다. 일반적으로 윈도우 업데이트는 GUI를 통해 관리되어왔는데, 이는 시간이 많이 소요되고 오류가 발생하기 쉽습니다. 그러나 Ansible을 사용하면 전체 프로세스를 자동화하여 최소한의 노력으로 시스템이 최신 상태를 유지할 수 있습니다. 이 블로그에서는 Ansible을 사용하여 윈도우 업데이트를 설정하고 관리하는 과정을 안내해 드리겠습니다.</p>\n<p><img src=\"/assets/img/2024-06-30-MasteringWindowsUpdateswithAnsibleAComprehensiveGuide_0.png\" alt=\"이미지\"></p>\n<h2>사전 준비 사항</h2>\n<p>Ansible 구성으로 진입하기 전에 필요한 사전 준비 사항이 갖춰져 있는지 확인해 보겠습니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>Ansible 제어 머신: 제어 머신에 Ansible이 설치되어 있는지 확인해주세요. 그렇지 않은 경우, 다음 명령을 사용하여 설치할 수 있습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">pip install ansible\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>Windows 시스템: Windows 시스템이 WinRM(Windows 원격 관리)이 활성화되어 있고 올바르게 구성되어 있는지 확인해주세요. 이는 Ansible이 Windows 호스트와 통신할 수 있게 합니다.</p>\n</li>\n<li>\n<p>Ansible Windows Collection: Windows 업데이트를 관리하기 위한 필요한 모듈이 있는지 확인하기 위해 ansible.windows 컬렉션을 설치해주세요.</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">ansible-galaxy collection install ansible.<span class=\"hljs-property\">windows</span>\n</code></pre>\n<h2>Windows에서 WinRM 구성하기</h2>\n<p>Windows 업데이트를 관리하기 위해 Ansible이 각 Windows 머신에서 올바르게 구성되어야 합니다. Windows 시스템에서 WinRM을 구성하기 위해 실행할 수 있는 스크립트가 있습니다:</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">PSRemoting</span> 활성화\n<span class=\"hljs-title class_\">Enable</span>-<span class=\"hljs-title class_\">PSRemoting</span> -<span class=\"hljs-title class_\">Force</span>\n\n# 암호화되지 않은 트래픽 허용\n<span class=\"hljs-title class_\">Set</span>-<span class=\"hljs-title class_\">Item</span> -<span class=\"hljs-title class_\">Path</span> <span class=\"hljs-title class_\">WSMan</span>:\\localhost\\<span class=\"hljs-title class_\">Service</span>\\<span class=\"hljs-title class_\">AllowUnencrypted</span> -<span class=\"hljs-title class_\">Value</span> $true\n\n# 기본 인증 허용\n<span class=\"hljs-title class_\">Set</span>-<span class=\"hljs-title class_\">Item</span> -<span class=\"hljs-title class_\">Path</span> <span class=\"hljs-title class_\">WSMan</span>:\\localhost\\<span class=\"hljs-title class_\">Service</span>\\<span class=\"hljs-title class_\">Auth</span>\\<span class=\"hljs-title class_\">Basic</span> -<span class=\"hljs-title class_\">Value</span> $true\n\n# <span class=\"hljs-title class_\">TrustedHosts</span> 설정\n<span class=\"hljs-title class_\">Set</span>-<span class=\"hljs-title class_\">Item</span> <span class=\"hljs-title class_\">WSMan</span>:\\localhost\\<span class=\"hljs-title class_\">Client</span>\\<span class=\"hljs-title class_\">TrustedHosts</span> -<span class=\"hljs-title class_\">Value</span> “*” -<span class=\"hljs-title class_\">Force</span>\n\n# <span class=\"hljs-title class_\">WinRM</span> 트래픽을 허용하는 방화벽 규칙 생성\n<span class=\"hljs-title class_\">New</span>-<span class=\"hljs-title class_\">NetFirewallRule</span> -<span class=\"hljs-title class_\">Name</span> “<span class=\"hljs-title class_\">Allow</span> <span class=\"hljs-title class_\">WinRM</span> <span class=\"hljs-variable constant_\">HTTP</span>-<span class=\"hljs-title class_\">In</span>” -<span class=\"hljs-title class_\">DisplayName</span> “<span class=\"hljs-title class_\">Allow</span> <span class=\"hljs-title class_\">WinRM</span> <span class=\"hljs-variable constant_\">HTTP</span>-<span class=\"hljs-title class_\">In</span>” -<span class=\"hljs-title class_\">Protocol</span> <span class=\"hljs-variable constant_\">TCP</span> -<span class=\"hljs-title class_\">LocalPort</span> <span class=\"hljs-number\">5985</span> -<span class=\"hljs-title class_\">Action</span> <span class=\"hljs-title class_\">Allow</span> -<span class=\"hljs-title class_\">Profile</span> <span class=\"hljs-title class_\">Any</span>\n<span class=\"hljs-title class_\">New</span>-<span class=\"hljs-title class_\">NetFirewallRule</span> -<span class=\"hljs-title class_\">Name</span> “<span class=\"hljs-title class_\">Allow</span> <span class=\"hljs-title class_\">WinRM</span> <span class=\"hljs-variable constant_\">HTTPS</span>-<span class=\"hljs-title class_\">In</span>” -<span class=\"hljs-title class_\">DisplayName</span> “<span class=\"hljs-title class_\">Allow</span> <span class=\"hljs-title class_\">WinRM</span> <span class=\"hljs-variable constant_\">HTTPS</span>-<span class=\"hljs-title class_\">In</span>” -<span class=\"hljs-title class_\">Protocol</span> <span class=\"hljs-variable constant_\">TCP</span> -<span class=\"hljs-title class_\">LocalPort</span> <span class=\"hljs-number\">5986</span> -<span class=\"hljs-title class_\">Action</span> <span class=\"hljs-title class_\">Allow</span> -<span class=\"hljs-title class_\">Profile</span> <span class=\"hljs-title class_\">Any</span>\n\n# 자체 서명 인증서 생성\n$cert = <span class=\"hljs-title class_\">New</span>-<span class=\"hljs-title class_\">SelfSignedCertificate</span> -<span class=\"hljs-title class_\">DnsName</span> “localhost” -<span class=\"hljs-title class_\">CertStoreLocation</span> <span class=\"hljs-title class_\">Cert</span>:\\<span class=\"hljs-title class_\">LocalMachine</span>\\<span class=\"hljs-title class_\">My</span>\n\n# 새 인증서를 사용하여 <span class=\"hljs-title class_\">WinRM</span>을 <span class=\"hljs-variable constant_\">HTTPS</span>로 구성\nwinrm create winrm/config/<span class=\"hljs-title class_\">Listener</span>?<span class=\"hljs-title class_\">Address</span>=*+<span class=\"hljs-title class_\">Transport</span>=<span class=\"hljs-variable constant_\">HTTPS</span> “@{<span class=\"hljs-title class_\">Hostname</span>=<span class=\"hljs-string\">`”localhost`</span>”;<span class=\"hljs-title class_\">CertificateThumbprint</span>=<span class=\"hljs-string\">`”$($cert.Thumbprint)`</span>”}”\n\n# <span class=\"hljs-title class_\">WinRM</span> 서비스 재시작\n<span class=\"hljs-title class_\">Restart</span>-<span class=\"hljs-title class_\">Service</span> -<span class=\"hljs-title class_\">Name</span> “<span class=\"hljs-title class_\">WinRM</span><span class=\"hljs-string\">\"\n</span></code></pre>\n<div class=\"content-ad\"></div>\n<h2>Ansible 인벤토리 설정</h2>\n<p>다음으로는 Ansible 인벤토리를 구성하여 Windows 호스트를 포함해야합니다. 다음은 인벤토리 파일(inventory.ini)의 예시입니다:</p>\n<pre><code class=\"hljs language-js\">[windows]\nwin_host1 ansible_host=<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.100</span>\nwin_host2 ansible_host=<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.101</span>\n\n[<span class=\"hljs-attr\">windows</span>:vars]\nansible_user=your_username\nansible_password=your_password\nansible_port=<span class=\"hljs-number\">5986</span>\nansible_connection=winrm\nansible_winrm_transport=basic\nansible_winrm_server_cert_validation=ignore\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 Windows 호스트에서 업데이트를 확인하고 설치하는 Ansible 플레이북을 만들어봅시다. win_updates.yaml이라는 파일을 생성하고 다음 내용을 추가하세요:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Check</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">print</span> <span class=\"hljs-string\">installed</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">pending</span> <span class=\"hljs-string\">updates</span> <span class=\"hljs-string\">on</span> <span class=\"hljs-string\">Windows</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-attr\">hosts:</span> <span class=\"hljs-string\">windows</span>\n  <span class=\"hljs-attr\">gather_facts:</span> <span class=\"hljs-literal\">no</span>\n  <span class=\"hljs-attr\">tasks:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Gather</span> <span class=\"hljs-string\">facts</span>\n      <span class=\"hljs-string\">ansible.windows.setup</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Check</span> <span class=\"hljs-string\">for</span> <span class=\"hljs-string\">installed</span> <span class=\"hljs-string\">updates</span>\n      <span class=\"hljs-attr\">win_updates:</span>\n        <span class=\"hljs-attr\">category_names:</span> []\n        <span class=\"hljs-attr\">state:</span> <span class=\"hljs-string\">installed</span>\n      <span class=\"hljs-attr\">register:</span> <span class=\"hljs-string\">installed_updates</span>\n      <span class=\"hljs-attr\">retries:</span> <span class=\"hljs-number\">3</span>\n      <span class=\"hljs-attr\">delay:</span> <span class=\"hljs-number\">5</span>\n      <span class=\"hljs-attr\">until:</span> <span class=\"hljs-string\">installed_updates</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">succeeded</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Print</span> <span class=\"hljs-string\">installed</span> <span class=\"hljs-string\">updates</span>\n      <span class=\"hljs-attr\">debug:</span>\n        <span class=\"hljs-attr\">msg:</span> <span class=\"hljs-string\">\"Installed updates: { installed_updates.updates }\"</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Check</span> <span class=\"hljs-string\">for</span> <span class=\"hljs-string\">pending</span> <span class=\"hljs-string\">updates</span>\n      <span class=\"hljs-attr\">win_updates:</span>\n        <span class=\"hljs-attr\">category_names:</span> []\n        <span class=\"hljs-attr\">state:</span> <span class=\"hljs-string\">searched</span>\n      <span class=\"hljs-attr\">register:</span> <span class=\"hljs-string\">pending_updates</span>\n      <span class=\"hljs-attr\">retries:</span> <span class=\"hljs-number\">3</span>\n      <span class=\"hljs-attr\">delay:</span> <span class=\"hljs-number\">5</span>\n      <span class=\"hljs-attr\">until:</span> <span class=\"hljs-string\">pending_updates</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">succeeded</span>\n\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Print</span> <span class=\"hljs-string\">pending</span> <span class=\"hljs-string\">updates</span>\n      <span class=\"hljs-attr\">debug:</span>\n        <span class=\"hljs-attr\">msg:</span> <span class=\"hljs-string\">\"Pending updates: { pending_updates.updates }\"</span>\n</code></pre>\n<p>이 플레이북은 다음 작업을 수행합니다:</p>\n<ul>\n<li>정보 수집: Windows 호스트에 대한 기본 정보를 수집합니다.</li>\n<li>설치된 업데이트 확인: win_updates 모듈을 사용하여 모든 설치된 업데이트를 나열합니다.</li>\n<li>설치된 업데이트 출력: 설치된 업데이트 목록을 출력합니다.</li>\n<li>대기 중인 업데이트 확인: win_updates 모듈을 사용하여 대기 중인 업데이트를 검색합니다.</li>\n<li>대기 중인 업데이트 출력: 대기 중인 업데이트 목록을 출력합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h2>Playbook 실행 방법</h2>\n<p>플레이북을 실행하려면 다음 명령어를 사용하십시오:</p>\n<pre><code class=\"hljs language-js\">ansible-playbook -i inventory.<span class=\"hljs-property\">ini</span> win_updates.<span class=\"hljs-property\">yaml</span> -l win_host1\n</code></pre>\n<p>이 명령어는 지정된 호스트(win_host1)에서 플레이북을 실행합니다. -l 옵션을 생략하여 모든 Windows 호스트에서 실행할 수도 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>문제 해결</h2>\n<p>Playbook 실행 중 문제가 발생하면 자세한 오류 메시지를 얻기 위해 상세도를 높일 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">ansible-playbook -i inventory.<span class=\"hljs-property\">ini</span> win_updates.<span class=\"hljs-property\">yaml</span> -l win_host1 -vvv\n</code></pre>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>이 가이드를 따라하면 Ansible을 사용하여 Windows 시스템에서 업데이트를 확인하고 설치하는 프로세스를 자동화할 수 있습니다. 이는 시간을 절약하는 뿐만 아니라 환경 전반에 걸쳐 일관성을 보장합니다. Ansible의 강력한 자동화 기능은 혼합된 환경을 관리하는 시스템 관리자 및 DevOps 엔지니어에게 귀중한 도구가 됩니다.</p>\n<p>특정 요구 사항에 맞게 이 플레이북을 수정하고 확장하십시오. 즐거운 자동화하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}