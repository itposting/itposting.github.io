{"pageProps":{"post":{"title":"오픈 소스 맥박산소측정기, 직접 만들어보기","description":"","date":"2024-06-22 17:55","slug":"2024-06-22-OpenSourcePulseOximeter","content":"\n\n이 프로젝트에서 사용된 항목\n\n전체 장치는 44mm x 30mm 퍼프 보드에 부착된 Arduino Nano를 중심으로 설계되었습니다. 먼저, 센서의 VIN, GND, SDA 및 SCL 핀에 전선을 납땜한 다음, 그 전선은 침대 부품 아래를 따라 Arduino Nano로 연결됩니다.\n\n<div class=\"content-ad\"></div>\n\n다음으로, OLED에 대한 커넥터를 Nano에 연결한 다음 디스플레이에 연결합니다. 마지막으로, 전체 전자 어셈블리를 하우징에 밀어 넣고 몇 개의 3mm 나사로 고정합니다.\n\n![이미지](/assets/img/2024-06-22-OpenSourcePulseOximeter_2.png)\n\n전자기기가 삽입된 후에 OLED 화면을 상단 부분에 연결하고 나머지 샤시에 몇 개의 3mm 나사로 고정합니다. 뚜껑을 부드럽게 위아래로 움직여 움직임을 테스트할 수 있습니다.\n\n포함된 스케치는 사용자의 현재 심박수와 산소 포화도를 표시하기 위해 몇 가지 작업을 수행합니다. 업로드하려면 필요한 라이브러리를 설치하고 도구 메뉴에서 Arduino Nano를 보드 목록에서 선택한 다음 업로드를 클릭하면 됩니다. 스케치 자체는 OLED 및 MAX30102를 초기화하고 에러가 발생할 경우 보고합니다. 그런 다음 센서를 보정하기 위해 100개의 값을 읽고 이를 표시하기 시작합니다. 장치는 그런 다음 25개의 새 값들을 읽고 이들로 이동 평균을 계산하는 루프에 진입합니다. 마지막으로 값이 유효한지 확인하고 유효하다면 화면에 인쇄합니다.\n\n<div class=\"content-ad\"></div>\n\n펄스 옥시미터를 사용하려면 손가락 끝을 센서 위에 올려놓고 부드럽게 뚜껑을 닫으세요. 그런 다음 전원 공급원을 꽂고 데이터가 표시될 때까지 기다리기만 하면 됩니다.\n\n![이미지](/assets/img/2024-06-22-OpenSourcePulseOximeter_3.png)\n\n![이미지](/assets/img/2024-06-22-OpenSourcePulseOximeter_4.png)\n\n![이미지](/assets/img/2024-06-22-OpenSourcePulseOximeter_5.png)\n\n<div class=\"content-ad\"></div>\n\n# 펄스 옥시미터 코드\n\nC/C++\n\n```js\n/*\n  하드웨어 연결 (Breakoutboard to Arduino):\n  -5V = 5V (3.3V 사용 가능)\n  -GND = GND\n  -SDA = A4 (또는 SDA)\n  -SCL = A5 (또는 SCL)\n  -INT = 연결하지 않음\n\n  MAX30105 브레이크아웃은 5V 또는 3.3V I2C 로직을 처리할 수 있습니다. 보드를 5V로 전원 공급하는 것을 권장하지만 3.3V에서도 작동합니다.\n*/\n\n#include <Wire.h>\n#include \"MAX30105.h\"\n#include \"spo2_algorithm.h\"\n#include \"SSD1306Ascii.h\"\n#include \"SSD1306AsciiWire.h\"\n\nMAX30105 particleSensor;\nSSD1306AsciiWire oled;\n\n#define MAX_BRIGHTNESS 255\n\n#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)\n// 아두이노 Uno에는 50개의 IR LED 데이터 및 빨간 LED 데이터를 32비트 형식으로 저장할 충분한 SRAM이 없습니다.\n// 이 문제를 해결하기 위해 샘플 데이터의 16비트 MSB가 잘립니다. 샘플이 16비트 데이터로 변환됩니다.\nuint16_t irBuffer[50]; // 적외선 LED 센서 데이터\nuint16_t redBuffer[50];  // 빨간색 LED 센서 데이터\n#else\nuint32_t irBuffer[50]; // 적외선 LED 센서 데이터\nuint32_t redBuffer[50];  // 빨간색 LED 센서 데이터\n#endif\n\nint32_t spo2; // SPO2 값\nint8_t validSPO2; // SPO2 계산이 유효한지를 나타내는 표시기\nint32_t heartRate; // 심박수 값\nint8_t validHeartRate; // 심박수 계산이 유효한지를 나타내는 표시기\n\nvoid setup()\n{\n  Serial.begin(115200); // 초당 115200비트로 시리얼 통신 초기화:\n\n  oled.begin(&Adafruit128x64, 0x3C);\n  oled.setFont(Arial14);\n\n  // 센서 초기화\n  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) // 기본 I2C 포트, 400kHz 속도 사용\n  {\n    Serial.println(F(\"MAX30105를 찾을 수 없습니다. 배선/전원을 확인하세요.\"));\n    while (1);\n  }\n\n  particleSensor.setup(55, 4, 2, 200, 411, 4096); // 이러한 설정으로 센서 구성\n}\n\nvoid loop()\n{\n\n  // 처음 50개 샘플을 읽고 신호 범위를 결정합니다.\n  for (byte i = 0 ; i < 50 ; i++)\n  {\n    while (particleSensor.available() == false) // 새 데이터가 있는지 확인\n      particleSensor.check(); // 새 데이터가 있는지 확인\n\n    redBuffer[i] = particleSensor.getRed();\n    irBuffer[i] = particleSensor.getIR();\n    particleSensor.nextSample(); // 이 샘플은 완료되었으므로 다음 샘플로 이동\n    Serial.print(F(\"빨강=\"));\n    Serial.print(redBuffer[i], DEC);\n    Serial.print(F(\", 적외선=\"));\n    Serial.println(irBuffer[i], DEC);\n  }\n\n  // 처음 50개 샘플(총 4초의 샘플) 후에 심박수 및 SpO2 계산\n  maxim_heart_rate_and_oxygen_saturation(irBuffer, 50, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);\n\n  // MAX30102에서 지속적으로 샘플을 채취합니다. 1초마다 심박수와 SpO2를 계산합니다.\n  while (1)\n  {\n    // 메모리에 처음 25개 세트의 샘플을 버리고 마지막 25개 세트의 샘플을 맨 위로 이동합니다.\n    for (byte i = 25; i < 50; i++)\n    {\n      redBuffer[i - 25] = redBuffer[i];\n      irBuffer[i - 25] = irBuffer[i];\n    }\n\n    // 심박수를 계산하기 전에 25개 세트의 샘플을 채취합니다.\n    for (byte i = 25; i < 50; i++)\n    {\n      while (particleSensor.available() == false) // 새 데이터가 있는지 확인\n        particleSensor.check(); // 새 데이터가 있는지 확인\n\n      redBuffer[i] = particleSensor.getRed();\n      irBuffer[i] = particleSensor.getIR();\n      particleSensor.nextSample(); // 이 샘플은 완료되었으므로 다음 샘플로 이동\n      Serial.print(F(\"빨강=\"));\n      Serial.print(redBuffer[i], DEC);\n      Serial.print(F(\", 적외선=\"));\n      Serial.print(irBuffer[i], DEC);\n\n      Serial.print(F(\", 심박수=\"));\n      Serial.print(heartRate, DEC);\n\n      Serial.print(F(\", 심박수유효=\"));\n      Serial.print(validHeartRate, DEC);\n\n      Serial.print(F(\", SPO2=\"));\n      Serial.print(spo2, DEC);\n\n      Serial.print(F(\", SPO2유효=\"));\n      Serial.println(validSPO2, DEC);\n      \n    }\n\n    // 25개의 새로운 샘플을 수집한 후 HR 및 SP02를 재계산합니다.\n    maxim_heart_rate_and_oxygen_saturation(irBuffer, 50, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);\n    printToScreen();\n  }\n}\n\nvoid printToScreen() {\n  oled.clear();\n  oled.setCursor(0,0);\n  if(validSPO2 && validHeartRate) {\n    oled.print(F(\"HR: \")); oled.println(heartRate, DEC);\n    oled.print(F(\"SPO2: \")); oled.println(spo2, DEC);\n  } else {\n    oled.print(F(\"유효하지 않습니다\"));\n  }\n}\n```","ogImage":{"url":"/assets/img/2024-06-22-OpenSourcePulseOximeter_0.png"},"coverImage":"/assets/img/2024-06-22-OpenSourcePulseOximeter_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 프로젝트에서 사용된 항목</p>\n<p>전체 장치는 44mm x 30mm 퍼프 보드에 부착된 Arduino Nano를 중심으로 설계되었습니다. 먼저, 센서의 VIN, GND, SDA 및 SCL 핀에 전선을 납땜한 다음, 그 전선은 침대 부품 아래를 따라 Arduino Nano로 연결됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>다음으로, OLED에 대한 커넥터를 Nano에 연결한 다음 디스플레이에 연결합니다. 마지막으로, 전체 전자 어셈블리를 하우징에 밀어 넣고 몇 개의 3mm 나사로 고정합니다.</p>\n<p><img src=\"/assets/img/2024-06-22-OpenSourcePulseOximeter_2.png\" alt=\"이미지\"></p>\n<p>전자기기가 삽입된 후에 OLED 화면을 상단 부분에 연결하고 나머지 샤시에 몇 개의 3mm 나사로 고정합니다. 뚜껑을 부드럽게 위아래로 움직여 움직임을 테스트할 수 있습니다.</p>\n<p>포함된 스케치는 사용자의 현재 심박수와 산소 포화도를 표시하기 위해 몇 가지 작업을 수행합니다. 업로드하려면 필요한 라이브러리를 설치하고 도구 메뉴에서 Arduino Nano를 보드 목록에서 선택한 다음 업로드를 클릭하면 됩니다. 스케치 자체는 OLED 및 MAX30102를 초기화하고 에러가 발생할 경우 보고합니다. 그런 다음 센서를 보정하기 위해 100개의 값을 읽고 이를 표시하기 시작합니다. 장치는 그런 다음 25개의 새 값들을 읽고 이들로 이동 평균을 계산하는 루프에 진입합니다. 마지막으로 값이 유효한지 확인하고 유효하다면 화면에 인쇄합니다.</p>\n<div class=\"content-ad\"></div>\n<p>펄스 옥시미터를 사용하려면 손가락 끝을 센서 위에 올려놓고 부드럽게 뚜껑을 닫으세요. 그런 다음 전원 공급원을 꽂고 데이터가 표시될 때까지 기다리기만 하면 됩니다.</p>\n<p><img src=\"/assets/img/2024-06-22-OpenSourcePulseOximeter_3.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-06-22-OpenSourcePulseOximeter_4.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-06-22-OpenSourcePulseOximeter_5.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<h1>펄스 옥시미터 코드</h1>\n<p>C/C++</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/*\n  하드웨어 연결 (Breakoutboard to Arduino):\n  -5V = 5V (3.3V 사용 가능)\n  -GND = GND\n  -SDA = A4 (또는 SDA)\n  -SCL = A5 (또는 SCL)\n  -INT = 연결하지 않음\n\n  MAX30105 브레이크아웃은 5V 또는 3.3V I2C 로직을 처리할 수 있습니다. 보드를 5V로 전원 공급하는 것을 권장하지만 3.3V에서도 작동합니다.\n*/</span>\n\n#include &#x3C;<span class=\"hljs-title class_\">Wire</span>.<span class=\"hljs-property\">h</span>>\n#include <span class=\"hljs-string\">\"MAX30105.h\"</span>\n#include <span class=\"hljs-string\">\"spo2_algorithm.h\"</span>\n#include <span class=\"hljs-string\">\"SSD1306Ascii.h\"</span>\n#include <span class=\"hljs-string\">\"SSD1306AsciiWire.h\"</span>\n\n<span class=\"hljs-title class_\">MAX30105</span> particleSensor;\n<span class=\"hljs-title class_\">SSD1306AsciiWire</span> oled;\n\n#define <span class=\"hljs-variable constant_\">MAX_BRIGHTNESS</span> <span class=\"hljs-number\">255</span>\n\n#<span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_\">defined</span>(__AVR_ATmega328P__) || <span class=\"hljs-title function_\">defined</span>(__AVR_ATmega168__)\n<span class=\"hljs-comment\">// 아두이노 Uno에는 50개의 IR LED 데이터 및 빨간 LED 데이터를 32비트 형식으로 저장할 충분한 SRAM이 없습니다.</span>\n<span class=\"hljs-comment\">// 이 문제를 해결하기 위해 샘플 데이터의 16비트 MSB가 잘립니다. 샘플이 16비트 데이터로 변환됩니다.</span>\nuint16_t irBuffer[<span class=\"hljs-number\">50</span>]; <span class=\"hljs-comment\">// 적외선 LED 센서 데이터</span>\nuint16_t redBuffer[<span class=\"hljs-number\">50</span>];  <span class=\"hljs-comment\">// 빨간색 LED 센서 데이터</span>\n#<span class=\"hljs-keyword\">else</span>\nuint32_t irBuffer[<span class=\"hljs-number\">50</span>]; <span class=\"hljs-comment\">// 적외선 LED 센서 데이터</span>\nuint32_t redBuffer[<span class=\"hljs-number\">50</span>];  <span class=\"hljs-comment\">// 빨간색 LED 센서 데이터</span>\n#endif\n\nint32_t spo2; <span class=\"hljs-comment\">// SPO2 값</span>\nint8_t validSPO2; <span class=\"hljs-comment\">// SPO2 계산이 유효한지를 나타내는 표시기</span>\nint32_t heartRate; <span class=\"hljs-comment\">// 심박수 값</span>\nint8_t validHeartRate; <span class=\"hljs-comment\">// 심박수 계산이 유효한지를 나타내는 표시기</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>)\n{\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">115200</span>); <span class=\"hljs-comment\">// 초당 115200비트로 시리얼 통신 초기화:</span>\n\n  oled.<span class=\"hljs-title function_\">begin</span>(&#x26;<span class=\"hljs-title class_\">Adafruit128</span>x64, <span class=\"hljs-number\">0x3C</span>);\n  oled.<span class=\"hljs-title function_\">setFont</span>(<span class=\"hljs-title class_\">Arial14</span>);\n\n  <span class=\"hljs-comment\">// 센서 초기화</span>\n  <span class=\"hljs-keyword\">if</span> (!particleSensor.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-title class_\">Wire</span>, <span class=\"hljs-variable constant_\">I2C_SPEED_FAST</span>)) <span class=\"hljs-comment\">// 기본 I2C 포트, 400kHz 속도 사용</span>\n  {\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\"MAX30105를 찾을 수 없습니다. 배선/전원을 확인하세요.\"</span>));\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>);\n  }\n\n  particleSensor.<span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">411</span>, <span class=\"hljs-number\">4096</span>); <span class=\"hljs-comment\">// 이러한 설정으로 센서 구성</span>\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>)\n{\n\n  <span class=\"hljs-comment\">// 처음 50개 샘플을 읽고 신호 범위를 결정합니다.</span>\n  <span class=\"hljs-keyword\">for</span> (byte i = <span class=\"hljs-number\">0</span> ; i &#x3C; <span class=\"hljs-number\">50</span> ; i++)\n  {\n    <span class=\"hljs-keyword\">while</span> (particleSensor.<span class=\"hljs-title function_\">available</span>() == <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// 새 데이터가 있는지 확인</span>\n      particleSensor.<span class=\"hljs-title function_\">check</span>(); <span class=\"hljs-comment\">// 새 데이터가 있는지 확인</span>\n\n    redBuffer[i] = particleSensor.<span class=\"hljs-title function_\">getRed</span>();\n    irBuffer[i] = particleSensor.<span class=\"hljs-title function_\">getIR</span>();\n    particleSensor.<span class=\"hljs-title function_\">nextSample</span>(); <span class=\"hljs-comment\">// 이 샘플은 완료되었으므로 다음 샘플로 이동</span>\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\"빨강=\"</span>));\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(redBuffer[i], <span class=\"hljs-variable constant_\">DEC</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\", 적외선=\"</span>));\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(irBuffer[i], <span class=\"hljs-variable constant_\">DEC</span>);\n  }\n\n  <span class=\"hljs-comment\">// 처음 50개 샘플(총 4초의 샘플) 후에 심박수 및 SpO2 계산</span>\n  <span class=\"hljs-title function_\">maxim_heart_rate_and_oxygen_saturation</span>(irBuffer, <span class=\"hljs-number\">50</span>, redBuffer, &#x26;spo2, &#x26;validSPO2, &#x26;heartRate, &#x26;validHeartRate);\n\n  <span class=\"hljs-comment\">// MAX30102에서 지속적으로 샘플을 채취합니다. 1초마다 심박수와 SpO2를 계산합니다.</span>\n  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n  {\n    <span class=\"hljs-comment\">// 메모리에 처음 25개 세트의 샘플을 버리고 마지막 25개 세트의 샘플을 맨 위로 이동합니다.</span>\n    <span class=\"hljs-keyword\">for</span> (byte i = <span class=\"hljs-number\">25</span>; i &#x3C; <span class=\"hljs-number\">50</span>; i++)\n    {\n      redBuffer[i - <span class=\"hljs-number\">25</span>] = redBuffer[i];\n      irBuffer[i - <span class=\"hljs-number\">25</span>] = irBuffer[i];\n    }\n\n    <span class=\"hljs-comment\">// 심박수를 계산하기 전에 25개 세트의 샘플을 채취합니다.</span>\n    <span class=\"hljs-keyword\">for</span> (byte i = <span class=\"hljs-number\">25</span>; i &#x3C; <span class=\"hljs-number\">50</span>; i++)\n    {\n      <span class=\"hljs-keyword\">while</span> (particleSensor.<span class=\"hljs-title function_\">available</span>() == <span class=\"hljs-literal\">false</span>) <span class=\"hljs-comment\">// 새 데이터가 있는지 확인</span>\n        particleSensor.<span class=\"hljs-title function_\">check</span>(); <span class=\"hljs-comment\">// 새 데이터가 있는지 확인</span>\n\n      redBuffer[i] = particleSensor.<span class=\"hljs-title function_\">getRed</span>();\n      irBuffer[i] = particleSensor.<span class=\"hljs-title function_\">getIR</span>();\n      particleSensor.<span class=\"hljs-title function_\">nextSample</span>(); <span class=\"hljs-comment\">// 이 샘플은 완료되었으므로 다음 샘플로 이동</span>\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\"빨강=\"</span>));\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(redBuffer[i], <span class=\"hljs-variable constant_\">DEC</span>);\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\", 적외선=\"</span>));\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(irBuffer[i], <span class=\"hljs-variable constant_\">DEC</span>);\n\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\", 심박수=\"</span>));\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(heartRate, <span class=\"hljs-variable constant_\">DEC</span>);\n\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\", 심박수유효=\"</span>));\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(validHeartRate, <span class=\"hljs-variable constant_\">DEC</span>);\n\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\", SPO2=\"</span>));\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(spo2, <span class=\"hljs-variable constant_\">DEC</span>);\n\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\", SPO2유효=\"</span>));\n      <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(validSPO2, <span class=\"hljs-variable constant_\">DEC</span>);\n      \n    }\n\n    <span class=\"hljs-comment\">// 25개의 새로운 샘플을 수집한 후 HR 및 SP02를 재계산합니다.</span>\n    <span class=\"hljs-title function_\">maxim_heart_rate_and_oxygen_saturation</span>(irBuffer, <span class=\"hljs-number\">50</span>, redBuffer, &#x26;spo2, &#x26;validSPO2, &#x26;heartRate, &#x26;validHeartRate);\n    <span class=\"hljs-title function_\">printToScreen</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printToScreen</span>(<span class=\"hljs-params\"></span>) {\n  oled.<span class=\"hljs-title function_\">clear</span>();\n  oled.<span class=\"hljs-title function_\">setCursor</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">if</span>(validSPO2 &#x26;&#x26; validHeartRate) {\n    oled.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\"HR: \"</span>)); oled.<span class=\"hljs-title function_\">println</span>(heartRate, <span class=\"hljs-variable constant_\">DEC</span>);\n    oled.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\"SPO2: \"</span>)); oled.<span class=\"hljs-title function_\">println</span>(spo2, <span class=\"hljs-variable constant_\">DEC</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    oled.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">F</span>(<span class=\"hljs-string\">\"유효하지 않습니다\"</span>));\n  }\n}\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}