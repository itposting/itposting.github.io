{"pageProps":{"post":{"title":"시계열 분할 기술 정확한 모델 유효성 검증 보장하기","description":"","date":"2024-06-19 18:56","slug":"2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation","content":"\n\n시계열 데이터 작업 중이시군요. 멋지네요! 그러나 모델 훈련에 들어가기 전에 데이터를 나누는 방법에 대해 이야기해보죠. 시계열 데이터를 나눌 때는 날짜 순서를 유지하고 데이터 누수를 피하는 것이 중요합니다. 모델이 정확하고 신뢰할 수 있도록 유지하는 효과적인 시계열 분할 기술을 살펴봅시다.\n\n# 1. TimeSeriesSplit\n\n`TimeSeriesSplit`을 데이터 분할의 믿음직한 타임키퍼로 생각해보세요. 이는 데이터를 연속적인 폴드로 나누어, 각 훈련 세트가 과거 데이터에서 형성되고 각 테스트 세트가 미래 데이터에서 형성되도록 보장합니다.\n\n![Time Series Splitting Techniques Ensuring Accurate Model Validation](/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_0.png)\n\n<div class=\"content-ad\"></div>\n\n```python\nfrom sklearn.model_selection import TimeSeriesSplit\ntscv = TimeSeriesSplit(n_splits=5)\nfor train_index, test_index in tscv.split(X):\n X_train, X_test = X[train_index], X[test_index]\n y_train, y_test = y[train_index], y[test_index}\n```\n\n# 2. Sliding/Rolling Window Split\n\nIn the rolling window approach, your model moves forward in time with a fixed-size training window that slides along your dataset. It’s like taking steps into the future while always keeping an eye on the past.\n\n![TimeSeriesSplittingTechniques](/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_1.png)\n\n\n<div class=\"content-ad\"></div>\n\n\n파이썬 코드:\n\n```python\nfor date in pd.date_range('2021-01-01', '2021-12-31', freq='M'):\n    delta = date - pd.offsets.MonthBegin(1)\n    train = series.loc[delta:date-pd.offsets.Day(1)]\n    valid = series.loc[date:date+pd.offsets.MonthEnd(1)]\n```\n\n## 3. 확장 창 분할\n\n확장 창 분할을 사용하면 모델은 오래된 학습 세트로 시작하여 점차적으로 더 많은 관측 값을 포함하게 됩니다. 시간이 흐름에 따라 더 많은 데이터를 통합하여 지식을 축적하는 것과 같습니다.\n\n\n![시각](/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_2.png)\n\n\n<div class=\"content-ad\"></div>\n\n```python\nfor date in pd.date_range('2021-01-01', '2021-12-31', freq='M'):\n train = series.loc[:date-pd.offsets.Day(1)]\n valid = series.loc[date:date+pd.offsets.MonthEnd(1)]\n```\n\n# 4. Sliding Window with Gap Split\n\nThe sliding window with a gap introduces a buffer zone between your training and validation sets, ensuring no information from the future leaks into your model’s training. It’s like building a fence to keep your model focused on the present.\n\n![TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation](/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_3.png)\n\n<div class=\"content-ad\"></div>\n\n```js\nfor date in pd.date_range('2021–01–01', '2021–12–31', freq='M'):\n delta = date - pd.offsets.MonthBegin(1)\n train = series.loc[delta:date-pd.offsets.Day(1)]\n valid = series.loc[date+pd.offsets.MonthEnd(1)+pd.offsets.Day(1):date+pd.offsets.MonthEnd(2)]\n```\n\n# 결론\n\n내 경험상, 시계열 데이터의 올바른 분할 기술을 선택하는 것은 견고하고 신뢰할 수 있는 모델을 구축하는 데 중요합니다. 개인적으로 증가하는 창 분할이 장기적인 추세를 포착하는 데 특히 효과적이라고 생각합니다. 이는 모델이 점차적으로 더 많은 데이터 포인트로부터 배울 수 있기 때문입니다. 그러나 계산 리소스를 관리하기 위해 고정 크기의 학습 세트를 유지하고 싶은 경우, 슬라이딩 창 접근 방식이 잘 작동합니다. 궁극적으로, 최적의 기술은 특정 사례와 데이터의 특성에 따라 다릅니다. 시계열 예측 요구 사항에 가장 적합한 방법을 찾기 위해 다양한 방법을 실험해보세요.\n\n# 참고 자료:\n\n<div class=\"content-ad\"></div>\n\nhttps://robjhyndman.com/hyndsight/tscv/\nhttps://otexts.com/fpp3/tscv.html\nhttps://forecastegy.com/posts/time-series-cross-validation-python/","ogImage":{"url":"/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_0.png"},"coverImage":"/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>시계열 데이터 작업 중이시군요. 멋지네요! 그러나 모델 훈련에 들어가기 전에 데이터를 나누는 방법에 대해 이야기해보죠. 시계열 데이터를 나눌 때는 날짜 순서를 유지하고 데이터 누수를 피하는 것이 중요합니다. 모델이 정확하고 신뢰할 수 있도록 유지하는 효과적인 시계열 분할 기술을 살펴봅시다.</p>\n<h1>1. TimeSeriesSplit</h1>\n<p><code>TimeSeriesSplit</code>을 데이터 분할의 믿음직한 타임키퍼로 생각해보세요. 이는 데이터를 연속적인 폴드로 나누어, 각 훈련 세트가 과거 데이터에서 형성되고 각 테스트 세트가 미래 데이터에서 형성되도록 보장합니다.</p>\n<p><img src=\"/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_0.png\" alt=\"Time Series Splitting Techniques Ensuring Accurate Model Validation\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> TimeSeriesSplit\ntscv = TimeSeriesSplit(n_splits=<span class=\"hljs-number\">5</span>)\n<span class=\"hljs-keyword\">for</span> train_index, test_index <span class=\"hljs-keyword\">in</span> tscv.split(X):\n X_train, X_test = X[train_index], X[test_index]\n y_train, y_test = y[train_index], y[test_index}\n</code></pre>\n<h1>2. Sliding/Rolling Window Split</h1>\n<p>In the rolling window approach, your model moves forward in time with a fixed-size training window that slides along your dataset. It’s like taking steps into the future while always keeping an eye on the past.</p>\n<p><img src=\"/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_1.png\" alt=\"TimeSeriesSplittingTechniques\"></p>\n<div class=\"content-ad\"></div>\n<p>파이썬 코드:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">for</span> date <span class=\"hljs-keyword\">in</span> pd.date_range(<span class=\"hljs-string\">'2021-01-01'</span>, <span class=\"hljs-string\">'2021-12-31'</span>, freq=<span class=\"hljs-string\">'M'</span>):\n    delta = date - pd.offsets.MonthBegin(<span class=\"hljs-number\">1</span>)\n    train = series.loc[delta:date-pd.offsets.Day(<span class=\"hljs-number\">1</span>)]\n    valid = series.loc[date:date+pd.offsets.MonthEnd(<span class=\"hljs-number\">1</span>)]\n</code></pre>\n<h2>3. 확장 창 분할</h2>\n<p>확장 창 분할을 사용하면 모델은 오래된 학습 세트로 시작하여 점차적으로 더 많은 관측 값을 포함하게 됩니다. 시간이 흐름에 따라 더 많은 데이터를 통합하여 지식을 축적하는 것과 같습니다.</p>\n<p><img src=\"/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_2.png\" alt=\"시각\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">for</span> date <span class=\"hljs-keyword\">in</span> pd.date_range(<span class=\"hljs-string\">'2021-01-01'</span>, <span class=\"hljs-string\">'2021-12-31'</span>, freq=<span class=\"hljs-string\">'M'</span>):\n train = series.loc[:date-pd.offsets.Day(<span class=\"hljs-number\">1</span>)]\n valid = series.loc[date:date+pd.offsets.MonthEnd(<span class=\"hljs-number\">1</span>)]\n</code></pre>\n<h1>4. Sliding Window with Gap Split</h1>\n<p>The sliding window with a gap introduces a buffer zone between your training and validation sets, ensuring no information from the future leaks into your model’s training. It’s like building a fence to keep your model focused on the present.</p>\n<p><img src=\"/assets/img/2024-06-19-TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation_3.png\" alt=\"TimeSeriesSplittingTechniquesEnsuringAccurateModelValidation\"></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">for</span> date <span class=\"hljs-keyword\">in</span> pd.<span class=\"hljs-title function_\">date_range</span>(<span class=\"hljs-string\">'2021–01–01'</span>, <span class=\"hljs-string\">'2021–12–31'</span>, freq=<span class=\"hljs-string\">'M'</span>):\n delta = date - pd.<span class=\"hljs-property\">offsets</span>.<span class=\"hljs-title class_\">MonthBegin</span>(<span class=\"hljs-number\">1</span>)\n train = series.<span class=\"hljs-property\">loc</span>[<span class=\"hljs-attr\">delta</span>:date-pd.<span class=\"hljs-property\">offsets</span>.<span class=\"hljs-title class_\">Day</span>(<span class=\"hljs-number\">1</span>)]\n valid = series.<span class=\"hljs-property\">loc</span>[date+pd.<span class=\"hljs-property\">offsets</span>.<span class=\"hljs-title class_\">MonthEnd</span>(<span class=\"hljs-number\">1</span>)+pd.<span class=\"hljs-property\">offsets</span>.<span class=\"hljs-title class_\">Day</span>(<span class=\"hljs-number\">1</span>):date+pd.<span class=\"hljs-property\">offsets</span>.<span class=\"hljs-title class_\">MonthEnd</span>(<span class=\"hljs-number\">2</span>)]\n</code></pre>\n<h1>결론</h1>\n<p>내 경험상, 시계열 데이터의 올바른 분할 기술을 선택하는 것은 견고하고 신뢰할 수 있는 모델을 구축하는 데 중요합니다. 개인적으로 증가하는 창 분할이 장기적인 추세를 포착하는 데 특히 효과적이라고 생각합니다. 이는 모델이 점차적으로 더 많은 데이터 포인트로부터 배울 수 있기 때문입니다. 그러나 계산 리소스를 관리하기 위해 고정 크기의 학습 세트를 유지하고 싶은 경우, 슬라이딩 창 접근 방식이 잘 작동합니다. 궁극적으로, 최적의 기술은 특정 사례와 데이터의 특성에 따라 다릅니다. 시계열 예측 요구 사항에 가장 적합한 방법을 찾기 위해 다양한 방법을 실험해보세요.</p>\n<h1>참고 자료:</h1>\n<div class=\"content-ad\"></div>\n<p><a href=\"https://robjhyndman.com/hyndsight/tscv/\" rel=\"nofollow\" target=\"_blank\">https://robjhyndman.com/hyndsight/tscv/</a>\n<a href=\"https://otexts.com/fpp3/tscv.html\" rel=\"nofollow\" target=\"_blank\">https://otexts.com/fpp3/tscv.html</a>\n<a href=\"https://forecastegy.com/posts/time-series-cross-validation-python/\" rel=\"nofollow\" target=\"_blank\">https://forecastegy.com/posts/time-series-cross-validation-python/</a></p>\n</body>\n</html>\n"},"__N_SSG":true}