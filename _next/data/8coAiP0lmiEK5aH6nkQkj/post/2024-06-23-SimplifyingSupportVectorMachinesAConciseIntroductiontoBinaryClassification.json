{"pageProps":{"post":{"title":"서포트 벡터 머신 간단 정리  이진 분류 쉽게 이해하기","description":"","date":"2024-06-23 19:35","slug":"2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification","content":"\n\n데이터와 컴퓨터 프로그램의 세계에서 머신 러닝이라는 개념은 어려운 문제 같을 수도 있어요. 복잡한 수학과 이해하기 어려운 개념이 가득한 것 같죠.\n\n그래서 오늘은 여기서 멈추어서, 제 MLBasics 시리즈의 새로운 이슈를 통해 모든 것이 어떻게 작동하는지 기본적인 사항을 살펴보고 싶어요.\n\n오늘의 안건은 서포트 벡터 머신을 이해하는 것이에요.\n\n이 강력한 도구는 데이터를 명확한 범주로 분류하는 데 도움이 되지만...\n\n<div class=\"content-ad\"></div>\n\n어떻게 동작하는 건가요?\n\nSupport Vector Machines 모델을 간단히 설명해 보겠습니다👇🏻\n\n# Support Vector Machine이란?\n\nSupport Vector Machine (SVM)은 두 가지 다른 클래스로 데이터 포인트를 가장 잘 분리하는 초평면을 찾으려는 지도 학습 알고리즘입니다.\n\n<div class=\"content-ad\"></div>\n\n이 문제는 이를 수행할 수 있는 무한한 수의 초평면이 존재한다는 점이 어렵습니다. 그래서 SVM의 목표는 클래스를 최대 여백으로 가장 잘 분리하는 초평면을 식별하는 것입니다.\n\n![image](/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_0.png)\n\n# SVM의 주요 개념\n\n더 깊이 파고들기 전에, 몇 가지 핵심 용어를 이해해 보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n- Support Vectors(서포트 벡터): 이들은 초평면에 가장 가까운 데이터 포인트로, 초평면의 위치와 방향에 큰 영향을 미칩니다.\n- 여백(Margin): 여백은 초평면과 각 클래스에서 가장 가까운 데이터 포인트 사이의 거리입니다. 더 큰 여백은 분류기의 일반화를 더 잘 시킬 것입니다.\n- 초평면(Hyperplane): 2차원 공간에서 데이터를 두 부분으로 나누는 선입니다. 고차원에서는 평면이나 고차원의 유사 구조체입니다.\n\n![이미지](/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_1.png)\n\n# SVM이 작동하는 방식\n\n두 종류의 데이터 포인트가 있는 데이터셋을 상상해보세요.\n\n<div class=\"content-ad\"></div>\n\n- 파란색 🔵\n- 노란색 🟨\n\n새 데이터 포인트를 파란색 또는 노란색 중 하나로 분류하고 싶습니다. 주요 과제는 두 클래스를 분리할 수 있는 다양한 하이퍼플레인이 존재한다는 것인데, 그런 다음 큰 질문이 있습니다:\n\n어떻게 최적의 하이퍼플레인을 찾을까요?\n\n![이미지](/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_2.png)\n\n<div class=\"content-ad\"></div>\n\n가장 좋은 초평면은 두 클래스로부터 최대 거리를 가지는 것입니다. 이는 가능한 다양한 초평면을 찾고 두 클래스로부터 최대 거리를 가지는 것을 선택함으로써 수행됩니다.\n\n# SVM 뒤에 숨겨진 수학적 직관\n\n데이터를 분류하는 방법을 이해하기 위해 수학적 측면을 살펴보겠습니다.\n\n점곱은 하나의 벡터를 다른 벡터에 따라 투영하는 것을 말합니다. 그래서 우리는 한 쪽의 점과 다른 쪽의 초평면이 어디에 있는지 결정하는 데 활용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n임의의 점 X를 고려해 보면:\n\n- 만약 X⋅W ` c 이면 — 이것은 양성 샘플입니다.\n- 만약 X⋅W ` c 이면 — 이것은 음성 샘플입니다.\n- 만약 X⋅W = c 이면 — 이것은 결정 경계 상에 있습니다.\n\n쉽죠?\n\n그러니까 조금 되감아보고 이 방정식들이 어디에서 왔는지 이해해 봅시다:\n\n<div class=\"content-ad\"></div>\n\n## #1. 하이퍼플레인을 찾는 방법 결정\n\n우리가 “분리선”을 얻기 위해, 서포트 벡터와 하이퍼플레인 사이의 거리 d를 먼저 계산할 수 있습니다. 여유 공간은 하이퍼플레인으로부터 가장 가까운 서포트 벡터까지의 거리의 두 배이며, 이 여유 공간 내에는 어떤 점도 있어서는 안 됩니다.\n\n## #2. 거리 “d” 투영\n\n거리 d는 두 서포트 벡터 사이의 차이를 하이퍼플레인의 법선 벡터 w의 방향으로 투영하면 얻을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_3.png)\n\n여러분 중 많은 분들이 여기에 도착한 방법을 모르실 것 같아요. 그래서 한 발 물러나서 이 함수가 처음부터 무엇을 의미하는지 더 잘 이해해보도록 해요.\n\nA와 B라는 두 벡터가 있다고 상상해봅시다. 그들 사이에 θ도를 생성해요. 이 스칼라 곱을 사용하여 A가 B 위에 떨어지는 투영을 쉽게 찾을 수 있어요.\n\n즉, A의 B에 대한 투영을 찾을 수 있어요. A와 B 벡터를 알면 다음 수식에서도 확인할 수 있듯이요.\n\n<div class=\"content-ad\"></div>\n\n그래서 이제 우리가 이 기본 원리를 이해했으니, SVM 모델로 돌아가 봅시다. SVM에 동일한 수학적 개념을 적용할 수 있습니다. 여기서 A는 지원 벡터 머신으로 정의된 벡터이고 B는 우리가 분할 초평면의 법선 벡터입니다.\n\n## #3. 제약 조건 정의하기\n\n이제 여백을 활용하여 제약 조건을 정의할 수 있습니다. 최대 여백 초평면이 (2D 예제에서) 선 방정식을 따라야 한다는 것을 알고 있습니다.\n\n이것은 초평면에 놓인 것은 양수 값을 가질 것이며(양쪽 초평면에 해당), 그 아래에 있는 것은 음수 값을 가질 것입니다(음쪽 초평면에 해당).\n\n<div class=\"content-ad\"></div>\n\n위 두 초평면 사이의 간격을 \"마진\"이라고 합니다.\n\n## SVM의 마진\n\n마진은 SVM에서 중요한 개념으로, 초평면 주변에 데이터 포인트가 없는 버퍼 영역으로 작용합니다. 이 마진이 넓을수록 모델이 보이지 않는 데이터에 대해 일반화할 수 있으며, 과적합 가능성을 줄입니다.\n\n양수 또는 음수로 점을 분류하기 위해 초평면과의 상대적 위치를 기반으로 결정 규칙을 설정합니다.\n\n<div class=\"content-ad\"></div>\n\n- 한 쪽에 있는 점들은 한 범주로 분류됩니다 (파란색 🔵)\n- 다른 한 쪽에 있는 점들은 반대 범주에 속합니다 (노란색 🟨).\n\n마진을 최대화함으로써 SVM은 의사결정 경계를 최적으로 배치하여 가능한 높은 신뢰도로 클래스를 분리합니다.\n\n그러면 어떻게 최대화할까요?\n\n# 최적화와 제약 사항\n\n<div class=\"content-ad\"></div>\n\nSVM은 여백을 최대화하기 위한 최적화 문제를 해결하는 것을 포함합니다. 이는 선택한 초평면이 각 클래스의 가장 가까운 데이터 포인트에서 충분한 거리를 유지하도록 하는 것을 의미합니다. 이를 서포트 벡터라고 합니다.\n\n이미 이전에 발견한 선 방정식을 기반으로 한 분류 알고리즘이 있습니다. 그래서 출력을 다음과 같이 정의할 수 있습니다:\n\n- +1 또는 🔵는 양쪽의 데이터를 나타냅니다.\n- -1 또는 🟨는 음쪽의 데이터를 나타냅니다.\n\n![이미지](/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_4.png)\n\n<div class=\"content-ad\"></div>\n\n하지만 여전히 w 벡터와 b 매개변수를 찾아야 합니다.\n\n그래서... 어떻게 할까요?\n\n마진 경계에 위치하는 서포트 벡터는 우리의 양의 및 음의 초평면 내에 포함되어 있기 때문에 다음 제약 조건을 만족합니다.\n\n그래서 이를 쉽게 일반화할 수 있어요...\n\n<div class=\"content-ad\"></div>\n\n## 일반 제약 조건 방정식\n\n모든 데이터 포인트 (x, y)가 마진을 넘어가지 않도록 하기 위해, 모든 데이터 포인트에 대한 제약 조건은 다음과 같이 요약될 수 있습니다:\n\n![equation](/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_5.png)\n\n그리고 수행할 단계가 하나 더 남았습니다...\n\n<div class=\"content-ad\"></div>\n\n## 최적화 목표\n\n이제 일반적인 제약 방정식을 가지고 있으므로, 벡터 w의 절대값을 최소화하면서 제약 조건을 충족시킬 수 있습니다.\n\n이는 다음과 같이 수학적으로 정의될 수 있습니다:\n\n![equation](/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_6.png)\n\n<div class=\"content-ad\"></div>\n\n이 최적화 문제를 해결함으로써, 클래스 간의 최상의 분리를 보장하는 최대 마진을 가지는 초평면을 정의하는 벡터 w와 b의 최적값을 찾을 수 있습니다.\n\n# 결론\n\n서포트 벡터 머신은 데이터 과학자의 무기 중 강력한 도구로, 이진 분류에 효과적인 방법을 제공합니다.\n\n클래스 간의 간격을 최대화하는 데 초점을 맞추면, SVM은 새로운 데이터에 대해 잘 일반화되는 견고한 분류기를 생성하여, 오버피팅의 위험을 줄입니다.\n\n<div class=\"content-ad\"></div>\n\nSVM의 수학적 기반은 최적 초평면의 식별을 보장하여 다양한 분류 작업에 신뢰할 수 있는 선택지로 만듭니다.\n\n복잡한 데이터셋을 다루거나 모델 성능을 향상시키려는 경우, SVM에 대한 이해와 구현은 머신러닝 도구상자를 크게 향상시킬 수 있습니다.\n\nMLBasics 이슈를 좋아하셨나요? 그렇다면 DataBites 뉴스레터를 구독하여 최신 소식을 받아보세요!\n\n내용을 메일로 받아보실 수 있습니다!\n\n<div class=\"content-ad\"></div>\n\n![2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_7.png](/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_7.png)\n\nX, Threads, LinkedIn에서도 만나볼 수 있어요! 거기서는 머신러닝, SQL, Python, 데이터 시각화에 관한 일일 치트시트를 올려요.\n\n다른 멋진 글도 여기 한번 확인해보세요! 😄","ogImage":{"url":"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_0.png"},"coverImage":"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>데이터와 컴퓨터 프로그램의 세계에서 머신 러닝이라는 개념은 어려운 문제 같을 수도 있어요. 복잡한 수학과 이해하기 어려운 개념이 가득한 것 같죠.</p>\n<p>그래서 오늘은 여기서 멈추어서, 제 MLBasics 시리즈의 새로운 이슈를 통해 모든 것이 어떻게 작동하는지 기본적인 사항을 살펴보고 싶어요.</p>\n<p>오늘의 안건은 서포트 벡터 머신을 이해하는 것이에요.</p>\n<p>이 강력한 도구는 데이터를 명확한 범주로 분류하는 데 도움이 되지만...</p>\n<div class=\"content-ad\"></div>\n<p>어떻게 동작하는 건가요?</p>\n<p>Support Vector Machines 모델을 간단히 설명해 보겠습니다👇🏻</p>\n<h1>Support Vector Machine이란?</h1>\n<p>Support Vector Machine (SVM)은 두 가지 다른 클래스로 데이터 포인트를 가장 잘 분리하는 초평면을 찾으려는 지도 학습 알고리즘입니다.</p>\n<div class=\"content-ad\"></div>\n<p>이 문제는 이를 수행할 수 있는 무한한 수의 초평면이 존재한다는 점이 어렵습니다. 그래서 SVM의 목표는 클래스를 최대 여백으로 가장 잘 분리하는 초평면을 식별하는 것입니다.</p>\n<p><img src=\"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_0.png\" alt=\"image\"></p>\n<h1>SVM의 주요 개념</h1>\n<p>더 깊이 파고들기 전에, 몇 가지 핵심 용어를 이해해 보겠습니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>Support Vectors(서포트 벡터): 이들은 초평면에 가장 가까운 데이터 포인트로, 초평면의 위치와 방향에 큰 영향을 미칩니다.</li>\n<li>여백(Margin): 여백은 초평면과 각 클래스에서 가장 가까운 데이터 포인트 사이의 거리입니다. 더 큰 여백은 분류기의 일반화를 더 잘 시킬 것입니다.</li>\n<li>초평면(Hyperplane): 2차원 공간에서 데이터를 두 부분으로 나누는 선입니다. 고차원에서는 평면이나 고차원의 유사 구조체입니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_1.png\" alt=\"이미지\"></p>\n<h1>SVM이 작동하는 방식</h1>\n<p>두 종류의 데이터 포인트가 있는 데이터셋을 상상해보세요.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>파란색 🔵</li>\n<li>노란색 🟨</li>\n</ul>\n<p>새 데이터 포인트를 파란색 또는 노란색 중 하나로 분류하고 싶습니다. 주요 과제는 두 클래스를 분리할 수 있는 다양한 하이퍼플레인이 존재한다는 것인데, 그런 다음 큰 질문이 있습니다:</p>\n<p>어떻게 최적의 하이퍼플레인을 찾을까요?</p>\n<p><img src=\"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_2.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>가장 좋은 초평면은 두 클래스로부터 최대 거리를 가지는 것입니다. 이는 가능한 다양한 초평면을 찾고 두 클래스로부터 최대 거리를 가지는 것을 선택함으로써 수행됩니다.</p>\n<h1>SVM 뒤에 숨겨진 수학적 직관</h1>\n<p>데이터를 분류하는 방법을 이해하기 위해 수학적 측면을 살펴보겠습니다.</p>\n<p>점곱은 하나의 벡터를 다른 벡터에 따라 투영하는 것을 말합니다. 그래서 우리는 한 쪽의 점과 다른 쪽의 초평면이 어디에 있는지 결정하는 데 활용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>임의의 점 X를 고려해 보면:</p>\n<ul>\n<li>만약 X⋅W ` c 이면 — 이것은 양성 샘플입니다.</li>\n<li>만약 X⋅W ` c 이면 — 이것은 음성 샘플입니다.</li>\n<li>만약 X⋅W = c 이면 — 이것은 결정 경계 상에 있습니다.</li>\n</ul>\n<p>쉽죠?</p>\n<p>그러니까 조금 되감아보고 이 방정식들이 어디에서 왔는지 이해해 봅시다:</p>\n<div class=\"content-ad\"></div>\n<h2>#1. 하이퍼플레인을 찾는 방법 결정</h2>\n<p>우리가 “분리선”을 얻기 위해, 서포트 벡터와 하이퍼플레인 사이의 거리 d를 먼저 계산할 수 있습니다. 여유 공간은 하이퍼플레인으로부터 가장 가까운 서포트 벡터까지의 거리의 두 배이며, 이 여유 공간 내에는 어떤 점도 있어서는 안 됩니다.</p>\n<h2>#2. 거리 “d” 투영</h2>\n<p>거리 d는 두 서포트 벡터 사이의 차이를 하이퍼플레인의 법선 벡터 w의 방향으로 투영하면 얻을 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_3.png\" alt=\"image\"></p>\n<p>여러분 중 많은 분들이 여기에 도착한 방법을 모르실 것 같아요. 그래서 한 발 물러나서 이 함수가 처음부터 무엇을 의미하는지 더 잘 이해해보도록 해요.</p>\n<p>A와 B라는 두 벡터가 있다고 상상해봅시다. 그들 사이에 θ도를 생성해요. 이 스칼라 곱을 사용하여 A가 B 위에 떨어지는 투영을 쉽게 찾을 수 있어요.</p>\n<p>즉, A의 B에 대한 투영을 찾을 수 있어요. A와 B 벡터를 알면 다음 수식에서도 확인할 수 있듯이요.</p>\n<div class=\"content-ad\"></div>\n<p>그래서 이제 우리가 이 기본 원리를 이해했으니, SVM 모델로 돌아가 봅시다. SVM에 동일한 수학적 개념을 적용할 수 있습니다. 여기서 A는 지원 벡터 머신으로 정의된 벡터이고 B는 우리가 분할 초평면의 법선 벡터입니다.</p>\n<h2>#3. 제약 조건 정의하기</h2>\n<p>이제 여백을 활용하여 제약 조건을 정의할 수 있습니다. 최대 여백 초평면이 (2D 예제에서) 선 방정식을 따라야 한다는 것을 알고 있습니다.</p>\n<p>이것은 초평면에 놓인 것은 양수 값을 가질 것이며(양쪽 초평면에 해당), 그 아래에 있는 것은 음수 값을 가질 것입니다(음쪽 초평면에 해당).</p>\n<div class=\"content-ad\"></div>\n<p>위 두 초평면 사이의 간격을 \"마진\"이라고 합니다.</p>\n<h2>SVM의 마진</h2>\n<p>마진은 SVM에서 중요한 개념으로, 초평면 주변에 데이터 포인트가 없는 버퍼 영역으로 작용합니다. 이 마진이 넓을수록 모델이 보이지 않는 데이터에 대해 일반화할 수 있으며, 과적합 가능성을 줄입니다.</p>\n<p>양수 또는 음수로 점을 분류하기 위해 초평면과의 상대적 위치를 기반으로 결정 규칙을 설정합니다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>한 쪽에 있는 점들은 한 범주로 분류됩니다 (파란색 🔵)</li>\n<li>다른 한 쪽에 있는 점들은 반대 범주에 속합니다 (노란색 🟨).</li>\n</ul>\n<p>마진을 최대화함으로써 SVM은 의사결정 경계를 최적으로 배치하여 가능한 높은 신뢰도로 클래스를 분리합니다.</p>\n<p>그러면 어떻게 최대화할까요?</p>\n<h1>최적화와 제약 사항</h1>\n<div class=\"content-ad\"></div>\n<p>SVM은 여백을 최대화하기 위한 최적화 문제를 해결하는 것을 포함합니다. 이는 선택한 초평면이 각 클래스의 가장 가까운 데이터 포인트에서 충분한 거리를 유지하도록 하는 것을 의미합니다. 이를 서포트 벡터라고 합니다.</p>\n<p>이미 이전에 발견한 선 방정식을 기반으로 한 분류 알고리즘이 있습니다. 그래서 출력을 다음과 같이 정의할 수 있습니다:</p>\n<ul>\n<li>+1 또는 🔵는 양쪽의 데이터를 나타냅니다.</li>\n<li>-1 또는 🟨는 음쪽의 데이터를 나타냅니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_4.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>하지만 여전히 w 벡터와 b 매개변수를 찾아야 합니다.</p>\n<p>그래서... 어떻게 할까요?</p>\n<p>마진 경계에 위치하는 서포트 벡터는 우리의 양의 및 음의 초평면 내에 포함되어 있기 때문에 다음 제약 조건을 만족합니다.</p>\n<p>그래서 이를 쉽게 일반화할 수 있어요...</p>\n<div class=\"content-ad\"></div>\n<h2>일반 제약 조건 방정식</h2>\n<p>모든 데이터 포인트 (x, y)가 마진을 넘어가지 않도록 하기 위해, 모든 데이터 포인트에 대한 제약 조건은 다음과 같이 요약될 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_5.png\" alt=\"equation\"></p>\n<p>그리고 수행할 단계가 하나 더 남았습니다...</p>\n<div class=\"content-ad\"></div>\n<h2>최적화 목표</h2>\n<p>이제 일반적인 제약 방정식을 가지고 있으므로, 벡터 w의 절대값을 최소화하면서 제약 조건을 충족시킬 수 있습니다.</p>\n<p>이는 다음과 같이 수학적으로 정의될 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_6.png\" alt=\"equation\"></p>\n<div class=\"content-ad\"></div>\n<p>이 최적화 문제를 해결함으로써, 클래스 간의 최상의 분리를 보장하는 최대 마진을 가지는 초평면을 정의하는 벡터 w와 b의 최적값을 찾을 수 있습니다.</p>\n<h1>결론</h1>\n<p>서포트 벡터 머신은 데이터 과학자의 무기 중 강력한 도구로, 이진 분류에 효과적인 방법을 제공합니다.</p>\n<p>클래스 간의 간격을 최대화하는 데 초점을 맞추면, SVM은 새로운 데이터에 대해 잘 일반화되는 견고한 분류기를 생성하여, 오버피팅의 위험을 줄입니다.</p>\n<div class=\"content-ad\"></div>\n<p>SVM의 수학적 기반은 최적 초평면의 식별을 보장하여 다양한 분류 작업에 신뢰할 수 있는 선택지로 만듭니다.</p>\n<p>복잡한 데이터셋을 다루거나 모델 성능을 향상시키려는 경우, SVM에 대한 이해와 구현은 머신러닝 도구상자를 크게 향상시킬 수 있습니다.</p>\n<p>MLBasics 이슈를 좋아하셨나요? 그렇다면 DataBites 뉴스레터를 구독하여 최신 소식을 받아보세요!</p>\n<p>내용을 메일로 받아보실 수 있습니다!</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_7.png\" alt=\"2024-06-23-SimplifyingSupportVectorMachinesAConciseIntroductiontoBinaryClassification_7.png\"></p>\n<p>X, Threads, LinkedIn에서도 만나볼 수 있어요! 거기서는 머신러닝, SQL, Python, 데이터 시각화에 관한 일일 치트시트를 올려요.</p>\n<p>다른 멋진 글도 여기 한번 확인해보세요! 😄</p>\n</body>\n</html>\n"},"__N_SSG":true}