{"pageProps":{"post":{"title":"R에서 Caret 패키지로 분류 모델 생성하기","description":"","date":"2024-06-20 15:59","slug":"2024-06-20-ClassificationModelinRwithCaretPackage","content":"\n\n\nClassification And Regression Training, 또는 caret으로 줄여서 부르는 것은 R 프로그래밍 패키지로, 예측 모델을 만드는 과정을 간소화하려는 함수를 포함하고 있어요. 이 패키지에는 다음과 같은 기능들이 포함되어 있어요:\n\n- 데이터 분할\n- 데이터 전처리\n- 특성 선택\n- 리샘플링을 이용한 모델 튜닝\n- 변수 중요도 추정\n\n또한 다른 기능들도 있답니다.\n\n![image](/assets/img/2024-06-20-ClassificationModelinRwithCaretPackage_0.png)\n\n<div class=\"content-ad\"></div>\n\n이 예시에서는 R 프로그래밍 언어를 사용하여 https://www.kaggle.com/datasets/deepcontractor/smoke-detection-dataset 사이트에서 제공하는 데이터셋을 사용하여 Smoke detection을 예측합니다.\n\n# 라이브러리\n\n이 모델에서 사용할 라이브러리는 다음과 같습니다:\n\n```js\nlibrary(tidyverse)\nlibrary(caret)\nlibrary(rpart.plot)\nlibrary(corrplot)\nlibrary(ggcorrplot)\n```\n\n<div class=\"content-ad\"></div>\n\nTidyverse 패키지를 사용하여 데이터 세트를 수정하고 조작하며, 변수들 간의 상관 관계를 찾기 위해 corrplot을 사용할 수 있어요.\n\n# 데이터 세트\n\n데이터 세트는 다음과 같이 구성되어 있어요:\n\n| 변수명          | 데이터 형태                | 예시                          |\n|----------------|-------------------------|-------------------------------|\n| UTC            | 날짜 및 시간 형식(dttm)    | 2022-06-09 00:08:51, 2022-06-09 00:08:52, 2022-06-09... |\n| Temperature[C] | 실수형(double)             | 20.000, 20.015, 20.029, 20.044, 20.059, 20.073...         |\n| Humidity[%]    | 실수형(double)             | 57.36, 56.67, 55.96, 55.28, 54.69, 54.12...            |\n| TVOC[ppb]      | 실수형(double)             | 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...               |\n| eCO2[ppm]      | 실수형(double)             | 400, 400, 400, 400, 400, 400, 400, 400, 400, 400...      |\n| Raw H2         | 실수형(double)             | 12306, 12345, 12374, 12390, 12403, 12419...           |\n| Raw Ethanol    | 실수형(double)             | 18520, 18651, 18764, 18849, 18921, 18998...           |\n| Pressure[hPa]  | 실수형(double)             | 939.735, 939.744, 939.738, 939.736, 939.744...        |\n| PM1.0          | 실수형(double)             | 0.00, 0.00, 0.00, 0.00, 0.00, 0.00...              |\n| 그 외 변수들     | ...                       | ...                           |\n\n<div class=\"content-ad\"></div>\n\n지시하신 데이터셋에 결측 데이터가 없는지 확인하시고 이 데이터셋에 대해 데이터 처리를 수행할 수 있습니다. 데이터셋은 다음과 같은 변수로 구성되어 있습니다:\n\n1. UTC: 실험이 수행된 시간\n2. Temperature[C]: 환경 온도, 섭씨로 측정\n3. Humidity[%]: 실험 중의 대기 습도\n4. TVOC[ppb]: 총 휘발성 유기 화합물, ppb(십억분의 1) 단위로 측정\n5. eCO2[ppm]: CO2 동등 농도, ppm(백만분의 1) 단위로 측정\n6. Raw H2: 주위에 존재하는 생수소의 양 [보정되지 않은 생 분자수소; 바이어스, 온도 등을 보정한 것이 아님]\n7. Raw Ethanol: 주위에 존재하는 생 에탄올의 양\n8. Pressure[hPa]: 대기압, hPa로 측정\n9. PM1.0: 지름이 1.0 마이크로미터 미만인 미립자\n10. PM2.5: 지름이 2.5 마이크로미터 미만인 미립자\n11. NC0.5: 지름이 0.5 마이크로미터 미만인 미립자의 농도\n12. NC1.0: 지름이 1.0 마이크로미터 미만인 미립자의 농도\n13. NC2.5: 지름이 2.5 마이크로미터 미만인 미립자의 농도\n14. CNT: 샘플 카운트. 화재 경보(실제) 화재가 발생했을 경우 값은 1, 그렇지 않으면 0\n15. Fire Alarm: 1은 양성, 0은 양성이 아님\n\n# 데이터 처리\n\n모델링을 수행하기 전 데이터셋 처리. 필요한 변수 선택하고 CNT, Sample Count 변수는 선택하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nraw_data %>%\n  select(\n         temp_c = `Temperature[C]`,\n         humidity = `Humidity[%]`,\n         tvoc = `TVOC[ppb]`,\n         co2 = `eCO2[ppm]`,\n         h2 = `Raw H2`,\n         ethanol = `Raw Ethanol`,\n         pressure = `Pressure[hPa]`,\n         pm1 = PM1.0,\n         pm2_5 = PM2.5,\n         fire_alarm = `Fire Alarm`\n         ) %>%\n  mutate(\n    fire_alarm = factor(fire_alarm, levels = c(1,0), labels = c(\"yes\", \"no\"))\n  ) %>%\n  glimpse() -> df_data\n```\n\n```js\nRows: 62,630\nColumns: 10\n$ temp_c     <dbl> 20.000, 20.015, 20.029, 20.044, 20.059, 20.073, 20.08…\n$ humidity   <dbl> 57.36, 56.67, 55.96, 55.28, 54.69, 54.12, 53.61, 53.2…\n$ tvoc       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ co2        <dbl> 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400…\n$ h2         <dbl> 12306, 12345, 12374, 12390, 12403, 12419, 12432, 1243…\n$ ethanol    <dbl> 18520, 18651, 18764, 18849, 18921, 18998, 19058, 1911…\n$ pressure   <dbl> 939.735, 939.744, 939.738, 939.736, 939.744, 939.725,…\n$ pm1        <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ pm2_5      <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,…\n$ fire_alarm <fct> no, no, no, no, no, no, no, no, no, no, no, no, no, n…\n```\n\n상관 관계 플롯을 수행\n\n<img src=\"/assets/img/2024-06-20-ClassificationModelinRwithCaretPackage_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n상관 행렬을 기반으로 통찰력을 얻을 수 있습니다:\n\n- 대상 특징과 다른 특징 간에는 높은 상관 관계가 없습니다. 대상 특징과 습도, 압력 사이에 약한 양의 상관 관계가 있습니다. 또한 대상 특징과 TVOC, 원무 에탄올 간에는 약한 음의 상관 관계가 있습니다.\n- eCO2와 TVOC, PM1.0 간에는 높은 양의 상관 관계가 있습니다. 또한 압력과 습도, 원시 H2와 원시 에탄올, PM1.0과 eCO2, PM2.5 간에도 높은 양의 상관 관계가 있습니다.\n\n# 데이터 분할\n\n데이터를 학습 및 테스트 데이터셋으로 8:2의 비율로 분할합니다. 일반적으로 더 큰 데이터셋에서 학습하는 모델이 더 정확해지지만, 더 많은 학습 데이터는 모델을 학습하는 데 더 많은 시간이 걸릴 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n우리의 데이터를 나누기 위해 caret 패키지의 createDataPartition()를 사용할 거에요. 이 함수는 넘겨주는 벡터의 인덱스들을 비례에 따라 랜덤하게 샘플링합니다. 그런 다음 이러한 인덱스를 사용하여 전체 데이터셋을 테스트 및 트레이닝 데이터셋으로 나눌 수 있어요.\n\n```js\n# 랜덤 시드 설정\nset.seed(123)\n\n# 데이터 분할\ntrain_index <- createDataPartition(df_data$fire_alarm, times = 1, p = 0.8, list = FALSE)\n\ntrain_data <- df_data[train_index, ] %>% glimpse\n```\n\n```js\n# 테스트 데이터\ntest_data <- df_data[-train_index, ] %>% glimpse\n```\n\n# 모델 개발\n\n<div class=\"content-ad\"></div>\n\n저희가 데이터에 어떤 알고리즘이 잘 동작할지 미리 알 수 없어요. 다양한 방법을 시험해보고 어떤 것이 잘되는지 보고, 그런 방법을 두드려야 해요.\n\n## 선형 알고리즘:\n1. 로지스틱 회귀 (LG),\n2. 선형 판별 분석 (LDA)\n3. 정규화된 로지스틱 회귀 (GLMNET)\n\n<div class=\"content-ad\"></div>\n\n## 비선형 알고리즘:\n1. k-최근접 이웃 알고리즘(KNN),\n\n2. 분류 및 회귀 트리(CART),\n\n3. 나이브 베이즈(NB),\n\n4. 방사 기저 함수를 사용한 서포트 벡터 머신(SVM).\n\n<div class=\"content-ad\"></div>\n\n데이터가 많으므로 10-fold 교차 검증과 3회 반복을 사용할 것입니다. 이는 표준 테스트 하네스 구성입니다. 여러분의 이진 분류 문제에 대해 간단하게 정확도와 Kappa 지표를 사용할 것입니다. AUC(ROC 곡선 아래 영역)를 선택하고 민감도 및 특이도를 살펴 최적의 알고리즘을 선택할 수도 있었습니다.\n\n```js\n# 10-fold cross validation with 3 repeats\ntrainControl <- trainControl(method=\"repeatedcv\", number=10, repeats=3, verboseIter = TRUE)\n\nmetric <- \"Accuracy\"\n```\n\n그런 다음, 각 알고리즘에 대한 모델을 작성합니다.\n\n```js\n# Bagged CART\nset.seed(7)\nfit.treebag <- train(fire_alarm~., data = train_data, method = \"treebag\", metric = metric,trControl = trainControl)\n\n# RF\nset.seed(7)\nfit.rf <- train(fire_alarm~., data = train_data, method = \"rf\", metric = metric,trControl = trainControl)\n\n# GBM - Stochastic Gradient Boosting\nset.seed(7)\nfit.gbm <- train(fire_alarm~., data = train_data, method = \"gbm\",metric = metric,trControl = trainControl, verbose = FALSE)\n\n# C5.0\nset.seed(7)\nfit.c50 <- train(fire_alarm~., data = train_data, method = \"C5.0\", metric = metric,trControl = trainControl)\n\n# LG - Logistic Regression\nset.seed(7)\nfit.glm <- train(fire_alarm~., data = train_data, method=\"glm\",\n                 metric=metric,trControl=trainControl)\n# LDA - Linear Discriminate Analysis\nset.seed(7)\nfit.lda <- train(fire_alarm~., data = train_data, method=\"lda\",\n                 metric=metric,trControl=trainControl)\n\n# GLMNET - Regularized Logistic Regression\nset.seed(7)\nfit.glmnet <- train(fire_alarm~., data = train_data, method=\"glmnet\",\n                 metric=metric,trControl=trainControl)\n\n# KNN - k-Nearest Neighbors \nset.seed(7)\nfit.knn <- train(fire_alarm~., data = train_data, method=\"knn\",\n                 metric=metric,trControl=trainControl)\n\n# CART - Classification and Regression Trees (CART), \nset.seed(7)\nfit.cart <- train(fire_alarm~., data = train_data, method=\"rpart\",\n                 metric=metric,trControl=trainControl)\n\n# NB - Naive Bayes (NB) \nset.seed(7)\nGrid = expand.grid(usekernel=TRUE,adjust=1,fL=c(0.2,0.5,0.8))\nfit.nb <- train(fire_alarm~., data = train_data, method=\"nb\",\n                 metric=metric,trControl=trainControl,\n                tuneGrid=Grid)\n```\n\n<div class=\"content-ad\"></div>\n\n모델을 구축한 후에는 모델을 비교하여 더 나은 정확도를 찾을 수 있어요! 😊\n\n```js\nCall:\nsummary.resamples(object = ensembleResults)\n\nModels: BAG, RF, GBM, C50, LG, KNN, NB, CART, GLMNET \nNumber of resamples: 30 \n\n정확도 \n            Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA's\nBAG    0.9994013 0.9998004 0.9998004 0.9998337 1.0000000 1.0000000    0\nRF     0.9996008 0.9998004 1.0000000 0.9999202 1.0000000 1.0000000    0\nGBM    0.9986028 0.9996008 0.9998004 0.9996407 0.9998004 1.0000000    0\nC50    0.9992014 0.9996009 0.9998004 0.9998071 1.0000000 1.0000000    0\nLG     0.8467372 0.8629515 0.8861393 0.8797790 0.8933134 0.9030134    0\nKNN    0.9990018 0.9996007 0.9998004 0.9996341 0.9998004 1.0000000    0\nNB     0.9417282 0.9443613 0.9463074 0.9470978 0.9505089 0.9527041    0\nCART   0.9590900 0.9654244 0.9809419 0.9754183 0.9829849 0.9896208    0\nGLMNET 0.8848303 0.8931245 0.8957294 0.8954128 0.8985681 0.9026142    0\n\n카파 \n            Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA's\nBAG    0.9985319 0.9995105 0.9995106 0.9995922 1.0000000 1.0000000    0\nRF     0.9990214 0.9995107 1.0000000 0.9998043 1.0000000 1.0000000    0\nGBM    0.9965712 0.9990210 0.9995105 0.9991189 0.9995106 1.0000000    0\nC50    0.9980418 0.9990214 0.9995107 0.9995269 1.0000000 1.0000000    0\nLG     0.6691273 0.6941347 0.7051705 0.7105437 0.7312704 0.7512402    0\nKNN    0.9975507 0.9990206 0.9995106 0.9991025 0.9995106 1.0000000    0\nNB     0.8632215 0.8695786 0.8735418 0.8754793 0.8834493 0.8880163    0\nCART   0.8997615 0.9156698 0.9523262 0.9397203 0.9575309 0.9747781    0\nGLMNET 0.7052235 0.7262274 0.7346055 0.7332479 0.7403128 0.7496404    0\n```\n\n<img src=\"/assets/img/2024-06-20-ClassificationModelinRwithCaretPackage_2.png\" />\n\n랜덤 포레스트가 가장 높은 정확도(99.99%)를 보이며, 그 다음으로 BAG (Bagged CART) (99.98%)와 C5.0 (99.93%)이 뒤를 이어요! 🚀🌟\n\n<div class=\"content-ad\"></div>\n\n# 모델 완성\n\n높은 정확도를 가진 트리 알고리즘인 Random Forest, BAG, 그리고 C5.0를 선택하여 예측을 진행할 것이며, 테스트 데이터셋으로 모델 및 정확도를 테스트할 예정입니다.\n\n```js\n# 모델 저장\nsaveRDS(fit.c50, here::here(\"finalModel_c50.rds\"))\nsaveRDS(fit.rf, here::here(\"finalModel_rf.rds\"))\nsaveRDS(fit.treebag, here::here(\"finalModel_treebag.rds\"))\r\n```\n\n```js\npredict_c50 <- predict(model_c50, test_data)\nsummary(predict_c50)\n\n# 혼동 행렬\ncf_c50 <- confusionMatrix(predict_c50, test_data$fire_alarm)\n\ncf_c50\r\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n예   아니요 \n8950 3575 \n혼동 행렬 및 통계\n\n          참조\n예측     예    아니요\n       예 8949    1\n       아니요     2 3573\n                                     \n              정확도 : 0.9998     \n                 95% 신뢰구간 : (0.9993, 1)\n    정보 부재율 : 0.7147     \n    P-값 [정확도 > 정보 부재율] : <2e-16     \n                                     \n                  카파 : 0.9994     \n                                     \n 맥네마의 검정 P-값 : 1          \n                                      \n            민감도 : 0.9998     \n            특이도 : 0.9997     \n         양성 예측치 : 0.9999     \n         음성 예측치 : 0.9994     \n             유병률 : 0.7147     \n         발견 비율 : 0.7145     \n   발견 유병률 : 0.7146     \n      균형 정확도 : 0.9997     \n                                     \n     '양성' 클래스 : 예\n```\n\n랜덤 포레스트 모델을 로드하고 테스트 데이터로 예측을 생성합니다.\n\n```js\n# 의사결정 트리 랜덤 포레스트\nmodel_rf <- readRDS(here::here(\"finalModel_rf.rds\"))\nprint(model_rf)\r\n```\n\n```js\n랜덤 포레스트 \n\n50105 개 샘플\n    9 예측 변수\n    2 클래스: '예', '아니요' \n\n사전 처리 없음\n샘플링: 교차 검증 (10-fold, 3회 반복) \n샘플 크기 요약: 45095, 45094, 45094, 45094, 45095, 45094, ... \n튜닝 매개변수에 따른 샘플링 결과:\n\n  mtry  정확도   카파    \n  2     0.9999202  0.9998043\n  5     0.9999202  0.9998043\n  9     0.9998736  0.9996901\n\n가장 큰 값을 사용하여 최적 모델을 선택하는 데 정확도가 사용되었습니다.\n모델에 사용된 최종 값은 mtry = 2입니다.\r\n```\n\n<div class=\"content-ad\"></div>\n\n```R\npredict_rf <- predict(model_rf, test_data)\nsummary(predict_rf)\n\n# Confusion Matrix\ncf_rf <- confusionMatrix(predict_rf, test_data$fire_alarm)\n\ncf_rf\n```\n\n```R\nyes   no \n8952 3573 \nConfusion Matrix and Statistics\n\n          Reference\nPrediction  yes   no\n       yes 8951    1\n       no     0 3573\n                                     \n               Accuracy : 0.9999     \n                 95% CI : (0.9996, 1)\n    No Information Rate : 0.7147     \n    P-Value [Acc > NIR] : <2e-16     \n                                     \n                  Kappa : 0.9998     \n                                     \n Mcnemar's Test P-Value : 1          \n                                     \n            Sensitivity : 1.0000     \n            Specificity : 0.9997     \n         Pos Pred Value : 0.9999     \n         Neg Pred Value : 1.0000     \n             Prevalence : 0.7147     \n         Detection Rate : 0.7147     \n   Detection Prevalence : 0.7147     \n      Balanced Accuracy : 0.9999     \n                                     \n       'Positive' Class : yes\n```\n\nBagged CART 모델 로드하기\n\n```R\n# 분류 및 회귀 트리 (CART)\nmodel_treebag <- readRDS(here::here(\"finalModel_treebag.rds\"))\n\nprint(model_treebag)\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nBagged CART \n\n50105 개의 샘플\n    9 개의 예측 변수\n    2 개의 클래스: 'yes', 'no' \n\n사전 처리 없음\n리샘플링: 교차 확인(10 폴드, 3회 반복) \n샘플 크기 요약: 45095, 45094, 45094, 45094, 45095, 45094, ... \n리샘플링 결과:\n\n  정확도   카파    \n  0.9998337  0.9995922\n```\n\n```js\npredict_treebag <- predict(model_treebag, test_data)\nsummary(predict_treebag)\n\n# 혼동 행렬\ncf_treebag <- confusionMatrix(predict_treebag, test_data$fire_alarm)\n\ncf_treebag\n```\n\n```js\nConfusion Matrix and Statistics\n\n          실제값\n예측값   yes   no\n       yes 8951    2\n       no     0 3572\n                                     \n               정확도 : 0.9998     \n                 95% 신뢰 구간 : (0.9994, 1)\n    정보 없는 비율 : 0.7147     \n    P-값 [정확도 > 정보 없는 비율] : <2e-16     \n                                     \n                  카파 : 0.9996     \n                                     \n 맥네머의 테스트 P-값 : 0.4795     \n                                     \n            민감도 : 1.0000     \n            특이도 : 0.9994     \n         양성 예측 값 : 0.9998     \n         음성 예측 값 : 1.0000     \n             유병률 : 0.7147     \n         감지율 : 0.7147     \n   감지 유병률 : 0.7148     \n      균형 정확도 : 0.9997     \n                                     \n       '양성' 클래스 : yes\n```\n\n자세한 내용은 깃허브 저장소를 방문해 주세요. 이 절을 읽어 주셔서 감사합니다.","ogImage":{"url":"/assets/img/2024-06-20-ClassificationModelinRwithCaretPackage_0.png"},"coverImage":"/assets/img/2024-06-20-ClassificationModelinRwithCaretPackage_0.png","tag":["Tech"],"readingTime":14},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Classification And Regression Training, 또는 caret으로 줄여서 부르는 것은 R 프로그래밍 패키지로, 예측 모델을 만드는 과정을 간소화하려는 함수를 포함하고 있어요. 이 패키지에는 다음과 같은 기능들이 포함되어 있어요:</p>\n<ul>\n<li>데이터 분할</li>\n<li>데이터 전처리</li>\n<li>특성 선택</li>\n<li>리샘플링을 이용한 모델 튜닝</li>\n<li>변수 중요도 추정</li>\n</ul>\n<p>또한 다른 기능들도 있답니다.</p>\n<p><img src=\"/assets/img/2024-06-20-ClassificationModelinRwithCaretPackage_0.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>이 예시에서는 R 프로그래밍 언어를 사용하여 <a href=\"https://www.kaggle.com/datasets/deepcontractor/smoke-detection-dataset\" rel=\"nofollow\" target=\"_blank\">https://www.kaggle.com/datasets/deepcontractor/smoke-detection-dataset</a> 사이트에서 제공하는 데이터셋을 사용하여 Smoke detection을 예측합니다.</p>\n<h1>라이브러리</h1>\n<p>이 모델에서 사용할 라이브러리는 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">library</span>(tidyverse)\n<span class=\"hljs-title function_\">library</span>(caret)\n<span class=\"hljs-title function_\">library</span>(rpart.<span class=\"hljs-property\">plot</span>)\n<span class=\"hljs-title function_\">library</span>(corrplot)\n<span class=\"hljs-title function_\">library</span>(ggcorrplot)\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>Tidyverse 패키지를 사용하여 데이터 세트를 수정하고 조작하며, 변수들 간의 상관 관계를 찾기 위해 corrplot을 사용할 수 있어요.</p>\n<h1>데이터 세트</h1>\n<p>데이터 세트는 다음과 같이 구성되어 있어요:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>변수명</th><th>데이터 형태</th><th>예시</th></tr></thead><tbody><tr><td>UTC</td><td>날짜 및 시간 형식(dttm)</td><td>2022-06-09 00:08:51, 2022-06-09 00:08:52, 2022-06-09...</td></tr><tr><td>Temperature[C]</td><td>실수형(double)</td><td>20.000, 20.015, 20.029, 20.044, 20.059, 20.073...</td></tr><tr><td>Humidity[%]</td><td>실수형(double)</td><td>57.36, 56.67, 55.96, 55.28, 54.69, 54.12...</td></tr><tr><td>TVOC[ppb]</td><td>실수형(double)</td><td>0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...</td></tr><tr><td>eCO2[ppm]</td><td>실수형(double)</td><td>400, 400, 400, 400, 400, 400, 400, 400, 400, 400...</td></tr><tr><td>Raw H2</td><td>실수형(double)</td><td>12306, 12345, 12374, 12390, 12403, 12419...</td></tr><tr><td>Raw Ethanol</td><td>실수형(double)</td><td>18520, 18651, 18764, 18849, 18921, 18998...</td></tr><tr><td>Pressure[hPa]</td><td>실수형(double)</td><td>939.735, 939.744, 939.738, 939.736, 939.744...</td></tr><tr><td>PM1.0</td><td>실수형(double)</td><td>0.00, 0.00, 0.00, 0.00, 0.00, 0.00...</td></tr><tr><td>그 외 변수들</td><td>...</td><td>...</td></tr></tbody></table>\n<div class=\"content-ad\"></div>\n<p>지시하신 데이터셋에 결측 데이터가 없는지 확인하시고 이 데이터셋에 대해 데이터 처리를 수행할 수 있습니다. 데이터셋은 다음과 같은 변수로 구성되어 있습니다:</p>\n<ol>\n<li>UTC: 실험이 수행된 시간</li>\n<li>Temperature[C]: 환경 온도, 섭씨로 측정</li>\n<li>Humidity[%]: 실험 중의 대기 습도</li>\n<li>TVOC[ppb]: 총 휘발성 유기 화합물, ppb(십억분의 1) 단위로 측정</li>\n<li>eCO2[ppm]: CO2 동등 농도, ppm(백만분의 1) 단위로 측정</li>\n<li>Raw H2: 주위에 존재하는 생수소의 양 [보정되지 않은 생 분자수소; 바이어스, 온도 등을 보정한 것이 아님]</li>\n<li>Raw Ethanol: 주위에 존재하는 생 에탄올의 양</li>\n<li>Pressure[hPa]: 대기압, hPa로 측정</li>\n<li>PM1.0: 지름이 1.0 마이크로미터 미만인 미립자</li>\n<li>PM2.5: 지름이 2.5 마이크로미터 미만인 미립자</li>\n<li>NC0.5: 지름이 0.5 마이크로미터 미만인 미립자의 농도</li>\n<li>NC1.0: 지름이 1.0 마이크로미터 미만인 미립자의 농도</li>\n<li>NC2.5: 지름이 2.5 마이크로미터 미만인 미립자의 농도</li>\n<li>CNT: 샘플 카운트. 화재 경보(실제) 화재가 발생했을 경우 값은 1, 그렇지 않으면 0</li>\n<li>Fire Alarm: 1은 양성, 0은 양성이 아님</li>\n</ol>\n<h1>데이터 처리</h1>\n<p>모델링을 수행하기 전 데이터셋 처리. 필요한 변수 선택하고 CNT, Sample Count 변수는 선택하지 않습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">raw_data %>%\n  <span class=\"hljs-title function_\">select</span>(\n         temp_c = <span class=\"hljs-string\">`Temperature[C]`</span>,\n         humidity = <span class=\"hljs-string\">`Humidity[%]`</span>,\n         tvoc = <span class=\"hljs-string\">`TVOC[ppb]`</span>,\n         co2 = <span class=\"hljs-string\">`eCO2[ppm]`</span>,\n         h2 = <span class=\"hljs-string\">`Raw H2`</span>,\n         ethanol = <span class=\"hljs-string\">`Raw Ethanol`</span>,\n         pressure = <span class=\"hljs-string\">`Pressure[hPa]`</span>,\n         pm1 = <span class=\"hljs-title class_\">PM1</span><span class=\"hljs-number\">.0</span>,\n         pm2_5 = <span class=\"hljs-title class_\">PM2</span><span class=\"hljs-number\">.5</span>,\n         fire_alarm = <span class=\"hljs-string\">`Fire Alarm`</span>\n         ) %>%\n  <span class=\"hljs-title function_\">mutate</span>(\n    fire_alarm = <span class=\"hljs-title function_\">factor</span>(fire_alarm, levels = <span class=\"hljs-title function_\">c</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>), labels = <span class=\"hljs-title function_\">c</span>(<span class=\"hljs-string\">\"yes\"</span>, <span class=\"hljs-string\">\"no\"</span>))\n  ) %>%\n  <span class=\"hljs-title function_\">glimpse</span>() -> df_data\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Rows</span>: <span class=\"hljs-number\">62</span>,<span class=\"hljs-number\">630</span>\n<span class=\"hljs-title class_\">Columns</span>: <span class=\"hljs-number\">10</span>\n$ temp_c     &#x3C;dbl> <span class=\"hljs-number\">20.000</span>, <span class=\"hljs-number\">20.015</span>, <span class=\"hljs-number\">20.029</span>, <span class=\"hljs-number\">20.044</span>, <span class=\"hljs-number\">20.059</span>, <span class=\"hljs-number\">20.073</span>, <span class=\"hljs-number\">20.08</span>…\n$ humidity   &#x3C;dbl> <span class=\"hljs-number\">57.36</span>, <span class=\"hljs-number\">56.67</span>, <span class=\"hljs-number\">55.96</span>, <span class=\"hljs-number\">55.28</span>, <span class=\"hljs-number\">54.69</span>, <span class=\"hljs-number\">54.12</span>, <span class=\"hljs-number\">53.61</span>, <span class=\"hljs-number\">53.2</span>…\n$ tvoc       &#x3C;dbl> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,…\n$ co2        &#x3C;dbl> <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>…\n$ h2         &#x3C;dbl> <span class=\"hljs-number\">12306</span>, <span class=\"hljs-number\">12345</span>, <span class=\"hljs-number\">12374</span>, <span class=\"hljs-number\">12390</span>, <span class=\"hljs-number\">12403</span>, <span class=\"hljs-number\">12419</span>, <span class=\"hljs-number\">12432</span>, <span class=\"hljs-number\">1243</span>…\n$ ethanol    &#x3C;dbl> <span class=\"hljs-number\">18520</span>, <span class=\"hljs-number\">18651</span>, <span class=\"hljs-number\">18764</span>, <span class=\"hljs-number\">18849</span>, <span class=\"hljs-number\">18921</span>, <span class=\"hljs-number\">18998</span>, <span class=\"hljs-number\">19058</span>, <span class=\"hljs-number\">1911</span>…\n$ pressure   &#x3C;dbl> <span class=\"hljs-number\">939.735</span>, <span class=\"hljs-number\">939.744</span>, <span class=\"hljs-number\">939.738</span>, <span class=\"hljs-number\">939.736</span>, <span class=\"hljs-number\">939.744</span>, <span class=\"hljs-number\">939.725</span>,…\n$ pm1        &#x3C;dbl> <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>,…\n$ pm2_5      &#x3C;dbl> <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>, <span class=\"hljs-number\">0.00</span>,…\n$ fire_alarm &#x3C;fct> no, no, no, no, no, no, no, no, no, no, no, no, no, n…\n</code></pre>\n<p>상관 관계 플롯을 수행</p>\n<img src=\"/assets/img/2024-06-20-ClassificationModelinRwithCaretPackage_1.png\">\n<div class=\"content-ad\"></div>\n<p>상관 행렬을 기반으로 통찰력을 얻을 수 있습니다:</p>\n<ul>\n<li>대상 특징과 다른 특징 간에는 높은 상관 관계가 없습니다. 대상 특징과 습도, 압력 사이에 약한 양의 상관 관계가 있습니다. 또한 대상 특징과 TVOC, 원무 에탄올 간에는 약한 음의 상관 관계가 있습니다.</li>\n<li>eCO2와 TVOC, PM1.0 간에는 높은 양의 상관 관계가 있습니다. 또한 압력과 습도, 원시 H2와 원시 에탄올, PM1.0과 eCO2, PM2.5 간에도 높은 양의 상관 관계가 있습니다.</li>\n</ul>\n<h1>데이터 분할</h1>\n<p>데이터를 학습 및 테스트 데이터셋으로 8:2의 비율로 분할합니다. 일반적으로 더 큰 데이터셋에서 학습하는 모델이 더 정확해지지만, 더 많은 학습 데이터는 모델을 학습하는 데 더 많은 시간이 걸릴 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>우리의 데이터를 나누기 위해 caret 패키지의 createDataPartition()를 사용할 거에요. 이 함수는 넘겨주는 벡터의 인덱스들을 비례에 따라 랜덤하게 샘플링합니다. 그런 다음 이러한 인덱스를 사용하여 전체 데이터셋을 테스트 및 트레이닝 데이터셋으로 나눌 수 있어요.</p>\n<pre><code class=\"hljs language-js\"># 랜덤 시드 설정\nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">123</span>)\n\n# 데이터 분할\ntrain_index &#x3C;- <span class=\"hljs-title function_\">createDataPartition</span>(df_data$fire_alarm, times = <span class=\"hljs-number\">1</span>, p = <span class=\"hljs-number\">0.8</span>, list = <span class=\"hljs-variable constant_\">FALSE</span>)\n\ntrain_data &#x3C;- df_data[train_index, ] %>% glimpse\n</code></pre>\n<pre><code class=\"hljs language-js\"># 테스트 데이터\ntest_data &#x3C;- df_data[-train_index, ] %>% glimpse\n</code></pre>\n<h1>모델 개발</h1>\n<div class=\"content-ad\"></div>\n<p>저희가 데이터에 어떤 알고리즘이 잘 동작할지 미리 알 수 없어요. 다양한 방법을 시험해보고 어떤 것이 잘되는지 보고, 그런 방법을 두드려야 해요.</p>\n<h2>선형 알고리즘:</h2>\n<ol>\n<li>로지스틱 회귀 (LG),</li>\n<li>선형 판별 분석 (LDA)</li>\n<li>정규화된 로지스틱 회귀 (GLMNET)</li>\n</ol>\n<div class=\"content-ad\"></div>\n<h2>비선형 알고리즘:</h2>\n<ol>\n<li>\n<p>k-최근접 이웃 알고리즘(KNN),</p>\n</li>\n<li>\n<p>분류 및 회귀 트리(CART),</p>\n</li>\n<li>\n<p>나이브 베이즈(NB),</p>\n</li>\n<li>\n<p>방사 기저 함수를 사용한 서포트 벡터 머신(SVM).</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<p>데이터가 많으므로 10-fold 교차 검증과 3회 반복을 사용할 것입니다. 이는 표준 테스트 하네스 구성입니다. 여러분의 이진 분류 문제에 대해 간단하게 정확도와 Kappa 지표를 사용할 것입니다. AUC(ROC 곡선 아래 영역)를 선택하고 민감도 및 특이도를 살펴 최적의 알고리즘을 선택할 수도 있었습니다.</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-number\">10</span>-fold cross validation <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">3</span> repeats\ntrainControl &#x3C;- <span class=\"hljs-title function_\">trainControl</span>(method=<span class=\"hljs-string\">\"repeatedcv\"</span>, number=<span class=\"hljs-number\">10</span>, repeats=<span class=\"hljs-number\">3</span>, verboseIter = <span class=\"hljs-variable constant_\">TRUE</span>)\n\nmetric &#x3C;- <span class=\"hljs-string\">\"Accuracy\"</span>\n</code></pre>\n<p>그런 다음, 각 알고리즘에 대한 모델을 작성합니다.</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Bagged</span> <span class=\"hljs-variable constant_\">CART</span>\nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\nfit.<span class=\"hljs-property\">treebag</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method = <span class=\"hljs-string\">\"treebag\"</span>, metric = metric,trControl = trainControl)\n\n# <span class=\"hljs-variable constant_\">RF</span>\nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\nfit.<span class=\"hljs-property\">rf</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method = <span class=\"hljs-string\">\"rf\"</span>, metric = metric,trControl = trainControl)\n\n# <span class=\"hljs-variable constant_\">GBM</span> - <span class=\"hljs-title class_\">Stochastic</span> <span class=\"hljs-title class_\">Gradient</span> <span class=\"hljs-title class_\">Boosting</span>\nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\nfit.<span class=\"hljs-property\">gbm</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method = <span class=\"hljs-string\">\"gbm\"</span>,metric = metric,trControl = trainControl, verbose = <span class=\"hljs-variable constant_\">FALSE</span>)\n\n# <span class=\"hljs-variable constant_\">C5</span><span class=\"hljs-number\">.0</span>\nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\nfit.<span class=\"hljs-property\">c50</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method = <span class=\"hljs-string\">\"C5.0\"</span>, metric = metric,trControl = trainControl)\n\n# <span class=\"hljs-variable constant_\">LG</span> - <span class=\"hljs-title class_\">Logistic</span> <span class=\"hljs-title class_\">Regression</span>\nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\nfit.<span class=\"hljs-property\">glm</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method=<span class=\"hljs-string\">\"glm\"</span>,\n                 metric=metric,trControl=trainControl)\n# <span class=\"hljs-variable constant_\">LDA</span> - <span class=\"hljs-title class_\">Linear</span> <span class=\"hljs-title class_\">Discriminate</span> <span class=\"hljs-title class_\">Analysis</span>\nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\nfit.<span class=\"hljs-property\">lda</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method=<span class=\"hljs-string\">\"lda\"</span>,\n                 metric=metric,trControl=trainControl)\n\n# <span class=\"hljs-variable constant_\">GLMNET</span> - <span class=\"hljs-title class_\">Regularized</span> <span class=\"hljs-title class_\">Logistic</span> <span class=\"hljs-title class_\">Regression</span>\nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\nfit.<span class=\"hljs-property\">glmnet</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method=<span class=\"hljs-string\">\"glmnet\"</span>,\n                 metric=metric,trControl=trainControl)\n\n# <span class=\"hljs-variable constant_\">KNN</span> - k-<span class=\"hljs-title class_\">Nearest</span> <span class=\"hljs-title class_\">Neighbors</span> \nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\nfit.<span class=\"hljs-property\">knn</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method=<span class=\"hljs-string\">\"knn\"</span>,\n                 metric=metric,trControl=trainControl)\n\n# <span class=\"hljs-variable constant_\">CART</span> - <span class=\"hljs-title class_\">Classification</span> and <span class=\"hljs-title class_\">Regression</span> <span class=\"hljs-title class_\">Trees</span> (<span class=\"hljs-variable constant_\">CART</span>), \nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\nfit.<span class=\"hljs-property\">cart</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method=<span class=\"hljs-string\">\"rpart\"</span>,\n                 metric=metric,trControl=trainControl)\n\n# <span class=\"hljs-variable constant_\">NB</span> - <span class=\"hljs-title class_\">Naive</span> <span class=\"hljs-title class_\">Bayes</span> (<span class=\"hljs-variable constant_\">NB</span>) \nset.<span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-number\">7</span>)\n<span class=\"hljs-title class_\">Grid</span> = expand.<span class=\"hljs-title function_\">grid</span>(usekernel=<span class=\"hljs-variable constant_\">TRUE</span>,adjust=<span class=\"hljs-number\">1</span>,fL=<span class=\"hljs-title function_\">c</span>(<span class=\"hljs-number\">0.2</span>,<span class=\"hljs-number\">0.5</span>,<span class=\"hljs-number\">0.8</span>))\nfit.<span class=\"hljs-property\">nb</span> &#x3C;- <span class=\"hljs-title function_\">train</span>(fire_alarm~., data = train_data, method=<span class=\"hljs-string\">\"nb\"</span>,\n                 metric=metric,trControl=trainControl,\n                tuneGrid=<span class=\"hljs-title class_\">Grid</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>모델을 구축한 후에는 모델을 비교하여 더 나은 정확도를 찾을 수 있어요! 😊</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Call</span>:\nsummary.<span class=\"hljs-title function_\">resamples</span>(object = ensembleResults)\n\n<span class=\"hljs-title class_\">Models</span>: <span class=\"hljs-variable constant_\">BAG</span>, <span class=\"hljs-variable constant_\">RF</span>, <span class=\"hljs-variable constant_\">GBM</span>, <span class=\"hljs-variable constant_\">C50</span>, <span class=\"hljs-variable constant_\">LG</span>, <span class=\"hljs-variable constant_\">KNN</span>, <span class=\"hljs-variable constant_\">NB</span>, <span class=\"hljs-variable constant_\">CART</span>, <span class=\"hljs-variable constant_\">GLMNET</span> \n<span class=\"hljs-title class_\">Number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-attr\">resamples</span>: <span class=\"hljs-number\">30</span> \n\n정확도 \n            <span class=\"hljs-title class_\">Min</span>.   1st <span class=\"hljs-title class_\">Qu</span>.    <span class=\"hljs-title class_\">Median</span>      <span class=\"hljs-title class_\">Mean</span>   3rd <span class=\"hljs-title class_\">Qu</span>.      <span class=\"hljs-title class_\">Max</span>. <span class=\"hljs-variable constant_\">NA</span><span class=\"hljs-string\">'s\nBAG    0.9994013 0.9998004 0.9998004 0.9998337 1.0000000 1.0000000    0\nRF     0.9996008 0.9998004 1.0000000 0.9999202 1.0000000 1.0000000    0\nGBM    0.9986028 0.9996008 0.9998004 0.9996407 0.9998004 1.0000000    0\nC50    0.9992014 0.9996009 0.9998004 0.9998071 1.0000000 1.0000000    0\nLG     0.8467372 0.8629515 0.8861393 0.8797790 0.8933134 0.9030134    0\nKNN    0.9990018 0.9996007 0.9998004 0.9996341 0.9998004 1.0000000    0\nNB     0.9417282 0.9443613 0.9463074 0.9470978 0.9505089 0.9527041    0\nCART   0.9590900 0.9654244 0.9809419 0.9754183 0.9829849 0.9896208    0\nGLMNET 0.8848303 0.8931245 0.8957294 0.8954128 0.8985681 0.9026142    0\n\n카파 \n            Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA'</span>s\n<span class=\"hljs-variable constant_\">BAG</span>    <span class=\"hljs-number\">0.9985319</span> <span class=\"hljs-number\">0.9995105</span> <span class=\"hljs-number\">0.9995106</span> <span class=\"hljs-number\">0.9995922</span> <span class=\"hljs-number\">1.0000000</span> <span class=\"hljs-number\">1.0000000</span>    <span class=\"hljs-number\">0</span>\n<span class=\"hljs-variable constant_\">RF</span>     <span class=\"hljs-number\">0.9990214</span> <span class=\"hljs-number\">0.9995107</span> <span class=\"hljs-number\">1.0000000</span> <span class=\"hljs-number\">0.9998043</span> <span class=\"hljs-number\">1.0000000</span> <span class=\"hljs-number\">1.0000000</span>    <span class=\"hljs-number\">0</span>\n<span class=\"hljs-variable constant_\">GBM</span>    <span class=\"hljs-number\">0.9965712</span> <span class=\"hljs-number\">0.9990210</span> <span class=\"hljs-number\">0.9995105</span> <span class=\"hljs-number\">0.9991189</span> <span class=\"hljs-number\">0.9995106</span> <span class=\"hljs-number\">1.0000000</span>    <span class=\"hljs-number\">0</span>\n<span class=\"hljs-variable constant_\">C50</span>    <span class=\"hljs-number\">0.9980418</span> <span class=\"hljs-number\">0.9990214</span> <span class=\"hljs-number\">0.9995107</span> <span class=\"hljs-number\">0.9995269</span> <span class=\"hljs-number\">1.0000000</span> <span class=\"hljs-number\">1.0000000</span>    <span class=\"hljs-number\">0</span>\n<span class=\"hljs-variable constant_\">LG</span>     <span class=\"hljs-number\">0.6691273</span> <span class=\"hljs-number\">0.6941347</span> <span class=\"hljs-number\">0.7051705</span> <span class=\"hljs-number\">0.7105437</span> <span class=\"hljs-number\">0.7312704</span> <span class=\"hljs-number\">0.7512402</span>    <span class=\"hljs-number\">0</span>\n<span class=\"hljs-variable constant_\">KNN</span>    <span class=\"hljs-number\">0.9975507</span> <span class=\"hljs-number\">0.9990206</span> <span class=\"hljs-number\">0.9995106</span> <span class=\"hljs-number\">0.9991025</span> <span class=\"hljs-number\">0.9995106</span> <span class=\"hljs-number\">1.0000000</span>    <span class=\"hljs-number\">0</span>\n<span class=\"hljs-variable constant_\">NB</span>     <span class=\"hljs-number\">0.8632215</span> <span class=\"hljs-number\">0.8695786</span> <span class=\"hljs-number\">0.8735418</span> <span class=\"hljs-number\">0.8754793</span> <span class=\"hljs-number\">0.8834493</span> <span class=\"hljs-number\">0.8880163</span>    <span class=\"hljs-number\">0</span>\n<span class=\"hljs-variable constant_\">CART</span>   <span class=\"hljs-number\">0.8997615</span> <span class=\"hljs-number\">0.9156698</span> <span class=\"hljs-number\">0.9523262</span> <span class=\"hljs-number\">0.9397203</span> <span class=\"hljs-number\">0.9575309</span> <span class=\"hljs-number\">0.9747781</span>    <span class=\"hljs-number\">0</span>\n<span class=\"hljs-variable constant_\">GLMNET</span> <span class=\"hljs-number\">0.7052235</span> <span class=\"hljs-number\">0.7262274</span> <span class=\"hljs-number\">0.7346055</span> <span class=\"hljs-number\">0.7332479</span> <span class=\"hljs-number\">0.7403128</span> <span class=\"hljs-number\">0.7496404</span>    <span class=\"hljs-number\">0</span>\n</code></pre>\n<img src=\"/assets/img/2024-06-20-ClassificationModelinRwithCaretPackage_2.png\">\n<p>랜덤 포레스트가 가장 높은 정확도(99.99%)를 보이며, 그 다음으로 BAG (Bagged CART) (99.98%)와 C5.0 (99.93%)이 뒤를 이어요! 🚀🌟</p>\n<div class=\"content-ad\"></div>\n<h1>모델 완성</h1>\n<p>높은 정확도를 가진 트리 알고리즘인 Random Forest, BAG, 그리고 C5.0를 선택하여 예측을 진행할 것이며, 테스트 데이터셋으로 모델 및 정확도를 테스트할 예정입니다.</p>\n<pre><code class=\"hljs language-js\"># 모델 저장\n<span class=\"hljs-title function_\">saveRDS</span>(fit.<span class=\"hljs-property\">c50</span>, <span class=\"hljs-attr\">here</span>::<span class=\"hljs-title function_\">here</span>(<span class=\"hljs-string\">\"finalModel_c50.rds\"</span>))\n<span class=\"hljs-title function_\">saveRDS</span>(fit.<span class=\"hljs-property\">rf</span>, <span class=\"hljs-attr\">here</span>::<span class=\"hljs-title function_\">here</span>(<span class=\"hljs-string\">\"finalModel_rf.rds\"</span>))\n<span class=\"hljs-title function_\">saveRDS</span>(fit.<span class=\"hljs-property\">treebag</span>, <span class=\"hljs-attr\">here</span>::<span class=\"hljs-title function_\">here</span>(<span class=\"hljs-string\">\"finalModel_treebag.rds\"</span>))\n</code></pre>\n<pre><code class=\"hljs language-js\">predict_c50 &#x3C;- <span class=\"hljs-title function_\">predict</span>(model_c50, test_data)\n<span class=\"hljs-title function_\">summary</span>(predict_c50)\n\n# 혼동 행렬\ncf_c50 &#x3C;- <span class=\"hljs-title function_\">confusionMatrix</span>(predict_c50, test_data$fire_alarm)\n\ncf_c50\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">예   아니요 \n<span class=\"hljs-number\">8950</span> <span class=\"hljs-number\">3575</span> \n혼동 행렬 및 통계\n\n          참조\n예측     예    아니요\n       예 <span class=\"hljs-number\">8949</span>    <span class=\"hljs-number\">1</span>\n       아니요     <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3573</span>\n                                     \n              정확도 : <span class=\"hljs-number\">0.9998</span>     \n                 <span class=\"hljs-number\">95</span>% 신뢰구간 : (<span class=\"hljs-number\">0.9993</span>, <span class=\"hljs-number\">1</span>)\n    정보 부재율 : <span class=\"hljs-number\">0.7147</span>     \n    P-값 [정확도 > 정보 부재율] : <span class=\"xml\">&#x3C;2e-16     \n                                     \n                  카파 : 0.9994     \n                                     \n 맥네마의 검정 P-값 : 1          \n                                      \n            민감도 : 0.9998     \n            특이도 : 0.9997     \n         양성 예측치 : 0.9999     \n         음성 예측치 : 0.9994     \n             유병률 : 0.7147     \n         발견 비율 : 0.7145     \n   발견 유병률 : 0.7146     \n      균형 정확도 : 0.9997     \n                                     \n     '양성' 클래스 : 예\n</span></code></pre>\n<p>랜덤 포레스트 모델을 로드하고 테스트 데이터로 예측을 생성합니다.</p>\n<pre><code class=\"hljs language-js\"># 의사결정 트리 랜덤 포레스트\nmodel_rf &#x3C;- <span class=\"hljs-title function_\">readRDS</span>(<span class=\"hljs-attr\">here</span>::<span class=\"hljs-title function_\">here</span>(<span class=\"hljs-string\">\"finalModel_rf.rds\"</span>))\n<span class=\"hljs-title function_\">print</span>(model_rf)\n</code></pre>\n<pre><code class=\"hljs language-js\">랜덤 포레스트 \n\n<span class=\"hljs-number\">50105</span> 개 샘플\n    <span class=\"hljs-number\">9</span> 예측 변수\n    <span class=\"hljs-number\">2</span> 클래스: <span class=\"hljs-string\">'예'</span>, <span class=\"hljs-string\">'아니요'</span> \n\n사전 처리 없음\n샘플링: 교차 검증 (<span class=\"hljs-number\">10</span>-fold, <span class=\"hljs-number\">3</span>회 반복) \n샘플 크기 요약: <span class=\"hljs-number\">45095</span>, <span class=\"hljs-number\">45094</span>, <span class=\"hljs-number\">45094</span>, <span class=\"hljs-number\">45094</span>, <span class=\"hljs-number\">45095</span>, <span class=\"hljs-number\">45094</span>, ... \n튜닝 매개변수에 따른 샘플링 결과:\n\n  mtry  정확도   카파    \n  <span class=\"hljs-number\">2</span>     <span class=\"hljs-number\">0.9999202</span>  <span class=\"hljs-number\">0.9998043</span>\n  <span class=\"hljs-number\">5</span>     <span class=\"hljs-number\">0.9999202</span>  <span class=\"hljs-number\">0.9998043</span>\n  <span class=\"hljs-number\">9</span>     <span class=\"hljs-number\">0.9998736</span>  <span class=\"hljs-number\">0.9996901</span>\n\n가장 큰 값을 사용하여 최적 모델을 선택하는 데 정확도가 사용되었습니다.\n모델에 사용된 최종 값은 mtry = <span class=\"hljs-number\">2</span>입니다.\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-R\">predict_rf <span class=\"hljs-operator\">&#x3C;-</span> predict<span class=\"hljs-punctuation\">(</span>model_rf<span class=\"hljs-punctuation\">,</span> test_data<span class=\"hljs-punctuation\">)</span>\nsummary<span class=\"hljs-punctuation\">(</span>predict_rf<span class=\"hljs-punctuation\">)</span>\n\n<span class=\"hljs-comment\"># Confusion Matrix</span>\ncf_rf <span class=\"hljs-operator\">&#x3C;-</span> confusionMatrix<span class=\"hljs-punctuation\">(</span>predict_rf<span class=\"hljs-punctuation\">,</span> test_data<span class=\"hljs-operator\">$</span>fire_alarm<span class=\"hljs-punctuation\">)</span>\n\ncf_rf\n</code></pre>\n<pre><code class=\"hljs language-R\">yes   no \n<span class=\"hljs-number\">8952</span> <span class=\"hljs-number\">3573</span> \nConfusion Matrix and Statistics\n\n          Reference\nPrediction  yes   no\n       yes <span class=\"hljs-number\">8951</span>    <span class=\"hljs-number\">1</span>\n       no     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">3573</span>\n                                     \n               Accuracy <span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">0.9999</span>     \n                 <span class=\"hljs-number\">95</span>% CI <span class=\"hljs-operator\">:</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">0.9996</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span>\n    No Information Rate <span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">0.7147</span>     \n    P<span class=\"hljs-operator\">-</span>Value <span class=\"hljs-punctuation\">[</span>Acc <span class=\"hljs-operator\">></span> NIR<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">:</span> <span class=\"hljs-operator\">&#x3C;</span><span class=\"hljs-number\">2e-16</span>     \n                                     \n                  Kappa <span class=\"hljs-operator\">:</span> <span class=\"hljs-number\">0.9998</span>     \n                                     \n Mcnemar<span class=\"hljs-string\">'s Test P-Value : 1          \n                                     \n            Sensitivity : 1.0000     \n            Specificity : 0.9997     \n         Pos Pred Value : 0.9999     \n         Neg Pred Value : 1.0000     \n             Prevalence : 0.7147     \n         Detection Rate : 0.7147     \n   Detection Prevalence : 0.7147     \n      Balanced Accuracy : 0.9999     \n                                     \n       '</span>Positive<span class=\"hljs-string\">' Class : yes\n</span></code></pre>\n<p>Bagged CART 모델 로드하기</p>\n<pre><code class=\"hljs language-R\"><span class=\"hljs-comment\"># 분류 및 회귀 트리 (CART)</span>\nmodel_treebag <span class=\"hljs-operator\">&#x3C;-</span> readRDS<span class=\"hljs-punctuation\">(</span>here<span class=\"hljs-operator\">::</span>here<span class=\"hljs-punctuation\">(</span><span class=\"hljs-string\">\"finalModel_treebag.rds\"</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\n\nprint<span class=\"hljs-punctuation\">(</span>model_treebag<span class=\"hljs-punctuation\">)</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Bagged</span> <span class=\"hljs-variable constant_\">CART</span> \n\n<span class=\"hljs-number\">50105</span> 개의 샘플\n    <span class=\"hljs-number\">9</span> 개의 예측 변수\n    <span class=\"hljs-number\">2</span> 개의 클래스: <span class=\"hljs-string\">'yes'</span>, <span class=\"hljs-string\">'no'</span> \n\n사전 처리 없음\n리샘플링: 교차 확인(<span class=\"hljs-number\">10</span> 폴드, <span class=\"hljs-number\">3</span>회 반복) \n샘플 크기 요약: <span class=\"hljs-number\">45095</span>, <span class=\"hljs-number\">45094</span>, <span class=\"hljs-number\">45094</span>, <span class=\"hljs-number\">45094</span>, <span class=\"hljs-number\">45095</span>, <span class=\"hljs-number\">45094</span>, ... \n리샘플링 결과:\n\n  정확도   카파    \n  <span class=\"hljs-number\">0.9998337</span>  <span class=\"hljs-number\">0.9995922</span>\n</code></pre>\n<pre><code class=\"hljs language-js\">predict_treebag &#x3C;- <span class=\"hljs-title function_\">predict</span>(model_treebag, test_data)\n<span class=\"hljs-title function_\">summary</span>(predict_treebag)\n\n# 혼동 행렬\ncf_treebag &#x3C;- <span class=\"hljs-title function_\">confusionMatrix</span>(predict_treebag, test_data$fire_alarm)\n\ncf_treebag\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Confusion</span> <span class=\"hljs-title class_\">Matrix</span> and <span class=\"hljs-title class_\">Statistics</span>\n\n          실제값\n예측값   yes   no\n       yes <span class=\"hljs-number\">8951</span>    <span class=\"hljs-number\">2</span>\n       no     <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">3572</span>\n                                     \n               정확도 : <span class=\"hljs-number\">0.9998</span>     \n                 <span class=\"hljs-number\">95</span>% 신뢰 구간 : (<span class=\"hljs-number\">0.9994</span>, <span class=\"hljs-number\">1</span>)\n    정보 없는 비율 : <span class=\"hljs-number\">0.7147</span>     \n    P-값 [정확도 > 정보 없는 비율] : <span class=\"xml\">&#x3C;2e-16     \n                                     \n                  카파 : 0.9996     \n                                     \n 맥네머의 테스트 P-값 : 0.4795     \n                                     \n            민감도 : 1.0000     \n            특이도 : 0.9994     \n         양성 예측 값 : 0.9998     \n         음성 예측 값 : 1.0000     \n             유병률 : 0.7147     \n         감지율 : 0.7147     \n   감지 유병률 : 0.7148     \n      균형 정확도 : 0.9997     \n                                     \n       '양성' 클래스 : yes\n</span></code></pre>\n<p>자세한 내용은 깃허브 저장소를 방문해 주세요. 이 절을 읽어 주셔서 감사합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}