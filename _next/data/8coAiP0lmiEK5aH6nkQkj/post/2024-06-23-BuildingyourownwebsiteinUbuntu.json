{"pageProps":{"post":{"title":"Ubuntu에서 웹사이트 구축하는 방법","description":"","date":"2024-06-23 18:21","slug":"2024-06-23-BuildingyourownwebsiteinUbuntu","content":"\n\n요즘 오렌지 파이를 샀는데 취미로 웹 서버를 만들어보기로 결정했어요. 만약 당신의 ISP가 공인 IP를 허용한다면, 온라인으로 접속할 수도 있을 거에요.\n\n# 프레임워크\n\n첫 번째로 해야 할 일은 서버를 실행할 웹 프레임워크를 설정하는 것이에요. 이 경우 빠른 테스트를 위해 파이썬을 사용하여 플라스크를 선택했어요. 다른 프레임워크인 장고, 노드.js나 다른 것을 이미 알고 계시다면 그것을 사용해도 돼요.\n\n저는 루트 디렉토리에 폴더를 만들어 시작하는 것부터 시작해요.\n\n<div class=\"content-ad\"></div>\n\n```shell\ncd /\nsudo mkdir sww\ncd /sww\nmkdir scripts\ncd /sww/scripts\nmkdir webserver\ncd /sww/scripts/webserver\n```\n\n다음으로 아래를 실행하여 파이썬 가상 환경을 만들 수 있어요\n\n```shell\npython3 -m venv .venv\n```\n\n다음으로 원하는 IDE(통합 개발 환경)나 텍스트 편집기를 사용할 수 있어요. 저는 Visual Studio Code를 사용해서 폴더를 여는 게 좋아요.\n\n<div class=\"content-ad\"></div>\n\n```js\ncode .\n```\n\n방금 만든 Python 가상 환경을 사용하도록 vscode를 설정할 거에요. ctrl+shift+p를 눌러 Python: Select Interpreter를 선택하면 이렇게 선택 목록이 열릴 거예요.\n\n![image](/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_0.png)\n\n현재 폴더에 있는 가상 환경을 선택한 후 터미널을 열면 (ctrl+shift+`) 이 접두사가 나와야 해요 (.venv)\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식으로 표현된 코드입니다.\n\n\n<img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_1.png\" />\n\n다음은 터미널에서 이 코드를 실행하여 flask를 설치하는 방법입니다.\n\n```python\npython -m pip install flask\n```\n\n이 가이드를 따라하여 hello.py 파일을 생성합니다. 파일 내용은 아래와 같습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello_world():\n    return \"<p>Hello, World!</p>\"\n```\n\n그런 다음 이 명령어를 실행하여 플라스크를 시작하십시오.\n\n```bash\nflask run --app hello\n```\n\n웹 브라우저에서 localhost:5000을 열어주세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_2.png\" />\n\n대박! 잘 됐어요! 안녕, 세계여!\n\n# Nginx\n\n다음으로는 Nginx를 설정하여 역방향 프록시를 처리할 거에요\n\n<div class=\"content-ad\"></div>\n\n첫 번째 단계는 Nginx를 설치하는 것입니다.\n\n```js\nsudo apt update\nsudo apt install nginx\nsudo nginx -V\n```\n\n또한 웹 브라우저에서 localhost 또는 로컬 IP를 열어서 작동 여부를 확인할 수도 있습니다.\n\n![이미지](/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_3.png)\n\n<div class=\"content-ad\"></div>\n\n반드시 보안을 위해 방화벽을 설치하는 것을 잊지 마세요.\n\n```js\nsudo apt install ufw\nsudo ufw enable\nsudo ufw allow from <router_ip> to any port 80\nsudo ufw allow from <router_ip> to any port 443\n```\n\n라우터 IP를 입력해야 보안을 높일 수 있지만, 확실하지 않다면 'any'로 설정할 수 있어요. 어쨌든 나중에 액세스하려면 라우터 IP가 필요하답니다.\n\n다음으로, 서버를 온라인에서 액세스할 수 있도록 포트를 열어야 해요. 라우터 IP 주소로 이동해서 로컬 머신 IP 주소를 찾으세요. 저의 경우에는 192.168.20.4예요.\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_4.png\" />\n\n그런 다음 라우터가 가지고 있는 포트 포워딩 또는 NAT(라우터에 따라 다를 수 있음) 중 하나로 이동합니다.\n\n<img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_5.png\" />\n\n서비스 이름, 로컬 머신 IP 주소 및 포트를 입력한 후 저장을 누릅니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n![Screenshot](/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_6.png)\n\nOnce done, it should look like this. Please note that the display may vary depending on the router and brand.\n\n# Test\n\nAfter setting up nginx and opening the port, you can test accessing your machine online by searching for your public IP on Google as shown below:\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_7.png)\n\n만약 작동하면 nginx 환영 페이지를 가리켜야합니다.\n\n# Nginx 사이트\n\nNginx가 작동하면 사이트를 설정할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n```js\ncd /etc/nginx/sites-enabled\nsudo touch webserver\nsudo gedit webserver\n```\n\n위 명령을 입력하면 gedit 텍스트 편집기에서 webserver 파일이 열릴 겁니다. 아래 코드를 입력하고 저장하세요.\n\n```js\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    server_name _;\n\n    root /sww/scripts/webserver;\n\n    location / {\n        proxy_pass http://localhost:5000/;\n        proxy_buffering off;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $http_connection;\n    }\n}\n```\n\n그런 다음 Nginx 서버를 재시작하고 브라우저를 새로고침하세요.\n\n\n<div class=\"content-ad\"></div>\n\n\nsudo systemctl restart nginx.service\n\n\n![Building your own website in Ubuntu](/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_8.png)\n\n지금은 플라스크 웹 서버를 가리키도록 설정되어 있습니다. 그러면 계속 작업을 계속할 수 있어요 :)\n\n다음 단계는 기억에 남을 주소로 이를 도메인에 연결하는 것인데, 이에 대해 다른 문서에서 다룰 것입니다. 그때까지 안녕히 계세요! 👋\n","ogImage":{"url":"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_0.png"},"coverImage":"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>요즘 오렌지 파이를 샀는데 취미로 웹 서버를 만들어보기로 결정했어요. 만약 당신의 ISP가 공인 IP를 허용한다면, 온라인으로 접속할 수도 있을 거에요.</p>\n<h1>프레임워크</h1>\n<p>첫 번째로 해야 할 일은 서버를 실행할 웹 프레임워크를 설정하는 것이에요. 이 경우 빠른 테스트를 위해 파이썬을 사용하여 플라스크를 선택했어요. 다른 프레임워크인 장고, 노드.js나 다른 것을 이미 알고 계시다면 그것을 사용해도 돼요.</p>\n<p>저는 루트 디렉토리에 폴더를 만들어 시작하는 것부터 시작해요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-shell\">cd /\nsudo mkdir sww\ncd /sww\nmkdir scripts\ncd /sww/scripts\nmkdir webserver\ncd /sww/scripts/webserver\n</code></pre>\n<p>다음으로 아래를 실행하여 파이썬 가상 환경을 만들 수 있어요</p>\n<pre><code class=\"hljs language-shell\">python3 -m venv .venv\n</code></pre>\n<p>다음으로 원하는 IDE(통합 개발 환경)나 텍스트 편집기를 사용할 수 있어요. 저는 Visual Studio Code를 사용해서 폴더를 여는 게 좋아요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">code .\n</code></pre>\n<p>방금 만든 Python 가상 환경을 사용하도록 vscode를 설정할 거에요. ctrl+shift+p를 눌러 Python: Select Interpreter를 선택하면 이렇게 선택 목록이 열릴 거예요.</p>\n<p><img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_0.png\" alt=\"image\"></p>\n<p>현재 폴더에 있는 가상 환경을 선택한 후 터미널을 열면 (ctrl+shift+`) 이 접두사가 나와야 해요 (.venv)</p>\n<div class=\"content-ad\"></div>\n<p>아래는 Markdown 형식으로 표현된 코드입니다.</p>\n<img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_1.png\">\n<p>다음은 터미널에서 이 코드를 실행하여 flask를 설치하는 방법입니다.</p>\n<pre><code class=\"hljs language-python\">python -m pip install flask\n</code></pre>\n<p>이 가이드를 따라하여 hello.py 파일을 생성합니다. 파일 내용은 아래와 같습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask\n\napp = Flask(__name__)\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">\"/\"</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hello_world</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"&#x3C;p>Hello, World!&#x3C;/p>\"</span>\n</code></pre>\n<p>그런 다음 이 명령어를 실행하여 플라스크를 시작하십시오.</p>\n<pre><code class=\"hljs language-bash\">flask run --app hello\n</code></pre>\n<p>웹 브라우저에서 localhost:5000을 열어주세요.</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_2.png\">\n<p>대박! 잘 됐어요! 안녕, 세계여!</p>\n<h1>Nginx</h1>\n<p>다음으로는 Nginx를 설정하여 역방향 프록시를 처리할 거에요</p>\n<div class=\"content-ad\"></div>\n<p>첫 번째 단계는 Nginx를 설치하는 것입니다.</p>\n<pre><code class=\"hljs language-js\">sudo apt update\nsudo apt install nginx\nsudo nginx -V\n</code></pre>\n<p>또한 웹 브라우저에서 localhost 또는 로컬 IP를 열어서 작동 여부를 확인할 수도 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_3.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>반드시 보안을 위해 방화벽을 설치하는 것을 잊지 마세요.</p>\n<pre><code class=\"hljs language-js\">sudo apt install ufw\nsudo ufw enable\nsudo ufw allow <span class=\"hljs-keyword\">from</span> &#x3C;router_ip> to any port <span class=\"hljs-number\">80</span>\nsudo ufw allow <span class=\"hljs-keyword\">from</span> &#x3C;router_ip> to any port <span class=\"hljs-number\">443</span>\n</code></pre>\n<p>라우터 IP를 입력해야 보안을 높일 수 있지만, 확실하지 않다면 'any'로 설정할 수 있어요. 어쨌든 나중에 액세스하려면 라우터 IP가 필요하답니다.</p>\n<p>다음으로, 서버를 온라인에서 액세스할 수 있도록 포트를 열어야 해요. 라우터 IP 주소로 이동해서 로컬 머신 IP 주소를 찾으세요. 저의 경우에는 192.168.20.4예요.</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_4.png\">\n<p>그런 다음 라우터가 가지고 있는 포트 포워딩 또는 NAT(라우터에 따라 다를 수 있음) 중 하나로 이동합니다.</p>\n<img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_5.png\">\n<p>서비스 이름, 로컬 머신 IP 주소 및 포트를 입력한 후 저장을 누릅니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_6.png\" alt=\"Screenshot\"></p>\n<p>Once done, it should look like this. Please note that the display may vary depending on the router and brand.</p>\n<h1>Test</h1>\n<p>After setting up nginx and opening the port, you can test accessing your machine online by searching for your public IP on Google as shown below:</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_7.png\" alt=\"이미지\"></p>\n<p>만약 작동하면 nginx 환영 페이지를 가리켜야합니다.</p>\n<h1>Nginx 사이트</h1>\n<p>Nginx가 작동하면 사이트를 설정할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">cd /etc/nginx/sites-enabled\nsudo touch webserver\nsudo gedit webserver\n</code></pre>\n<p>위 명령을 입력하면 gedit 텍스트 편집기에서 webserver 파일이 열릴 겁니다. 아래 코드를 입력하고 저장하세요.</p>\n<pre><code class=\"hljs language-js\">server {\n    listen <span class=\"hljs-number\">80</span> default_server;\n    listen [::]:<span class=\"hljs-number\">80</span> default_server;\n    server_name _;\n\n    root /sww/scripts/webserver;\n\n    location / {\n        proxy_pass <span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//localhost:5000/;</span>\n        proxy_buffering off;\n        proxy_http_version <span class=\"hljs-number\">1.1</span>;\n        proxy_set_header X-<span class=\"hljs-title class_\">Forwarded</span>-<span class=\"hljs-title class_\">For</span> $proxy_add_x_forwarded_for;\n        proxy_set_header <span class=\"hljs-title class_\">Upgrade</span> $http_upgrade;\n        proxy_set_header <span class=\"hljs-title class_\">Connection</span> $http_connection;\n    }\n}\n</code></pre>\n<p>그런 다음 Nginx 서버를 재시작하고 브라우저를 새로고침하세요.</p>\n<div class=\"content-ad\"></div>\n<p>sudo systemctl restart nginx.service</p>\n<p><img src=\"/assets/img/2024-06-23-BuildingyourownwebsiteinUbuntu_8.png\" alt=\"Building your own website in Ubuntu\"></p>\n<p>지금은 플라스크 웹 서버를 가리키도록 설정되어 있습니다. 그러면 계속 작업을 계속할 수 있어요 :)</p>\n<p>다음 단계는 기억에 남을 주소로 이를 도메인에 연결하는 것인데, 이에 대해 다른 문서에서 다룰 것입니다. 그때까지 안녕히 계세요! 👋</p>\n</body>\n</html>\n"},"__N_SSG":true}