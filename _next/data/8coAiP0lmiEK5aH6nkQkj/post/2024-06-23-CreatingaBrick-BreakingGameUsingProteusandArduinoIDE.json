{"pageProps":{"post":{"title":"Proteus와 Arduino IDE를 사용하여 벽돌깨기 게임 만드는 방법","description":"","date":"2024-06-23 17:33","slug":"2024-06-23-CreatingaBrick-BreakingGameUsingProteusandArduinoIDE","content":"\n\n본문에서 프로테우스와 아두이노 IDE를 사용하여 벽돌 깨기 게임을 만들어 보겠습니다. 필요한 절차를 단계별로 공유할 예정이에요. 시뮬레이션에서의 게임 모습은 다음과 같을 거에요.\n\n![게임 이미지](/assets/img/2024-06-23-CreatingaBrick-BreakingGameUsingProteusandArduinoIDE_0.png)\n\n우선 내용을 간단히 설명해보려고 해요.\n\n## 시작 화면 및 메뉴 옵션:\n\n<div class=\"content-ad\"></div>\n\n먼저, 사용자에게 시작 화면이 표시됩니다. 이 화면에는 \"시작\" 및 \"종료\" 옵션이 포함되어 있습니다. 사용자는 버튼을 사용하여 이 옵션들 사이를 이동하고, \"선택\" 버튼으로 선택을 집니다.\n\n## 게임 시작 및 종료 절차:\n\n사용자가 \"시작\" 옵션을 선택하면 게임 화면이 열리고 게임이 시작됩니다. \"종료\" 옵션이 선택된 경우 \"저희 게임에 관심 가져 주셔서 감사합니다\"와 같은 메시지가 화면에 표시됩니다.\n\n## 패들 조절:\n\n<div class=\"content-ad\"></div>\n\n게임이 시작되면 사용자가 제어하는 패들이 포텐티오미터로 좌우로 움직입니다.\n\n**공의 움직임과 벽돌 파괴:**\n\n위에 위치한 패들에 의해 이뤄지는 공이 벽돌에 부딪혀 파괴됩니다. 동시에 공은 오른쪽, 왼쪽, 그리고 위쪽 벽에 부딪힐 때 방향을 바꿉니다.\n\n**점수 계산 절차:**\n\n<div class=\"content-ad\"></div>\n\n매 벽돌이 깨질 때마다 플레이어의 점수가 1점씩 올라갑니다. 이 점수는 플레이어의 성과를 추적하는 데 사용됩니다.\n\n## 체력 게이지:\n\n게임이 시작될 때 각 플레이어는 3개의 목숨을 가지고 있습니다. 공이 팔레트에서 빠져 떨어질 때마다 플레이어의 체력이 감소합니다. 목숨은 LED로 사용자에게 표시됩니다.\n\n## 특별 아이템 및 체력 증가:\n\n<div class=\"content-ad\"></div>\n\n매번 벽돌이 깨질 때마다 특별한 물건이 10%의 확률로 떨어집니다. 이 물건을 받은 플레이어는 체력이 1 증가합니다. 이 상태는 LED 표시기로 동시에 표시됩니다.\n\n## 배경색 변경:\n\n게임의 배경과 벽돌의 색상은 빛 센서가 감지한 빛의 양에 따라 변합니다. 빛이 켜지면 배경은 흰색이 되고 벽돌은 검은색이 됩니다.\n\n## 레벨 변화와 속도 증가:\n\n<div class=\"content-ad\"></div>\n\n매 레벨을 클리어할 때마다 벽돌 배치가 변경되고, 공의 속도도 이전 라운드 대비 20% 증가합니다.\n\n## 게임 종료:\n\n모든 목숨을 소진하면, 플레이어의 점수가 화면에 출력되고 그 후에 메뉴로 이동됩니다.\n\n## 시뮬레이션에 필요한 도구들:\n\n<div class=\"content-ad\"></div>\n\n- 아두이노 Uno\n- Oled 스크린\n- 버튼\n- LED\n- 가변 저항\n- 7 세그먼트 디스플레이\n- 광 센서\n\n프로테우스에 위의 부품들을 추가하고 필요한 곳에 사용해야 합니다.\n\n이제 프로젝트를 자세히 설명하겠습니다.\n\n## 라이브러리 및 정의:\n\n<div class=\"content-ad\"></div>\n\n이 섹션에서는 사용할 라이브러리와 상수들이 정의되어 있습니다.\n\n화면에 사용할 벽돌, 패들, 공, 및 객체들의 크기와 값을 여기에서 지정합니다.\n\n```js\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>     \n#include <SPI.h>\n\n#define SCREEN_WIDTH 128\n#define SCREEN_HEIGHT 64\n#define SCREEN_ADDRESS 0x3D\n#define OLED_RESET 1 \n\n#define BRICK_WIDTH 31\n#define BRICK_HEIGHT 10\n#define BRICK_GAP_X 1\n#define BRICK_GAP_Y 1\n#define NUM_BRICKS_X 4\n#define NUM_BRICKS_Y 2\n\n#define PADDLE_WIDTH 40 \n#define PADDLE_HEIGHT 3\n#define PADDLE_SPEED 5 \n\n#define BALL_SIZE 2\n#define BALL_SPEED_X 3 \n#define BALL_SPEED_Y 3 \n\n#define OBJECT_SIZE 7\n#define OBJECT_SPEED 2\n\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);\n\nint paddlePosition = 50;\nint paddleDirection = 0; // 패들 이동 방향을 유지합니다: -1 왼쪽, 1 오른쪽, 0 가만히\nint ballPositionX ;\nint ballPositionY;\nint ballDirectionX;\nint ballDirectionY;\n\n// 7 세그먼트 디스플레이 핀 연결\nconst int segmentPins[] = {2,3,4,5,6,7,8,9};\n\n// 버튼 핀 연결\nconst int upButton = 10;\nconst int downButton = 11;\nconst int selectButton = 12;\n\nint counter = 0;\nint score = 0;\nint menu = 1;\nint currentLevel = 1;\n\nint ballSpeedX = BALL_SPEED_X;\nint ballSpeedY = BALL_SPEED_Y;\n\n// 각 벽돌의 상태를 추적하는 2D 배열 정의\nbool bricks[NUM_BRICKS_Y][NUM_BRICKS_X];\n\n// 각 레벨별 벽돌 레이아웃 정의\nconst int levelBricksLayouts[][NUM_BRICKS_Y][NUM_BRICKS_X] = {\n  // 레벨 1\n  {\n    {1,1,1,1},\n    {1,1,1,1}\n  },\n  // 레벨 2\n  {\n    {1,0,1,0},\n    {0,1,0,1}\n  },\n  // 레벨 3\n  {\n    {1,1,0,1},\n    {0,1,1,0}\n  },\n  // 레벨 4\n  {\n    {1,0,0,1},\n    {0,1,1,0}\n  },\n  // 레벨 5\n  {\n    {1,0,1,0},\n    {0,1,0,1}\n  }\n};\n\nint lives = 3; \nconst int lifeLEDs[] = {13,A2,A3}; \n\nbool objectActive = false;\nint objectX, objectY;\n\nuint16_t backgroundColor, brickColor, paddleColor, ballColor, objectColor;\r\n```\n\n## 설정 함수:\n\n<div class=\"content-ad\"></div>\n\n설정 함수는 초기 설정을 수행합니다. 화면 초기화, 입력/출력 핀 설정, 메뉴 표시 등의 작업이 여기서 수행됩니다.\n\n```js\nvoid setup() {\n  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);\n  \n  display.clearDisplay();\n  display.display();\n  display.setTextColor(SSD1306_WHITE, SSD1306_BLACK);\n\n  // 포텐셔미터 핀을 입력으로 설정\n  pinMode(A0, INPUT);\n\n  for(int i = 0; i<8; i++) {\n    pinMode(segmentPins[i], OUTPUT);\n  }\n\n  // 버튼 핀을 입력으로 설정\n  pinMode(upButton, INPUT);\n  pinMode(downButton, INPUT);\n  pinMode(selectButton, INPUT);\n\n  digitalWrite(upButton, HIGH);\n  digitalWrite(downButton, HIGH);\n  digitalWrite(selectButton, HIGH);\n  delay(1000);\n  updateMenu();\n\n  // 초기에 모든 벽을 솔리드로 설정\n  for (int i = 0; i < NUM_BRICKS_Y; i++) {\n    for (int j = 0; j < NUM_BRICKS_X; j++) {\n      bricks[i][j] = true;\n    }\n  }\n\n  for(int i = 0; i<3; i++) {\n    pinMode(lifeLEDs[i], OUTPUT);\n  }\n\n  // 광센서의 핀을 입력으로 설정\n  pinMode(A1, INPUT);\n}\n```\n\n## 루프 함수:\n\n이 함수는 버튼 상태를 확인하고 필요한 기능을 제공합니다. 각 사이클마다 7세그먼트 디스플레이에 카운터의 값을 표시합니다.\n\n<div class=\"content-ad\"></div>\n\n\n## 숫자 표시 함수:\n\n이 함수는 7세그먼트 디스플레이에 특정 숫자를 표시하는 데 사용됩니다. 이 숫자는 0에서 9 사이여야 합니다.\n\n```js\nvoid displayNumber(int num) {\n  const int numbers[][8] = {\n    {1,1,1,1,1,1,0,0}, //0\n    {0,1,1,0,0,0,0,0}, //1\n    {1,1,0,1,1,0,1,0}, //2\n    {1,1,1,1,0,0,1,0}, //3\n    {0,1,1,0,0,1,1,0}, //4\n    {1,0,1,1,0,1,1,0}, //5\n    {1,0,1,1,1,1,1,0}, //6\n    {1,1,1,0,0,0,0,0}, //7\n    {1,1,1,1,1,1,1,0}, //8\n    {1,1,1,1,0,1,1,0}  //9\n  };\n\n  for(int i = 0; i<8; i++) {\n    digitalWrite(segmentPins[i], numbers[num][i]);\n  } \n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 메뉴 업데이트 기능:\n\n이 함수는 메뉴를 업데이트하는 데 사용됩니다. 사용자가 선택한 메뉴를 강조합니다.\n\n```js\nvoid updateMenu() {\n  switch(menu) {\n    case 0:\n      menu = 1;\n      break;\n    case 1:\n      display.clearDisplay();\n      display.setCursor(0,0);\n      display.println(\"> 시작\");\n      display.setCursor(0,10);\n      display.println(\"  종료\");\n      display.display();\n      break;\n    case 2:\n      display.clearDisplay();\n      display.setCursor(0,0);\n      display.println(\"  시작\");\n      display.setCursor(0,10);\n      display.println(\"> 종료\");\n      display.display();\n      break;\n    case 3:\n      menu = 2;\n      break;\n  }\n}\n```\n\n## 동작 실행 함수:\n\n<div class=\"content-ad\"></div>\n\n사용자가 선택한 작업을 수행하는 함수입니다. 시작 및 종료 옵션에 따라 서로 다른 작업을 수행합니다.\n\n```js\nvoid executeAction() {\n  switch(menu) {\n    case 1:\n      action1();\n      break;\n    case 2:\n      action2();\n      break;\n    default:\n      break;\n  }\n}\n\n// 시작 작업\nvoid action1() {\n  display.clearDisplay();\n  display.setCursor(0, 0);\n  playGame();\n  display.display();\n  delay(1500);\n}\n\n// 종료 작업\nvoid action2() {\n  display.clearDisplay();\n  display.setCursor(0, 0);\n  display.print(\"Thank you for your interest in our game....\");\n  display.display();\n  delay(1500);\n}\n```\n\n## 벽돌 그리기 함수:\n\n게임 화면에 벽돌을 그리는 함수입니다. 특정 색상의 벽돌을 그립니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvoid drawBricks(uint16_t color) {\n  for(int i = 0; i < NUM_BRICKS_Y; i++) {\n    for(int j = 0; j < NUM_BRICKS_X; j++) {\n      int brickX = j * (BRICK_WIDTH + BRICK_GAP_X);\n      int brickY = i * (BRICK_HEIGHT + BRICK_GAP_Y);\n      if (bricks[i][j]) { // Only draw solid bricks\n        display.fillRect(brickX + 1, brickY + 1, BRICK_WIDTH - 1, BRICK_HEIGHT - 1, color);\n      }\n    }\n  }\n}\n```\n\n## 패들 그리기, 삭제 및 업데이트 기능:\n\n```js\n// 화면에 패들을 그리는 함수\nvoid drawPaddle(uint16_t color) {\n  display.fillRect(paddlePosition, display.height() - PADDLE_HEIGHT - 2, PADDLE_WIDTH, PADDLE_HEIGHT, color);\n}\n\n// 이전 패들 위치를 지우는 함수\nvoid clearPaddle() {\n  display.fillRect(paddlePosition, display.height() - PADDLE_HEIGHT - 2, PADDLE_WIDTH, PADDLE_HEIGHT, SSD1306_BLACK);\n}\n\n// 패들의 위치를 포텐셔미터에서 받은 데이터에 따라 업데이트하는 함수\nvoid updatePaddle() {\n  int potValue = analogRead(A0);\n\n  paddlePosition = map(potValue, 0, 1023, 0, display.width() - PADDLE_WIDTH);\n}\n```\n\n## 공 그리기, 삭제 및 업데이트 기능:\n\n<div class=\"content-ad\"></div>\n\n```js\n// 화면에 공을 그리는 함수\nvoid drawBall(uint16_t color) {\n  display.fillCircle(ballPositionX, ballPositionY, BALL_SIZE, color);\n}\n\n// 이전 공 위치를 지우는 함수\nvoid clearBall() {\n  display.fillCircle(ballPositionX - ballDirectionX * BALL_SPEED_X, ballPositionY - ballDirectionY * BALL_SPEED_Y, BALL_SIZE, SSD1306_BLACK);\n}\n\n// 공의 위치와 움직임을 업데이트하는 함수\nvoid updateBall() {\n  ballPositionX += ballDirectionX * ballSpeedX;\n  ballPositionY += ballDirectionY * ballSpeedY;\n\n  // 왼쪽 가장자리 충돌 확인 및 방향 전환\n  if(ballPositionX <= 0) {\n    ballDirectionX *= -1;\n  } \n  // 오른쪽 가장자리 충돌 확인 및 방향 전환\n  else if(ballPositionX >= display.width() - BALL_SIZE) {\n    ballDirectionX *= -1;\n  }\n\n  // 위쪽 가장자리 충돌 확인\n  if(ballPositionY <= 0) {\n    ballDirectionY *= -1;\n  } \n\n  checkPaddleCollision();\n\n  // 아래쪽 가장자리 충돌 확인\n  if(ballPositionY >= display.height()) {\n    loseLife();\n  }\n}\r\n```\n\n## 생명과 생명을 잃은 상태를 보여주는 함수:\n\n```js\r\n// 사용자의 생명을 표시하는 함수\nvoid displayLives() {\n  for (int i = 0; i < 3; i++) {\n    digitalWrite(lifeLEDs[i], i < lives ? HIGH : LOW); // 건강 상태에 따라 LED 켜기/끄기\n  }\n}\n\n// 사용자의 생명을 잃는 상황을 처리하는 함수\nvoid loseLife() {\n  lives--;\n  for (int i = 0; i < 3; i++) {\n    digitalWrite(lifeLEDs[i], i < lives ? HIGH : LOW); // 건강 상태에 따라 LED 켜기/끄기\n  }\n\n  // 사용자가 건강 상태가 낮을 때 공을 트랙 위에 시작하도록 함\n  delay(100);\n  ballPositionX = paddlePosition + PADDLE_WIDTH / 2;\n  ballPositionY = display.height() - PADDLE_HEIGHT - BALL_SIZE - 3;\n  ballDirectionX = 0;\n  ballDirectionY = 0;\n  displayLives();\n  objectActive = false;\n  display.fillRect(objectX, objectY, OBJECT_SIZE, OBJECT_SIZE, SSD1306_BLACK);\n  delay(100); \n}\r\n```\n\n## 패들과 공의 충돌 함수: \n\n<div class=\"content-ad\"></div>\n\n볼이 패들에 닿았는지 확인하는 함수입니다.\n\n```js\nvoid checkPaddleCollision() {\n    // 패들과 볼의 충돌 확인\n    if (ballPositionY + BALL_SIZE >= display.height() - PADDLE_HEIGHT - BALL_SPEED_Y && ballPositionX + BALL_SIZE >= paddlePosition && ballPositionX <= paddlePosition + PADDLE_WIDTH) {\n        // 패들의 왼쪽 부분\n        if (ballPositionX <= paddlePosition + PADDLE_WIDTH / 3) {\n            ballDirectionX = -1; // 왼쪽으로 볼 진행\n            ballDirectionY = -1; // 볼의 방향을 위쪽으로 전환\n        }\n        // 패들의 중간 부분\n        else if (ballPositionX <= paddlePosition + 2 * PADDLE_WIDTH / 3) {\n            ballDirectionX = 0; // 볼의 방향을 바꾸지 않음\n            ballDirectionY = 0;\n        }\n        // 패들의 오른쪽 부분\n        else {\n            ballDirectionX = 1; // 오른쪽으로 볼 진행\n            ballDirectionY = -1; // 볼의 방향을 위쪽으로 전환\n        }  \n    }\n}\n```\n\n## 볼이 패들과 충돌하는지 확인하는 함수:\n\n볼이 패들과 충돌하는지 확인하고 true 또는 false를 반환합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nbool ballHitsPaddle() {\n  // 패들과 공의 충돌 제어\n  if (ballPositionY + BALL_SIZE >= display.height() - PADDLE_HEIGHT - BALL_SPEED_Y && ballPositionX + BALL_SIZE >= paddlePosition && ballPositionX <= paddlePosition + PADDLE_WIDTH) {\n    return true;\n  } else {\n    return false;\n  }\n}\n```\n\n## 객체 그리기, 업데이트 함수:\n\n```js\n// 화면에 특별한 객체를 그리는 함수\nvoid drawObject(uint16_t color) {\n  display.fillRect(objectX, objectY, OBJECT_SIZE, OBJECT_SIZE, color);\n}\n\n// 특별한 객체의 위치를 업데이트하는 함수\nvoid updateObject() {\n  // 객체가 활성화되어 있고 화면 아래로 떨어지는 방향으로 이동하지 않으면 이동\n  if (objectActive && objectY < display.height() - OBJECT_SIZE) {\n    // 객체 지우기\n    display.fillRect(objectX, objectY, OBJECT_SIZE, OBJECT_SIZE, SSD1306_BLACK);\n    // 새로운 위치 업데이트\n    objectY += OBJECT_SPEED;\n\n    // 플레이어가 객체를 잡았을 경우\n    if (objectY >= display.height() - PADDLE_HEIGHT - OBJECT_SIZE && objectX >= paddlePosition && objectX <= paddlePosition + PADDLE_WIDTH) {\n      objectActive = false;\n      lives++; // 생명 카운트 증가\n\n      // LED로 생명 수 표시\n      for (int i = 0; i < 3; i++) {\n        digitalWrite(lifeLEDs[i], i < lives ? HIGH : LOW);\n      }\n      display.fillRect(objectX, objectY, OBJECT_SIZE, OBJECT_SIZE, SSD1306_BLACK);\n    }\n\n    // 객체가 화면 하단 가장자리에 도착했을 경우\n    if (objectY >= display.height() - OBJECT_SIZE) {\n      display.fillRect(objectX, objectY, OBJECT_SIZE, OBJECT_SIZE, SSD1306_BLACK);\n    }\n    drawObject(objectColor);\n  }\n}\n```\n\n## 벽돌 충돌 확인:\n\n<div class=\"content-ad\"></div>\n\n볼이 벽돌에 충돌하는지 확인합니다.\n\n```js\nvoid checkBrickCollision() {\n  for(int i = 0; i < NUM_BRICKS_Y; i++) {\n    for(int j = 0; j < NUM_BRICKS_X; j++) {\n      if (bricks[i][j]) { // Check to only crash into solid bricks\n        int brickX = j * (BRICK_WIDTH + BRICK_GAP_X);\n        int brickY = i * (BRICK_HEIGHT + BRICK_GAP_Y);\n\n        if (ballPositionX + BALL_SIZE >= brickX && ballPositionX <= brickX + BRICK_WIDTH && ballPositionY + BALL_SIZE >= brickY && ballPositionY <= brickY + BRICK_HEIGHT) {\n          ballDirectionY *= -1; \n          bricks[i][j] = false; // Mark the brick as broken\n          incrementCounter(); // Increase score\n          display.fillRect(brickX + 1, brickY + 1, BRICK_WIDTH - 1, BRICK_HEIGHT - 1, SSD1306_BLACK);\n        \n          // Creating an object every time a brick is broken\n          if(random(100) < 10) { // 10 percent probability of creating an object\n            objectActive = true;\n            objectX = brickX + (BRICK_WIDTH - OBJECT_SIZE) / 2;\n            objectY = brickY + (BRICK_HEIGHT - OBJECT_SIZE) / 2;;\n            drawObject(objectColor);\n          }\n        \n        }\n      }\n    }\n  }\n}\n```\n\n## 다음 레벨 전환 함수:\n\n레벨의 모든 벽돌이 깨졌을 때 다음 레벨로 이동을 허용하는 함수입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvoid nextLevel() {\n  if(currentLevel < 5) {\n    currentLevel++;  \n    // Increase your ball speed by 20% for the next level\n    ballSpeedX += ballSpeedX * 0.2;\n    ballSpeedY += ballSpeedY * 0.2;\n\n    // Reset ball position and direction\n    ballPositionX = paddlePosition + PADDLE_WIDTH / 2;\n    ballPositionY = display.height() - PADDLE_HEIGHT - BALL_SIZE - 3;\n    ballDirectionX = 0;\n    ballDirectionY = 0;\n\n    // Reset bricks\n    for(int i = 0; i < NUM_BRICKS_Y; i++) {\n      for(int j = 0; j < NUM_BRICKS_X; j++) {\n        bricks[i][j] = true;\n      }\n    }\n\n    // Clear screen and reset lives\n    display.clearDisplay();\n    display.setCursor(0, 0);\n    display.print(\"Level \");\n    display.print(currentLevel);\n    display.display();\n    delay(20);\n    playGame();\n  }\n}\n```\n\n## 게임 시작 기능:\n\n게임이 시작될 때와 진행 중인 게임에서 필요한 작업을 제공하는 함수입니다.\n\n```js\nvoid playGame() {\n  // Adjust brick layout depending on level\n  int currentLevelLayout[NUM_BRICKS_Y][NUM_BRICKS_X];\n  for (int i = 0; i < NUM_BRICKS_Y; i++) {\n    for (int j = 0; j < NUM_BRICKS_X; j++) {\n      currentLevelLayout[i][j] = levelBricksLayouts[currentLevel - 1][i][j];\n    }\n  }\n\n  // Reset brick array\n  for (int i = 0; i < NUM_BRICKS_Y; i++) {\n    for (int j = 0; j < NUM_BRICKS_X; j++) {\n      bricks[i][j] = currentLevelLayout[i][j];\n    }\n  }\n\n  ballPositionX = paddlePosition + PADDLE_WIDTH / 2 - 6; \n  ballPositionY = display.height() - PADDLE_HEIGHT - BALL_SIZE - 3;\n  ballDirectionX = 0;\n  ballDirectionY = 0;\n\n  while (lives > 0) {\n    int lightSensorValue = analogRead(A1);\n    if (lightSensorValue < 15) {\n      backgroundColor = SSD1306_BLACK;\n      brickColor = SSD1306_WHITE;\n      paddleColor = SSD1306_WHITE;\n      ballColor = SSD1306_WHITE;\n      objectColor = SSD1306_WHITE;\n    } else { \n      backgroundColor = SSD1306_WHITE;\n      brickColor = SSD1306_BLACK;\n      paddleColor = SSD1306_BLACK;\n      ballColor = SSD1306_BLACK;\n      objectColor = SSD1306_BLACK;\n    }\n  \n    display.fillScreen(backgroundColor);\n\n    clearPaddle();\n    updatePaddle();\n    updateBall();\n    clearBall();\n    drawBricks(brickColor);\n    drawPaddle(paddleColor);\n    drawBall(ballColor);\n    checkBrickCollision();\n    updateObject(); \n    displayNumber(counter);\n    displayLives();\n    display.display();\n    \n    // Reads the potentiometer value and controls the movement of the paddle\n    int potValue = analogRead(A0);\n    int newPaddlePosition = map(potValue, 0, 1023, 0, display.width() - PADDLE_WIDTH);\n    \n    // If you move the paddle the ball starts to move\n    if (newPaddlePosition != paddlePosition && ballHitsPaddle()) {\n      // Determine the direction of movement of the paddle\n      if (paddlePosition > 50) {\n        ballDirectionX = -1; // Move right\n      } else if (paddlePosition < 50) {\n        ballDirectionX = 1; // Move left\n      } else {\n        ballDirectionX = 1; // Move left\n      }\n      ballDirectionY = -1; // Make the ball go up\n    }\n    clearPaddle();\n    // Update the position of the palette\n    paddlePosition = newPaddlePosition;\n\n    // Check if all bricks are broken\n    bool allBricksDestroyed = true;\n      for (int i = 0; i < NUM_BRICKS_Y; i++) {\n        for (int j = 0; j < NUM_BRICKS_X; j++) {\n          if (bricks[i][j]) {\n            allBricksDestroyed = false;\n            break;\n          }\n        }\n        if (!allBricksDestroyed) {\n          break;\n        }\n      }\n\n      // If all the bricks are broken go to the next level\n      if (allBricksDestroyed) {\n        display.clearDisplay();\n        display.display();\n        delay(5000);\n        nextLevel();\n        break;\n      }\n  }\n\n  if(lives == 0) {\n    // End game\n    gameOver();\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 게임 종료 함수:\n\n게임이 종료될 때 호출되는 함수입니다.\n\n```js\nvoid gameOver() {\n  display.clearDisplay();\n  display.setCursor(0, 0);\n  display.println(\"Game Over!\");\n  display.print(\"Score: \");\n  display.print(score);\n  display.display();\n  delay(3000); // 3초 대기\n  // 메인 메뉴로 돌아가기\n  menu = 1;\n  updateMenu();\n  lives = 3;\n}\n```\n\n프로젝트의 모든 코드를 포함한 소스 코드:\n\n<div class=\"content-ad\"></div>\n\n```js\n절차 상 표를 마크다운 형식으로 변경하였습니다.\n```\n\n<div class=\"content-ad\"></div>\n\n끝까지 읽어 주셔서 감사합니다. 떠나시기 전에 아래 사항을 고려해 주세요:\n\n- 저자를 박수로 응원하고 팔로우하기를 고려해 주세요! 👏\n- 저희를 팔로우하기: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼 방문하기: In Plain English | CoFeed | Venture | Cubed\n- Stackademic.com에서 더 많은 콘텐츠 확인하기","ogImage":{"url":"/assets/img/2024-06-23-CreatingaBrick-BreakingGameUsingProteusandArduinoIDE_0.png"},"coverImage":"/assets/img/2024-06-23-CreatingaBrick-BreakingGameUsingProteusandArduinoIDE_0.png","tag":["Tech"],"readingTime":17},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>본문에서 프로테우스와 아두이노 IDE를 사용하여 벽돌 깨기 게임을 만들어 보겠습니다. 필요한 절차를 단계별로 공유할 예정이에요. 시뮬레이션에서의 게임 모습은 다음과 같을 거에요.</p>\n<p><img src=\"/assets/img/2024-06-23-CreatingaBrick-BreakingGameUsingProteusandArduinoIDE_0.png\" alt=\"게임 이미지\"></p>\n<p>우선 내용을 간단히 설명해보려고 해요.</p>\n<h2>시작 화면 및 메뉴 옵션:</h2>\n<div class=\"content-ad\"></div>\n<p>먼저, 사용자에게 시작 화면이 표시됩니다. 이 화면에는 \"시작\" 및 \"종료\" 옵션이 포함되어 있습니다. 사용자는 버튼을 사용하여 이 옵션들 사이를 이동하고, \"선택\" 버튼으로 선택을 집니다.</p>\n<h2>게임 시작 및 종료 절차:</h2>\n<p>사용자가 \"시작\" 옵션을 선택하면 게임 화면이 열리고 게임이 시작됩니다. \"종료\" 옵션이 선택된 경우 \"저희 게임에 관심 가져 주셔서 감사합니다\"와 같은 메시지가 화면에 표시됩니다.</p>\n<h2>패들 조절:</h2>\n<div class=\"content-ad\"></div>\n<p>게임이 시작되면 사용자가 제어하는 패들이 포텐티오미터로 좌우로 움직입니다.</p>\n<p><strong>공의 움직임과 벽돌 파괴:</strong></p>\n<p>위에 위치한 패들에 의해 이뤄지는 공이 벽돌에 부딪혀 파괴됩니다. 동시에 공은 오른쪽, 왼쪽, 그리고 위쪽 벽에 부딪힐 때 방향을 바꿉니다.</p>\n<p><strong>점수 계산 절차:</strong></p>\n<div class=\"content-ad\"></div>\n<p>매 벽돌이 깨질 때마다 플레이어의 점수가 1점씩 올라갑니다. 이 점수는 플레이어의 성과를 추적하는 데 사용됩니다.</p>\n<h2>체력 게이지:</h2>\n<p>게임이 시작될 때 각 플레이어는 3개의 목숨을 가지고 있습니다. 공이 팔레트에서 빠져 떨어질 때마다 플레이어의 체력이 감소합니다. 목숨은 LED로 사용자에게 표시됩니다.</p>\n<h2>특별 아이템 및 체력 증가:</h2>\n<div class=\"content-ad\"></div>\n<p>매번 벽돌이 깨질 때마다 특별한 물건이 10%의 확률로 떨어집니다. 이 물건을 받은 플레이어는 체력이 1 증가합니다. 이 상태는 LED 표시기로 동시에 표시됩니다.</p>\n<h2>배경색 변경:</h2>\n<p>게임의 배경과 벽돌의 색상은 빛 센서가 감지한 빛의 양에 따라 변합니다. 빛이 켜지면 배경은 흰색이 되고 벽돌은 검은색이 됩니다.</p>\n<h2>레벨 변화와 속도 증가:</h2>\n<div class=\"content-ad\"></div>\n<p>매 레벨을 클리어할 때마다 벽돌 배치가 변경되고, 공의 속도도 이전 라운드 대비 20% 증가합니다.</p>\n<h2>게임 종료:</h2>\n<p>모든 목숨을 소진하면, 플레이어의 점수가 화면에 출력되고 그 후에 메뉴로 이동됩니다.</p>\n<h2>시뮬레이션에 필요한 도구들:</h2>\n<div class=\"content-ad\"></div>\n<ul>\n<li>아두이노 Uno</li>\n<li>Oled 스크린</li>\n<li>버튼</li>\n<li>LED</li>\n<li>가변 저항</li>\n<li>7 세그먼트 디스플레이</li>\n<li>광 센서</li>\n</ul>\n<p>프로테우스에 위의 부품들을 추가하고 필요한 곳에 사용해야 합니다.</p>\n<p>이제 프로젝트를 자세히 설명하겠습니다.</p>\n<h2>라이브러리 및 정의:</h2>\n<div class=\"content-ad\"></div>\n<p>이 섹션에서는 사용할 라이브러리와 상수들이 정의되어 있습니다.</p>\n<p>화면에 사용할 벽돌, 패들, 공, 및 객체들의 크기와 값을 여기에서 지정합니다.</p>\n<pre><code class=\"hljs language-js\">#include &#x3C;<span class=\"hljs-title class_\">Wire</span>.<span class=\"hljs-property\">h</span>>\n#include &#x3C;<span class=\"hljs-title class_\">Adafruit</span>_GFX.<span class=\"hljs-property\">h</span>>\n#include &#x3C;<span class=\"hljs-title class_\">Adafruit</span>_SSD1306.<span class=\"hljs-property\">h</span>>     \n#include &#x3C;<span class=\"hljs-variable constant_\">SPI</span>.<span class=\"hljs-property\">h</span>>\n\n#define <span class=\"hljs-variable constant_\">SCREEN_WIDTH</span> <span class=\"hljs-number\">128</span>\n#define <span class=\"hljs-variable constant_\">SCREEN_HEIGHT</span> <span class=\"hljs-number\">64</span>\n#define <span class=\"hljs-variable constant_\">SCREEN_ADDRESS</span> <span class=\"hljs-number\">0x3D</span>\n#define <span class=\"hljs-variable constant_\">OLED_RESET</span> <span class=\"hljs-number\">1</span> \n\n#define <span class=\"hljs-variable constant_\">BRICK_WIDTH</span> <span class=\"hljs-number\">31</span>\n#define <span class=\"hljs-variable constant_\">BRICK_HEIGHT</span> <span class=\"hljs-number\">10</span>\n#define <span class=\"hljs-variable constant_\">BRICK_GAP_X</span> <span class=\"hljs-number\">1</span>\n#define <span class=\"hljs-variable constant_\">BRICK_GAP_Y</span> <span class=\"hljs-number\">1</span>\n#define <span class=\"hljs-variable constant_\">NUM_BRICKS_X</span> <span class=\"hljs-number\">4</span>\n#define <span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span> <span class=\"hljs-number\">2</span>\n\n#define <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span> <span class=\"hljs-number\">40</span> \n#define <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span> <span class=\"hljs-number\">3</span>\n#define <span class=\"hljs-variable constant_\">PADDLE_SPEED</span> <span class=\"hljs-number\">5</span> \n\n#define <span class=\"hljs-variable constant_\">BALL_SIZE</span> <span class=\"hljs-number\">2</span>\n#define <span class=\"hljs-variable constant_\">BALL_SPEED_X</span> <span class=\"hljs-number\">3</span> \n#define <span class=\"hljs-variable constant_\">BALL_SPEED_Y</span> <span class=\"hljs-number\">3</span> \n\n#define <span class=\"hljs-variable constant_\">OBJECT_SIZE</span> <span class=\"hljs-number\">7</span>\n#define <span class=\"hljs-variable constant_\">OBJECT_SPEED</span> <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-title class_\">Adafruit</span>_SSD1306 <span class=\"hljs-title function_\">display</span>(<span class=\"hljs-variable constant_\">SCREEN_WIDTH</span>, <span class=\"hljs-variable constant_\">SCREEN_HEIGHT</span>, &#x26;<span class=\"hljs-title class_\">Wire</span>, <span class=\"hljs-variable constant_\">OLED_RESET</span>);\n\nint paddlePosition = <span class=\"hljs-number\">50</span>;\nint paddleDirection = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 패들 이동 방향을 유지합니다: -1 왼쪽, 1 오른쪽, 0 가만히</span>\nint ballPositionX ;\nint ballPositionY;\nint ballDirectionX;\nint ballDirectionY;\n\n<span class=\"hljs-comment\">// 7 세그먼트 디스플레이 핀 연결</span>\n<span class=\"hljs-keyword\">const</span> int segmentPins[] = {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>};\n\n<span class=\"hljs-comment\">// 버튼 핀 연결</span>\n<span class=\"hljs-keyword\">const</span> int upButton = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">const</span> int downButton = <span class=\"hljs-number\">11</span>;\n<span class=\"hljs-keyword\">const</span> int selectButton = <span class=\"hljs-number\">12</span>;\n\nint counter = <span class=\"hljs-number\">0</span>;\nint score = <span class=\"hljs-number\">0</span>;\nint menu = <span class=\"hljs-number\">1</span>;\nint currentLevel = <span class=\"hljs-number\">1</span>;\n\nint ballSpeedX = <span class=\"hljs-variable constant_\">BALL_SPEED_X</span>;\nint ballSpeedY = <span class=\"hljs-variable constant_\">BALL_SPEED_Y</span>;\n\n<span class=\"hljs-comment\">// 각 벽돌의 상태를 추적하는 2D 배열 정의</span>\nbool bricks[<span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>][<span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>];\n\n<span class=\"hljs-comment\">// 각 레벨별 벽돌 레이아웃 정의</span>\n<span class=\"hljs-keyword\">const</span> int levelBricksLayouts[][<span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>][<span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>] = {\n  <span class=\"hljs-comment\">// 레벨 1</span>\n  {\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>},\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>}\n  },\n  <span class=\"hljs-comment\">// 레벨 2</span>\n  {\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>},\n    {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>}\n  },\n  <span class=\"hljs-comment\">// 레벨 3</span>\n  {\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>},\n    {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>}\n  },\n  <span class=\"hljs-comment\">// 레벨 4</span>\n  {\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>},\n    {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>}\n  },\n  <span class=\"hljs-comment\">// 레벨 5</span>\n  {\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>},\n    {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>}\n  }\n};\n\nint lives = <span class=\"hljs-number\">3</span>; \n<span class=\"hljs-keyword\">const</span> int lifeLEDs[] = {<span class=\"hljs-number\">13</span>,<span class=\"hljs-variable constant_\">A2</span>,<span class=\"hljs-variable constant_\">A3</span>}; \n\nbool objectActive = <span class=\"hljs-literal\">false</span>;\nint objectX, objectY;\n\nuint16_t backgroundColor, brickColor, paddleColor, ballColor, objectColor;\n</code></pre>\n<h2>설정 함수:</h2>\n<div class=\"content-ad\"></div>\n<p>설정 함수는 초기 설정을 수행합니다. 화면 초기화, 입력/출력 핀 설정, 메뉴 표시 등의 작업이 여기서 수행됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) {\n  display.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-title class_\">SSD1306</span>_SWITCHCAPVCC, <span class=\"hljs-variable constant_\">SCREEN_ADDRESS</span>);\n  \n  display.<span class=\"hljs-title function_\">clearDisplay</span>();\n  display.<span class=\"hljs-title function_\">display</span>();\n  display.<span class=\"hljs-title function_\">setTextColor</span>(<span class=\"hljs-title class_\">SSD1306</span>_WHITE, <span class=\"hljs-title class_\">SSD1306</span>_BLACK);\n\n  <span class=\"hljs-comment\">// 포텐셔미터 핀을 입력으로 설정</span>\n  <span class=\"hljs-title function_\">pinMode</span>(<span class=\"hljs-variable constant_\">A0</span>, <span class=\"hljs-variable constant_\">INPUT</span>);\n\n  <span class=\"hljs-keyword\">for</span>(int i = <span class=\"hljs-number\">0</span>; i&#x3C;<span class=\"hljs-number\">8</span>; i++) {\n    <span class=\"hljs-title function_\">pinMode</span>(segmentPins[i], <span class=\"hljs-variable constant_\">OUTPUT</span>);\n  }\n\n  <span class=\"hljs-comment\">// 버튼 핀을 입력으로 설정</span>\n  <span class=\"hljs-title function_\">pinMode</span>(upButton, <span class=\"hljs-variable constant_\">INPUT</span>);\n  <span class=\"hljs-title function_\">pinMode</span>(downButton, <span class=\"hljs-variable constant_\">INPUT</span>);\n  <span class=\"hljs-title function_\">pinMode</span>(selectButton, <span class=\"hljs-variable constant_\">INPUT</span>);\n\n  <span class=\"hljs-title function_\">digitalWrite</span>(upButton, <span class=\"hljs-variable constant_\">HIGH</span>);\n  <span class=\"hljs-title function_\">digitalWrite</span>(downButton, <span class=\"hljs-variable constant_\">HIGH</span>);\n  <span class=\"hljs-title function_\">digitalWrite</span>(selectButton, <span class=\"hljs-variable constant_\">HIGH</span>);\n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>);\n  <span class=\"hljs-title function_\">updateMenu</span>();\n\n  <span class=\"hljs-comment\">// 초기에 모든 벽을 솔리드로 설정</span>\n  <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>; i++) {\n    <span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>; j++) {\n      bricks[i][j] = <span class=\"hljs-literal\">true</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">for</span>(int i = <span class=\"hljs-number\">0</span>; i&#x3C;<span class=\"hljs-number\">3</span>; i++) {\n    <span class=\"hljs-title function_\">pinMode</span>(lifeLEDs[i], <span class=\"hljs-variable constant_\">OUTPUT</span>);\n  }\n\n  <span class=\"hljs-comment\">// 광센서의 핀을 입력으로 설정</span>\n  <span class=\"hljs-title function_\">pinMode</span>(<span class=\"hljs-variable constant_\">A1</span>, <span class=\"hljs-variable constant_\">INPUT</span>);\n}\n</code></pre>\n<h2>루프 함수:</h2>\n<p>이 함수는 버튼 상태를 확인하고 필요한 기능을 제공합니다. 각 사이클마다 7세그먼트 디스플레이에 카운터의 값을 표시합니다.</p>\n<div class=\"content-ad\"></div>\n<h2>숫자 표시 함수:</h2>\n<p>이 함수는 7세그먼트 디스플레이에 특정 숫자를 표시하는 데 사용됩니다. 이 숫자는 0에서 9 사이여야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayNumber</span>(<span class=\"hljs-params\">int num</span>) {\n  <span class=\"hljs-keyword\">const</span> int numbers[][<span class=\"hljs-number\">8</span>] = {\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>}, <span class=\"hljs-comment\">//0</span>\n    {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>}, <span class=\"hljs-comment\">//1</span>\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>}, <span class=\"hljs-comment\">//2</span>\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>}, <span class=\"hljs-comment\">//3</span>\n    {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>}, <span class=\"hljs-comment\">//4</span>\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>}, <span class=\"hljs-comment\">//5</span>\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>}, <span class=\"hljs-comment\">//6</span>\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>}, <span class=\"hljs-comment\">//7</span>\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>}, <span class=\"hljs-comment\">//8</span>\n    {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>}  <span class=\"hljs-comment\">//9</span>\n  };\n\n  <span class=\"hljs-keyword\">for</span>(int i = <span class=\"hljs-number\">0</span>; i&#x3C;<span class=\"hljs-number\">8</span>; i++) {\n    <span class=\"hljs-title function_\">digitalWrite</span>(segmentPins[i], numbers[num][i]);\n  } \n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>메뉴 업데이트 기능:</h2>\n<p>이 함수는 메뉴를 업데이트하는 데 사용됩니다. 사용자가 선택한 메뉴를 강조합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateMenu</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">switch</span>(menu) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n      menu = <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n      display.<span class=\"hljs-title function_\">clearDisplay</span>();\n      display.<span class=\"hljs-title function_\">setCursor</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n      display.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"> 시작\"</span>);\n      display.<span class=\"hljs-title function_\">setCursor</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>);\n      display.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"  종료\"</span>);\n      display.<span class=\"hljs-title function_\">display</span>();\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n      display.<span class=\"hljs-title function_\">clearDisplay</span>();\n      display.<span class=\"hljs-title function_\">setCursor</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n      display.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"  시작\"</span>);\n      display.<span class=\"hljs-title function_\">setCursor</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>);\n      display.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"> 종료\"</span>);\n      display.<span class=\"hljs-title function_\">display</span>();\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n      menu = <span class=\"hljs-number\">2</span>;\n      <span class=\"hljs-keyword\">break</span>;\n  }\n}\n</code></pre>\n<h2>동작 실행 함수:</h2>\n<div class=\"content-ad\"></div>\n<p>사용자가 선택한 작업을 수행하는 함수입니다. 시작 및 종료 옵션에 따라 서로 다른 작업을 수행합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">executeAction</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">switch</span>(menu) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n      <span class=\"hljs-title function_\">action1</span>();\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n      <span class=\"hljs-title function_\">action2</span>();\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-attr\">default</span>:\n      <span class=\"hljs-keyword\">break</span>;\n  }\n}\n\n<span class=\"hljs-comment\">// 시작 작업</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">action1</span>(<span class=\"hljs-params\"></span>) {\n  display.<span class=\"hljs-title function_\">clearDisplay</span>();\n  display.<span class=\"hljs-title function_\">setCursor</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-title function_\">playGame</span>();\n  display.<span class=\"hljs-title function_\">display</span>();\n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1500</span>);\n}\n\n<span class=\"hljs-comment\">// 종료 작업</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">action2</span>(<span class=\"hljs-params\"></span>) {\n  display.<span class=\"hljs-title function_\">clearDisplay</span>();\n  display.<span class=\"hljs-title function_\">setCursor</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n  display.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Thank you for your interest in our game....\"</span>);\n  display.<span class=\"hljs-title function_\">display</span>();\n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1500</span>);\n}\n</code></pre>\n<h2>벽돌 그리기 함수:</h2>\n<p>게임 화면에 벽돌을 그리는 함수입니다. 특정 색상의 벽돌을 그립니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">drawBricks</span>(<span class=\"hljs-params\">uint16_t color</span>) {\n  <span class=\"hljs-keyword\">for</span>(int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>; i++) {\n    <span class=\"hljs-keyword\">for</span>(int j = <span class=\"hljs-number\">0</span>; j &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>; j++) {\n      int brickX = j * (<span class=\"hljs-variable constant_\">BRICK_WIDTH</span> + <span class=\"hljs-variable constant_\">BRICK_GAP_X</span>);\n      int brickY = i * (<span class=\"hljs-variable constant_\">BRICK_HEIGHT</span> + <span class=\"hljs-variable constant_\">BRICK_GAP_Y</span>);\n      <span class=\"hljs-keyword\">if</span> (bricks[i][j]) { <span class=\"hljs-comment\">// Only draw solid bricks</span>\n        display.<span class=\"hljs-title function_\">fillRect</span>(brickX + <span class=\"hljs-number\">1</span>, brickY + <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">BRICK_WIDTH</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">BRICK_HEIGHT</span> - <span class=\"hljs-number\">1</span>, color);\n      }\n    }\n  }\n}\n</code></pre>\n<h2>패들 그리기, 삭제 및 업데이트 기능:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 화면에 패들을 그리는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">drawPaddle</span>(<span class=\"hljs-params\">uint16_t color</span>) {\n  display.<span class=\"hljs-title function_\">fillRect</span>(paddlePosition, display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span> - <span class=\"hljs-number\">2</span>, <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span>, <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span>, color);\n}\n\n<span class=\"hljs-comment\">// 이전 패들 위치를 지우는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clearPaddle</span>(<span class=\"hljs-params\"></span>) {\n  display.<span class=\"hljs-title function_\">fillRect</span>(paddlePosition, display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span> - <span class=\"hljs-number\">2</span>, <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span>, <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span>, <span class=\"hljs-title class_\">SSD1306</span>_BLACK);\n}\n\n<span class=\"hljs-comment\">// 패들의 위치를 포텐셔미터에서 받은 데이터에 따라 업데이트하는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updatePaddle</span>(<span class=\"hljs-params\"></span>) {\n  int potValue = <span class=\"hljs-title function_\">analogRead</span>(<span class=\"hljs-variable constant_\">A0</span>);\n\n  paddlePosition = <span class=\"hljs-title function_\">map</span>(potValue, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1023</span>, <span class=\"hljs-number\">0</span>, display.<span class=\"hljs-title function_\">width</span>() - <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span>);\n}\n</code></pre>\n<h2>공 그리기, 삭제 및 업데이트 기능:</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 화면에 공을 그리는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">drawBall</span>(<span class=\"hljs-params\">uint16_t color</span>) {\n  display.<span class=\"hljs-title function_\">fillCircle</span>(ballPositionX, ballPositionY, <span class=\"hljs-variable constant_\">BALL_SIZE</span>, color);\n}\n\n<span class=\"hljs-comment\">// 이전 공 위치를 지우는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clearBall</span>(<span class=\"hljs-params\"></span>) {\n  display.<span class=\"hljs-title function_\">fillCircle</span>(ballPositionX - ballDirectionX * <span class=\"hljs-variable constant_\">BALL_SPEED_X</span>, ballPositionY - ballDirectionY * <span class=\"hljs-variable constant_\">BALL_SPEED_Y</span>, <span class=\"hljs-variable constant_\">BALL_SIZE</span>, <span class=\"hljs-title class_\">SSD1306</span>_BLACK);\n}\n\n<span class=\"hljs-comment\">// 공의 위치와 움직임을 업데이트하는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateBall</span>(<span class=\"hljs-params\"></span>) {\n  ballPositionX += ballDirectionX * ballSpeedX;\n  ballPositionY += ballDirectionY * ballSpeedY;\n\n  <span class=\"hljs-comment\">// 왼쪽 가장자리 충돌 확인 및 방향 전환</span>\n  <span class=\"hljs-keyword\">if</span>(ballPositionX &#x3C;= <span class=\"hljs-number\">0</span>) {\n    ballDirectionX *= -<span class=\"hljs-number\">1</span>;\n  } \n  <span class=\"hljs-comment\">// 오른쪽 가장자리 충돌 확인 및 방향 전환</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(ballPositionX >= display.<span class=\"hljs-title function_\">width</span>() - <span class=\"hljs-variable constant_\">BALL_SIZE</span>) {\n    ballDirectionX *= -<span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">// 위쪽 가장자리 충돌 확인</span>\n  <span class=\"hljs-keyword\">if</span>(ballPositionY &#x3C;= <span class=\"hljs-number\">0</span>) {\n    ballDirectionY *= -<span class=\"hljs-number\">1</span>;\n  } \n\n  <span class=\"hljs-title function_\">checkPaddleCollision</span>();\n\n  <span class=\"hljs-comment\">// 아래쪽 가장자리 충돌 확인</span>\n  <span class=\"hljs-keyword\">if</span>(ballPositionY >= display.<span class=\"hljs-title function_\">height</span>()) {\n    <span class=\"hljs-title function_\">loseLife</span>();\n  }\n}\n</code></pre>\n<h2>생명과 생명을 잃은 상태를 보여주는 함수:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 사용자의 생명을 표시하는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayLives</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++) {\n    <span class=\"hljs-title function_\">digitalWrite</span>(lifeLEDs[i], i &#x3C; lives ? <span class=\"hljs-variable constant_\">HIGH</span> : <span class=\"hljs-variable constant_\">LOW</span>); <span class=\"hljs-comment\">// 건강 상태에 따라 LED 켜기/끄기</span>\n  }\n}\n\n<span class=\"hljs-comment\">// 사용자의 생명을 잃는 상황을 처리하는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loseLife</span>(<span class=\"hljs-params\"></span>) {\n  lives--;\n  <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++) {\n    <span class=\"hljs-title function_\">digitalWrite</span>(lifeLEDs[i], i &#x3C; lives ? <span class=\"hljs-variable constant_\">HIGH</span> : <span class=\"hljs-variable constant_\">LOW</span>); <span class=\"hljs-comment\">// 건강 상태에 따라 LED 켜기/끄기</span>\n  }\n\n  <span class=\"hljs-comment\">// 사용자가 건강 상태가 낮을 때 공을 트랙 위에 시작하도록 함</span>\n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">100</span>);\n  ballPositionX = paddlePosition + <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span> / <span class=\"hljs-number\">2</span>;\n  ballPositionY = display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span> - <span class=\"hljs-variable constant_\">BALL_SIZE</span> - <span class=\"hljs-number\">3</span>;\n  ballDirectionX = <span class=\"hljs-number\">0</span>;\n  ballDirectionY = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-title function_\">displayLives</span>();\n  objectActive = <span class=\"hljs-literal\">false</span>;\n  display.<span class=\"hljs-title function_\">fillRect</span>(objectX, objectY, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, <span class=\"hljs-title class_\">SSD1306</span>_BLACK);\n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">100</span>); \n}\n</code></pre>\n<h2>패들과 공의 충돌 함수:</h2>\n<div class=\"content-ad\"></div>\n<p>볼이 패들에 닿았는지 확인하는 함수입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkPaddleCollision</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 패들과 볼의 충돌 확인</span>\n    <span class=\"hljs-keyword\">if</span> (ballPositionY + <span class=\"hljs-variable constant_\">BALL_SIZE</span> >= display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span> - <span class=\"hljs-variable constant_\">BALL_SPEED_Y</span> &#x26;&#x26; ballPositionX + <span class=\"hljs-variable constant_\">BALL_SIZE</span> >= paddlePosition &#x26;&#x26; ballPositionX &#x3C;= paddlePosition + <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span>) {\n        <span class=\"hljs-comment\">// 패들의 왼쪽 부분</span>\n        <span class=\"hljs-keyword\">if</span> (ballPositionX &#x3C;= paddlePosition + <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span> / <span class=\"hljs-number\">3</span>) {\n            ballDirectionX = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 왼쪽으로 볼 진행</span>\n            ballDirectionY = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 볼의 방향을 위쪽으로 전환</span>\n        }\n        <span class=\"hljs-comment\">// 패들의 중간 부분</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ballPositionX &#x3C;= paddlePosition + <span class=\"hljs-number\">2</span> * <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span> / <span class=\"hljs-number\">3</span>) {\n            ballDirectionX = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 볼의 방향을 바꾸지 않음</span>\n            ballDirectionY = <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-comment\">// 패들의 오른쪽 부분</span>\n        <span class=\"hljs-keyword\">else</span> {\n            ballDirectionX = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 오른쪽으로 볼 진행</span>\n            ballDirectionY = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 볼의 방향을 위쪽으로 전환</span>\n        }  \n    }\n}\n</code></pre>\n<h2>볼이 패들과 충돌하는지 확인하는 함수:</h2>\n<p>볼이 패들과 충돌하는지 확인하고 true 또는 false를 반환합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">bool <span class=\"hljs-title function_\">ballHitsPaddle</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 패들과 공의 충돌 제어</span>\n  <span class=\"hljs-keyword\">if</span> (ballPositionY + <span class=\"hljs-variable constant_\">BALL_SIZE</span> >= display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span> - <span class=\"hljs-variable constant_\">BALL_SPEED_Y</span> &#x26;&#x26; ballPositionX + <span class=\"hljs-variable constant_\">BALL_SIZE</span> >= paddlePosition &#x26;&#x26; ballPositionX &#x3C;= paddlePosition + <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n}\n</code></pre>\n<h2>객체 그리기, 업데이트 함수:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 화면에 특별한 객체를 그리는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">drawObject</span>(<span class=\"hljs-params\">uint16_t color</span>) {\n  display.<span class=\"hljs-title function_\">fillRect</span>(objectX, objectY, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, color);\n}\n\n<span class=\"hljs-comment\">// 특별한 객체의 위치를 업데이트하는 함수</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateObject</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 객체가 활성화되어 있고 화면 아래로 떨어지는 방향으로 이동하지 않으면 이동</span>\n  <span class=\"hljs-keyword\">if</span> (objectActive &#x26;&#x26; objectY &#x3C; display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>) {\n    <span class=\"hljs-comment\">// 객체 지우기</span>\n    display.<span class=\"hljs-title function_\">fillRect</span>(objectX, objectY, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, <span class=\"hljs-title class_\">SSD1306</span>_BLACK);\n    <span class=\"hljs-comment\">// 새로운 위치 업데이트</span>\n    objectY += <span class=\"hljs-variable constant_\">OBJECT_SPEED</span>;\n\n    <span class=\"hljs-comment\">// 플레이어가 객체를 잡았을 경우</span>\n    <span class=\"hljs-keyword\">if</span> (objectY >= display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span> - <span class=\"hljs-variable constant_\">OBJECT_SIZE</span> &#x26;&#x26; objectX >= paddlePosition &#x26;&#x26; objectX &#x3C;= paddlePosition + <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span>) {\n      objectActive = <span class=\"hljs-literal\">false</span>;\n      lives++; <span class=\"hljs-comment\">// 생명 카운트 증가</span>\n\n      <span class=\"hljs-comment\">// LED로 생명 수 표시</span>\n      <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++) {\n        <span class=\"hljs-title function_\">digitalWrite</span>(lifeLEDs[i], i &#x3C; lives ? <span class=\"hljs-variable constant_\">HIGH</span> : <span class=\"hljs-variable constant_\">LOW</span>);\n      }\n      display.<span class=\"hljs-title function_\">fillRect</span>(objectX, objectY, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, <span class=\"hljs-title class_\">SSD1306</span>_BLACK);\n    }\n\n    <span class=\"hljs-comment\">// 객체가 화면 하단 가장자리에 도착했을 경우</span>\n    <span class=\"hljs-keyword\">if</span> (objectY >= display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>) {\n      display.<span class=\"hljs-title function_\">fillRect</span>(objectX, objectY, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>, <span class=\"hljs-title class_\">SSD1306</span>_BLACK);\n    }\n    <span class=\"hljs-title function_\">drawObject</span>(objectColor);\n  }\n}\n</code></pre>\n<h2>벽돌 충돌 확인:</h2>\n<div class=\"content-ad\"></div>\n<p>볼이 벽돌에 충돌하는지 확인합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkBrickCollision</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">for</span>(int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>; i++) {\n    <span class=\"hljs-keyword\">for</span>(int j = <span class=\"hljs-number\">0</span>; j &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>; j++) {\n      <span class=\"hljs-keyword\">if</span> (bricks[i][j]) { <span class=\"hljs-comment\">// Check to only crash into solid bricks</span>\n        int brickX = j * (<span class=\"hljs-variable constant_\">BRICK_WIDTH</span> + <span class=\"hljs-variable constant_\">BRICK_GAP_X</span>);\n        int brickY = i * (<span class=\"hljs-variable constant_\">BRICK_HEIGHT</span> + <span class=\"hljs-variable constant_\">BRICK_GAP_Y</span>);\n\n        <span class=\"hljs-keyword\">if</span> (ballPositionX + <span class=\"hljs-variable constant_\">BALL_SIZE</span> >= brickX &#x26;&#x26; ballPositionX &#x3C;= brickX + <span class=\"hljs-variable constant_\">BRICK_WIDTH</span> &#x26;&#x26; ballPositionY + <span class=\"hljs-variable constant_\">BALL_SIZE</span> >= brickY &#x26;&#x26; ballPositionY &#x3C;= brickY + <span class=\"hljs-variable constant_\">BRICK_HEIGHT</span>) {\n          ballDirectionY *= -<span class=\"hljs-number\">1</span>; \n          bricks[i][j] = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// Mark the brick as broken</span>\n          <span class=\"hljs-title function_\">incrementCounter</span>(); <span class=\"hljs-comment\">// Increase score</span>\n          display.<span class=\"hljs-title function_\">fillRect</span>(brickX + <span class=\"hljs-number\">1</span>, brickY + <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">BRICK_WIDTH</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable constant_\">BRICK_HEIGHT</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-title class_\">SSD1306</span>_BLACK);\n        \n          <span class=\"hljs-comment\">// Creating an object every time a brick is broken</span>\n          <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">random</span>(<span class=\"hljs-number\">100</span>) &#x3C; <span class=\"hljs-number\">10</span>) { <span class=\"hljs-comment\">// 10 percent probability of creating an object</span>\n            objectActive = <span class=\"hljs-literal\">true</span>;\n            objectX = brickX + (<span class=\"hljs-variable constant_\">BRICK_WIDTH</span> - <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>) / <span class=\"hljs-number\">2</span>;\n            objectY = brickY + (<span class=\"hljs-variable constant_\">BRICK_HEIGHT</span> - <span class=\"hljs-variable constant_\">OBJECT_SIZE</span>) / <span class=\"hljs-number\">2</span>;;\n            <span class=\"hljs-title function_\">drawObject</span>(objectColor);\n          }\n        \n        }\n      }\n    }\n  }\n}\n</code></pre>\n<h2>다음 레벨 전환 함수:</h2>\n<p>레벨의 모든 벽돌이 깨졌을 때 다음 레벨로 이동을 허용하는 함수입니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">nextLevel</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span>(currentLevel &#x3C; <span class=\"hljs-number\">5</span>) {\n    currentLevel++;  \n    <span class=\"hljs-comment\">// Increase your ball speed by 20% for the next level</span>\n    ballSpeedX += ballSpeedX * <span class=\"hljs-number\">0.2</span>;\n    ballSpeedY += ballSpeedY * <span class=\"hljs-number\">0.2</span>;\n\n    <span class=\"hljs-comment\">// Reset ball position and direction</span>\n    ballPositionX = paddlePosition + <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span> / <span class=\"hljs-number\">2</span>;\n    ballPositionY = display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span> - <span class=\"hljs-variable constant_\">BALL_SIZE</span> - <span class=\"hljs-number\">3</span>;\n    ballDirectionX = <span class=\"hljs-number\">0</span>;\n    ballDirectionY = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// Reset bricks</span>\n    <span class=\"hljs-keyword\">for</span>(int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>; i++) {\n      <span class=\"hljs-keyword\">for</span>(int j = <span class=\"hljs-number\">0</span>; j &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>; j++) {\n        bricks[i][j] = <span class=\"hljs-literal\">true</span>;\n      }\n    }\n\n    <span class=\"hljs-comment\">// Clear screen and reset lives</span>\n    display.<span class=\"hljs-title function_\">clearDisplay</span>();\n    display.<span class=\"hljs-title function_\">setCursor</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n    display.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Level \"</span>);\n    display.<span class=\"hljs-title function_\">print</span>(currentLevel);\n    display.<span class=\"hljs-title function_\">display</span>();\n    <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">20</span>);\n    <span class=\"hljs-title function_\">playGame</span>();\n  }\n}\n</code></pre>\n<h2>게임 시작 기능:</h2>\n<p>게임이 시작될 때와 진행 중인 게임에서 필요한 작업을 제공하는 함수입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">playGame</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// Adjust brick layout depending on level</span>\n  int currentLevelLayout[<span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>][<span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>];\n  <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>; i++) {\n    <span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>; j++) {\n      currentLevelLayout[i][j] = levelBricksLayouts[currentLevel - <span class=\"hljs-number\">1</span>][i][j];\n    }\n  }\n\n  <span class=\"hljs-comment\">// Reset brick array</span>\n  <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>; i++) {\n    <span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>; j++) {\n      bricks[i][j] = currentLevelLayout[i][j];\n    }\n  }\n\n  ballPositionX = paddlePosition + <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span> / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">6</span>; \n  ballPositionY = display.<span class=\"hljs-title function_\">height</span>() - <span class=\"hljs-variable constant_\">PADDLE_HEIGHT</span> - <span class=\"hljs-variable constant_\">BALL_SIZE</span> - <span class=\"hljs-number\">3</span>;\n  ballDirectionX = <span class=\"hljs-number\">0</span>;\n  ballDirectionY = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">while</span> (lives > <span class=\"hljs-number\">0</span>) {\n    int lightSensorValue = <span class=\"hljs-title function_\">analogRead</span>(<span class=\"hljs-variable constant_\">A1</span>);\n    <span class=\"hljs-keyword\">if</span> (lightSensorValue &#x3C; <span class=\"hljs-number\">15</span>) {\n      backgroundColor = <span class=\"hljs-title class_\">SSD1306</span>_BLACK;\n      brickColor = <span class=\"hljs-title class_\">SSD1306</span>_WHITE;\n      paddleColor = <span class=\"hljs-title class_\">SSD1306</span>_WHITE;\n      ballColor = <span class=\"hljs-title class_\">SSD1306</span>_WHITE;\n      objectColor = <span class=\"hljs-title class_\">SSD1306</span>_WHITE;\n    } <span class=\"hljs-keyword\">else</span> { \n      backgroundColor = <span class=\"hljs-title class_\">SSD1306</span>_WHITE;\n      brickColor = <span class=\"hljs-title class_\">SSD1306</span>_BLACK;\n      paddleColor = <span class=\"hljs-title class_\">SSD1306</span>_BLACK;\n      ballColor = <span class=\"hljs-title class_\">SSD1306</span>_BLACK;\n      objectColor = <span class=\"hljs-title class_\">SSD1306</span>_BLACK;\n    }\n  \n    display.<span class=\"hljs-title function_\">fillScreen</span>(backgroundColor);\n\n    <span class=\"hljs-title function_\">clearPaddle</span>();\n    <span class=\"hljs-title function_\">updatePaddle</span>();\n    <span class=\"hljs-title function_\">updateBall</span>();\n    <span class=\"hljs-title function_\">clearBall</span>();\n    <span class=\"hljs-title function_\">drawBricks</span>(brickColor);\n    <span class=\"hljs-title function_\">drawPaddle</span>(paddleColor);\n    <span class=\"hljs-title function_\">drawBall</span>(ballColor);\n    <span class=\"hljs-title function_\">checkBrickCollision</span>();\n    <span class=\"hljs-title function_\">updateObject</span>(); \n    <span class=\"hljs-title function_\">displayNumber</span>(counter);\n    <span class=\"hljs-title function_\">displayLives</span>();\n    display.<span class=\"hljs-title function_\">display</span>();\n    \n    <span class=\"hljs-comment\">// Reads the potentiometer value and controls the movement of the paddle</span>\n    int potValue = <span class=\"hljs-title function_\">analogRead</span>(<span class=\"hljs-variable constant_\">A0</span>);\n    int newPaddlePosition = <span class=\"hljs-title function_\">map</span>(potValue, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1023</span>, <span class=\"hljs-number\">0</span>, display.<span class=\"hljs-title function_\">width</span>() - <span class=\"hljs-variable constant_\">PADDLE_WIDTH</span>);\n    \n    <span class=\"hljs-comment\">// If you move the paddle the ball starts to move</span>\n    <span class=\"hljs-keyword\">if</span> (newPaddlePosition != paddlePosition &#x26;&#x26; <span class=\"hljs-title function_\">ballHitsPaddle</span>()) {\n      <span class=\"hljs-comment\">// Determine the direction of movement of the paddle</span>\n      <span class=\"hljs-keyword\">if</span> (paddlePosition > <span class=\"hljs-number\">50</span>) {\n        ballDirectionX = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Move right</span>\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (paddlePosition &#x3C; <span class=\"hljs-number\">50</span>) {\n        ballDirectionX = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Move left</span>\n      } <span class=\"hljs-keyword\">else</span> {\n        ballDirectionX = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Move left</span>\n      }\n      ballDirectionY = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Make the ball go up</span>\n    }\n    <span class=\"hljs-title function_\">clearPaddle</span>();\n    <span class=\"hljs-comment\">// Update the position of the palette</span>\n    paddlePosition = newPaddlePosition;\n\n    <span class=\"hljs-comment\">// Check if all bricks are broken</span>\n    bool allBricksDestroyed = <span class=\"hljs-literal\">true</span>;\n      <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_Y</span>; i++) {\n        <span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &#x3C; <span class=\"hljs-variable constant_\">NUM_BRICKS_X</span>; j++) {\n          <span class=\"hljs-keyword\">if</span> (bricks[i][j]) {\n            allBricksDestroyed = <span class=\"hljs-literal\">false</span>;\n            <span class=\"hljs-keyword\">break</span>;\n          }\n        }\n        <span class=\"hljs-keyword\">if</span> (!allBricksDestroyed) {\n          <span class=\"hljs-keyword\">break</span>;\n        }\n      }\n\n      <span class=\"hljs-comment\">// If all the bricks are broken go to the next level</span>\n      <span class=\"hljs-keyword\">if</span> (allBricksDestroyed) {\n        display.<span class=\"hljs-title function_\">clearDisplay</span>();\n        display.<span class=\"hljs-title function_\">display</span>();\n        <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">5000</span>);\n        <span class=\"hljs-title function_\">nextLevel</span>();\n        <span class=\"hljs-keyword\">break</span>;\n      }\n  }\n\n  <span class=\"hljs-keyword\">if</span>(lives == <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-comment\">// End game</span>\n    <span class=\"hljs-title function_\">gameOver</span>();\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>게임 종료 함수:</h2>\n<p>게임이 종료될 때 호출되는 함수입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">gameOver</span>(<span class=\"hljs-params\"></span>) {\n  display.<span class=\"hljs-title function_\">clearDisplay</span>();\n  display.<span class=\"hljs-title function_\">setCursor</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n  display.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"Game Over!\"</span>);\n  display.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Score: \"</span>);\n  display.<span class=\"hljs-title function_\">print</span>(score);\n  display.<span class=\"hljs-title function_\">display</span>();\n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">3000</span>); <span class=\"hljs-comment\">// 3초 대기</span>\n  <span class=\"hljs-comment\">// 메인 메뉴로 돌아가기</span>\n  menu = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-title function_\">updateMenu</span>();\n  lives = <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<p>프로젝트의 모든 코드를 포함한 소스 코드:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">절차 상 표를 마크다운 형식으로 변경하였습니다.\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>끝까지 읽어 주셔서 감사합니다. 떠나시기 전에 아래 사항을 고려해 주세요:</p>\n<ul>\n<li>저자를 박수로 응원하고 팔로우하기를 고려해 주세요! 👏</li>\n<li>저희를 팔로우하기: X | LinkedIn | YouTube | Discord</li>\n<li>다른 플랫폼 방문하기: In Plain English | CoFeed | Venture | Cubed</li>\n<li>Stackademic.com에서 더 많은 콘텐츠 확인하기</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}