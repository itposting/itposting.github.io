{"pageProps":{"post":{"title":"ESP8266 JSON 데이터 다루기","description":"","date":"2024-05-27 13:17","slug":"2024-05-27-ESP8266HandlingdatainJSON","content":"\n\n![ESP8266 handling data in JSON](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_0.png)\n\nESP8266는 가장 많이 사용되는 WiFi 마이크로컨트롤러 보드 중 하나입니다. JSON을 사용하는 REST API와 같이 데이터를 다루어야 하는 프로젝트를 작업했었거든요 (저는 대부분 소프트웨어를 다루는 사람이에요 :) ).\n\n이 튜토리얼에서는 ESP8266을 사용하여 서버를 설정하고 JSON을 통해 데이터를 전달하는 방법을 보여드릴게요.\n\n# 먼저 해야 할 일\n\n\n<div class=\"content-ad\"></div>\n\n\n![ESP8266HandlingdatainJSON](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_1.png)\n\n이 강좌는 ESP, 아두이노 또는 유사한 보드에 대한 일부 지식을 요구합니다.\n\n아직 아두이노 IDE를 설치하지 않았다면, 최신 버전의 아두이노 IDE를 다운로드하려면 여기를 클릭하세요.\n\n또한 REST API 및 그들이 어떻게 만들어지는지에 대해 알고 있는 것이 도움이 될 것입니다. 저는 대부분 Node, FastAPI 및 Django로 REST API를 작성했습니다.\n\n\n<div class=\"content-ad\"></div>\n\n최신 Arduino IDE를 다운로드하고 설치한 후, 이렇게 보일 것입니다.\n\n![이미지](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_2.png)\n\n도구로 이동하여 `라이브러리 관리`를 선택하세요.\n\nArduino JSON을 입력하고 라이브러리를 설치하세요.\n\n<div class=\"content-ad\"></div>\n\n[참고: 이 작업에는 여러 라이브러리가 있지만, 나는 Benoit의 것을 선호합니다]\n\n<img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_3.png\" />\n\n그런 다음 도구로 이동하여 '보드' '보드 관리자'로 이동하십시오.\n\nesp8266을 입력하고 보드를 설치하십시오.\n\n<div class=\"content-ad\"></div>\n\n이제 모든 준비가 끝났으니 코딩을 시작할 수 있어요.\n\n## WIFI에 연결하기\n\n당신의 esp8266 보드는 스테이션(당신의 집 라우터에 연결되는 클라이언트)이나 액세스 포인트(연결하는 라우터가 되는)가 될 수 있어요.\n\n이 튜토리얼에서는 제 보드를 스테이션으로 간주하고 집 WiFi 라우터에 연결할 거에요.\n\n<div class=\"content-ad\"></div>\n\n컴퓨터에 보드를 연결하세요.\n\n스케치 파일에 다음 라이브러리를 포함하세요.\n\n```js\n#include <ESP8266WiFi.h>\n#include <ESP8266WebServer.h>\n#include <ArduinoJson.h>\n```\n\n그런 다음 집 WiFi의 이름과 암호를 정의하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n#define SSID \"당신의_와이파이_이름\"\n#define PASSWORD \"당신의_와이파이_비밀번호\"\n```\n\n이후에, 서버 객체를 정의합니다.\n\n```js\nESP8266WebServer server(80); // 포트 80을 사용하며, 다른 포트를 사용할 수도 있습니다\n```\n\n그런 다음, 설정 메서드를 작성하기 시작합니다.```\n\n<div class=\"content-ad\"></div>\n\n설정 메소드에서 먼저 WiFi에 연결해보세요.\n\n```js\nvoid setup(){\n    Serial.begin(9600);\n    WiFi.begin(SSID, PASSWORD);\n    while(WiFi.status() != WL_CONNECTED){\n        Serial.println(\"연결 중\");\n        delay(1000);\n    }\n    Serial.println(\"연결됨\");\n    Serial.println(WiFi.localIP());\n}\n```\n\n코드를 보드에 업로드한 후 시리얼 모니터를 확인해보세요.\n\n출력 내용은 Ctrl + Shift + M을 누르거나 도구 탭을 통해 시리얼 모니터에서 확인할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Server Setup](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_4.png)\n\n# Creating the server\n\nLet's update the setup function\n\n```js\nvoid setup() {\n    Serial.begin(9600);\n    WiFi.begin(SSID, PASSWORD);\n    while (WiFi.status() != WL_CONNECTED) {\n        Serial.println(\"Connecting\");\n        delay(1000);\n    }\n    Serial.println(\"Connected to\");\n    Serial.println(WiFi.localIP());\n    // GET METHOD\n    server.on(\"/test\", HTTP_GET, sendData); // Setting the GET endpoint and callback which we define later\n    // POST METHOD\n    server.on(\"/test\", HTTP_POST, receiveData); // Setting the POST endpoint and callback which we define later\n\n    server.begin();\n}\n```\n\n<div class=\"content-ad\"></div>\n\n루프 함수\n\n```js\nvoid loop() {\n  server.handleClient();\n}\n```\n\n## 파트 1: JSON을 변환하여 서버를 통해 데이터 전송\n\n위 코드 조각에서 본 \"sendData\" 함수를 만들어봐요. 이 함수는 서버로 GET 요청을 처리하고 JSON 메시지로 응답합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvoid sendData(){\n    StaticJsonDocument<300> JSONData;\n    // 자바스크립트 객체나 파이썬 딕셔너리와 같이 객체를 사용합니다.\n    JSONData[\"key\"] = \"Value\";\n    // 추가 필드를 추가할 수 있습니다.\n    char data[300];\n    // JSON 객체를 문자열로 변환하여 data 변수에 저장합니다.\n    serializeJson(JSONData,data);\n    // 상태 코드를 200으로 설정하고, 콘텐츠 유형을 application/json으로 설정한 후 데이터를 전송합니다.\n    server.send(200,\"application/json\",data);\n}\n```\n\n`your IP: your port`/test 주소로 GET 요청이 발생할 때(예: 192.168.0.106:80), 이 함수가 실행됩니다.\n\n## 파트 2: JSON 데이터 수신 및 JSON 객체로 변환\n\n우리는 서버에 POST 요청을 보낼 때 처리할 \"receiveData\" 함수를 작성합시다. 이 함수는 서버로 JSON을 보내고, 서버는 문자열에서 숫자를 파싱하고 해당 숫자를 응답으로 보냅니다.```\n\n<div class=\"content-ad\"></div>\n\n저희 요청 바디는 이렇게 생겼을 거에요\n\n```js\n{\n  \"number\":5\n}\n```\n\n그리고 저희 함수는 이렇게 생겼을 거에요\n\n```js\nvoid receiveData(){\n   StaticJsonDocument<300> JSONData;\n   // JSON 문서 역직렬화\n   String jsonString = server.arg(\"plain\");\n  DeserializationError error = deserializeJson(JSONData, jsonString);\n\n  // 파싱이 성공했는지 테스트합니다.\n  if (error) {\n    Serial.print(\"deserializeJson() failed: \");\n    Serial.println(error.f_str());\n    server.send(500,\"application/json\",\"파싱 중 오류 발생\"); // 오류가 발생했을 때 오류 응답을 전송합니다.\n    return;\n  }else{\n   if(JSONData.containsKey(\"number\")){ // 여기서는 JSON에 'number' 키가 있는지 확인합니다.\n    server.send(200,\"application/json\",String(JSONData[\"number\"].as<int>())+\" 받았습니다\");\n   }\n   else{\n     server.send(400,\"application/json\",\"유효하지 않은 JSON\");\n   }\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 Esp8266에서 JSON 객체를 직렬화하고 역질렬화하는 방법을 알게 되었어요!\n\n## 전체 코드\n\n```cpp\n#include <ESP8266WiFi.h>\n#include <ESP8266WebServer.h>\n#include <ArduinoJson.h>\n\n#define SSID \"당신의 SSID\"\n#define PASSWORD \"비밀번호는 알려주지 않을 거에요\"\n\nString id = SSID;\nString pass = PASSWORD ;\n\nESP8266WebServer server(80);\n\nvoid sendData(){\n    StaticJsonDocument<300> JSONData;\n    // JSON 객체를 자바스크립트 객체나 파이썬 딕셔너리처럼 사용할 수 있어요\n    JSONData[\"key\"] = \"Value\";\n    // 추가 필드를 넣을 수도 있어요\n    char data[300];\n    // JSON 객체를 문자열로 변환하여 data 변수에 저장해요\n    serializeJson(JSONData, data);\n    // content type을 application/json으로 설정하고 데이터를 보냅니다\n    server.send(200, \"application/json\", data);\n}\n\nvoid receiveData(){\n   StaticJsonDocument<300> JSONData;\n   // JSON 문서를 역직렬화해요\n   String jsonString = server.arg(\"plain\");\n   DeserializationError error = deserializeJson(JSONData, jsonString);\n\n   // 파싱이 성공했는지 테스트해요.\n   if (error) {\n       Serial.print(F(\"deserializeJson() failed: \"));\n       Serial.println(error.f_str());\n       server.send(500, \"application/json\", \"파싱 오류\");\n       return;\n   } else {\n       if (JSONData.containsKey(\"number\")) {\n           server.send(200, \"application/json\", String(JSONData[\"number\"].as<int>()) + \" 받았어요\");\n       } else {\n           server.send(400, \"application/json\", \"잘못된 JSON 형식\");\n       }\n   }\n}\n\nvoid setup() {\n    Serial.begin(9600);\n    WiFi.begin(SSID, PASSWORD);\n    while (WiFi.status() != WL_CONNECTED) {\n        Serial.println(\"연결 중\");\n        delay(1000);\n    }\n    Serial.println(\"연결됨\");\n    Serial.println(WiFi.localIP());\n    delay(500);\n    server.on(\"/test\", HTTP_GET, sendData);\n    server.on(\"/test\", HTTP_POST, receiveData);\n    server.begin();\n}\n\nvoid loop() {\n    server.handleClient();\n}\n```\n\n## 파트 3: 테스트해보세요!\n\n<div class=\"content-ad\"></div>\n\n제가 매우 편리한 VS-Code 확장 프로그램인 ThunderClient를 사용하여 요청을 보내고 있어요.\n\n- 직렬화 확인\n\n![image](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_5.png)\n\n2. 역직렬화 확인\n\n<div class=\"content-ad\"></div>\n\n\n![Image](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_6.png)\n\n## It Works!\n\n![Image](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_7.png)\n\n# Final Words\n\n\n<div class=\"content-ad\"></div>\n\nESP 모듈로 할 수 있는 가능성은 무한합니다. 아티클을 좋아해 주셨기를 바랍니다.\n\n저의 프로필이 처음이라면 LinkedIn에서 팔로우 부탁드립니다☺. 시간 내 주셔서 감사합니다. 최고의 IOT 프로젝트를 이뤄내길 바랍니다!\n\n![이미지](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_8.png)\n","ogImage":{"url":"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_0.png"},"coverImage":"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_0.png\" alt=\"ESP8266 handling data in JSON\"></p>\n<p>ESP8266는 가장 많이 사용되는 WiFi 마이크로컨트롤러 보드 중 하나입니다. JSON을 사용하는 REST API와 같이 데이터를 다루어야 하는 프로젝트를 작업했었거든요 (저는 대부분 소프트웨어를 다루는 사람이에요 :) ).</p>\n<p>이 튜토리얼에서는 ESP8266을 사용하여 서버를 설정하고 JSON을 통해 데이터를 전달하는 방법을 보여드릴게요.</p>\n<h1>먼저 해야 할 일</h1>\n<p><img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_1.png\" alt=\"ESP8266HandlingdatainJSON\"></p>\n<p>이 강좌는 ESP, 아두이노 또는 유사한 보드에 대한 일부 지식을 요구합니다.</p>\n<p>아직 아두이노 IDE를 설치하지 않았다면, 최신 버전의 아두이노 IDE를 다운로드하려면 여기를 클릭하세요.</p>\n<p>또한 REST API 및 그들이 어떻게 만들어지는지에 대해 알고 있는 것이 도움이 될 것입니다. 저는 대부분 Node, FastAPI 및 Django로 REST API를 작성했습니다.</p>\n<p>최신 Arduino IDE를 다운로드하고 설치한 후, 이렇게 보일 것입니다.</p>\n<p><img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_2.png\" alt=\"이미지\"></p>\n<p>도구로 이동하여 <code>라이브러리 관리</code>를 선택하세요.</p>\n<p>Arduino JSON을 입력하고 라이브러리를 설치하세요.</p>\n<p>[참고: 이 작업에는 여러 라이브러리가 있지만, 나는 Benoit의 것을 선호합니다]</p>\n<p>그런 다음 도구로 이동하여 '보드' '보드 관리자'로 이동하십시오.</p>\n<p>esp8266을 입력하고 보드를 설치하십시오.</p>\n<p>이제 모든 준비가 끝났으니 코딩을 시작할 수 있어요.</p>\n<h2>WIFI에 연결하기</h2>\n<p>당신의 esp8266 보드는 스테이션(당신의 집 라우터에 연결되는 클라이언트)이나 액세스 포인트(연결하는 라우터가 되는)가 될 수 있어요.</p>\n<p>이 튜토리얼에서는 제 보드를 스테이션으로 간주하고 집 WiFi 라우터에 연결할 거에요.</p>\n<p>컴퓨터에 보드를 연결하세요.</p>\n<p>스케치 파일에 다음 라이브러리를 포함하세요.</p>\n<pre><code class=\"hljs language-js\">#include &#x3C;<span class=\"hljs-title class_\">ESP8266WiFi</span>.<span class=\"hljs-property\">h</span>>\n#include &#x3C;<span class=\"hljs-title class_\">ESP8266WebServer</span>.<span class=\"hljs-property\">h</span>>\n#include &#x3C;<span class=\"hljs-title class_\">ArduinoJson</span>.<span class=\"hljs-property\">h</span>>\n</code></pre>\n<p>그런 다음 집 WiFi의 이름과 암호를 정의하세요.</p>\n<pre><code class=\"hljs language-js\">#define <span class=\"hljs-variable constant_\">SSID</span> <span class=\"hljs-string\">\"당신의_와이파이_이름\"</span>\n#define <span class=\"hljs-variable constant_\">PASSWORD</span> <span class=\"hljs-string\">\"당신의_와이파이_비밀번호\"</span>\n</code></pre>\n<p>이후에, 서버 객체를 정의합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ESP8266WebServer</span> <span class=\"hljs-title function_\">server</span>(<span class=\"hljs-number\">80</span>); <span class=\"hljs-comment\">// 포트 80을 사용하며, 다른 포트를 사용할 수도 있습니다</span>\n</code></pre>\n<p>그런 다음, 설정 메서드를 작성하기 시작합니다.```</p>\n<p>설정 메소드에서 먼저 WiFi에 연결해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>){\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">9600</span>);\n    <span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-variable constant_\">SSID</span>, <span class=\"hljs-variable constant_\">PASSWORD</span>);\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">status</span>() != <span class=\"hljs-variable constant_\">WL_CONNECTED</span>){\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"연결 중\"</span>);\n        <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>);\n    }\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"연결됨\"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">localIP</span>());\n}\n</code></pre>\n<p>코드를 보드에 업로드한 후 시리얼 모니터를 확인해보세요.</p>\n<p>출력 내용은 Ctrl + Shift + M을 누르거나 도구 탭을 통해 시리얼 모니터에서 확인할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_4.png\" alt=\"Server Setup\"></p>\n<h1>Creating the server</h1>\n<p>Let's update the setup function</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">9600</span>);\n    <span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-variable constant_\">SSID</span>, <span class=\"hljs-variable constant_\">PASSWORD</span>);\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">status</span>() != <span class=\"hljs-variable constant_\">WL_CONNECTED</span>) {\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"Connecting\"</span>);\n        <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>);\n    }\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"Connected to\"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">localIP</span>());\n    <span class=\"hljs-comment\">// GET METHOD</span>\n    server.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"/test\"</span>, <span class=\"hljs-variable constant_\">HTTP_GET</span>, sendData); <span class=\"hljs-comment\">// Setting the GET endpoint and callback which we define later</span>\n    <span class=\"hljs-comment\">// POST METHOD</span>\n    server.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">\"/test\"</span>, <span class=\"hljs-variable constant_\">HTTP_POST</span>, receiveData); <span class=\"hljs-comment\">// Setting the POST endpoint and callback which we define later</span>\n\n    server.<span class=\"hljs-title function_\">begin</span>();\n}\n</code></pre>\n<p>루프 함수</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>) {\n  server.<span class=\"hljs-title function_\">handleClient</span>();\n}\n</code></pre>\n<h2>파트 1: JSON을 변환하여 서버를 통해 데이터 전송</h2>\n<p>위 코드 조각에서 본 \"sendData\" 함수를 만들어봐요. 이 함수는 서버로 GET 요청을 처리하고 JSON 메시지로 응답합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendData</span>(<span class=\"hljs-params\"></span>){\n    <span class=\"hljs-title class_\">StaticJsonDocument</span>&#x3C;<span class=\"hljs-number\">300</span>> <span class=\"hljs-title class_\">JSON</span>Data;\n    <span class=\"hljs-comment\">// 자바스크립트 객체나 파이썬 딕셔너리와 같이 객체를 사용합니다.</span>\n    <span class=\"hljs-title class_\">JSON</span>Data[<span class=\"hljs-string\">\"key\"</span>] = <span class=\"hljs-string\">\"Value\"</span>;\n    <span class=\"hljs-comment\">// 추가 필드를 추가할 수 있습니다.</span>\n    char data[<span class=\"hljs-number\">300</span>];\n    <span class=\"hljs-comment\">// JSON 객체를 문자열로 변환하여 data 변수에 저장합니다.</span>\n    <span class=\"hljs-title function_\">serializeJson</span>(<span class=\"hljs-title class_\">JSON</span>Data,data);\n    <span class=\"hljs-comment\">// 상태 코드를 200으로 설정하고, 콘텐츠 유형을 application/json으로 설정한 후 데이터를 전송합니다.</span>\n    server.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-number\">200</span>,<span class=\"hljs-string\">\"application/json\"</span>,data);\n}\n</code></pre>\n<p><code>your IP: your port</code>/test 주소로 GET 요청이 발생할 때(예: 192.168.0.106:80), 이 함수가 실행됩니다.</p>\n<h2>파트 2: JSON 데이터 수신 및 JSON 객체로 변환</h2>\n<p>우리는 서버에 POST 요청을 보낼 때 처리할 \"receiveData\" 함수를 작성합시다. 이 함수는 서버로 JSON을 보내고, 서버는 문자열에서 숫자를 파싱하고 해당 숫자를 응답으로 보냅니다.```</p>\n<p>저희 요청 바디는 이렇게 생겼을 거에요</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"number\"</span>:<span class=\"hljs-number\">5</span>\n}\n</code></pre>\n<p>그리고 저희 함수는 이렇게 생겼을 거에요</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">receiveData</span>(<span class=\"hljs-params\"></span>){\n   <span class=\"hljs-title class_\">StaticJsonDocument</span>&#x3C;<span class=\"hljs-number\">300</span>> <span class=\"hljs-title class_\">JSON</span>Data;\n   <span class=\"hljs-comment\">// JSON 문서 역직렬화</span>\n   <span class=\"hljs-title class_\">String</span> jsonString = server.<span class=\"hljs-title function_\">arg</span>(<span class=\"hljs-string\">\"plain\"</span>);\n  <span class=\"hljs-title class_\">DeserializationError</span> error = <span class=\"hljs-title function_\">deserializeJson</span>(<span class=\"hljs-title class_\">JSON</span>Data, jsonString);\n\n  <span class=\"hljs-comment\">// 파싱이 성공했는지 테스트합니다.</span>\n  <span class=\"hljs-keyword\">if</span> (error) {\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"deserializeJson() failed: \"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(error.<span class=\"hljs-title function_\">f_str</span>());\n    server.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-number\">500</span>,<span class=\"hljs-string\">\"application/json\"</span>,<span class=\"hljs-string\">\"파싱 중 오류 발생\"</span>); <span class=\"hljs-comment\">// 오류가 발생했을 때 오류 응답을 전송합니다.</span>\n    <span class=\"hljs-keyword\">return</span>;\n  }<span class=\"hljs-keyword\">else</span>{\n   <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title class_\">JSON</span>Data.<span class=\"hljs-title function_\">containsKey</span>(<span class=\"hljs-string\">\"number\"</span>)){ <span class=\"hljs-comment\">// 여기서는 JSON에 'number' 키가 있는지 확인합니다.</span>\n    server.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-number\">200</span>,<span class=\"hljs-string\">\"application/json\"</span>,<span class=\"hljs-title class_\">String</span>(<span class=\"hljs-title class_\">JSON</span>Data[<span class=\"hljs-string\">\"number\"</span>].<span class=\"hljs-property\">as</span>&#x3C;int>())+<span class=\"hljs-string\">\" 받았습니다\"</span>);\n   }\n   <span class=\"hljs-keyword\">else</span>{\n     server.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-number\">400</span>,<span class=\"hljs-string\">\"application/json\"</span>,<span class=\"hljs-string\">\"유효하지 않은 JSON\"</span>);\n   }\n  }\n}\n</code></pre>\n<p>이제 Esp8266에서 JSON 객체를 직렬화하고 역질렬화하는 방법을 알게 되었어요!</p>\n<h2>전체 코드</h2>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;ESP8266WiFi.h></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;ESP8266WebServer.h></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;ArduinoJson.h></span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> SSID <span class=\"hljs-string\">\"당신의 SSID\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> PASSWORD <span class=\"hljs-string\">\"비밀번호는 알려주지 않을 거에요\"</span></span>\n\nString id = SSID;\nString pass = PASSWORD ;\n\n<span class=\"hljs-function\">ESP8266WebServer <span class=\"hljs-title\">server</span><span class=\"hljs-params\">(<span class=\"hljs-number\">80</span>)</span></span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">sendData</span><span class=\"hljs-params\">()</span></span>{\n    StaticJsonDocument&#x3C;<span class=\"hljs-number\">300</span>> JSONData;\n    <span class=\"hljs-comment\">// JSON 객체를 자바스크립트 객체나 파이썬 딕셔너리처럼 사용할 수 있어요</span>\n    JSONData[<span class=\"hljs-string\">\"key\"</span>] = <span class=\"hljs-string\">\"Value\"</span>;\n    <span class=\"hljs-comment\">// 추가 필드를 넣을 수도 있어요</span>\n    <span class=\"hljs-type\">char</span> data[<span class=\"hljs-number\">300</span>];\n    <span class=\"hljs-comment\">// JSON 객체를 문자열로 변환하여 data 변수에 저장해요</span>\n    <span class=\"hljs-built_in\">serializeJson</span>(JSONData, data);\n    <span class=\"hljs-comment\">// content type을 application/json으로 설정하고 데이터를 보냅니다</span>\n    server.<span class=\"hljs-built_in\">send</span>(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">\"application/json\"</span>, data);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">receiveData</span><span class=\"hljs-params\">()</span></span>{\n   StaticJsonDocument&#x3C;<span class=\"hljs-number\">300</span>> JSONData;\n   <span class=\"hljs-comment\">// JSON 문서를 역직렬화해요</span>\n   String jsonString = server.<span class=\"hljs-built_in\">arg</span>(<span class=\"hljs-string\">\"plain\"</span>);\n   DeserializationError error = <span class=\"hljs-built_in\">deserializeJson</span>(JSONData, jsonString);\n\n   <span class=\"hljs-comment\">// 파싱이 성공했는지 테스트해요.</span>\n   <span class=\"hljs-keyword\">if</span> (error) {\n       Serial.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">F</span>(<span class=\"hljs-string\">\"deserializeJson() failed: \"</span>));\n       Serial.<span class=\"hljs-built_in\">println</span>(error.<span class=\"hljs-built_in\">f_str</span>());\n       server.<span class=\"hljs-built_in\">send</span>(<span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">\"application/json\"</span>, <span class=\"hljs-string\">\"파싱 오류\"</span>);\n       <span class=\"hljs-keyword\">return</span>;\n   } <span class=\"hljs-keyword\">else</span> {\n       <span class=\"hljs-keyword\">if</span> (JSONData.<span class=\"hljs-built_in\">containsKey</span>(<span class=\"hljs-string\">\"number\"</span>)) {\n           server.<span class=\"hljs-built_in\">send</span>(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">\"application/json\"</span>, <span class=\"hljs-built_in\">String</span>(JSONData[<span class=\"hljs-string\">\"number\"</span>].<span class=\"hljs-built_in\">as</span>&#x3C;<span class=\"hljs-type\">int</span>>()) + <span class=\"hljs-string\">\" 받았어요\"</span>);\n       } <span class=\"hljs-keyword\">else</span> {\n           server.<span class=\"hljs-built_in\">send</span>(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">\"application/json\"</span>, <span class=\"hljs-string\">\"잘못된 JSON 형식\"</span>);\n       }\n   }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setup</span><span class=\"hljs-params\">()</span> </span>{\n    Serial.<span class=\"hljs-built_in\">begin</span>(<span class=\"hljs-number\">9600</span>);\n    WiFi.<span class=\"hljs-built_in\">begin</span>(SSID, PASSWORD);\n    <span class=\"hljs-keyword\">while</span> (WiFi.<span class=\"hljs-built_in\">status</span>() != WL_CONNECTED) {\n        Serial.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"연결 중\"</span>);\n        <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">1000</span>);\n    }\n    Serial.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"연결됨\"</span>);\n    Serial.<span class=\"hljs-built_in\">println</span>(WiFi.<span class=\"hljs-built_in\">localIP</span>());\n    <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">500</span>);\n    server.<span class=\"hljs-built_in\">on</span>(<span class=\"hljs-string\">\"/test\"</span>, HTTP_GET, sendData);\n    server.<span class=\"hljs-built_in\">on</span>(<span class=\"hljs-string\">\"/test\"</span>, HTTP_POST, receiveData);\n    server.<span class=\"hljs-built_in\">begin</span>();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">loop</span><span class=\"hljs-params\">()</span> </span>{\n    server.<span class=\"hljs-built_in\">handleClient</span>();\n}\n</code></pre>\n<h2>파트 3: 테스트해보세요!</h2>\n<p>제가 매우 편리한 VS-Code 확장 프로그램인 ThunderClient를 사용하여 요청을 보내고 있어요.</p>\n<ul>\n<li>직렬화 확인</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_5.png\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>역직렬화 확인</li>\n</ol>\n<p><img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_6.png\" alt=\"Image\"></p>\n<h2>It Works!</h2>\n<p><img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_7.png\" alt=\"Image\"></p>\n<h1>Final Words</h1>\n<p>ESP 모듈로 할 수 있는 가능성은 무한합니다. 아티클을 좋아해 주셨기를 바랍니다.</p>\n<p>저의 프로필이 처음이라면 LinkedIn에서 팔로우 부탁드립니다☺. 시간 내 주셔서 감사합니다. 최고의 IOT 프로젝트를 이뤄내길 바랍니다!</p>\n<p><img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_8.png\" alt=\"이미지\"></p>\n</body>\n</html>\n"},"__N_SSG":true}