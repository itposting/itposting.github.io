{"pageProps":{"posts":[{"title":" AIoT에 대한 초보자를 위한 안내","description":"","date":"2024-05-27 13:18","slug":"2024-05-27-ABeginnersGuidetoAIoT","content":"\n\n## 핵심 아이디어, 응용 및 AI-기반 IoT 솔루션 개발에 대한 직접적인 관련 내용\n\nAI와 IoT가 있죠? 이 둘을 결합하면 'AIoT'가 됩니다. 기본적으로, 스마트 AI 능력과 사물 인터넷의 연결을 결합한 결과물입니다.\n\n# AIoT의 주요 아이디어\n\n- AI란 무엇인가?: 인공지능 또는 AI는 컴퓨터나 로봇에 뇌를 주어 생각하고 학습하는 데 도움이 되는 개념입니다. Siri나 Alexa와 같은 음성 어시스턴트에 사용되며, 사용자의 질문을 이해하고 요청에서 배우어 시간이 지남에 따라 더 나은 답변을 제공합니다.\n- IoT란 무엇인가?: 사물 인터넷 또는 IoT는 센서, 소프트웨어 및 기타 기술로 장착된 물리적 물체의 네트워크로, 인터넷을 통해 데이터를 연결 및 교환하는 것을 목적으로 합니다. 이 \"물건들\"은 스마트 온도조절기부터 산업용 도구와 같은 일상의 가전제품까지 다양할 수 있습니다.\n- AIoT: 인공 지능(AI)과 인터넷에 연결된 장치(IoT)를 결합한 결과입니다. 일상용품에 뇌를 제공하는 것과 같습니다. 예를 들어, 스마트 온도조절기는 온도를 제어하는 것뿐만 아니라 귀하의 루틴을 배워 설정을 자동으로 조정합니다.\n- 학습하고 똑똑해지기: 이러한 장치들은 매일 정보를 수집하고 개선하기 위해 사용합니다. 스마트 워치는 당신의 피트니스 진행 상황을 추적하고 당신의 걸음걸이, 건강 상태 및 목표에 맞는 맞춤화된 운동을 제안할 수 있습니다.\n- 그리 새로운 것은 아닙니다: 당신은 무심코 지나치는 것일 수 있지만, AIoT는 꽤 오랫동안 존재해 왔습니다. 식료품을 추적하고 레시피를 제안하는 스마트 냉장고부터 제품 품질을 개선하는 데 도움이 되는 제조 라인 센서까지, 이러한 기술들은 많은 년 동안 사용되어 왔습니다.\n\n<div class=\"content-ad\"></div>\n\n# AIoT 디바이스는 어떻게 작동할까요?\n\n![image](/assets/img/2024-05-27-ABeginnersGuidetoAIoT_0.png)\n\n## 1. 데이터 수집: 센서\n\n도시 곳곳에 설치된 센서를 상상해보세요. 마치 정보를 수집하는 눈과 귀처럼 동작합니다. 이러한 IoT 디바이스는 교통 패턴이나 소비자 선호도와 같은 정보를 수집합니다. 마찬가지로, 피트니스 트래커나 스마트폰에도 센서가 있어서 동일한 작업을 수행합니다. 이러한 초기 데이터는 모든 통찰력의 기반이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 2. 데이터 이동 : 전송\n\n먼저, 데이터는 처리될 위치로 전송되어야 합니다. 때로는 데이터는 더 많은 처리가 이루어지는 \"중앙 허브\"로 보내기 전에 로컬에 저장될 수 있습니다. IoT 기술을 통해 데이터가 센서에서 처리 센터로 빠르고 효율적으로 이동될 수 있습니다.\n\n## 3. 데이터 분석 : AI 처리\n\n대부분의 경우 여기에 \"AI\" 부분이 나타납니다. 센서로부터의 원시 데이터가 중앙 허브로 전송된 후, 처리되어 유용한 정보로 변환됩니다. AI는 패턴을 식별하고 트렌드를 예측하며, 이러한 처리된 데이터를 기반으로 결정을 내릴 수 있도록 도와줍니다. 내장형 AI 기능을 갖춘 엣지 디바이스는 이에 예외입니다. 이러한 장치에는 AI가 직접 내장되어 있어 중앙 허브로의 전송이 필요하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n## 4. 의사 결정: 최적화\n\n보통 기업이나 개인들은 AI 통찰력을 활용하여 데이터 기반의 결정을 내리곤 합니다. 이로 인해 생산 프로세스를 개선하거나 고객 요구를 예측하거나 또는 실시간 데이터에 기반하여 작업을 자동화하는 등의 작업이 수반될 수 있습니다. 특정 응용 분야에서는 의사 결정 과정을 AI에 맡기기도 하는데, 이는 센서 데이터와 AI가 활용되어 순간적인 네비게이션 결정을 내리게 함으로써 차량이 자율 주행을 할 수 있도록 하는 경우와 같습니다.\n\n## 5. 더 나아가기: 피드백\n\n이 과정은 거기서 끝나지 않습니다. AIoT 시스템은 성능을 향상시키기 위해 지속적으로 피드백을 수집합니다. 이 피드백은 알고리즘을 개선하고 전체 시스템을 시간이 흐름에 따라 더 똑똑하게 만드는 데 사용됩니다. 새로운 데이터와 사용자 상호작용에서 계속 배우면서, AIoT 시스템은 적응하고 학습하여 성능을 개선할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 다양한 산업에서의 AIoT\n\nAI와 IoT 기술의 결합은 많은 산업을 변화시켜 더 효율적이고 안전하며 사용자 친화적인 것으로 만듭니다. 몇 가지 주요 AIoT 응용 분야를 살펴보겠습니다:\n\n## ⚙️ 현대 제조업\n\n제조업에서 AIoT 시스템은 기계를 모니터하여 결함을 감지하고 품질을 보장합니다. 이러한 스마트 시스템은 라이브 비디오 피드를 분석하여 결함을 식별하여 제품이 높은 기준을 충족하는지 확인합니다. AIoT 솔루션은 제조를 더 효율적이고 신뢰성 있게 만들어줍니다.\n\n<div class=\"content-ad\"></div>\n\n## 📦 스마트 리테일\n\n제조업과 밀접한 관련이 있는 소매 공간도 AIoT 솔루션을 통해 혜택을 입을 수 있습니다. IoT 센서가 상점에서 고객 행동을 추적하고, AI가 이 데이터를 분석하여 맞춤형 추천을 제공하고 상점 레이아웃을 개선합니다. 게다가 AIoT 시스템은 재고를 실시간으로 관리하여 재고 부족과 과잉 재고 상황을 줄입니다.\n\n## ⚡️ 스마트 에너지 활용\n\nIoT 센서와 AI를 결합함으로써, AIoT 시스템은 에너지 사용을 모니터링하고 최적화하여 낭비를 줄이고 에너지 요구를 예측할 수 있습니다. 이러한 시스템은 에너지 관리를 자동화하여 기업이 비용을 절감하고 가정이 더 경제적으로 운영할 수 있도록 돕습니다.\n\n<div class=\"content-ad\"></div>\n\n## 🚜 스마트 농업\n\nAIoT 기술은 데이터 기반 방법으로 농업을 변화시키고 있습니다. IoT 센서가 토양 품질, 습도 및 작물 상태에 대한 정보를 수집하고, AI가 이 데이터를 분석하여 관개, 비료, 및 해충 통제를 개선합니다. 이러한 솔루션은 농부들이 보다 나은 결정을 내릴 수 있도록 도와 효율성과 작물 생산량을 증가시킵니다.\n\n## 🚦스마트 시티 서비스\n\nAIoT 기술은 교통 제어, 폐기물 관리 및 가로등 조명과 같은 서비스가 중앙에서 관리되는 스마트 시티 발전에 중요합니다. IoT 센서가 데이터를 수집하고, AI가 이를 처리하여 미래 요구 사항과 공공 이동을 예측합니다.\n\n<div class=\"content-ad\"></div>\n\n## 🏃‍♀️ 건강 및 피트니스 장치\n\n스마트워치와 피트니스 트래커와 같은 착용형 건강 장치는 AIoT를 사용하여 맥박, 수면 및 신체 활동에 대한 실시간 데이터를 수집하고 분석합니다. AI 알고리즘은 맞춤형 건강 정보를 제공하고 건강 문제의 조기 감지를 돕는 것으로 의료 서비스를 향상시킵니다.\n\n## ✈️ 항공 안전\n\n항공 분야에서 AIoT는 항공기 시스템을 모니터링하고 정비 필요를 예측하여 안전과 효율성을 향상시킵니다. IoT 센서는 엔진 성능, 연료 수위 및 기타 중요한 매개변수에 대한 데이터를 수집합니다. AI는 이 데이터를 분석하여 잠재적인 고장을 예측하고 정비 일정을 선제적으로 계획하여 비행의 안전성과 신뢰성을 보장합니다.\n\n<div class=\"content-ad\"></div>\n\n## 🏎️ 스포츠 및 게임\n\nAIoT는 고급 센서와 AI 분석을 통합하여 스포츠와 게임을 변화시키고 있습니다. 예를 들어, F1 자동차에는 속도, 엔진 성능 및 타이어 상태에 대한 데이터를 수집하는 다양한 기기가 장착되어 있습니다. 이 데이터는 레이스 중 전략적인 결정을 내리기 위해 실시간으로 분석됩니다.\n\n# 개념적인 연습: 레스토랑 좌석 모니터링을 위한 AIoT 솔루션 구축\n\n이렇게 상상해보세요. 몇 분 안에 가상 회의가 예정되어 있고 카페에서 자리를 찾아야 합니다. 가장 가까운 카페로 가서 도착하자, 모든 자리가 다 차 있습니다. 이제 다른 장소를 찾기에는 너무 늦었고 회의에 늦게 될 것 같습니다.\n\n<div class=\"content-ad\"></div>\n\n만약 실시간으로 좌석 이용 가능 여부를 확인할 수 있는 방법이 있다면 얼마나 편리할까요?\n\n이 강좌는 이러한 AIoT 시스템을 설계하고 구현하는 과정에 대한 고수준 이해를 제공할 것입니다.\n\n## ‣‣‣ 단계별 프로세스\n\n다음은 이 AIoT 개발 프로세스를 진행하는 방법에 대한 개요입니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-ABeginnersGuidetoAIoT_1.png\" />\n\n- 프로젝트 계획 수립\n- 구성품 선택 및 설치\n- 장치 구축\n- 중앙 허브 설정\n- 서버 및 대시보드 생성\n- 시스템 설치 및 테스트\n\n## ‣‣ 파트 1: 프로젝트 계획\n\n주요 목표: 좌석에 부착할 수 있는 간단한 장치를 개발하여 네트워크에 연결하고 실시간 좌석 점유 데이터를 제공하는 것입니다. 이 시스템은 데이터를 저장할 데이터베이스와 이를 표시할 웹 인터페이스를 포함해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n**목표:**\n\n- 식당/카페 의자에 쉽게 부착할 수 있는 간단하고 저렴한 **IoT 장치**를 설계하세요. 이 IoT 장치는 의자가 점유되었는지 여부를 신뢰성 있게 감지해야 합니다. 중앙 허브와 무선 기술을 사용하여 통신해야 합니다.\n- 데이터 수집을 담당하는 **중앙 허브**를 개발하세요. 중앙 허브에는 점유된 좌석을 구별하는 머신 러닝 모델이 있어야 합니다. 이 모델은 오류 긍정 및 부정을 고려합니다. 또한 실시간 측정 값을 웹 서버에 업로드할 수 있는 기능이 있어야 합니다.\n- 중앙 허브에서 수집한 데이터를 호스팅하는 **웹 서버**를 개발하세요. 이 웹 서버는 데이터를 관리하고 실시간 좌석 점유 상황을 사용자에게 보여주는 웹 인터페이스를 제공해야 합니다.\n\n<img src=\"/assets/img/2024-05-27-ABeginnersGuidetoAIoT_2.png\" />\n\n## **목표 선택 및 구성하기**\n\n<div class=\"content-ad\"></div>\n\n➡ IoT 장치 (좌석 점유 감지 센서) — 이 IoT 장치는 좌석이 점유되었는지 또는 이용 가능한지를 감지하는 역할을 합니다. 이 IoT 장치를 만들기 위해 다음 구성 요소가 필요합니다:\n\n- ESP8266 마이크로컨트롤러 — 무선 통신이 가능한 저렴한 Wi-Fi 마이크로컨트롤러입니다. 아주 작은 컴퓨터라고 생각하시면 됩니다. 이 마이크로컨트롤러는 초음파 센서에 연결되어 점유 여부를 감지하고 중앙 허브로 데이터를 전송합니다.\n- 초음파 센서 — 물체(이 경우 사람)의 존재를 감지하기 위해 초음파를 사용하는 센서입니다. 소리를 발사하여 반사된 음파가 돌아오는 데 걸리는 시간을 측정합니다.\n- 전원 공급 — ESP8266와 초음파 센서를 구동하기 위한 충전식 배터리입니다.\n- 사용자 정의 보호케이스 — ESP8266, 초음파 센서 및 전원 공급을 하나의 장치로 묶어주는 소형이면서 내구성 있는 하우징입니다.\n\n➡ 중앙 허브 — 중앙 허브는 모든 좌석 점유 센서로부터 데이터를 수집하여 처리하고 웹 서버에 업로드하는 역할을 합니다. 중앙 허브를 만들기 위해 다음 구성 요소가 필요합니다:\n\n- Raspberry Pi — 다양한 작업에 사용할 수 있는 소형, 저렴한 컴퓨터입니다. 중앙 허브의 두뇌로 생각하시면 됩니다. ESP8266 센서로부터 데이터를 수집하고 기계 학습 모델을 실행하여 데이터를 처리합니다.\n- Wi-Fi 모듈 — Raspberry Pi에 통합된 이 모듈은 중앙 허브와 웹 서버 간의 무선 통신을 용이하게 합니다.\n- 기계 학습 모델 — Raspberry Pi에서 실행되는 모델은 점유된 좌석과 이용 가능한 좌석을 구별합니다. 센서로부터 받아온 원시 데이터를 처리하여 좌석 점유 여부를 결정하며, 잘못된 긍정 및 부정을 줄입니다. (참고: 이것은 물리적인 물건이 아닙니다!)\n- 전원 공급 — Raspberry Pi를 구동하여 지속적인 작동을 보장하기 위한 오래가는 소형 배터리입니다.\n- 데이터 저장소 (선택 사항) — 데이터를 웹 서버에 업로드하기 전에 로컬에 데이터를 저장하는 데 사용되는 SD 카드나 외부 저장 장치입니다. 이것은 버퍼링 및 백업 목적으로 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n➡ 웹 서버—웹 서버는 중앙 허브에서 전달된 데이터가 전달되는 곳입니다. 실시간 좌석 이용률을 표시하는 웹 인터페이스를 제공합니다. 웹 서버를 설정하려면 다음 구성 요소가 필요합니다:\n\n- Flask Server—파이썬의 가벼운 WSGI 웹 응용 프레임워크입니다. 수신된 데이터를 처리하고 최종 사용자에게 웹 인터페이스를 제공하는 서비스로 생각할 수 있습니다.\n- 데이터베이스—데이터를 저장하고 관리하는 시스템입니다. 좌석 이용률 데이터를 저장하여 검색하고 분석합니다.\n- 웹 인터페이스—웹 브라우저를 통해 접근할 수 있는 대시보드입니다. 실시간 좌석 이용률 데이터를 최종 사용자에게 표시하여 좌석 가용성을 모니터링하기 위한 사용자 친화적 인터페이스를 제공합니다.\n\n## ‣‣ 장치 구축 부분\n\n## ‣‣ 중앙 허브 설정 부분\n\n<div class=\"content-ad\"></div>\n\n## ‣‣ 파트 5: 서버 및 대시보드 생성\n\n## ‣‣ 파트 6: 시스템 설치 및 테스트","ogImage":{"url":"/assets/img/2024-05-27-ABeginnersGuidetoAIoT_0.png"},"coverImage":"/assets/img/2024-05-27-ABeginnersGuidetoAIoT_0.png","tag":["Tech"],"readingTime":7},{"title":"ESP8266 JSON 데이터 다루기","description":"","date":"2024-05-27 13:17","slug":"2024-05-27-ESP8266HandlingdatainJSON","content":"\n\n![ESP8266 handling data in JSON](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_0.png)\n\nESP8266는 가장 많이 사용되는 WiFi 마이크로컨트롤러 보드 중 하나입니다. JSON을 사용하는 REST API와 같이 데이터를 다루어야 하는 프로젝트를 작업했었거든요 (저는 대부분 소프트웨어를 다루는 사람이에요 :) ).\n\n이 튜토리얼에서는 ESP8266을 사용하여 서버를 설정하고 JSON을 통해 데이터를 전달하는 방법을 보여드릴게요.\n\n# 먼저 해야 할 일\n\n\n<div class=\"content-ad\"></div>\n\n\n![ESP8266HandlingdatainJSON](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_1.png)\n\n이 강좌는 ESP, 아두이노 또는 유사한 보드에 대한 일부 지식을 요구합니다.\n\n아직 아두이노 IDE를 설치하지 않았다면, 최신 버전의 아두이노 IDE를 다운로드하려면 여기를 클릭하세요.\n\n또한 REST API 및 그들이 어떻게 만들어지는지에 대해 알고 있는 것이 도움이 될 것입니다. 저는 대부분 Node, FastAPI 및 Django로 REST API를 작성했습니다.\n\n\n<div class=\"content-ad\"></div>\n\n최신 Arduino IDE를 다운로드하고 설치한 후, 이렇게 보일 것입니다.\n\n![이미지](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_2.png)\n\n도구로 이동하여 `라이브러리 관리`를 선택하세요.\n\nArduino JSON을 입력하고 라이브러리를 설치하세요.\n\n<div class=\"content-ad\"></div>\n\n[참고: 이 작업에는 여러 라이브러리가 있지만, 나는 Benoit의 것을 선호합니다]\n\n<img src=\"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_3.png\" />\n\n그런 다음 도구로 이동하여 '보드' '보드 관리자'로 이동하십시오.\n\nesp8266을 입력하고 보드를 설치하십시오.\n\n<div class=\"content-ad\"></div>\n\n이제 모든 준비가 끝났으니 코딩을 시작할 수 있어요.\n\n## WIFI에 연결하기\n\n당신의 esp8266 보드는 스테이션(당신의 집 라우터에 연결되는 클라이언트)이나 액세스 포인트(연결하는 라우터가 되는)가 될 수 있어요.\n\n이 튜토리얼에서는 제 보드를 스테이션으로 간주하고 집 WiFi 라우터에 연결할 거에요.\n\n<div class=\"content-ad\"></div>\n\n컴퓨터에 보드를 연결하세요.\n\n스케치 파일에 다음 라이브러리를 포함하세요.\n\n```js\n#include <ESP8266WiFi.h>\n#include <ESP8266WebServer.h>\n#include <ArduinoJson.h>\n```\n\n그런 다음 집 WiFi의 이름과 암호를 정의하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n#define SSID \"당신의_와이파이_이름\"\n#define PASSWORD \"당신의_와이파이_비밀번호\"\n```\n\n이후에, 서버 객체를 정의합니다.\n\n```js\nESP8266WebServer server(80); // 포트 80을 사용하며, 다른 포트를 사용할 수도 있습니다\n```\n\n그런 다음, 설정 메서드를 작성하기 시작합니다.```\n\n<div class=\"content-ad\"></div>\n\n설정 메소드에서 먼저 WiFi에 연결해보세요.\n\n```js\nvoid setup(){\n    Serial.begin(9600);\n    WiFi.begin(SSID, PASSWORD);\n    while(WiFi.status() != WL_CONNECTED){\n        Serial.println(\"연결 중\");\n        delay(1000);\n    }\n    Serial.println(\"연결됨\");\n    Serial.println(WiFi.localIP());\n}\n```\n\n코드를 보드에 업로드한 후 시리얼 모니터를 확인해보세요.\n\n출력 내용은 Ctrl + Shift + M을 누르거나 도구 탭을 통해 시리얼 모니터에서 확인할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Server Setup](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_4.png)\n\n# Creating the server\n\nLet's update the setup function\n\n```js\nvoid setup() {\n    Serial.begin(9600);\n    WiFi.begin(SSID, PASSWORD);\n    while (WiFi.status() != WL_CONNECTED) {\n        Serial.println(\"Connecting\");\n        delay(1000);\n    }\n    Serial.println(\"Connected to\");\n    Serial.println(WiFi.localIP());\n    // GET METHOD\n    server.on(\"/test\", HTTP_GET, sendData); // Setting the GET endpoint and callback which we define later\n    // POST METHOD\n    server.on(\"/test\", HTTP_POST, receiveData); // Setting the POST endpoint and callback which we define later\n\n    server.begin();\n}\n```\n\n<div class=\"content-ad\"></div>\n\n루프 함수\n\n```js\nvoid loop() {\n  server.handleClient();\n}\n```\n\n## 파트 1: JSON을 변환하여 서버를 통해 데이터 전송\n\n위 코드 조각에서 본 \"sendData\" 함수를 만들어봐요. 이 함수는 서버로 GET 요청을 처리하고 JSON 메시지로 응답합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvoid sendData(){\n    StaticJsonDocument<300> JSONData;\n    // 자바스크립트 객체나 파이썬 딕셔너리와 같이 객체를 사용합니다.\n    JSONData[\"key\"] = \"Value\";\n    // 추가 필드를 추가할 수 있습니다.\n    char data[300];\n    // JSON 객체를 문자열로 변환하여 data 변수에 저장합니다.\n    serializeJson(JSONData,data);\n    // 상태 코드를 200으로 설정하고, 콘텐츠 유형을 application/json으로 설정한 후 데이터를 전송합니다.\n    server.send(200,\"application/json\",data);\n}\n```\n\n`your IP: your port`/test 주소로 GET 요청이 발생할 때(예: 192.168.0.106:80), 이 함수가 실행됩니다.\n\n## 파트 2: JSON 데이터 수신 및 JSON 객체로 변환\n\n우리는 서버에 POST 요청을 보낼 때 처리할 \"receiveData\" 함수를 작성합시다. 이 함수는 서버로 JSON을 보내고, 서버는 문자열에서 숫자를 파싱하고 해당 숫자를 응답으로 보냅니다.```\n\n<div class=\"content-ad\"></div>\n\n저희 요청 바디는 이렇게 생겼을 거에요\n\n```js\n{\n  \"number\":5\n}\n```\n\n그리고 저희 함수는 이렇게 생겼을 거에요\n\n```js\nvoid receiveData(){\n   StaticJsonDocument<300> JSONData;\n   // JSON 문서 역직렬화\n   String jsonString = server.arg(\"plain\");\n  DeserializationError error = deserializeJson(JSONData, jsonString);\n\n  // 파싱이 성공했는지 테스트합니다.\n  if (error) {\n    Serial.print(\"deserializeJson() failed: \");\n    Serial.println(error.f_str());\n    server.send(500,\"application/json\",\"파싱 중 오류 발생\"); // 오류가 발생했을 때 오류 응답을 전송합니다.\n    return;\n  }else{\n   if(JSONData.containsKey(\"number\")){ // 여기서는 JSON에 'number' 키가 있는지 확인합니다.\n    server.send(200,\"application/json\",String(JSONData[\"number\"].as<int>())+\" 받았습니다\");\n   }\n   else{\n     server.send(400,\"application/json\",\"유효하지 않은 JSON\");\n   }\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 Esp8266에서 JSON 객체를 직렬화하고 역질렬화하는 방법을 알게 되었어요!\n\n## 전체 코드\n\n```cpp\n#include <ESP8266WiFi.h>\n#include <ESP8266WebServer.h>\n#include <ArduinoJson.h>\n\n#define SSID \"당신의 SSID\"\n#define PASSWORD \"비밀번호는 알려주지 않을 거에요\"\n\nString id = SSID;\nString pass = PASSWORD ;\n\nESP8266WebServer server(80);\n\nvoid sendData(){\n    StaticJsonDocument<300> JSONData;\n    // JSON 객체를 자바스크립트 객체나 파이썬 딕셔너리처럼 사용할 수 있어요\n    JSONData[\"key\"] = \"Value\";\n    // 추가 필드를 넣을 수도 있어요\n    char data[300];\n    // JSON 객체를 문자열로 변환하여 data 변수에 저장해요\n    serializeJson(JSONData, data);\n    // content type을 application/json으로 설정하고 데이터를 보냅니다\n    server.send(200, \"application/json\", data);\n}\n\nvoid receiveData(){\n   StaticJsonDocument<300> JSONData;\n   // JSON 문서를 역직렬화해요\n   String jsonString = server.arg(\"plain\");\n   DeserializationError error = deserializeJson(JSONData, jsonString);\n\n   // 파싱이 성공했는지 테스트해요.\n   if (error) {\n       Serial.print(F(\"deserializeJson() failed: \"));\n       Serial.println(error.f_str());\n       server.send(500, \"application/json\", \"파싱 오류\");\n       return;\n   } else {\n       if (JSONData.containsKey(\"number\")) {\n           server.send(200, \"application/json\", String(JSONData[\"number\"].as<int>()) + \" 받았어요\");\n       } else {\n           server.send(400, \"application/json\", \"잘못된 JSON 형식\");\n       }\n   }\n}\n\nvoid setup() {\n    Serial.begin(9600);\n    WiFi.begin(SSID, PASSWORD);\n    while (WiFi.status() != WL_CONNECTED) {\n        Serial.println(\"연결 중\");\n        delay(1000);\n    }\n    Serial.println(\"연결됨\");\n    Serial.println(WiFi.localIP());\n    delay(500);\n    server.on(\"/test\", HTTP_GET, sendData);\n    server.on(\"/test\", HTTP_POST, receiveData);\n    server.begin();\n}\n\nvoid loop() {\n    server.handleClient();\n}\n```\n\n## 파트 3: 테스트해보세요!\n\n<div class=\"content-ad\"></div>\n\n제가 매우 편리한 VS-Code 확장 프로그램인 ThunderClient를 사용하여 요청을 보내고 있어요.\n\n- 직렬화 확인\n\n![image](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_5.png)\n\n2. 역직렬화 확인\n\n<div class=\"content-ad\"></div>\n\n\n![Image](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_6.png)\n\n## It Works!\n\n![Image](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_7.png)\n\n# Final Words\n\n\n<div class=\"content-ad\"></div>\n\nESP 모듈로 할 수 있는 가능성은 무한합니다. 아티클을 좋아해 주셨기를 바랍니다.\n\n저의 프로필이 처음이라면 LinkedIn에서 팔로우 부탁드립니다☺. 시간 내 주셔서 감사합니다. 최고의 IOT 프로젝트를 이뤄내길 바랍니다!\n\n![이미지](/assets/img/2024-05-27-ESP8266HandlingdatainJSON_8.png)\n","ogImage":{"url":"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_0.png"},"coverImage":"/assets/img/2024-05-27-ESP8266HandlingdatainJSON_0.png","tag":["Tech"],"readingTime":7},{"title":"사이버보안 IoT 저희의 연결된 미래를 지키는 방법  BytesCheck","description":"","date":"2024-05-27 13:16","slug":"2024-05-27-CybersecurityinIoTProtectingOurConnectedFutureBytesCheck","content":"\n이미지\n\n\n![이미지](/assets/img/2024-05-27-CybersecurityinIoTProtectingOurConnectedFutureBytesCheck_0.png)\n\n\nIoT 기기는 우리가 세상과 상호 작용하는 방식을 변화시키고 있습니다. 이는 우리의 개인적인 삶부터 산업까지 모든 측면을 변화시켰습니다. 이제 기기들은 서로 및 외부 세계와 상호 작용할 수 있습니다. 점점 더 많은 기기들이 연결됨에 따라, 그러한 기기들과 네트워크를 안전하게 유지하는 것에 실제적인 우려가 있습니다. 이 블로그 글에서는 IoT에서 사이버 보안의 중요성을 탐구하고, 관련 위협들을 파헤치며, 그에 대항하는 효과적인 해결책을 제시할 것입니다.\n\n# IoT에서 사이버 보안이 필요한 이유는 무엇인가요?\n\n우리는 IoT 기기가 우리로부터 데이터를 수집한다는 것을 알고 있습니다. 이 데이터에는 건강 기록과 같은 민감한 정보들이 포함됩니다. 따라서 해커들이 이를 악용하기에 유혹받게 됩니다. 또한, IoT에서 사이버 보안이 필요한 다른 이유들이 여러 가지 있습니다 :\n\n<div class=\"content-ad\"></div>\n\n- 데이터 개인 정보 보호: 앞서 말했듯이 IoT 장치는 우리로부터 민감한 정보를 수집하며 해커들에게 유혹적인 핫스팟이 됩니다. 데이터에 무단 액세스는 데이터 개인 정보 보호에 위험을 초래할 수 있습니다.\n- 시스템 무결성: 많은 IoT 장치가 특히 의료 및 제조업과 같은 산업에서 중요한 책임을 갖고 있음을 인식하는 것이 중요합니다. 보안 침해는 그들의 제대로 기능하는 능력에 중대한 영향을 미칠 수 있고 심각한 결과를 초래할 수 있습니다.\n- 네트워크 보안: 해커들에게 잠재적인 진입점으로 기능할 수 있는 IoT 장치 뿐만 아니라 IoT 네트워크도 안전하게 보호하는 것이 중요합니다.\n- 규제 준수: 전 세계적으로 데이터 보호를 강화하는 규정이 강화되면서 기업들은 사용자 데이터 보호에 대한 법적 요구를 준수하여 벌금을 피해야 합니다.\n\nIoT 장치의 증가는 기업에 상당한 혜택을 제공합니다. 그러나 IoT 장치의 증가는 IoT 생태계를 관리하기 어렵게 만들어 다양한 보안 취약점으로 이어질 수 있습니다.\n\n# 일반적인 IoT 취약점\n\n이제 과거에 많은 IoT 장치를 침해한 다양한 사이버 보안 공격들을 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\nMirai Botnet (2016): Mirai 봇넷은 카메라 및 라우터와 같은 IoT 장치를 대상으로 하여 기본 암호를 악용했습니다. 라지 DDoS (분산 거부 공격) 공격 중 하나를 담당하여 트위터, 넷플릭스 및 레딧과 같은 주요 웹사이트를 다운시키는 일이 있었습니다.\n\nStuxnet (2010): 전통적인 IoT 공격은 아니었지만 Stuxnet은 이란의 핵 시설에서 사용된 PLC(프로그램 가능 로직 컨트롤러)를 집중적으로 공격했습니다. 이는 산업 환경에서의 IoT 장치가 사이버 전쟁을 위해 악용될 수 있는 잠재적 가능성을 강조했습니다.\n\nBrickerBot (2017): 이 악성 코드는 저장 장치를 손상시킴으로써 IoT 장치를 영구적으로 마비시키려고 하였습니다. 보안 설정이 부족한 장치들을 대상으로 하여 사용 불가능하게 만들며, IoT 하드웨어를 보호하는 중요성을 강조했습니다.\n\nJeep Cherokee Hack (2015): 보안 연구원들이 Jeep Cherokee에서 원격 공격을 시연하여 차량의 제동과 엔진을 포함한 시스템을 제어했습니다. 이 공격은 연결된 자동차의 취약성이 빛낼 수 있는 잠재적인 위험을 보여 주었습니다.\n\n<div class=\"content-ad\"></div>\n\nTRITON 악성 코드 (2017): Trisis로도 알려진 이 악성 코드는 산업 안전 시스템을 대상으로 하였으며, 특히 Schneider Electric의 Triconex 안전 컨트롤러를 겨냥했습니다. 이는 안전 시스템을 무력화시키려는 목적으로 산업 운영에 심각한 위험을 제공했습니다.\n\n# 미래를 안전하게: IoT 사이버 보안 솔루션\n\n이러한 취약점을 해결하고 IoT 장치의 보안을 향상시키기 위해 여러 가지 솔루션을 시행할 수 있습니다:\n\n- 강력한 인증 메커니즘: 인증 방법으로 MFA 및 생체 인증과 같은 견고한 인증 방법을 사용하여 무단 액세스를 방지합니다.\n- 암호화 통신: 기기와 서버 간에 전송되는 모든 데이터가 TLS와 같은 프로토콜을 사용하여 암호화되어 데이터 가로채기 및 위변조에 대비되도록 합니다.\n- 정기적인 소프트웨어 업데이트: 제조업체는 새로 발견된 취약점을 수정하기 위해 적시에 소프트웨어 업데이트 및 패치를 제공해야 합니다. 자동 업데이트 메커니즘을 통해 장치가 항상 최신 보안 수정 사항을 보유하도록 할 수 있습니다.\n- 설계에 의한 보안: IoT 장치는 처음부터 보안을 고려하여 설계되어야 합니다. 이는 안전한 하드웨어 구성 요소의 통합 및 안전한 소프트웨어 개발을 위한 최선의 방법을 따르는 것을 포함합니다.\n- 네트워크 분할: IoT 장치를 중요한 네트워크 세그먼트로부터 격리하여 침입 시 잠재적인 피해를 제한합니다. 방화벽 및 침입 탐지 시스템과 같은 네트워크 보안 조치를 시행하여 보호를 추가로 강화합니다.\n- 사용자 교육: 사용자에게 기본 자격 증명 변경, 소프트웨어 정기 업데이트 및 피싱 시도 인식의 중요성에 대해 교육하여 보안 사고의 위험을 크게 줄일 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n인터넷의 사물 (IoT) 붐은 흥미로운 가능성과 높아진 사이버 보안 위험 사이의 이중날을 제시합니다. IoT 기기 내의 취약성을 식별하고 강력한 사이버 보안 조치를 시행함으로써, 우리는 민감한 데이터를 보호하고 시스템 무결성을 보장하며 IoT 기술의 지속적 발전을 촉진할 수 있습니다. 디지털 환경이 계속 변화함에 따라, 우리의 상호 연결된 미래를 보호하기 위해 주의와 예방적인 사이버 보안 관행이 극도로 중요해집니다.\n\n원문 게시일: 2024년 5월 25일, https://bytescheck.com에서 발표됨.\n","ogImage":{"url":"/assets/img/2024-05-27-CybersecurityinIoTProtectingOurConnectedFutureBytesCheck_0.png"},"coverImage":"/assets/img/2024-05-27-CybersecurityinIoTProtectingOurConnectedFutureBytesCheck_0.png","tag":["Tech"],"readingTime":3},{"title":"내 전문지식을 3가지 도구를 이용해 몇 분 안에 판매용 코스로 어떻게 변환했는지 알아보세요","description":"","date":"2024-05-27 13:14","slug":"2024-05-27-HowIActuallyConvertMyExpertiseintoCoursesForSaleinMinuteswith3ToolsWillAmazeYou","content":"\n\n![HowIActuallyConvertMyExpertiseintoCoursesForSaleinMinuteswith3ToolsWillAmazeYou_0.png](/assets/img/2024-05-27-HowIActuallyConvertMyExpertiseintoCoursesForSaleinMinuteswith3ToolsWillAmazeYou_0.png)\n\n이것에 대해 '100만 번' 듣거나 읽어 보았을 겁니다; \"Fiverr, Payhip, Gumroad, Amazon 등 마켓플레이스에서 온라인 강좌를 판매하여 돈을 벌 수 있습니다.\" 또는 \"온라인 강좌를 판매하여 6자리 수입을 올린 방법을 배워보세요.\"와 비슷한 고함 소리 제목들을 들어본 적이 있을 겁니다. 아마도 여러분은 전문 지식이 있고 수많은 아이디어를 가지고 있으며, 그 큰 케이크 한 조각을 손에 넣는 꿈을 꾸어 왔을 것입니다, 그렇지 않습니까?\n\n유감스럽게도, 시작점이 어디인지 전혀 모르겠다면! 아니면 아마도 단순히 시간을 들여 과정을 설계하는 일이 너무 힘든 것처럼 느껴질 수 있다면요. 음, 알겠어요? 답은 드디어 여기 있으며, 이에 대한 해답은 세 개의 AI 앱에 있을 수도 있습니다.\n\n참고 — 이 리소스들을 사용하여 온라인 강좌를 만들고 판매하기만 해서 금방 부자가 될 수는 없습니다. 일반적인 조언으로, 성공을 거두기 위해서는 당신이 판매하려는 것에 관심이 있는 시장 조사를 하고 성공적으로 하기 위한 대상 시장을 찾아야 합니다.\n\n<div class=\"content-ad\"></div>\n\n그리고 '인공지능 쓰레기를 생산하는 도구'를 공유하기 전에 내 목을 움켜쥐려 들지 말아주세요! 그렇지 않아요! 오히려, 이 도구들은 이미 존재하는 콘텐츠를 코스로 만드는 데 도움이 되는 도구들이에요.\n\n결과물이 마음에 안 든다면 편집 버튼을 눌러서 스타일을 다시 적용할 수 있어요.\n\n맞아요, AI를 사용해서 생성하는 기능도 있어요. 하지만 특정 분야에 전문지식을 가지고 있고 생성된 정보를 확인할 수 있다면, 언제든지 스타일과 개성을 더해 편집할 수 있어요.\n\n중요한 점은 결과물이 코스 형식으로 구조화되어 있어서 초보자들에겐 좋다는 거예요. 하지만 새로운 기술에 의존하지 않고 속도와 질 높게 코스를 쉽게 만들 수 있는 기술을 이미 갖고 계신다면, 이 도구는 여러분을 위한 것이 아니에요. 생산성과 빠른 작업 완료에 대해 얘기하는 거예요.\n\n<div class=\"content-ad\"></div>\n\n일반적인 규칙으로서, 자신이 전문 지식이 없는 분야의 강의를 만들지 말아야 합니다. 이는 신뢰를 훼손할 수 있습니다.\n\n솔직하게 말씀드리자면, 이 몇 개 앱의 전체 버전은 저렴하지 않을 수도 있어요. 하지만 무엇을 원하고 얻을 수 있는 혜택을 알고 있다면, 그것에 투자하는 것은 가치가 있을 겁니다. 아, 제가 관련된 사람은 아니에요! 이를 명확히 한 후에, 달려봅시다.\n\nCourseau\n\n![이미지](https://miro.medium.com/v2/resize:fit:1380/1*yLEay5NUzZqYNQSwYv7Jhw.gif)\n\n<div class=\"content-ad\"></div>\n\n먼저 소개할 플랫폼은 Courseau입니다. 이미 갖고 계신 콘텐츠를 동적인 온라인 코스로 변환하기에 완벽한 플랫폼입니다. 즉, YouTube 비디오, 팟캐스트 에피소드, 또는 심지어 원고 블로그 콘텐츠가 있다면 이를 온라인 코스로 판매할 수 있을 것으로 믿습니다. 물론, 어떤 사람들은 코스나 단계별 가이드를 선호합니다. Courseau는 이 과정을 간소화해줄 수 있습니다. 이렇게 합니다:\n\n먼저 '무료로 시작' 버튼을 클릭하여 등록을 완료하세요. 등록이 완료되면 '라이브러리' 섹션에서 '만들기' 옵션이 표시됩니다. 그곳에서 온라인 코스 툴을 찾아 코스를 만들기 시작하세요.\n\n무료 계정에서는 '미니'를 만나게 됩니다. 이는 GPT 3.5의 간소화 버전을 사용하여 여러분이 관심을 갖는 경우 6~8개의 레슨으로 이뤄진 간단한 코스를 만드는 데 도움을 줍니다.\n\n그리고 이것이 우리의 관심을 끄는 부분입니다 — 이 플랫폼은 YouTube 링크, 오디오 파일, 웹페이지, PDF, Word 문서와 같은 다양한 형식의 콘텐츠 업로드를 받아들입니다. 페이지 수로 30페이지 또는 오디오로 2시간까지입니다.\n\n<div class=\"content-ad\"></div>\n\n더 많은 기능을 원하신다면, Pro로 업그레이드하여 더 긴 그리고 광범위한 강좌 생성 문을 열어보세요. 소스 URL을 붙여 넣거나 문서를 업로드한 후 처음 강좌를 만들기 위해 단계를 따르세요.\n\n이 단계 이후에는 커스터마이즈 섹션을 만나게 될 겁니다. 여기서 색감을 변화시켜 강좌에 개성을 불어넣을 수 있습니다. 선택을 마치면 \"강좌 생성\"을 클릭하고 그 마법을 일으키게두 되세요.\n\n몇 분 안에 강좌가 완성될 것입니다. 콘텐츠에 따라서 강의 계획서, 실행 가능한 단계, 심지어 퀴즈까지 모두 포함될 수 있을 겁니다. 이는 콘텐츠를 매력적인 학습 경험으로 정제하는 플랫폼의 능력을 검증하는 것입니다.\n\n만약 당신이 만든 강좌가 맞는 느낌을 주면, 당연히 ‘발행’을 클릭하세요. 아직 그 수준에 도달하지 못했다면, ‘편집’ 옵션을 통해 그것을 다듬을 수 있는 창구를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n수정된 내용을 저장한 후 ‘저장 및 미리보기’를 클릭하면 작품을 잠깐 볼 수 있어요. 여기가 과제인데, 특히 무료로 이용하는 분들에겐 안 기능이요 — Courseau는 과정 생성에 뛰어난데, 과정을 전개시키고 싶으면 업그레이드가 필요해요. 그러니 세계와 나누고 싶은 작품을 공유하고 싶다면 업그레이드가 필요할 거에요.\n\n업그레이드하고 싶다면, 완료 후 과정 링크를 받을 거예요. 그러면 Gumroad나 Payhip 같은 플랫폼과 통합해 전문성을 활용해 돈을 버실 수 있어요.\n\n그래서 이 도구는 가치가 있어요. 하지만 한 번 들여다 볼 이유도 있어요.\n\n러닝 스튜디오 AI\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*qXSr2cw1a9YsD_9XQ15Gdg.gif)\n\n이 앱을 사용하면 가입하자마자 친절한 사용자 인터페이스로 환영받을 수 있습니다. 주제를 입력하고 강의 라이브러리에 짜맞추는 것을 지켜보는 것으로 초대합니다. 그게 전부입니다!\n\n커리큘럼 형식과는 달리 Learning Studio AI는 논리적 진행을 제공하는 블로그 형식의 프레젠테이션을 제공합니다. 편집 모드 없이도 학생들이 콘텐츠를 쉽게 미리보기할 수 있는 몰입형 경험이 가능합니다.\n\n세계와 지식을 공유할 준비가 되었다면, Learning Studio AI를 통해 링크를 복사하여 학생들과 공유하면 그들이 가입하고 참여할 수 있습니다. 오프라인 학습을 위해 PDF 버전을 다운로드할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 플랫폼의 멋진 점은 기술에 능숙한 사람들만을 위한 것이 아니라는 것입니다. 게다가, 다양한 주제를 다룰 수 있는 유연성을 갖추고 있습니다. 이 플랫폼은 정확도 높은 코스를 생성할 수 있어서 실용적인 연습과 실제 응용을 포함한 풍부한 학습 경험을 제공할 수 있습니다.\n\n마찬가지로 코스를 매우 쉽게 개인화할 수 있습니다. 예를 들어, 테마 색상을 변경하거나, Learning Studio AI 로고의 가시성을 결정하거나, 이미지나 비디오를 삽입하여 학습 여정을 향상시킬 수 있습니다.\n\n내 의견으로는, 이것은 온라인 코스를 통해 지식을 만들고 공유하려는 사람들을 위한 강력하고 직관적인 도구로 빛납니다. 게다가, 누구나 사용할 수 있습니다.\n\n미니 코스\n\n<div class=\"content-ad\"></div>\n\n![image](https://miro.medium.com/v2/resize:fit:1380/1*BcOtUKohcz4S6ogqDNBrsg.gif)\n\n미니 코스는 또 다른 뛰어난 앱입니다! 이 앱은 각각 다른 세그먼트를 나타내는 '카드' 시스템을 활용합니다. 위의 gif 예시에서 볼 수 있듯이, 저는 \"WordPress를 활용한 웹사이트 개발 초보자를 위한 궁극의 안내서\"라는 코스를 만들어 보았습니다. 이는 제 전문 분야 중 하나입니다.\n\n따라서 내용을 단계별로 사실 확인하고 필요한 곳에 수정을 가할 수 있습니다. 또한 작문 스타일을 완전히 통합하여 스스로의 것으로 만들 수도 있습니다!\n\n이 앱이 얼마나 완벽하게 사용자 정의 가능한지, 이미지, 비디오, 심지어 AI 생성 콘텐츠를 추가하여 학습 경험을 풍부하게하고 안내할 수 있다는 점을 확인할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n미니 코스로 무엇을 할 수 있을까요? AI 어시스턴트를 활용하여 안내 받는 것이나, 원한다면 처음부터 시작할 수도 있어요. 카드 단위로 컨텐츠를 쉽게 조합할 수 있어요.\n\n이 앱을 통해 컨텐츠를 만드는 것뿐만 아니라 여정을 디자인하는 경험을 할 수 있어요. 또한 문법 검사, 요약 기능, 브랜드에 맞는 다양한 테마 등을 제공하여 코스를 완벽하게 세밀하게 조정할 수 있어요.\n\n코스가 준비되면 미리보기 기능을 통해 학생으로서 코스를 체험해볼 수 있어요. 마음에 드는 내용이라면 쉽게 공유할 수 있어요.\n\n미니 코스는 빠르게 온라인 코스를 만들고 배포하고자 하는 사람들에게 신뢰할 수 있고 다재다능한 도구로 보입니다. 이미 잘 확립된 존재감과 다양한 기능을 갖춘 이 앱은 모든 수준의 교육자들에게 뛰어난 선택지가 될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n그럼 이렇게 되었어요! 각 플랫폼마다 Courseau의 매끄러운 콘텐츠 변환, Learning Studio AI의 혁신적인 블로그 스타일 코스, Mini Course의 대화형 카드 시스템과 같은 독특한 강점을 제공합니다.\n\n그래서 경험이 풍부한 교육자이든 디지털 콘텐츠 크리에이터이든, 이 도구들은 학습자가 어디에서나 공감할 수 있는 매력적인 온라인 강좌를 디자인하는 데 도움이 되는 다양한 기능을 제공합니다.\n\n학습의 여정은 절대 끝나지 않으며 항상 다양한 형태를 취합니다. 그럼 읽어주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-27-HowIActuallyConvertMyExpertiseintoCoursesForSaleinMinuteswith3ToolsWillAmazeYou_0.png"},"coverImage":"/assets/img/2024-05-27-HowIActuallyConvertMyExpertiseintoCoursesForSaleinMinuteswith3ToolsWillAmazeYou_0.png","tag":["Tech"],"readingTime":6},{"title":"PIC 생태계","description":"","date":"2024-05-27 13:11","slug":"2024-05-27-PICEcosystem","content":"\n# PIC16LF18324 코딩을 시작하는 방법\n\n만약 이미 라즈베리 파이코나 다양한 아두이노로 몇 가지 프로젝트를 해 보셨고 다른 마이크로컨트롤러에서 작업을 시도해보고 싶다면, Microchip 사의 PIC를 사용해보시길 권해드립니다. 여기에는 때로는 흥미로운 도전이 될 수 있는 8비트 마이크로컨트롤러들이 포함되어 있습니다. 셋업하기 위해 약간의 비용이 들 수는 있지만, 칩 자체는 저렴하며 즐겁게 만들고 탐험할 수 있습니다.\n\n이 글은 시작하는 데 필요한 도구에 대해 설명합니다. 이 글은 개발 보드가 아닌 PIC 마이크로컨트롤러 자체에 대한 것입니다. 여기에서 다루고 있는 유형의 개별 PIC 마이크로컨트롤러보다 비쌌지만 PicKit 항목을 구입할 필요가 없도록 도와주는 PIC 마이크로컨트롤러용 개발 보드가 있습니다.\n\n만약 여전히 관심이 있다면, 개발 보드를 넘어서거나 다른 사전에 납땜된 방법을 넘어서고 싶다면, 계속해서 읽어보세요.\n\n<div class=\"content-ad\"></div>\n\n# 왜 PIC를 선택해야 하는가?\n\nPIC의 흥미로운 측면 중 하나는 그 가족 중 특별한 저전력 칩이 있다는 것입니다. 저전력 사용은 빠른 알고리즘을 설계하는 것과 유사한 도전 과제입니다. 그러나 적절한 MCU를 선택함으로써 큰 도움을 받을 수 있습니다. 아두이노 \"플랫폼\"은 많은 사람들에게 좋은 시작점입니다. 그것은 간단히 ATTiny85와 같은 관련 AVR 칩을 탐구할 수 있도록 쉽게 사용할 수 있습니다. 그러나 마이크로컨트롤러에 대한 보다 폭넓은 이해를 원하고 아두이노의 세계를 벗어나려면, PIC 패밀리는 매우 낮은 전력을 제공하여 그 방법을 제공할 수 있습니다. PIC16LF18324 (또한: 18324, 이후로는 \"칩\" 또는 \"픽\"으로 지칭)는 이러한 제안 중 하나입니다. 이 칩은 이름과는 달리 16이 아닌 8비트 칩입니다. 14개의 핀이 있으며, 그 중 12개는 I/O 핀입니다. PIC 패밀리의 다른 구성원들은 다양한 핀 수를 갖고 있습니다. 이름에 'L'이 있는 것은 \"저전력\"을 의미합니다. 이름에 'L'이 없는 비저전력 모델도 있지만 이 모델은 여기에서 다루지 않겠습니다. PIC16LF18324 칩만 구입하는 비용은 ATTiny85와 비슷합니다. ATTiny85처럼 스룰 구멍 또는 표면실장 패키지로 구입할 수 있으며, 내장 오실레이터도 내장되어 있습니다.\n\n18324는 7K의 RAM을 제공하며, 외부 크리스탈이 필요하지 않고 제공되는 32MHz의 속도로 실행됩니다. 내장 오실레이터는 공장에서 보정되었습니다. 7KB의 플래시와 1/2K (512바이트)의 정적 RAM이 탑재되어 있습니다. 다양한 주변 기기(많은 MCU들처럼)를 갖고 있습니다.\n\n- USART (증강 USART 또는 EUSART라고 불림)\n- I2C\n- SPI\n- PWM (모터 제어나 TV 및 기타 리모컨에서 자주 사용됨)\n- 타이머 (캡처/비교 포함); 또한 \"와치독\" 타이머도 있음\n- 아날로그/디지털 변환기 및 디지털/아날로그 변환기\n- 물론: 핀을 읽거나 핀에 디지털 값을 쓸 수 있는 능력(1은 LED 켜기; 0은 LED 끄기)\n\n<div class=\"content-ad\"></div>\n\n18324에서 특히 좋은 기능 중 하나는 PPS입니다. 이 \"주변 핀 선택\" 기능을 사용하면 대부분의 핀을 어떤 주변 장치에도 사용할 수 있습니다. 다양한 마이크로컨트롤러의 핀 배치도를 보신 적이 있을 수도 있습니다. 18324는 핀에 대한 일부 기본 설정이 있을 수 있지만, 상당한 유연성으로 라우팅할 수 있습니다. 이에는 일부 제한 사항이 있을 수 있지만(클럭 속도 등을 기반으로 한 PPS 매핑이 불가능한 특정 핀 등), 예를 들어 EUSART TX 핀을 RC4로 라우팅할 수 있습니다.\n\n핀에 대해 이야기할 때, 14개의 핀에 제한된 18324는 그 I/O 핀을 RAn 또는 RCn 중 하나로 지정합니다. PIC16 패밀리의 더 큰 멤버들은 RBn도 설정합니다. 두 핀은 전원 공급용으로 \"바쁩니다\" (VDD와 VSS). 많은 다른 칩들과 달리 전원 핀이 대각선에 위치하는 칩들과 달리, VDD(전원)와 VSS(그라운드)는 한쪽 끝의 노치 반대편에 있습니다. 전원 핀은 18324 칩의 한쪽 끝에 있습니다. 전체 핀 배치도는 아래에 표시되어 있습니다.\n\n이 간단한 소개가 제공된 이제 PIC16lf18324에서 시작하기 위해 필요한 설정 또는 \"장비\"를 살펴보는 시간입니다.\n\n# 사전 준비 조건\n\n<div class=\"content-ad\"></div>\n\n만약 이 글을 그냥 흥미로이 읽고 싶다면 맘껏 읽어보세요. 하지만 이 글과 함께 코딩하길 원한다면, 다음 사항을 준비해야 하거나 받아야 할 수도 있습니다.\n\n- 브레드보드\n- PIC16LF18324 칩\n- 프로그래밍 장비\n- 와이어 (또는 두폰트 케이블)\n- LED\n- 두 개의 저항\n- 100Ω에서 330Ω의 저항 값이 적당합니다. 더 높은 값도 괜찮지만, LED가 어두워질 수 있습니다.\n- 5.1 kΩ 풀업 저항기 (또는 근사값)\n- 0.1 µF 캐패시터. 세라믹, 비편광이 권장됩니다.\n- 어떤 종류의 전원 공급 장치. 건전지가 적당합니다. 약 3.3V 정도 필요합니다.\n- 'C' 코드에 대한 약간의 지식이 있으면 유용합니다. 코드는 제공됩니다.\n\n# 칩 구매\n\n이들은 DigiKey 또는 Mouser에서 주문할 수 있습니다. 둘 다 각각 2달러 미만입니다 (2024년 5월에 각각 1.29달러에서 1.56달러로 확인되었습니다). 대량 구매할 경우 할인이 적용되어 가격이 더욱 내려갈 수 있습니다. 필요한 패키징을 획득하기 위해 주의해야 합니다. 이 칩을 브레드보드에 꽂으려면 \"PDIP\"와 같은 스루홀 패키지가 필요합니다. 이는 \"14 PDIP\" 또는 \"PDIP-14\"로 불릴 수 있습니다. 또한 배송 비용을 주의하세요. 이 비용이 여러 칩의 가격보다 비쌀 수 있습니다. 세 개 이상을 그룹으로 구매하면 배송비를 절감할 수도 있습니다. 아마존에서는 (이 지침과 호환되지 않지만 보통 사용하기 쉬운) PIC 보드를 20달러 미만으로 구매할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 가장 큰 비용: 프로그래머\n\nPIC16 패밀리 칩에 노출되기 위해 인-시스템 프로그래밍용 개발 보드를 사용하는 것이 가능할 수 있습니다. 독자가 투자를 활용하고 싶다면 좋은 구글링을 해볼 만한 가치가 있을지도 모릅니다. 그러나 '훈련 바퀴를 제거하고', 생태계에 깊숙이 들어가려면 로우 마이크로컨트롤러를 사용해야 합니다. 이는 마이크로컨트롤러 작업 시 지출이 반복적으로 필요한 사항입니다. 이 기기 없이도 성공적으로 진행할 수 있다면 언제든지 자유롭게 해보십시오.\n\n과거에는 PICkit 4®가 약 $100에 구매 가능했으며, 아래에서 설명합니다. 보다 최근에 PicKit 5가 소개되었으며 제조사에 의해 PICkit 4가 지연 폐기되었습니다. 그러나 가격은 대략 동일합니다. 유사한 기능을 갖춘 것으로 가정됩니다. 두 제품 모두 MPLAB X IDE v6 소프트웨어와 호환됩니다(아래 더 자세히 설명함). 이제는 더 저렴한 기기(약 $40)도 구매할 수 있을 수 있습니다. 개인별 사용환경에 따라 다를 수 있습니다.\n\nMPLAB PICKit4에는 한쪽 끝에 연결 커넥터 구멍이 있습니다(또는 참조로 사용하는 레이블링에 따라서 '밑면'입니다). 매우 특정한 핀배열을 갖추고 있습니다. 이 구멍을 브레드보드에 연결해야 합니다. Dupont 케이블이나 일반 와이어로도 잘 작동합니다. 이 칩에 대한 다양한 프로젝트를 수행한다면, 더 편리한 것이 필요할 수 있음을 발견할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nPICKit4의 다른 쪽에는 작은 USB 2 커넥터가 있습니다. 이를 PC에 연결할 수 있습니다 (사람들은 포럼 게시물에 따르면 MAC 및 Linux도 사용합니다). 연결하고 나면 IDE에서 프로그램을 할 수 있습니다.\n\n# 소프트웨어\n\n마이크로컨트롤러에 코드를 로드하는 것은 C 컴파일러와 MPLAB X IDE라는 다운로드 가능한 소프트웨어로 처리할 수 있습니다. 이 문서 작성 시에는 버전 6입니다.\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_0.png)\n\n<div class=\"content-ad\"></div>\n\n아래에 전체 지침이 있지만, 대체로 Microchip의 개발자 도움 페이지인 Install MPLAB® X IDE Version 6.00 Walkthrough에서도 확인할 수 있습니다. MPLAB X는 다른 IDE와 유사하게 설치됩니다(실제로, 설치 파일을 기반으로 하면 Apache의 NetBeans IDE를 기반으로 한 것으로 보이며, 마이크로컨트롤러와 함께 사용하기 위해 많은 사용자 정의가 있습니다).\n\n이 IDE에서 완전히 새로운 PIC16LF18324 프로젝트를 설정하는 방법은 아래에 설명되어 있지만, 먼저 몇 가지 유용한 도구와 필요한 대화 상자에 대해 살펴보겠습니다.\n\n# 몇 가지 도구와 대화 상자\n\n프로젝트를 만든 후에는 프로퍼티 페이지를 살펴보는 것이 매우 유용합니다. 왼쪽에 설명된 대로, \"마우스 클릭\"(Windows에서 좌 클릭하거나 기타 OS에서는 일반적으로 OS와 같은 방식으로 메뉴를 띄워주십시오)하고 나서 \"Properties\" 메뉴 항목을 가장 아래에서 클릭합니다. IDE의 나중/이전 버전은 이것을 다르게 배치할 수 있지만, \"Properties\"는 매우 가능성이 높은 이름입니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-PICEcosystem_1.png\" />\n\n클릭하면 아래와 같이 새로운 팝업 대화 상자가 나타납니다. 이 대화 상자에는 작업할 기기 이름 설정이 포함되어 있습니다. 이 설정은 디버깅 및 내장 플래시 드라이브에 코드를 불러올 때 필요합니다.\n\n<img src=\"/assets/img/2024-05-27-PICEcosystem_2.png\" />\n\n왼쪽에 트리 구조를 주목해주세요. 이것은 오른쪽 창의 모드를 변경합니다. \"PICKit4\" 노드를 클릭하면 아래 모드로 변경됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n![PICEcosystem Image 3](/assets/img/2024-05-27-PICEcosystem_3.png)\n\n이것은 \"Options categories\" 드롭다운을 사용하는 데 매우 중요한 부분입니다. 이것은 여전히 보이는 컨트롤을 더 조정합니다.\n\n![PICEcosystem Image 4](/assets/img/2024-05-27-PICEcosystem_4.png)\n\n\"Power target circuit from the PICkit 4\"를 선택해야 합니다. 이 설정은 컴퓨터의 USB 드라이브를 통해 PICkit 4와 PIC 칩을 연결한 경우에 사용됩니다. 디버깅 및 플래시 드라이브에 코드를 업로드하는 데 필요합니다. 이 값은 USB 전원을 보드로 공급합니다. 이를 사용하지 않으면 보드 자체의 전원이 사용됩니다. 그림에서와 같이 단순한 브레드보드에 칩을 연결한 경우, PICkit으로부터 전원을 공급하는 것이 올바른 선택입니다. 이 값은 기본적으로 선택되지 않습니다. 아마도 소프트웨어가 모든 하드웨어를 보호하려고 하기 때문일 것입니다. 대상 보드에 백업 전원 공급이 사용 중인 경우 이 설정은 좋은 선택이 아닙니다. 실제로 이 설정을 \"Power target circuit from PICkit 4\"로 변경하지 말아야 할 때까지 변경하지 않으려다고 말할 정도입니다. 필요한 경우 팝업 메시지가 표시될 때까지 변경하지 마세요. 이 설정이 필요하지만 설정되지 않은 경우 PICkit / IDE 조합은 팝업 오류 대화상자로 경고합니다. 설정을 저장하려면 \"확인\" 버튼을 클릭해야 합니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 구성 비트\n\n![PICEcosystem_5](/assets/img/2024-05-27-PICEcosystem_5.png)\n\n이 메뉴 항목은 \"구성 비트\"를 엽니다. PIC 영역에서는 하드웨어를 낮은 수준에서 설정하는 특수 플래시 버닝 설정이 선택됩니다. 다른 마이크로컨트롤러에서는 이러한 설정을 \"퓨즈\"라고 할 수 있습니다.\n\n![PICEcosystem_6](/assets/img/2024-05-27-PICEcosystem_6.png)\n\n<div class=\"content-ad\"></div>\n\n여기에서 구성할 수 있는 설정 사항입니다. 이 작은 칩이 실제로 수행할 수 있는 몇 가지 흥미로운 작업의 아이디어를 제공할 수 있습니다 (브라운 아웃 감지, 위에서 언급한 PPS(주변 핀 선택), 그리고 와치독 타이머까지 모두 여기서 암시됩니다). 이 토론과 가장 관련된 것은 아마 위쪽에 있는 \"FEXTOSC\"/\"RSTOSC\" 설정 쌍일 것입니다. 이 PIC 칩은 클럭 구동에 있어 유연합니다. 외부 오실레이터를 사용할 수 있지만, 사용 중이 아닌 경우 여기서 비트를 설정하지 않아야 합니다. 이 토론 목적상 FEXTOSC(외부 오실레이터)를 off로 설정하고, RSTOSC(리셋 기본 오실레이터)를 NFINT32(내부 32,000,000 Hz로 읽음) 설정으로 설정하세요. 이것은 1 MHz로도 설정할 수 있습니다. 그러나 외부 설정은 칩을 구동하는 오실레이터를 배선해야 하며, 이 토론의 범위를 벗어납니다. 또한 핀을 사용하고 더 많은 비용이 소요되며 더 많은 하드웨어 조작이 필요합니다.\n\n이 문서의 다른 곳에서 제시된 코드에 관해: 작업 부분 외에도 실제로 운영 부분에 대한 추가 코드가 상단의 “Generate Source Code to Output” 버튼을 클릭하여 생성되었습니다. 이것은 다음과 같은 코드를 생성합니다: 코드 값 시작부)을 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\nXC8 컴파일러를 설치할 겁니다. 다운로드할 수 있는 링크는 아래와 같아요: https://www.microchip.com/en-us/tools-resources/develop/mplab-xc-compilers .\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_7.png)\n\n컴파일러를 선택하는 것은 당신이 작성하는 코드와 최적화 수준에 영향을 줄 거예요. 이 컴파일러는 IDE와 칩이 같은 회사에서 제공하는 것이라 안전한 선택이에요. 다운로드 페이지에는 \"수상 경력\"이 있다고 쓰여 있어요. 당연히 독자께서는 리뷰와 대안을 확인하실 수도 있어요. 다른 하드웨어를 구입해야 할 수도 있지만, ATTiny 시리즈 같은 AVR을 더 좋아하는 경우, 이 글에서 소개된 설정과 유사한 것을 사용하면 Arduino의 세계에서 벗어날 수도 있어요.\n\n해당 버튼을 클릭하면 라이선스를 보여주는 큰 페이지로 이어지는데, 이는 이 소프트웨어를 기반으로 한 프로젝트를 배포할 계획이 있다면 중요한 고려 사항이에요. 또한 다운로드 컨트롤이 나와 있어요.\n\n<div class=\"content-ad\"></div>\n\n\n![PICEcosystem_8](/assets/img/2024-05-27-PICEcosystem_8.png)\n\n현재 작성 시점보다 몇 달 전의 날짜를 가진 것이 있습니다. 이는 코드가 꾸준히 유지되고 있는 좋은 신호입니다. IDE는 업데이트 프롬프트를 정기적으로 제공합니다.\n\n여기서 다운로드는 설치 프로그램을 위한 것입니다. 해당 설치 프로그램을 실행하면 아래의 대화 상자들이 팝업됩니다.\n\n![PICEcosystem_9](/assets/img/2024-05-27-PICEcosystem_9.png)\n\n\n<div class=\"content-ad\"></div>\n\n\n![PICEcosystem_10](/assets/img/2024-05-27-PICEcosystem_10.png)\n\n![PICEcosystem_11](/assets/img/2024-05-27-PICEcosystem_11.png)\n\n![PICEcosystem_12](/assets/img/2024-05-27-PICEcosystem_12.png)\n\n![PICEcosystem_13](/assets/img/2024-05-27-PICEcosystem_13.png)\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_14.png)\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_15.png)\n\n# Tool Chains\n\nMPLAB X IDE는 빌드를 수행하기 위해 \"툴 체인\" (컴파일러 및 기타 관련 코드를 포함하는 도구)을 사용합니다. \"도구/옵션\"을 이용하여 관리할 수 있으며, 이어지는 대화 상자에서 임베디드 아이콘을 클릭하세요.\n\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_16.png)\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_17.png)\n\n# 프로젝트 생성하기\n\n이것이 여러분이 처음으로 만드는 PIC16LF18324 프로젝트일 수도 있습니다. 혹시 그보다 더 큰 프로젝트라면 환영합니다! 여기서는 간단한 LED 프로젝트를 만들어 보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 \"파일 / 새 프로젝트\"로 시작합니다.\n\n![File / New Project](/assets/img/2024-05-27-PICEcosystem_18.png)\n\n이렇게하면 위자드 대화 상자가 표시됩니다.\n\n![Wizard Dialog](/assets/img/2024-05-27-PICEcosystem_19.png)\n\n<div class=\"content-ad\"></div>\n\n우리는 Microchip 임베디드 독립 프로젝트를 진행할 것입니다. \"샘플\" 서브트리가 상당히 유혹적이지만, 우리가 선택한 칩과 관련이 없습니다. 독립 프로젝트는 실제로 다루기 매우 간단합니다.\n\n![image](/assets/img/2024-05-27-PICEcosystem_20.png)\n\n![image](/assets/img/2024-05-27-PICEcosystem_21.png)\n\n![image](/assets/img/2024-05-27-PICEcosystem_22.png)\n\n<div class=\"content-ad\"></div>\n\n다음 화면에서는 컴파일러를 선택할 수 있어요. 이 IDE에서는 이에 대한 유연성을 제공합니다.\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_23.png)\n\n이전에 설치한 것을 사용하세요.\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_24.png)\n\n<div class=\"content-ad\"></div>\n\n\"Set as main project\"를 선택한 채로 두면 여러 제어에서 이것을 기본 선택으로 지정할 수 있습니다. 아래에서 LED를 깜빡이는 코드가 간단하게 포함될 것입니다.\n\n![LED Blinking](/assets/img/2024-05-27-PICEcosystem_25.png)\n\n# 코드\n\n지금까지 진행한 내용으로 코드를 추가하는 시작점을 얻었습니다. 이를 위해 IDE의 projects 탭을 사용하여 Projects 창을 표시하고 싶을 것입니다. 아래 이미지에서 소스 파일 트리 노드가 비어 있는 것을 볼 수 있습니다 ('+' 표시가 없는 상태로 확장해도 파일이 없습니다).\n\n<div class=\"content-ad\"></div>\n\n아래는 표 형식을 Markdown 포맷으로 바꾸는 방법입니다:\n\n\n<img src=\"/assets/img/2024-05-27-PICEcosystem_26.png\" />\n\nWe will remedy that.\n\n<img src=\"/assets/img/2024-05-27-PICEcosystem_27.png\" />\n\nUsing this control, we can add a “main.c” file. ‘C’ is the language we will use for this program.\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_28.png)\n\n이미지를 삽입한 코드는 아래와 같습니다.\n\n/*\n\n* File: blinker.c\n\n\n<div class=\"content-ad\"></div>\n\n- 작성자: you\n\n-\n\n- 2024년 5월 23일 오전 12:21에 작성함\n\n\\*/\n\n<div class=\"content-ad\"></div>\n\n```c\n#include `xc.h`\n\nvoid main(void) '\n\nreturn;\n\n'\n```\n\n<div class=\"content-ad\"></div>\n\n이것은 그렇게 많은 것을 하지 않아. 하지만 완전한 프로그램인 건 맞아. 이제 하는 일은 세부 사항을 채우는 거야. 자세히 구성하면 요런 느낌이 될 거야.\n\n\n// PIC16LF18324 Configuration Bit Settings\n\n// ‘C’ source line config statements\n\n// CONFIG1\n\n\n<div class=\"content-ad\"></div>\n\n\n- FEXTOSC = LP: 외부 오실레이터 모드 선택 비트 (32.768 kHz에 최적화된 LP(크리스탈 오실레이터))\n- RSTOSC = HFINT32: COSC 비트의 전원 업 기본 값 (2x PLL과 함께 HFINTOSC(32MHz)가 기본값)\n- CLKOUTEN = ON: 클록 출력 활성화 비트 (CLKOUT 기능이 활성화되어 OSC2에서 FOSC/4 클록이 나타남)\n- CSWEN = OFF: 클록 전환 활성화 비트 (사용자 소프트웨어로 NOSC 및 NDIV 비트를 변경할 수 없음)\n\n\n<div class=\"content-ad\"></div>\n\n\n#pragma config FCMEN = OFF // 실패 안전 클럭 모니터 활성화 (실패 안전 클럭 모니터가 비활성화됨)\n\n// CONFIG2\n\n#pragma config MCLRE = OFF // 마스터 클리어 활성화 비트 (MCLR/VPP 핀 기능은 디지턼 입력; MCLR 내부적으로 비활성화됨; 약한 풀업은 포트 핀의 WPU 제어 비트에 따라 제어됨.)\n\n#pragma config PWRTE = ON // 파워업 타이머 활성화 비트 (PWRT 활성화됨)\n\n\n<div class=\"content-ad\"></div>\n\nMarkdown 형식으로 테이블 태그를 변경해주세요:\n\n\n| Configuration | Setting  |\n|---------------|----------|\n| WDTE          | OFF      |\n| LPBOREN       | ON       |\n| BOREN         | OFF      |\n| BORV          | HIGH     |\n\n\n<div class=\"content-ad\"></div>\n\n\n#pragma config PPS1WAY = OFF // PPSLOCK bit One-Way Set Enable bit (The PPSLOCK bit can be set and cleared repeatedly (subject to the unlock sequence))\n\n#pragma config STVREN = OFF // Stack Overflow/Underflow Reset Enable bit (Stack Overflow or Underflow will not cause a Reset)\n\n#pragma config DEBUG = ON // Debugger enable bit (Background debugger enabled)\n\n// CONFIG3\n\n\n<div class=\"content-ad\"></div>\n\n\n#pragma config WRT = ALL // User NVM self-write protection bits (0000h to 0FFFh write protected, no addresses may be modified)\n\n#pragma config LVP = OFF // Low Voltage Programming Enable bit (High Voltage on MCLR/VPP must be used for programming.)\n\n// CONFIG4\n\n#pragma config CP = ON // User NVM Program Memory Code Protection bit (User NVM code protection enabled)\n\n\n<div class=\"content-ad\"></div>\n\n\n#pragma config CPD = ON // 데이터 NVM 메모리 코드 보호 비트 (데이터 NVM 코드 보호 활성화)\n\n// #pragma 구문은 프로젝트 파일 포함보다 앞에 있어야 합니다.\n\n// ON 및 OFF에 대한 #define 대신 프로젝트 열거형 사용.\n\n#include `xc.h`\n\n\n<div class=\"content-ad\"></div>\n\n```c\n#define _XTAL_FREQ 32000000 // 20MHz 크리스탈 주파수로 정의\n\nvoid main(void) '\n\nTRISC0 = 0; // RC0 핀을 디지턀 출력 핀으로 설정\n\nwhile (1) '\n```\n\n<div class=\"content-ad\"></div>\n\n```c\nRC0 = 1; // RC0 핀을 논리 High로 설정하고 켭니다\n\n__delay_ms(250); // 1/4초의 지연을 추가합니다\n\nRC0 = 0; // RC0 핀을 논리 Low로 설정하고 끕니다\n\n__delay_ms(1000); // 1초의 지연을 추가합니다\n```\n\n<div class=\"content-ad\"></div>\n\nMCU(칩)의 핀이 올바르게 배선되면 이것이 칩에 적재되어 LED가 아래에 연결한 상태로 깜박이게 만들 것입니다.\n\n<div class=\"content-ad\"></div>\n\n코드의 시작 부분부터 (대부분을 포함하여) 이전에 언급한 'bit' 설정이 있습니다. 이러한 설정을 제거하면 'C' pragma 설정으로 주로 구성되어 있지만 실제로 다른 동작을 일으킬 수 있습니다. 이 설정은 실제로 자동으로 생성되므로 특별히 이해할 필요는 없습니다.\n\n이 코드에서 주목할 점은 선언되지 않은 변수에 대한 모든 참조입니다. 이들은 실제로 'register' 위치입니다. 마이크로컨트롤러(MCU)의 핀은 일반적으로 특수 하드웨어로 지원되며 매우 유연한 기능을 갖고 있습니다. 여기서 PIC은 유연성에서 뛰어나지만 선택을해야 하는 대가가 따릅니다. 이것은 Arduino 스케치와 같은 것과는 다른, 좀 더 복잡한 세계입니다. 여기서 RC0 핀은 먼저 설정해야 합니다. 다행히 이 작업은 꽤 간단하고 \"가능성이 높은\" 작업입니다 - 핀에 쓰기 작업을 수행해야 합니다. 다른 기능에는 더 많은 단계가 필요합니다.\n\n\"while(1)\"은 \"영원한 루프\"의 구현입니다. 계속해서 실행됩니다. 이 루프는 지정된 시간 간격으로 1과 0을 쓰면서 RC0 핀에서 높은 또는 낮은 전압을 생성합니다. 이전에 언급한 핀배치에 대해 아래에서 살펴보겠습니다.\n\n# 코드 번쩍이기\n\n<div class=\"content-ad\"></div>\n\n제공되는 우수한 도구 세트를 이용하여, 우리는 MCU에 코드를 'burn'하거나 'flash'할 수 있습니다. MCU에 프로그래밍을 하려면, 위에서 언급한 특별한 하드웨어를 통해 해야 합니다. 왜냐하면 MCU는 일반용 컴퓨터와는 달리 매우 독립적이기 때문입니다. 이 간단한 MCU의 연결성은 그 핀에 연결하는 모듈에 달려 있습니다. 인터넷 연결기나 무선 기능은 없지만, 자체 메모리(여러 유형)를 갖고 있으며, 프로그램을 플래시에 넣기 위해서는 (리셋이나 전원 차단 후에도 동일하게 유지될) 칩에 PICkit 4와 같은 장치를 사용하여 프로그램을 넣어주어야 합니다. 이러한 장치는 종종 특별한 전압 수준을 사용합니다. 이를 통해 칩이 실수로 재프로그램되지 않고 정상적으로 실행되도록 할 수 있습니다(그리고 'brick'이나 쓸모없어지는 것을 막을 수 있습니다).\n\n## 배선\n\n코드 플래싱 작업 중에, C 코드는 적절한 형식으로 컴파일됩니다. 이 때 브레드보드가 처음으로 등장합니다. 프로그램을 burn하기 위해서는 두 가지를 알아야 합니다. 첫째, PIC16LF18324 자체의 핀 배치도를 알아야 합니다.\n\n![PIC16LF18324 Pinout](/assets/img/2024-05-27-PICEcosystem_29.png)\n\n<div class=\"content-ad\"></div>\n\nPIC16(L)F183XX 제품 브리프에서 확인할 수 있어요.\n\n다음으로, 이 핀들이 PICKit4에 어떻게 연결되어야 하는지 알아야 해요.\n\n![이미지를 찾을 수 없습니다](/assets/img/2024-05-27-PICEcosystem_30.png)\n\nMPLAB PICkit 4 인-서킷 디버거 사용자 가이드에 이 자세한 내용이 있어요.\n\n<div class=\"content-ad\"></div>\n\n여기에는 특별히 중요한 핀이 있습니다. 핀 1은 MCLR 핀으로 \"액티브 로우\"입니다. 이 핀은 칩의 일부이기 때문에 정상 작동 시에는 이 핀을 \"풀드 하이\"로 유지해야 합니다. 우리는 PIC 칩의 해당 핀에서 브레드보드의 전원 레일로 이어지는 상당히 큰(5.1kΩ) 저항을 사용하여 이를 수행할 것입니다. 왼쪽에 있는 핀들의 중간에 있는 이 핀으로부터 실행되는 와이어는 위와 같이 정렬된 칩의 왼쪽 측 핀 중간에 있습니다. 그렇지 않으면, 프로그래머의 핀 1로 동일하게 연결해야 합니다. 그렇지 않으면, 다섯 개의 핀을 연결해야 합니다.\n\n# 배선\n\n지금까지 알게 된 내용을 고려하면, 여기서 설명하는 대로 연결해야 합니다.\n\n![PICEcosystem_31.png](/assets/img/2024-05-27-PICEcosystem_31.png)\n\n<div class=\"content-ad\"></div>\n\n\n![2024-05-27-PICEcosystem_32](/assets/img/2024-05-27-PICEcosystem_32.png)\n\n![2024-05-27-PICEcosystem_33](/assets/img/2024-05-27-PICEcosystem_33.png)\n\n\"top\"을 나타내는 칩 상단 가장자리의 작은 들여쓰기 위치를 주목해주세요. 그 위치에서 왼쪽에는 전원, 오른쪽에는 접지가 있습니다. 가능한 명확하게 하기 위해, 화살표로 가리킨 핀(PICkit의 핀 1)은 왼쪽에 있는 칩의 중간 핀과 연결되어 있습니다(거기에는 저항도 있습니다). 그게 바로 노란색 와이어입니다. 빨간색 VDD 와이어는 기판 왼쪽의 빨간 전원 레일에 연결되어 있습니다. 접지 와이어는 기판 오른쪽의 접지 전원 레일로 연결되어 있습니다. PIC 칩을 전원 공급하기 위해, 작은 빨간색 와이어가 맨 위/왼쪽 쪽 핀으로 이어지고, 작은 회색 와이어가 맨 위/오른쪽 쪽 핀으로 이어지고 있습니다. 파란 와이어는 접지 와이어 아래에 연결되어 있습니다. 하얀 와이어는 파란 와이어 아래에 연결되어 있습니다.\n\nPICkit 쪽에서, 노란 와이어는 핀 1에, 빨간 와이어는 핀 2에, 검정 와이어는 핀 3에, 파란 와이어는 핀 4에, 하얀 와이어는 핀 5에 연결되어 있습니다. 확인을 위해, 화살표 표식으로부터 가장 먼 PICkit 상에 3개의 빈 구멍이 보여야 합니다. 다시 말씀드리면 노란-빨간-검정-파란-하얀 순입니다.\"\n\n\n<div class=\"content-ad\"></div>\n\n# 플래시 데모\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_34.png)\n\n플래시를 시도하기 전에 이 연결을 끊는 것이 더 원할한 경험을 보장할 수 있습니다.\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_35.png)\n\n<div class=\"content-ad\"></div>\n\n이 콘트롤은 그림을 쓸 수 있도록 하는 것입니다.\n\n![image](/assets/img/2024-05-27-PICEcosystem_36.png)\n\n아래 화면이 나타납니다. 이 메시지를 다시 표시하지 않으려면 해당 상자를 체크해주세요. 그럼 플래시가 시작됩니다. 몇 가지 기기는 3.3V이고 다른 기기는 5V일 수 있으니 주의가 필요합니다. PIC16LF18324는 3.3V에서 작동합니다. 또한 IDE에서 설정을 해야 하는 문제가 하나 더 있습니다. 여기서도 이 경고를 남겨두었는데, 이것 역시 소홀히 할 수 있기 때문입니다.\n\n![image](/assets/img/2024-05-27-PICEcosystem_37.png)\n\n<div class=\"content-ad\"></div>\n\nPIC16LF18324는 3.3 볼트 장치입니다. 다른 장치에 대해 이 경고에 주의하십시오.\n\n# 주의\n\n이 설정에서 MCU를 프로그래밍 / 플래싱하기 전에 수행해야 할 단계가 있습니다. 아래 오류 메시지:\n\n![PICEcosystem_38](/assets/img/2024-05-27-PICEcosystem_38.png)\n\n<div class=\"content-ad\"></div>\n\n…기본 설정은 \"장치 전원이 켜짐\"임을 알려줍니다. 이것은 PICkit 4의 중요한 기능입니다. 장치에 전원을 공급하거나 자체 전원이 있는 장치에 프로그램을 할 수 있습니다. 그러나 설정은 안전을 우선시합니다.\n\n변경할 설정은 다음 순서로 찾을 수 있습니다:\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_39.png)\n\n![이미지](/assets/img/2024-05-27-PICEcosystem_40.png)\n\n<div class=\"content-ad\"></div>\n\n\n![Image 1](/assets/img/2024-05-27-PICEcosystem_41.png)\n\nTo be safe, after completing this step, check if the setting is still there. It might be helpful to click Debug / Disconnect debug tool after an unsuccessful attempt. Now, try the burning step again.\n\n![Image 2](/assets/img/2024-05-27-PICEcosystem_42.png)\n\nIf things don't go well, please double-check the wiring. If the wires are incorrect, you may encounter this situation.\n\n\n<div class=\"content-ad\"></div>\n\n![PICEcosystem_43](/assets/img/2024-05-27-PICEcosystem_43.png)\n\n# 재미있는 부분\n\n대부분의 프로그래머는 \"Hello, world\" 순간을 인지하고 있습니다. 이것은 작동하는 채크된 프로그램이 있다는 순간을 의미합니다. 새로운 프로그래밍 언어, 프레임워크 또는 시스템을 배우고 있을 때, 이것이 작동한다면 적어도 연결되어 있고 문법 오류가 없다는 것을 보여줍니다. 마이크로컨트롤러의 세계에서는 동일한 이정표는 주로 깜박이는 LED로 이루어집니다. 마이크로컨트롤러는 비디오 디스플레이를 필요로하지 않습니다. LED가 깜박이는 것은 중요합니다. 왜냐하면 실수로 LED를 전원에 연결할 수도 있기 때문이며(반듯한 저항 없이는 하지 마세요) 또는 잘못 구성된 핀에 연결해서 계속 켜져 있을 수도 있습니다. 깜박이면, 여러분이 실제 프로그램을 실행하고 일어나는 일들이 있음을 증명해줍니다.\n\n여기서 이것을 실현하기 위해 다른 배선이 필요합니다. 왼쪽 측면의 전원 레일에 3.3V 전원을 연결하고, 공급의 접지를 지시된 대로 접지 레일에 연결해야 합니다. 그런 다음, RC0는 18324의 오른쪽 하단에서부터 세 번째 핀입니다. 이것은 100에서 330옴 저항체에 연결되어야 합니다. 저항체의 다른 끝은 LED의 전방 편향 핀(또는 전원 수신 핀)에 연결돼야하며, 다른 핀은 다시 지지에 연결돼야 합니다. 0.1µF 커패시터의 두 리드를 빵판의 \"전원 레일\"에 눌러 넣으세요. 또한 두 지지 레일을 연결하는 선이 있는지 확인해야 합니다. 이것은 이를 연결하는 한 가지 가능한 방법일 뿐입니다. 중요한 것은 칩과 LED의 전원 및 접지, 핀이 LED에 연결되도록하는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# 전선 관련 이야기\n\n이곳에 보여지는 세팅은 매우 최소한입니다. 데이터 시트에서는 리셋 핀에 커패시터를 달아 볼트 스플리터를 사용하도록 권장합니다. 우리는 오직 하나의 저항만을 사용하고 있습니다.\n\n![이미지1](/assets/img/2024-05-27-PICEcosystem_44.png)\n\n![이미지2](/assets/img/2024-05-27-PICEcosystem_45.png)\n\n<div class=\"content-ad\"></div>\n\n코드와 배선이 올바르고 칩이 올바르게 프로그램되었다면 LED가 1초에 한 번씩 깜박일 것이며, 각 켜진 시간은 ¼초여야 합니다.\n\n중요한 주의: 이 기사에서는 저전력 운영에 대해 언급했지만, 여기서 사용된 입문용 코드는 그것을 달성하기에는 아주 멀었습니다. 이 칩으로 할 수 있는 최선의 방법이라고 생각하지 마십시오.\n\n# 결론\n\n이것으로 도구 세트의 요약을 마치며, 가능한 것을 시연하는 데 대한 데모를 제공했습니다. 물론 이것은 단순히 시작에 불과합니다. 이와 같은 MCU를 사용하면 수많은 다른 기능과 능력이 함께 제공됩니다. 1/0 입력을 읽거나 1/0 출력을 생성할 수 있는 이렇게 간단한 하드웨어조차도 다양한 방법으로 활용할 수 있으며, MCU로 할 수 있는 것은 훨씬 더 많습니다. 마이크로컨트롤러에서 코드를 실행하는 방법을 알면, 그 외의 모든 가능성을 탐험할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-27-PICEcosystem_0.png"},"coverImage":"/assets/img/2024-05-27-PICEcosystem_0.png","tag":["Tech"],"readingTime":19},{"title":"블라인드 SQL Injection 관리자 패스워드 한 글자씩 알아내기-Lab9","description":"","date":"2024-05-27 13:06","slug":"2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9","content":"\n\n안녕 친구. 다시 오신 걸 환영합니다. 이번에도 이전 글을 이번 글의 끝에 링크하겠습니다.\n\n# Lab9: 조건부 응답으로 인한 Blind SQL Injection\n\n이 랩에는 Blind SQL Injection 취약점이 포함되어 있습니다. 애플리케이션은 분석을 위해 추적 쿠키를 사용하고, 제출된 쿠키 값이 포함된 SQL 쿼리를 수행합니다.\n\n<div class=\"content-ad\"></div>\n\nSQL 쿼리의 결과가 반환되지 않고 오류 메시지가 표시되지 않습니다. 그러나 쿼리가 어떤 행도 반환할 때 페이지에 \"다시 오신 것을 환영합니다\" 메시지가 표시됩니다.\n\n데이터베이스에는 사용자 이름과 비밀번호라는 열이 있는 다른 테이블인 사용자가 있습니다. 관리자 사용자의 비밀번호를 알아내기 위해 시각 SQL 인젝션 취약점을 악용해야 합니다.\n\n이 랩을 해결하려면 관리자 사용자로 로그인하세요.\n\n해결책\n\n<div class=\"content-ad\"></div>\n\n이 시나리오는 이전에 다룬 문제와 비슷해 보입니다. 이전에 작성한 글에서는 카테고리를 클릭하면 인터페이스의 왼쪽 상단에 표시되는 웰컴 백 메시지가 나타납니다.\n\n![이미지](/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_1.png)\n\n버프 스위트를 열고 몇 가지 요청을 보냈으며, 이 중 하나를 Repeater로 보내어 불리언 페이로드를 사용하여 SQLi 취약점을 가진 쿠키 값을 테스트했습니다.\n\n```js\n' AND 1=1-- # 웰컴 백 메시지를 받는 결과\n\n' AND 1=2-- # 웰컴 백 메시지를 받지 못함.\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_2.png\" />\n\n내가 시도한 것은 다음과 같았어:\n\n```js\n' UNION SELECT username,password FROM users--\n```\n\n하지만 잘 되지 않았어. 심지어 시간 기반 페이로드도 작동하지 않았어.\n\n<div class=\"content-ad\"></div>\n\n수업 실습을 검토하면, 데이터를 추출하기 위해 substring을 사용할 수 있다는 제안이 있었습니다. 따라서, username이 \"administrator\"인 것을 알면, 비밀번호만을 추출할 필요가 있습니다.\n\n<img src=\"/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_3.png\" />\n\n우리의 페이로드는 다음과 같아야 합니다:\n\n```js\n' AND SUBSTRING((SELECT password FROM users WHERE username='administrator'), 1, 1) = 'a\n```\n\n<div class=\"content-ad\"></div>\n\n1 (시작 위치): 이는 부분 문자열 추출이 문자열(비밀번호)의 첫 번째 문자에서 시작해야 함을 지정합니다.\n1 (길이): 이는 하나의 문자만 추출해야 함을 나타냅니다.\n\n이것을 침입자에게 보내서 payload가 작동하는지 확인하기 위해 a=z로 대체하고 0-9로 자동으로 테스트하도록 지시합시다.\n\n![이미지](/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_4.png)\n\n<div class=\"content-ad\"></div>\n\n저희의 페이로드가 작동 중이에요. 아래 스크린샷을 확인해주세요. 컨텐츠 길이의 차이를 주목해 주세요. A에 도달하면 \"welcome back\" 메시지가 반환돼요.\n\n![이미지](/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_5.png)\n\n다음 단계로 넘어가야 해요. 다만, 패스워드의 길이를 모르기 때문에 패스워드를 알아내는 데 얼마나 시간이 걸릴지 알 수가 없어요. 수동으로 해야 할 것 같아요.\n\n다음에 사용할 페이로드는 다음과 같을 거에요:\n\n<div class=\"content-ad\"></div>\n\n```js\n' AND SUBSTRING((SELECT password FROM users WHERE username='administrator'), 2, 1) = 'a\n```\n\n![Blind SQL Injection](/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_6.png)\n\n![Blind SQL Injection](/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_7.png)\n\n제가 'a7eb5rsh00a9n7jffq9v'라는 패스워드를 추출했어요. 하지만, Burp Suite Repeater를 사용하여 확인해보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n페이로드:\n\n```js\n' AND SUBSTRING((SELECT username FROM users WHERE password='a7eb5rsh00a9n7jffq9v'), 1, 1) = 'a\n```\n\n![이미지](/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_8.png)\n\n관리자용으로 올바른 자격 증명이 필요합니다. 도전적이었지만 새로운 것을 배웠어요😊. 끝까지 머물러 주셔서 감사합니다. 재미있고 유익했다면 50번 클릭해주세요😊.","ogImage":{"url":"/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_0.png"},"coverImage":"/assets/img/2024-05-27-BlindSQLInjectionUncoveringAdministratorPasswordOneCharacterataTime-Lab9_0.png","tag":["Tech"],"readingTime":3},{"title":"비기술 직군 팀에 SQL을 가르치면서 얻은 교훈","description":"","date":"2024-05-27 13:06","slug":"2024-05-27-LessonsfromTeachingSQLtoNon-TechnicalTeams","content":"\n\n## 조정된 방식에서 더 맞춤화된 방식으로 — 그리고 먼 거리에서의 코칭이 미래라고 생각하는 이유\n\n나의 경력 동안, 내가 내부 SQL 교육을 진행하는 다양한 상황에 처해왔습니다. 이러한 교육 세션은 항상 제게 최우선 순위는 아니었지만, 가장 만족스러운 프로젝트 중 하나였습니다. 누군가가 자신의 쿼리를 실행하는 데 익숙해지고, 스스로 필요한 정보를 찾아 대시보드를 작성하며, 이 새로 습득한 기술에 흥분하는 것을 보게 되면, 나는 몰라요 — 그냥 기분이 좋습니다.\n\n최근에, 예전에 교육받은 한 명의 \"학생\" 이름이 한 명의 어려운 SQL 질문을 하기 위해 공동 그룹에 등장한 것을 보았는데, 그때 나의 반응은 마치 \"다크 나이트 라이즈\"에서 알프레드가 브루스 웨인에게 고개를 끄덕이는 것과 같았습니다 (만약 이 참조를 모르시면 여기 있습니다).\n\n이 기사의 목표는 내가 내부 SQL 교육을 운영하면서 처한 내 여정과 배운 점을 전달하여 전체적으로 비기술적인 (또는 적어도 SQL을 잘 알지 못하는) 팀에게 가르칠 수 있는 방법을 알려주어, 당신의 조직에서 지식의 선물을 나누고 나처럼 유사한 기쁨을 느낄 수 있기를 희망합니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-LessonsfromTeachingSQLtoNon-TechnicalTeams_0.png\" />\n\n# 처음으로 이 교육을 진행한 이유\n\n일반적으로, 나를 교육을 진행하게 한 상황은 크게 두 가지 범주로 나뉩니다:\n\n- 역량 강화 필요: 조직 내에서 SQL 역량 부족으로 인해 한계에 부딪히는 경우가 있습니다. 이는 여러 도구와 스프레드시트를 사용하여 최종 보고서에 도달하기 위한 혼잡한 프로세스의 출현으로 일반적으로 드러납니다. 당연히 해결책이 항상 SQL 쪽에 있는 것은 아니지만, 제 경험상 시간이 많이 소요되는 다중 단계 프로세스 중 하나를 보유하고 있고 내면에 더 나은 방법이 있다고 생각한다면, 아마도 그 방법이 있을 확률이 높습니다.\n- 자원 부족: 분석 관련 자원이 부족한 조직에서는 \"이웃 스킬\"을 갖춘 개인들(즉, 스프레드시트 및 데이터 작업에 익숙한 사람들)을 식별하고 역량 개발을 제안하는 것이 조직과 개인 양쪽에 매우 유익하다고 생각했습니다. 개인의 시야를 확대하면서 사업에 더 많은 가치를 창출할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이러한 교육을 진행하고 싶은 이유는 다양할 수 있습니다 (위 목록이 전부가 아닙니다; 이는 상호배타적인 것도 아니라는 주장이 나올 수 있습니다). 이곳에서 이루고자 하는 목표를 명확히 하는 것이 중요합니다. 목표에 따라 교육을 실행하는 방식이 크게 달라질 수 있습니다.\n\n# 초기 반복 사례 또는 \"만능\" 유형의 교육 한계를 발견한 방법\n\n2015년의 초기 버전에서 저는 점진적인 방식을 시도해 보았습니다. 보통의 교실 형식으로, X주 동안의 프로그램을 제공했습니다. 매주 1시간씩 수업을 진행했으며(항상 같은 요일 같은 시간에), SQL을 배우고자 하는 모든 관심 있는 사람들에게 열려 있었습니다. 주로 SQL에 초점을 맞춰 진행되었습니다.\n\n- 매주 그룹은 무언가 새로운 것을 배웠으며, SQL의 \"Hello World\"부터 시작해 (SELECT * FROM TABLE LIMIT 1) CTE 여러 개로 윈도우 함수를 사용하는 방법, 쿼리 최적화까지 모두 포함했습니다.\n- 각 수업 간에 그룹은 수업에서 배우는 지식을 시험하고 고착화하기 위해 숙제를 수행해야 했습니다.\n\n<div class=\"content-ad\"></div>\n\n일부 사람들은 끝까지 계속했지만 성공률(성공은 누군가가 교육 후에 새롭게 습득한 SQL 기술을 계속 사용하는 경우로 정의됨)은 극히 낮았습니다. 매 세션마다 오는 사람들이 점점 줄어들었습니다. 수업 외에 제안된 연습을 하는 사람은 소수였습니다. 사실적으로 말하자면 성공하지 못했어요.\n\n하지만 이로부터 많은 교훈을 얻었습니다:\n- 멘토링을 즐겼습니다: 다른 사람들에게 새로운 기술을 가르치고 지도하는 즐거움에 대해 배웠고, 결국 이 블로그와 다른 다양한 활동을 통해 보상을 얻었다.\n- SQL이 \"너무 기술적이다\"는 두려움: 많은 사람들이 그 무료 교육에 참여하지 않았거나 매우 첫 번째 장애물에서 포기했던 이유는 SQL을 기술적인 사람들만을 위한 것으로 생각했기 때문이고, 그들은 자신을 기술적인 사람으로 생각하지 않았기 때문입니다.\n- \"유지\" 메커니즘 없이 교육을 실시하는 것은 실패할 운명이다: 사람들이 이 교육을 완수할 수 있을 것이라는 사람들의 자율을 믿는 것은 합리적인 생각이 아님을 이해하게 되었습니다. 어떤 조직에서든 지속적인 교육을 완수하지 않을 수 있는 많은 경쟁 우선 순위와 사유가 있습니다. 따라서 학생들을 찾아내어 교육을 듣기 위해 강한 내재적 동기부여가 있는 사람들(예: SQL을 배우기 위한 명확한 목표가 있는 경우)이나 강력한 외부적 동기부여를 제공해야 합니다(예: 그들의 매니저가 SQL을 배우라고 요구하여 더 기술적인 프로젝트를 맡을 것을 기대하는 경우).\n- SQL을 가르치는 것은 방정식의 한 부분일 뿐입니다: 마지막으로, 더 중요한 것은 SQL을 가르치기 위해 SQL만을 가르치는 것이 중요하지 않다는 것을 깨달았습니다. 누구나 SQL을 고립시키지 않고 사용합니다. SQL의 현실은 다음과 같습니다:\n\n- SQL 코드를 작성하기 전에 조직 내에서 올바른 데이터 세트를 찾아야 합니다(성숙한 조직에서 쉬울 수 있지만, 성장하기 시작한 조직이나 존재하지 않는 조직에서는 복잡할 수 있습니다).\n- 데이터 세트를 찾았다면, 쿼리에 쓸 올바른 필드를 찾아야하고 이 필드가 원하는 정보를 담고 있는지 확인해야 합니다(이것 또한 하나의 기술입니다).\n- 그러고 나서 데이터 세트에 액세스 권한을 요청해야 하며, 액세스 권한이 승인되면 특정 가이드라인과 기능이 있는 특정 도구에 SQL 코드를 작성해야 합니다.\n- 쿼리를 작성하는 동안, 컴퓨팅 비용을 주시하고 쿼리를 실행하기 전에 필요에 따라 다시 구조를 잡아야 합니다.\n- 등등. 만약 이러한 요소들을 가르치지 않는다면, 학생들이 SQL을 사용하기 어려울 것입니다.\n\n<div class=\"content-ad\"></div>\n\n이 모든 배움이 나의 프로그램을 개선하는 데 길을 열었다 - 더 맞춤화된 방식으로.\n\n# 더 최근에 - 더 맞춤화된 방향으로의 전환\n\n위와 같이 개선된 몇 차례의 반복 뒤, 길을 따라 얻은 모든 배움을 반성하고 새로운 방식을 시도해 보았습니다: 규모를 잊고 완전히 반대 방향으로 나아갔습니다. 전체 반에서 매주 1시간 수업을 듣는 대신, 몇 명 선택된 개인들과 매주 짧은 1:1 세션을 갖기 시작했습니다.\n\n프로그램은 여전히 누구에게나 열려 있었지만, 이제는 참여할 수 있는 사람을 선정하는 프로세스가 있었습니다. \"들어가고 싶은\" 사람들은 다음을 보여 주어야 했습니다:\n\n<div class=\"content-ad\"></div>\n\n- SQL 학습에 대한 명확한 필요성: 잠재적인 학생들은 SQL을 배우고 싶은 이유와 SQL이 필요한 프로젝트를 설명하는 양식을 작성해야 했습니다(예: \"X 보고서를 자동화하고 싶어요, Y 대시보드를 구축하고 싶어요\"). 선택되면, 이 프로젝트가 프로그램 전체 기간 동안 작업할 프로젝트가 되었을 것입니다.\n- 이미 있는 인접한 기술들: 잠재적인 학생들은 \"인접 기술\"이라고 부르는 것을 보여줘야 했습니다. 즉, SQL이나 데이터 분석을 위한 필요한 기술과 유사한 기술들을 보여주어야 했습니다.\n- 일정에 충분한 시간을 할애할 수 있는 능력(및 의지): 프로그램에 대한 \"신청\"의 일환으로 - 학생들은 자신의 \"학습\" 프로젝트를 자신의 관리자와 검증하고 다음 X 주 동안 적어도 X0%의 시간을 학습에 할애할 의지가 있어야 했습니다. X0%는 많이 보일 수 있지만 - 사실 그것은 X0%에 관한 것이 아닌 메시지를 보내는 것이었습니다. 이 프로그램은 시간이 많이 소요되므로 잠재적인 학생들은 성공하기 위해 필요한 시간을 할애할 수 있는지 확인해야 했습니다.\n\n교육 자체에 대해서 - 초점은 SQL에서 프로젝트로 전환되었습니다. 교육의 첫 세션은 그들의 프로젝트를 마일스톤으로 나누는 데 시간을 보냈습니다. 첫 번째 마일스톤은 모두에게 동일했습니다: SQL 기초를 배울 수 있는 (온라인 또는 오프라인, 무료 또는 유료 - 본인이 선호하는 것으로) 자원을 찾아내고 완료하는 것입니다.\n\n저는 이것이 약간 실망스러울 수 있다는 것을 인식하고 싶습니다 - \"SQL 가르치기\"에 대한 글을 \"SQL 학습\" 부분에서 그렇게 탐내지 않을 것이라고 기대할 수 있습니다. 저의 일반적인 신념은 SQL의 주요 개념을 매우 짧은 시간에 배울 수 있지만, 실제로 여러 달 또는 몇 년이 걸려야 진정으로 뛰어난 수준에 도달할 것이라고 생각하며, 가능한 빨리 실제 문제에 적용하기 시작하면 더 빨리 견고한 수준에 도달할 수 있다고 생각합니다. 따라서 프로그램의 대부분은 실제 문제에 적용하는 데 소요되며, 기본적인 SQL을 이해하는 데 (인터넷의 훌륭한 것을 통해 쉽게 얻을 수 있는 것) 소요되는 시간에 대해 많은 시간이 소요되는 것은 아닙니다.\n\n위의 첫 번째 단계가 완료되면, 우리는 다음 마일스톤을 향해 노력할 것입니다. 예를 들어, 대시보드를 구축하고 싶은 사람을 위해 프로젝트를 분할해보면:\n\n<div class=\"content-ad\"></div>\n\n- SQL 기초 학습\n- 적절한 데이터셋 및 쿼리 로직 찾기 (필요한 정보 획득 방법 학습)\n- 필요한 경우 데이터베이스 구축 (데이터베이스 구축과 관련된 역할 및 책임)\n- 이 데이터베이스를 대시보드 도구에 연결\n- 대시보드 설계\n- 대시보드 작성\n\n그리고 여기서, 매주 다양한 이정표에 도달할 것으로 예상했습니다. 학생들은 주에서 어디서 걸릴 경우 언제든지 제게 피드백을 요청하거나 이메일을 보낼 수 있었지만, 일반적으로 진행 상황에 따라 독립적으로 이정표를 완수해야 했습니다.\n\n이 시스템을 통해 낮은 실패율을 관찰했습니다 (성공은 훈련 후에 새로 습득한 SQL 기술을 계속 사용하는 사람으로 정의됩니다). 이때 뒷받침되는 이유들을 곰곰히 생각해보면 이러한 이유가 있습니다:\n\n- 선발 과정 추가: 더해진 선발 과정은 실제 프로젝트를 가진 가장 동기가 부여된 사람들만 훈련의 일부가 되도록 보장했습니다.\n- 이정표 시스템은 강제 기능이 좋았습니다: 목표를 설정하는 것은 훌륭한 시작입니다, 그러나 목표를 달성하기 위해 필요한 단계나 궁극적으로 목표를 달성할 때 필요한 작업에 대해 고민해보지 않으면 목표를 달성할 가능성이 적습니다. 명확한 마감일 아래에서 명확한 결과물을 제공하는 이정표 시스템은 학생의 성장을 크게 도와주는 책임감과 피드백 루프를 만들어냅니다.\n- 처음부터 올바른 기대 설정이 모든 것을 더욱 단순하게 만들었습니다: 어떤 것을 성공으로 이끌어가는 큰 부분은 마음가짐과 일에 대한 우리의 인식과 연관이 있다고 믿습니다. 이 프로그램을 시작하자마자, 올바른 기대 설정을 하려고 노력했습니다: (1) 시간이 많이 들 것이다 (2) 도전적일 것이다 (3) 오랜 기간이 걸릴 것이다\n- (4) 그러나 시간을 투자하고 도전을 하나씩 극복하겠고, 궁극적으로 승리할 것입니다\n- 사람들에게 SQL 학습 방법을 가르치는 것 대 SQL을 가르치는 것: 마지막으로 — 이 주요 변경 사항이 프로그램에서 큰 차이를 만들었습니다. 이것은 사용자들이 필요한 핵심 정보를 찾아내고 실험하며 배우면서 익숙해지도록 했습니다. 그들이 더 자립적이 되어 계속成长할 수 있도록 했고, 프로그램이 종료된 후에도 지속적으로 발전할 수 있도록 했습니다.\n\n<div class=\"content-ad\"></div>\n\n지금까지 위의 방법은 제가 시도한 가운데 가장 성공적인 하나입니다. 그러나 시간이 많이 소요되고 개선할 여지가 많이 보입니다.\n\n# 보다 하이브리드 방식으로\n\n이 시점에서 가장 중요한 질문은 다음과 같습니다: 위의 프로그램을 어떻게 확장할 수 있을까요? 이 교육에서 제가 한 역할을 반성해보면, 주로 방향을 제시하고 사람들을 정직하게 유지하는 데 중점을 두었습니다:\n\n- 처음에: 학생들이 프로젝트를 구조화하고 단계별로 나누는 데 도움을 주었습니다.\n- 각 단계마다: 각 장애물에 접근하는 가장 좋은 방법에 대한 조언을 했습니다. 만약 막힌다면, 어떻게 해제할지에 대한 지침을 제공했습니다.\n- 프로그램 전반에 걸쳐: 그들의 승리를 축하하고 도전하며, 힘들 때 동기부여를 시도했지만, 동시에 그들이 설정한 일정 내에 무슨 일을 해야 하는지 제시했습니다.\n\n<div class=\"content-ad\"></div>\n\n위의 내용을 자동화하는 것은 어렵지 않을까요? 혹은 혹시 LLMs를 이용해서 가능할지도 모르겠네요. 요즘 세상은 뭐가 되는지 모르겠어요. 그래도 어떻게든 표준화하고 최적화할 수 있고, 비동기적으로 많은 작업을 처리할 수 있으니 매주 회의를 필요로 하지 않는 방식으로 개선할 수 있을 거예요. 다음 반복에서 저는 학생 당 소요 시간을 줄여서 더 많은 학생들을 교육할 수 있는 방법을 시도해보고 싶네요.\n\n저자 주: 요즘 피트니스 인플루언서들이 “거리에서의 코칭”을 제공하고 있는 것을 점점 더 많이 보게 되는데, 여기서 코치와 이메일로 소통하고 훈련 영상을 보내며 맞춤형 프로그램을 받을 수 있어요. 데이터 분석에서도 비슷한 방법이 있을 수 있을까요?\n\n프로그램 자체에 대해, “커뮤니티” 요소를 통합하고 싶어요. 특히, 페이만 기법을 강력하게 신봉하는 편인데요. 페이만 기법은 배운 것을 가르치는 것인데요. 구체적으로 말하자면, 학생들이 배운 내용을 문서화하고 새로운 학생들에게 공유하도록 유도하고 싶어요 (마치 영화 “이웃에게 선물하기”처럼 말이에요). 여기에는 몇 가지 장점이 있을 거 같아요:\n\n- 이를 통해 프로그램의 규모를 확장할 수 있고, 더 많은 사람들이 지식을 활용할 수 있게 될 거예요\n- 이제는 선생님인 학생들이 이해해야 할 핵심 개념을 내재화하고 자신의 이해의 빈틈을 찾아낼 수 있게 도와줄 거에요\n- 거대한 지식 베이스를 시작할 수 있고, 그러면 프로그램에 참여할 수 없는 고도로 동기 부여된 개인들을 위한 자기 서비스 접근 방식을 더 활용할 수 있게 될 거에요.\n\n<div class=\"content-ad\"></div>\n\n항상 그렇지만, 아이디어는 쉽게 얻을 수 있어요. 실행 단계에서 어떤 것이 잘 작동하고 어떤 것이 그렇지 않은지를 이해하게 돼요. 곧 그것을 실험해 보고, 나중에 미래의 글에서 결과를 공유할 예정이에요.\n\n# 결론\n\n지난 8년 동안, 동료와 보고서를 SQL 전문가로 발전시키는 여러 프로그램을 시도해봤어요. 항상 성공한 것은 아니었지만, 몇 년 전에 광범위한 프로그램에서 좀 더 맞춤화된 멘토십으로 전환한 것이 많은 성공과 유익한 교훈을 안겨줬어요.\n\n지금 나의 진정한 도전은 그 방법을 확장하는 것이에요. 어떻게 하면 선택된 개인들을 위해 최대한 가치를 창출하는 데 집중하기 위해 모든 불필요한 것을 단순화하고 제거할 수 있을까요? 그렇게 하면 그들이 자신의 조직에서 일으키는 영향력을 10배로 향상시킬 수 있게 될 거에요. 아마도 피트니스 인플루언서들이 뭔가를 알고 있을지도 몰라요…\n\n<div class=\"content-ad\"></div>\n\n# 이 글을 즐겁게 읽으셨기를 바랍니다! 공유하고 싶은 조언이 있으시면 댓글 섹션에 남겨주세요!\n\n그리고 더 많이 읽고 싶으시다면, 아마도 다음 게시물들도 맘에 드실지도 몰라요:\n\nPS: 본 글은 다양한 분석 업무 경험을 바탕으로 얻은 지식을 담은 뉴스레터인 'Analytics Explained'에 동시 게시되었습니다. 싱가폴 스타트업부터 SF 대형 기업까지에서 배운 내용을 요약하고, 독자들의 분석, 성장, 경력에 관한 질문에 답변하고 있습니다.","ogImage":{"url":"/assets/img/2024-05-27-LessonsfromTeachingSQLtoNon-TechnicalTeams_0.png"},"coverImage":"/assets/img/2024-05-27-LessonsfromTeachingSQLtoNon-TechnicalTeams_0.png","tag":["Tech"],"readingTime":8},{"title":"세계에서 가장 강력한 SQL LLM을 구축하는 Snowflake의 방법","description":"","date":"2024-05-27 13:03","slug":"2024-05-27-HowSnowflakebuildingthemostpowerfulSQLLLMintheworld","content":"\nAI가 데이터 민주화를 위한 새로운 기회를 만들어냈습니다. SQL을 필요로 하지 않고 언어 모델 이해력의 힘을 이용하여 통찰력을 얻는 것으로 많은 사용자가 현재 대량의 데이터에 감춰진 가치 있는 통찰을 발견할 수 있게 되었습니다.\n\n지난 달, Snowflake의 공학 부사장인 Vivek Raghunathan이 Fully Connected 컨퍼런스에서 혁신적인 Snowflake Copilot에 대해 이야기했습니다. 이 비디오는 지난 주 YouTube에서 공개되었습니다. WrenAI 팀은 몇 달 동안 텍스트를 SQL로 변환하는 작업을 진행해왔고, 우리는 Vivek이 최근에 공유한 SQL LLM 주제에 대한 생각과 기술을 많이 배웠습니다. 오늘, 이 비디오에서 얻은 생각과 교훈을 정리하고자 합니다. 이것이 다른 개발자들이 텍스트를 SQL로 더 빨리 혁신할 수 있도록 도움이 되기를 바랍니다!\n\n만약 전체 비디오에 관심이 있다면, 아래 링크를 확인해보세요!\n\n자, 시작해봅시다!\n\n<div class=\"content-ad\"></div>\n\n# 데이터 분석에서 인공지능의 현재와 미래\n\nVivek은 데이터 분석에서 인공지능의 현재와 미래에 대해 이야기했습니다.\n\n## 현재: 당신을 돕는 인공지능\n\n- 분석가를 위한 대화형 도우미\n- 자연어를 SQL로 전환: 분석가가 SQL을 실행\n- 인터페이스를 통해 반복적인 데이터 및 스키마 발견\n\n<div class=\"content-ad\"></div>\n\n하지만 미래에는 비즈니스 사용자들을 위한 완전한 대화형 기사로 발전할 것입니다. SQL을 모르는 사람들도 자연어로 질문하고 답변을 받을 수 있어서 더 많은 개인들이 능력을 얻을 것입니다.\n\n## 미래: 의존할 수 있는 AI\n\n- 비즈니스 사용자들을 위한 대화형 기사\n- 답변을 위한 자연어: SQL 전문 지식 불필요\n- 상호작용 가능한 데이터 및 시각화를 허용하는 인터페이스\n\n## 우리의 생각:\n\n<div class=\"content-ad\"></div>\n\nWrenAI를 개발하면서도 이를 경험했습니다. 현재 기술 혁신의 한계로 모든 비즈니스 사용자를 대상으로 한 완전한 AI 팔로우업 서비스를 제공하는 것은 여전히 제한적인 면이 있습니다. 이는 자율 주행 자동차에서 경험하는 것과 비슷합니다. 수년 동안 자동차 제조사들은 운전자와 동행하는 자율 주행 시스템을 출시해왔습니다. 자율 주행 기능을 통해 고객과 운전자 경험이 전환되는 것을 확인할 때까지는 여전히 데이터 분석가들의 도움이 필요할 것입니다.\n\n# 현실 세계에서 Text-to-SQL은 그리 간단한가요?\n\nVivek는 Text-to-SQL이 마치 빙산 문제와 같다고 언급했습니다. 문제는 표면상 간단해 보이지만 실제로는 매우 복잡하다고합니다.\n\n대화 중 인용문:\n\n<div class=\"content-ad\"></div>\n\n그의 강연에서 언급된 몇 가지 분명한 도전 과제들은 빠르게 직면하게 될 것입니다:\n\n- 현실 세계는 지저분한 스키마와 데이터를 가지고 있으며, 종종 수만 개의 테이블과 수십만 개의 열이 포함된 데이터베이스가 있습니다.\n- 현실 세계의 의미론은 더 복잡합니다: rev1, rev2 및 rev3로 레이블이 지정된 열을 가진 테이블이 있을 수 있지만, 수익 열은 무엇인가요? 미국 달러인가요, 아니면 현지 통화입니까? 몇 주 전에 전송된 이메일에서 폐기되었나요? 이 중 어느 것이 현재 진실의 근원인가요?\n- 테이블 간에는 올바르게 결합할 수 있는 여러 가지 방법이 있어 더욱 복잡해집니다.\n\n## 저희의 생각\n\n정말 간단한 문제가 아니네요!\n\n<div class=\"content-ad\"></div>\n\nWrenAI는 데이터와 의미 사이의 도전을 해결하는 데 주안점을 둡니다; 텍스트에서 SQL로 신뢰할 수 있는 변환을 만들기 위한 핵심은 기존 데이터 구조의 위에 의미 아키텍처에 대응하는 신뢰할 수 있는 의미 엔진을 구축하는 방법입니다. 실제로, 의미 관계, 계산, 집계를 정의하는 것과 같이, LLMs는 서로 다른 시나리오에서 서로 다른 문맥을 다루는 방법을 배워야 합니다. 이는 견고한 의미적 계층에 많이 의존합니다.\n\n# Snowflake 실험 v0부터 v4까지\n\nSnowflake는 v0부터 v4까지 여러 번의 실험을 거쳤습니다. 다행히도 Vivek은 개선된 텍스트에서 SQL로의 혁신을 위해 다음 버전에서 시도하고 배운 내용을 너그럽게 공유했습니다.\n\n자세히 알아봅시다!\n\n<div class=\"content-ad\"></div>\n\n# V0: Optimized for Spider\n\n대화에서 Vivek은 말했습니다:\n\n## 처음으로 직면한 빙산 (도전):\n\nV0 버전에서는, 최상의 모델을 사용하여 스파이더 데이터셋을 사용하여 82%의 결과를 달성하였지만, 최적화되지 않은 Zero-shot GPT-4는 74%의 결과를 가져왔습니다. 그러나 실제 세계 데이터에서는, 최상의 모델을 사용하여 정확도가 9%로 떨어지고, prompt-optimized된 GPT-4를 사용하면 14%의 결과를 얻었습니다.\n\n<div class=\"content-ad\"></div>\n\n그들이 중요성을 깨닫기 시작한 때입니다. \"의미론적 카탈로그\"는 의미론이 데이터 검색에 엄청 중요하다는 것을, 사전 훈련된 LLMs가 귀하의 비즈니스 콘텍스트에 대해 아무것도 모르기 때문에 유일한 방법은 RAG를 통해 의미론을 제공하는 것입니다.\n\n## 우리의 생각:\n\n의미론은 텍스트에서 SQL로의 전환 도전을 해결하는 데 핵심적이며, WrenAI를 구현하기 시작할 때 중심적인 핵심 설계입니다.\n\n# V1: 실세계에서 검색이 중요합니다\n\n<div class=\"content-ad\"></div>\n\nV1 버전에서는 Snowflake 팀이 고민하며 시작했습니다. 웹 품질의 검색을 기업 메타데이터 검색에 적용하고 그 결과를 LLM(언어 모델)에 공급한다면 성능이 혁신적으로 향상될 수 있다는 아이디어가 나왔죠.\n\n다시 말해, 이 LLM에 어떤 내용을 포함해야 할지라는 더 단순한 문제를 해결하기 위해 보다 어려운 문제를 먼저 해결하려고 합니다.\n\n아래는 결과인데, Snowflake의 최고 모델은 9%에서 24%로 개선되었고, GPT-4 버전도 14%에서 28%로 성장했습니다. 따라서 의미론적 카탈로그 검색이 중요하다는 직관이 옳다는 것이 입증되었습니다.\n\n![Snowflake](/assets/img/2024-05-27-HowSnowflakebuildingthemostpowerfulSQLLLMintheworld_0.png)\n\n<div class=\"content-ad\"></div>\n\nVivek 씨가 말했던 것처럼, Snowflake에서 대화 카탈로그 검색 결과를 어떻게 검색하는지 설명했어요.\n\n## 그들이 직면한 두 번째 어려움(도전):\n\nSnowflake 팀이 직면한 다른 어려움은 레이터입니다. 모든 것을 수작업으로 다시 주석을 다는 작업을 했고, 성능을 평가하기 위해 더 복잡한 예제를 추가했으며, 단일 테이블 대 복수 테이블 및 간단한 조인 대 복잡한 조인과 같은 데이터 의미론에 기반하여 슬라이스를 나눴다.\n\n아래에는 Vivek가 그의 발표에서 공유한 내용이 있습니다:\n\n<div class=\"content-ad\"></div>\n\n## 우리의 생각:\n\n이 통찰은 우리에게 흥미로워 보입니다. WrenAI를 구현할 때 검색 최적화를 많이 하지 않았습니다. 현재는 벡터 저장소에서 Top-N 선택만 사용합니다. 검색 기술의 더 자세한 세부 사항을 살펴보고, 이 영역을 개선하기 위한 작업을 진행 중입니다.\n\n우리 팀은 또한 내부 검증 데이터 세트를 구축하고 있습니다. 이 데이터 세트는 단일 및 다중 테이블, 그리고 단순 및 복잡한 조인 데이터 세트를 포함하여 보다 복잡한 시나리오를 갖도록 설계되어 있습니다. 이로써 솔루션이 실제 세계에서 정확하게 유지되도록 합니다.\n\n이 주제에 대한 토론을 위한 새로운 이슈를 오픈해 주시면 환영입니다! 우리 팀은 더 많은 개선사항을 살펴보기를 원합니다!\n\n<div class=\"content-ad\"></div>\n\n# V2: Text2SQL 모델링 통찰\n\n다음으로, Vivek은 이러한 발전에도 불구하고 모델이 대화 능력에서 여전히 어려움을 겪고 있다고 공유했습니다. SQL 작업을 최적화했지만 대화를 처리하고 지시를 따르는 것에 어려움이 있었다고 합니다.\n\n아래는 그들이 공유한 몇 가지 통찰입니다:\n\n- 더 나은 기본 LLMs: 코드 LLMs가 SQL 작업에서 아주 잘 수행된다는 것이 밝혀졌습니다.\n- 더 나은 신호: 몇 가지는 LLM 생성에서 나오며, 예를 들어 주석 등이 있습니다. 일부는 스노우플레이크 문서 등의 고전적인 기술에서 얻어집니다. 그 중 하나는 쿼리 이력인데, 실제 사람들이 실제로 하는 작업에 관한 보물창고입니다.\n- 사고의 연결: 처음에는 테이블을 선택하고, 그 다음에 조인하고, 그 다음에 열을 선택하고, 그리고 마지막으로 디코드 시에 정확성을 확인합니다. LLM이 JSON을 생성할 때는 출력이 스키마와 일치하는지 확인하는 의존성 파서가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 새로운 깔끔한 평가를 통해 상당한 개선을 확인했습니다. 기본 모델 27%가 39%가 되었고, GPT-4를 사용한 경우 40%가 46%로 상승했습니다.\n\n## 그들이 마주한 세 번째 빙하(도전):\n\n다음 도전 과제는 제로 샷 텍스트 - SQL 솔루션 대신 대화형 공동 조종사를 구축하는 것입니다. 대화를 처리하고 분석가들이 쿼리를 점진적으로 개선할 수 있도록 해야 합니다.\n\n시스템의 한 부분을 최적화하면 전체 시스템이 의도치 않게 최적화되지 않을 수 있습니다. 두 가지 큰 문제가 발생했습니다:\n\n<div class=\"content-ad\"></div>\n\n- 모델은 지시에 따라 더 이상 우수하지 않았습니다. 왜냐하면 텍스트-SQL 작업만을 보았기 때문입니다.\n- 이는 대화에서 메모리가 떨어졌습니다. 여러 턴의 경우가 아닌, 제로샷 사례만을 경험했기 때문입니다.\n\n## 저희의 생각\n\n이 강의에서 언급한 텍스트-SQL 도전 과제는 제로샷 방식이 아닌 상호작용적인 접근이 필요합니다. WrenAI에서도 이러한 접근을 추구하고 있으며, 지속적으로 개선하고 있는 몇 가지 경험을 진행 중에 있습니다.\n\n우리의 구현을 통해 \"증강 및 생성\" RAG 파이프라인에서 검증, 수정 및 명확화 다이얼로그와 같은 정교한 프로세스를 구현했습니다. 이를 통해 LLMs가 사용자의 의도를 완전히 이해할 수 있도록 지원하고 있습니다. 물론, 계속해서 개선할 부분이 많이 남아 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Snowflake](/assets/img/2024-05-27-HowSnowflakebuildingthemostpowerfulSQLLLMintheworld_1.png)\n\n## V3: 지시 따르기, 도구 사용\n\nVivek은 텍스트를 SQL로 바꾸는 작업과 더 일반적인 지시 따르기 작업을 섞어 LLM을 지시 따르도록 다시 교육했다. 그리고 이를 Multi-LLM 설정에 오케스트레이터 LLM으로 계층화했다.\n\n오케스트레이터 모델의 책임은 고객과 대화하는 것입니다. 이는 주체적인 방식과 유사합니다. SQL을 작성해야 할 때마다 다른 크기의 텍스트를 SQL 모델을 사용하도록 허용했습니다. 지능적으로 작업을 위임하는 이 방법은 많은 문제를 해결해 주었습니다.\n\n\n<div class=\"content-ad\"></div>\n\n그리고 숫자들은 더욱 향상되었어요. 최고 모델은 이제 추가된 지시 따르기 능력으로 38%에서 41%로 상승했고, GPT-4 플러스 최적화를 통해 46%의 평가도달을 이루었어요.\n\n### 그들이 직면한 네 번째 얼음산 (도전):\n\n46.4%에서 99%로 나아가면, 텍스트-투-SQL의 목표는 SQL을 모르는 비즈니스 사용자를 위한 대화형 조종사를 구축하는 것이에요. 이것이 기회이며, 그들은 99%의 정확도가 필요해요.\n\n### 우리의 생각\n\n<div class=\"content-ad\"></div>\n\nWrenAI에서는 텍스트-SQL의 미래에 대해 낙관적입니다. 우리는 LLM 혁신이 숨막히게 빠르게 진행되고 있어 곧 LLM이 의미적 맥락을 통해 인간 수준의 이해력에 가깝게 발전하여 이상적인 데이터 민주화 세계를 이룰 것이라 믿습니다.\n\n# V4: 정확도 99%로 향상\n\n이제 스노우플레이크에서 진행 중입니다! 고객이 제공한 의미적 맥락을 활용하여 메트릭 및 조인 경로 등을 이해합니다.\n\n## 우리의 생각\n\n<div class=\"content-ad\"></div>\n\n눈송이에서 더 많은 정보 공유를 기대하고 있어요! 정말 흥미로워요!\n\n# 모든 수업의 최종 결론\n\n마지막으로, Vivek이 모든 도전을 경험하고 얻은 주요 교훈과 배운 점을 아래에 정리했어요.\n\n- 👏 제품은 전체 e2e 시스템입니다: LLM 모델링뿐만 아니라요\n- 👏 의미 체계 카탈로그 검색은 중요합니다: 실제 LLM 검색 엔진으로 강화하기\n- 👏 SQL 주석 품질이 중요합니다: 주석 처리 담당자는 전문가여야 해요\n- 👏 대화형 SQL은 LLM의 불사조 문제입니다: 복잡한 명령어 튜닝, 사고 과정 연결, 도구 사용\n- 👏 99%까지 가려면 돌파구가 필요합니다\n\n<div class=\"content-ad\"></div>\n\n그게 다에요! Vivek 씨와 Snowflake 팀이 이번 토롤에서 많은 귀중한 교훈을 나눠 주셨어요. 당신으로부터 많은 것을 배웠습니다!\n\n앞으로도 기대됩니다!\n\nWrenAI를 확인해보지 않았다면, 방문해보세요!\n\n👉 GitHub: https://github.com/Canner/WrenAI\n\n<div class=\"content-ad\"></div>\n\n👉 X: [https://twitter.com/getwrenai](https://twitter.com/getwrenai)\n\n👉 Medium: [https://blog.getwren.ai/](https://blog.getwren.ai/)\n\n이 글을 즐겨 보셨다면 깃헙에서 ⭐ WrenAI에 스타를 주시는 걸 잊지 마세요 ⭐ 언제나 독자 여러분 감사합니다.\n","ogImage":{"url":"/assets/img/2024-05-27-HowSnowflakebuildingthemostpowerfulSQLLLMintheworld_0.png"},"coverImage":"/assets/img/2024-05-27-HowSnowflakebuildingthemostpowerfulSQLLLMintheworld_0.png","tag":["Tech"],"readingTime":7},{"title":"SQL 트랜잭션 및 ACID 속성","description":"","date":"2024-05-27 13:02","slug":"2024-05-27-SQLTransactionsandACIDProperties","content":"\n![image](/assets/img/2024-05-27-SQLTransactionsandACIDProperties_0.png)\n\n# SQL에서 거래 소개\n\nSQL을 데이터베이스로 사용하는 은행 시스템을 상상해봅시다. 사용자 A가 사용자 B의 계좌로 돈을 입금하려고 합니다. 돈을 송금하면 사용자 A의 계좌 잔액에서 해당 금액을 빼내고 이 돈을 사용자 B의 계좌에 입금하려는데, 갑자기 데이터베이스가 크래시될 경우 어떻게 될까요?\n\n![image](/assets/img/2024-05-27-SQLTransactionsandACIDProperties_1.png)\n\n<div class=\"content-ad\"></div>\n\n사용자 A의 잔고에서 인출한 돈이 사라졌다는 것을 의미합니까? SQL 데이터베이스에서는 그렇지 않습니다. 왜냐하면 SQL 트랜잭션을 사용하기 때문입니다.\n\n# 트랜잭션과 ACID 속성\n\n트랜잭션은 단일 원자 단위로 수행되는 하나 이상의 SQL 작업 시퀀스입니다. 이는 데이터베이스에서 데이터 일관성을 보장하기 위한 목적으로 사용됩니다. 트랜잭션은 주로 ACID 약어로 불리는 다음 속성을 갖습니다:\n\n- 원자성: 전체 트랜잭션은 전체가 성공하거나 전체가 실패하는 단위로 처리됩니다.\n- 일관성: 트랜잭션은 데이터베이스를 하나의 유효한 상태에서 다른 유효한 상태로 변환시키며 데이터베이스 불변을 유지합니다.\n- 고립성: 동시에 실행되는 트랜잭션에 의해 수행된 수정 사항은 서로 분리되어 커밋될 때까지 격리됩니다.\n- 지속성: 트랜잭션이 커밋되면 시스템 장애가 발생하더라도 지속되어 유지됩니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-SQLTransactionsandACIDProperties_2.png\" />\n\n# SQL 트랜잭션에서의 중요 명령어\n\nSQL 트랜잭션의 시작을 BEGIN TRANSACTION 키워드로 표시합니다.\n\n<img src=\"/assets/img/2024-05-27-SQLTransactionsandACIDProperties_3.png\" />\n\n<div class=\"content-ad\"></div>\n\n모든 트랜잭션 중에 발생한 변경 사항을 저장하려면 변경 사항을 데이터베이스에 COMMIT합니다.\n\n![이미지](/assets/img/2024-05-27-SQLTransactionsandACIDProperties_4.png)\n\n트랜잭션 중에 문제가 발생하면 ROLLBACK 명령을 사용하여 트랜잭션 중에 수행된 모든 변경 사항을 되돌릴 수 있으며 데이터베이스를 트랜잭션 시작 시점의 상태로 되돌릴 수 있습니다.\n\n![이미지](/assets/img/2024-05-27-SQLTransactionsandACIDProperties_5.png)\n\n<div class=\"content-ad\"></div>\n\n## 예시\n\n우리 간단한 은행 애플리케이션 예제로 돌아가 봅시다. 여기서는 계좌 A에서 계좌 B로 $100을 이체해야 합니다. 이 과정은 두 단계로 이루어집니다:\n\n- 계좌 A에서 금액을 차감하기\n- 그 금액을 계좌 B에 추가하기\n\n이 두 가지 단계는 모두 성공적으로 완료되어야 합니다. SQL 트랜잭션으로 이를 어떻게 작성할 수 있는지 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```md\nBEGIN TRANSACTION;\n\n- Account A 잔액에서 100을 차감합니다.\n  UPDATE Accounts\n  SET balance = balance - 100\n  WHERE account_id = 'A';\n  -- Account A에 충분한 잔액이 있는지 확인하고, 부족하다면 롤백합니다.\n  IF @@ROWCOUNT = 0\n  ROLLBACK;\n  -- Account B 잔액에 100을 추가합니다.\n  UPDATE Accounts\n  SET balance = balance + 100\n  WHERE account_id = 'B';\n  -- 모든 것이 잘 되었다면 트랜잭션을 커밋합니다.\n  COMMIT;\n```\n\n이 트랜잭션은 다음을 수행합니다:\n\n- 트랜잭션을 시작하여 다음 작업이 단일 원자적 프로세스의 일부임을 보장합니다.\n- Account A에서 $100을 차감합니다: account_id와 balance 열이 있는 'accounts'라는 테이블이 있다고 가정합니다.\n- Account A에 충분한 자금이 있는지 확인합니다: Account A에 충분한 금액이 없으면, ROLLBACK TRANSACTION을 사용하여 모든 변경 사항이 취소되는 롤백이 수행됩니다.\n- Account B에 $100을 추가합니다: Account A에 충분한 금액이 있다면, Account B에 $100이 추가됩니다.\n- 트랜잭션을 커밋합니다: 두 개의 업데이트가 모두 성공적으로 수행되면, COMMIT TRANSACTION 명령이 실행되어이 트랜잭션 중에 수행된 변경 사항을 영구적으로 적용합니다.\n\n이것은 두 계정이 적절히 업데이트되거나 어느 시점에서 문제가 발생할 경우 변경 내용이 적용되지 않으므로 데이터의 무결성이 유지됩니다.\n\n\n\n<div class=\"content-ad\"></div>\n\n# SQL 트랜잭션의 격리 수준\n\n데이터베이스 트랜잭션의 격리 수준은 트랜잭션 무결성이 유지되는 방식 및 각 트랜잭션이 다른 트랜잭션과 얼마나 격리되는지를 결정합니다.\n\nSQL 표준은 일관성과 성능 간의 균형을 맞추기 위해 네 가지 격리 수준을 정의합니다.\n\n## 1. Read Uncommitted\n\n<div class=\"content-ad\"></div>\n\n- 설명: 격리의 가장 낮은 수준입니다. 트랜잭션이 커밋되기 전에 다른 트랜잭션이 작업한 변경 사항을 볼 수 있습니다.\n- 예시에 미치는 영향: 돈을 송금하는 도중에 다른 트랜잭션이 계좌 A 또는 B의 잔액을 업데이트하고 있다면, 이 트랜잭션은 이러한 커밋되지 않은 값을 읽을 수 있습니다. 이는 실제로 존재하지 않는 잔액을 보는 등의 문제를 발생시킬 수 있습니다 (다른 트랜잭션이 실패하고 롤백될 경우).\n\n## 2. Read Committed\n\n- 설명: 트랜잭션이 커밋된 데이터만 읽을 수 있도록 보장합니다.\n- 예시에 미치는 영향: 이 수준은 'Read Uncommitted'의 문제를 피하기 위해 커밋된 계좌 A와 B의 잔액만 읽도록 합니다. 하지만 트랜잭션 내에서 잔액을 여러 번 읽는 경우, 다른 트랜잭션이 데이터를 수정하는 경우 다른 값들을 보게 될 수 있습니다 (반복할 수 없는 읽기).\n\n## 3. Repeatable Read\n\n<div class=\"content-ad\"></div>\n\n- 설명: 거래가 데이터를 두 번째로 읽을 때 동일한 데이터 값을 찾을 수 있도록 보장합니다(반복되지 않는 읽기를 피함).\n- 예시에 미치는 영향: 이 수준은 거래 내에서 동일한 데이터의 여러 번의 읽기 사이에 다른 사람에 의해 생긴 변경 사항을 볼 수 없도록 합니다. 이는 잔액 확인 및 업데이트 작업 중 일관된 읽기 결과를 유지하는 데 도움이 됩니다. 그러나 다른 거래에 의해 추가된 새로운 행이 발생하는 유령 읽기를 막을 수는 없을 수도 있습니다.\n\n## 4. Serializable\n\n- 설명: 최고 수준의 격리. 거래가 직렬로 실행된 것처럼 완전히 격리됩니다.\n- 예시에 미치는 영향: 이는 완전한 격리를 보장합니다. 다른 거래가 이체 프로세스에 간섭할 수 없습니다. 모든 동시성 문제(더티 리드, 반복되지 않는 읽기 및 유령 읽기)를 방지하지만 동시성이 감소하고 잠금으로 인한 잠재적 성능 문제가 발생할 수 있습니다.\n\n다양한 격리 수준에서 여러 현상이 발생할 수 있으며, 더티 리드, 반복되지 않는 읽기 또는 유령 읽기와 같은 현상이 발생할 수 있습니다. 아래에서 이 용어가 의미하는 바를 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n# Dirty Reads\n\n더티 리드는 트랜잭션이 동시에 커밋되지 않은 다른 트랜잭션에 의해 작성된 데이터를 읽을 때 발생합니다. 결과적으로 다른 트랜잭션이 롤백하면 처음 트랜잭션이 데이터를 읽게 됩니다. 하지만 해당 데이터는 데이터베이스에 공식적으로 기록된 적이 없습니다.\n\n예시:\n\n- 트랜잭션 1이 시작되고 계좌 A에서 계좌 B로 $100을 이체합니다.\n- 트랜잭션 1이 커밋되기 전에 트랜잭션 2가 시작되고 계좌 A의 잔액을 읽습니다.\n- 트랜잭션 1이 실패하고 롤백되면, 트랜잭션 2는 공식적으로 커밋되지 않은 잔액을 읽게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n\n![image](/assets/img/2024-05-27-SQLTransactionsandACIDProperties_6.png)\n\n# Non-Repeatable Reads (Read Uncommitted)\n\n이것은 트랜잭션 진행 중 같은 행이 두 번 조회되고, 두 번 조회 사이에 행 내의 값이 다른 경우 발생합니다. 본질적으로 다른 트랜잭션이 두 번의 조회 사이에 행을 수정한 경우입니다.\n\n예시:\n\n\n\n<div class=\"content-ad\"></div>\n\n- 거래 1이 시작되고 계정 A의 잔액을 읽습니다.\n- 거래 2가 계정 A에서 계정 B로 $100을 이체하고 커밋합니다.\n- 거래 1이 다시 계정 A의 잔액을 읽으면 이전과 다른 잔액을 볼 수 있습니다.\n\n![이미지](/assets/img/2024-05-27-SQLTransactionsandACIDProperties_7.png)\n\n# 환상 읽기\n\n환상 읽기란 다른 트랜잭션에서 읽고 있는 레코드에 새로운 행이 추가되거나 (또는 기존 행이 삭제되는 경우) 트랜잭션 중에 발생합니다. 이는 동일한 트랜잭션에서의 후속 읽기가 원래 읽기의 일부가 아니었던 새로 추가된 행을 포함하거나 삭제되지 않은 행을 제외한 행 집합을 반환할 수 있음을 의미합니다.\n\n<div class=\"content-ad\"></div>\n\n예시:\n\n- Transaction 1은 계정 A의 거래 수를 세는 쿼리를 시작합니다.\n- Transaction 2는 계정 A에 새로운 거래 기록을 삽입하고 커밋합니다.\n- Transaction 1은 다시 계정 A의 거래 수를 세어보고 이전보다 더 많은 거래를 발견합니다.\n\n![그림](/assets/img/2024-05-27-SQLTransactionsandACIDProperties_8.png)\n\n높은 격리 수준은 발생할 수 있는 현상의 종류를 줄이지만 더 낮은 동시성과 잠재적인 성능 영향을 감수해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n만약 SQL 데이터베이스의 확장 메커니즘에 대해 더 알고 싶다면, 데이터베이스 샤드, 복제 등을 다루는 깊이 있는 Database Essentials 비디오를 확인해보세요:\n\n여기 처음 오신 분들을 위해, 저는 Hayk입니다. 저는 웹 개발자 분들이 첫 번째 기술 직을 확보하거나 웹 개발 마스터리 커뮤니티에서 시니어 역할로 진출하는 데 도와드리고 있어요.\n\n웹 개발에 대한 주간 통찰력을 놓치고 싶지 않다면, 내 뉴스레터를 구독해주세요.\n\n","ogImage":{"url":"/assets/img/2024-05-27-SQLTransactionsandACIDProperties_0.png"},"coverImage":"/assets/img/2024-05-27-SQLTransactionsandACIDProperties_0.png","tag":["Tech"],"readingTime":6},{"title":"90의 작업을 처리할 수 있는 10가지 SQL 문장","description":"","date":"2024-05-27 13:00","slug":"2024-05-27-10SQLStatementsThatCanHandle90ofTasks","content":"\n구조화된 쿼리 언어(SQL)는 관계형 데이터베이스를 관리하고 질의하는 강력한 도구입니다. 초보자든 경험 많은 데이터 전문가든 상관없이, 여러분은 자주 사용하게 될 특정 SQL 문을 발견할 것입니다. 본 문서에서는 데이터베이스 작업의 90%를 처리할 수 있는 10가지 필수 SQL 문을 다룹니다. 코드 예시를 함께 제공할 것입니다.\n\n![이미지](/assets/img/2024-05-27-10SQLStatementsThatCanHandle90ofTasks_0.png)\n\n# 1. 소개\n\n# SQL의 중요성\n\n<div class=\"content-ad\"></div>\n\nSQL은 관계형 데이터베이스와 상호 작용하기 위한 표준 언어입니다. 데이터를 검색하거나 데이터베이스 구조를 수정하는 등 다양한 작업을 수행할 수 있습니다. SQL을 이해하는 것은 데이터 작업을 하는 사람에게 필수적이며, 데이터 분석, 보고 및 애플리케이션 개발을 위한 기초를 제공합니다.\n\n# 2. SELECT 문\n\n# 데이터 검색\n\nSELECT 문은 하나 이상의 테이블에서 데이터를 검색하는 데 사용됩니다. 검색할 열을 지정하고 결과를 필터링할 조건을 추가할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n-- 테이블에서 모든 열을 검색합니다\nSELECT * FROM employees;\n\n-- 특정 열을 검색합니다\nSELECT first_name, last_name FROM employees;\n\n-- 결과를 필터링하기 위해 조건을 추가합니다\nSELECT product_name, price FROM products WHERE price > 50;\n```\n\n# 3. INSERT INTO 문\n\n# 새 데이터 추가\n\nINSERT INTO 문을 사용하면 테이블에 새로운 데이터 행을 추가할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n-- 단일 행 삽입\nINSERT INTO customers (first_name, last_name, email) VALUES ('John', 'Doe', 'john@example.com');\n\n-- 여러 행 삽입\nINSERT INTO orders (order_date, total_amount) VALUES\n    ('2023-01-15', 150.00),\n    ('2023-01-16', 220.50),\n    ('2023-01-17', 75.25);\n```\n\n# 4. UPDATE 문\n\n# 기존 데이터 수정하기\n\nUPDATE 문은 테이블의 기존 데이터를 수정하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n-- 하나의 행 업데이트하기\nUPDATE products SET price = 25.99 WHERE product_id = 101;\n\n-- 여러 행 업데이트하기\nUPDATE employees SET manager_id = 105 WHERE department = 'Sales';\n```\n\n# 5. DELETE 문\n\n# 데이터 삭제\n\nDELETE 문은 테이블에서 행을 제거하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n-- 한 행 삭제\nDELETE FROM customers WHERE customer_id = 201;\n\n-- 조건을 충족하는 모든 행 삭제\nDELETE FROM orders WHERE order_date < '2023-01-15';\n```\n\n## 6. CREATE TABLE 문\n\n### 새 테이블 생성\n\nCREATE TABLE 문은 지정된 열과 데이터 유형을 가진 새 테이블을 생성하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n\nCREATE TABLE products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    price DECIMAL(10, 2)\n);\n\n\n## 7. ALTER TABLE 문\n\n## 테이블 수정\n\nALTER TABLE 문을 사용하면 기존 테이블을 추가, 수정 또는 삭제하여 테이블을 수정할 수 있습니다.\n\n\n\n<div class=\"content-ad\"></div>\n\n```sql\n-- 새 열 추가\nALTER TABLE employees ADD COLUMN hire_date DATE;\n\n-- 열 데이터 유형 수정\nALTER TABLE customers ALTER COLUMN phone_number VARCHAR(15);\n```\n\n# 8. DROP TABLE 문\n\n# 테이블 삭제하기\n\nDROP TABLE 문은 기존 테이블과 해당 데이터를 모두 삭제하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```sql\n-- 테이블 삭제\nDROP TABLE products;\n```\n\n## 9. WHERE 절\n\n## 데이터 필터링\n\nWHERE 절은 지정된 조건에 따라 행을 필터링하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n-- 가격이 50보다 큰 제품 조회\nSELECT product_name, price FROM products WHERE price > 50;\n\n-- 영업 부서의 직원 조회\nSELECT first_name, last_name FROM employees WHERE department = 'Sales';\n```\n\n# 10. JOIN 절\n\n# 여러 테이블에서 데이터 결합\n\nJOIN 절을 사용하여 서로 관련된 열을 기반으로 두 개 이상의 테이블에서 행을 결합합니다.\n\n<div class=\"content-ad\"></div>\n\n```sql\n-- 고객 이름과 주문 조회하기\nSELECT c.first_name, c.last_name, o.order_date\nFROM customers AS c\nJOIN orders AS o ON c.customer_id = o.customer_id;\n```\n\n# 11. GROUP BY 절\n\n# 데이터 집계\n\nGROUP BY 절은 특정 열의 값을 가진 행을 그룹화하는 데 사용되며, 종종 SUM 및 COUNT와 같은 집계 함수와 함께 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n```sql\n-- 각 제품별 총 매출 계산\nSELECT product_id, SUM(quantity * price) AS total_sales\nFROM order_details\nGROUP BY product_id;\n```\n\n# 12. 결론\n\n# 기초 마스터\n\n이 10가지 SQL 문은 관계형 데이터베이스 작업 시 대부분의 작업을 다룹니다. 이 문장들을 이해하고 숙달함으로써 데이터베이스 관리 및 데이터 조작에 대한 견고한 기초를 갖게 될 것입니다. SQL은 다양한 기능을 제공하는 언어이며, 데이터 작업에 더욱 강력한 방법을 발견하면서 더욱 쉽게 작업할 수 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# SQL 기초 지식\n\n시간을 내어 주셔서 감사합니다! 🚀\nSQL 기초 지식에서 더 많은 콘텐츠를 찾아보실 수 있어요! 💫\n","ogImage":{"url":"/assets/img/2024-05-27-10SQLStatementsThatCanHandle90ofTasks_0.png"},"coverImage":"/assets/img/2024-05-27-10SQLStatementsThatCanHandle90ofTasks_0.png","tag":["Tech"],"readingTime":4}],"page":"8","totalPageCount":11,"totalPageGroupCount":1,"lastPageGroup":11,"currentPageGroup":0},"__N_SSG":true}