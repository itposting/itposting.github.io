{"pageProps":{"post":{"title":"내가 Python을 사용하여 나만의 파일에서 새로운 GPT-4o를 어떻게 활용하는지","description":"","date":"2024-06-19 19:21","slug":"2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython","content":"\n\n\n![2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_0.png](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_0.png)\n\n현재 인공 지능 뉴스를 따라갔다면 OpenAI가 최근에 최신 모델인 GPT-4o를 발표했다는 것을 알고 계실 것입니다. 가장 인상적인 새로운 기능은 다중 모달리티인데, 아쉽게도 이러한 기능들은 아직 공개되지 않았습니다.\n\n우리가 다중 모달 특징들이 롤아웃되길 기다리는 동안, 나는 여러분의 데이터에 GPT-4o를 사용하는 가장 쉬운 방법을 보여드리겠습니다, 어시스턴트!\n\nOpenAI는 최근에 어시스턴트를 업데이트하여 데이터를 섭취하는 능력을 크게 향상시켰습니다. GPT-4o의 효율성과 어시스턴트가 이제 최대 10,000개의 파일을 섭취할 수 있는 데, 여러분만의 어시스턴트를 만들기에 더 좋은 시기가 온 적이 없습니다.\n\n\n<div class=\"content-ad\"></div>\n\n이 글에서는 GPT-4o를 사용하여 어시스턴트를 만드는 가장 쉬운 방법을 안내하겠습니다.\n\n만약 프로페셔널이 여러분과 비즈니스에 맞는 어시스턴트를 개인 맞춤형으로 만들어주길 원하신다면 www.woyera.com 으로 연락해주세요.\n\n## 단계 1: 데이터 준비\n\n시작하기 전에, 여러분의 웹사이트나 애플리케이션을 위해 어시스턴트를 사용하려면 OpenAI API 키가 필요하다는 사실을 알려드리고 싶습니다.\n\n<div class=\"content-ad\"></div>\n\n먼저 OpenAI 플랫폼에 로그인하고 대시보드로 이동하세요. 그런 다음 아래에 표시된대로 “저장소”를 클릭하세요.\n\n![이미지](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_1.png)\n\n저장소 페이지에서 “벡터 저장소”를 선택한 다음 “만들기”를 클릭하세요. 벡터 저장소를 사용하면 의미론적 검색, 효율적인 검색, 더 나은 문맥 파악, 확장성 및 OpenAI API와의 원활한 통합이 가능해집니다.\n\n![이미지](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_2.png)\n\n<div class=\"content-ad\"></div>\n\n벡터 저장소를 만들었으면, Assistant가 액세스하길 원하는 파일을 추가하고 벡터 저장소 ID를 복사하십시오. 나중에 필요하게 됩니다.\n\n![image](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_3.png)\n\n## 단계 2: Assistant 만들기\n\n왼쪽 탐색 모음을 사용하여 \"Assistants\" 플레이그라운드로 이동하고 \"Assistant 만들기\"를 선택하십시오.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_4.png\" />\n\n어시스턴트를 만들었으면 어시스턴트 ID 코드를 복사하여 나중에 사용할 수 있도록 해주세요.\n\n<img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_5.png\" />\n\n어시스턴트에 정확한 지시를 제공하고 \"모델\"을 사용하여 원하는 모델을 선택하십시오. 여기서는 \"gpt-4o\"를 선택하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n마크다운 형식으로 표 태그를 변경하십시오.\n\n![How to Use GPT-4 with Python - File Search](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_6.png)\n\n저희 어시스턴트가 사용할 \"파일 검색\" 도구를 선택해 주세요.\n\n![How to Use GPT-4 with Python - Click Files](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_7.png)\n\n아래에 보이는 대로 \"파일\"을 클릭해주세요.\n\n<div class=\"content-ad\"></div>\n\n![`/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_8.png`](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_8.png)\n\nClick on \"Select vector store\"\n\n![`/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_9.png`](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_9.png)\n\nFinally, you will use the vector store id that we copied earlier and paste it into the field, click select after you have chosen the vector store you want.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_10.png)\n\n벡터 저장소에 애니메이션을 연결한 후에는 옵션 된 파일의 내용에 관한 질문으로 에이전트를 테스트해 보세요.\n\n내 어시스턴트의 경우, Colleen Hoover의 소설 'Verity'가 있는 벡터 저장소에 연결하도록 만들었습니다. 여러분의 파트너가 요청한대로 그리고 답변을 참조하면서 이 답변을 생성하는 모습을 확인할 수 있어요!\n\n![이미지](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_11.png)\n\n\n<div class=\"content-ad\"></div>\n\n이정도면 몇몇 사람들에게 충분할지도 모르지만, 파이썬을 사용하여 애플리케이션에 어시스턴트를 통합하는 방법을 자세히 보여드릴 수도 있습니다!\n\n## 단계 3: API 확인\n\n앱에 통합하기 전에 API 호출이 제대로 작동하는지 먼저 확인할 수 있습니다. 이를 위해 간단한 코드를 사용하여 확인할 수 있습니다. 전체 스크립트를 보고 싶다면 아래로 스크롤하세요.\n\n먼저, 이러한 인포트(imports)를 사용해야 합니다. 윈도우 환경이라면 \"pip install openai\"를 사용하고, 맥 환경이라면 \"pip3 install openai\"를 사용하는 것을 기억해 주세요.\n\n<div class=\"content-ad\"></div>\n\n```python\n예를 들어, 다음과 같이 코드를 작성할 수 있습니다.\n\nimport time\nfrom openai import OpenAI\n\n먼저 API 키를 사용하여 클라이언트를 만듭니다.\n\nclient = OpenAI(api_key='여기에 키를 입력하세요')\n\n그런 다음 대화를 저장할 \"스레드\"를 만듭니다.\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nempty_thread = client.beta.threads.create()\nprint(empty_thread)\n```\n\n그런 다음 메시지를 추가할 스레드 ID를 가져옵니다.\n\n```js\nthread_id= empty_thread.id\n```\n\n메시지 생성 및 스레드에 추가하기\n\n<div class=\"content-ad\"></div>\n\n```js\nthread_message = client.beta.threads.messages.create(\n  thread_id=thread_id,\n  role=\"user\",\n  content=\"여기에 메시지를 입력하세요\",\n)\nprint(thread_message)\n```\n\n이 코드 부분은 \"실행\" 상태를 추적하는 데 사용됩니다. 처음 실행했을 때 응답이로드되는 데 시간이 오래 걸렸고 작동 중인지 느리게 진행 중인지 확신할 수 없었습니다. 이것은 실행이 완료되지 않은 동안 실행 상태를 출력합니다.\n\n```js\nwhile run.status != \"completed\":\n    run = client.beta.threads.runs.retrieve(thread_id=empty_thread.id, run_id=run.id)\n    print(f\"실행 상태: {run.status}\")\n    time.sleep(0.5)\nelse:\n    print(\"실행 완료!\")\n```\n\n쓰레드로부터의 응답 및 실행에서의 메시지를 얻으려면 다음을 사용합니다.\n\n\n<div class=\"content-ad\"></div>\n\n\nmessage_response = client.beta.threads.messages.list(thread_id=empty_thread.id) \nmessages = message_response.data\n\nlatest_message = messages[0]\nprint(f\" response: {latest_message.content[0].text.value}\")\n\n\nPut all the code together, and ask the OpenAI Assistant Interface the same question as earlier. It should give the same answer, and it did!\n\n![Image](/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_12.png)\n\nThis is the complete script!\n\n\n<div class=\"content-ad\"></div>\n\n```python\nimport time\nfrom openai import OpenAI\n\nclient = OpenAI(api_key='YOUR KEY HERE')\n\n# Create Thread\nempty_thread = client.beta.threads.create()\nprint(empty_thread)\n\n# Get thread id\nthread_id = empty_thread.id\n\n# Create message to add to Thread\nthread_message = client.beta.threads.messages.create(\n  thread_id=thread_id,\n  role=\"user\",\n  content=\"USER QUESTION HERE\",\n)\nprint(thread_message)\n\n# Create a Run\nrun = client.beta.threads.runs.create(\n  thread_id=thread_id,\n  assistant_id='YOUR ASSISTANT ID HERE'\n)\n\nrun_id = run.id\n\nwhile run.status != \"completed\":\n    run = client.beta.threads.runs.retrieve(thread_id=empty_thread.id, run_id=run.id)\n    print(f\"Run status: {run.status}\")\n    time.sleep(0.5)\nelse:\n    print(\"Run Complete!\")\n\nmessage_response = client.beta.threads.messages.list(thread_id=empty_thread.id)\nmessages = message_response.data\n\nlatest_message = messages[0]\nprint(f\"Response: {latest_message.content[0].text.value}\")\n```\n\n### Step 4: 통합\n\n도우미 API를 응용 프로그램에 통합하려면 수많은 다양한 방법을 사용할 수 있습니다. 이것은 API에 인터페이스를 제공하는 가장 쉬운 방법 중 하나였습니다.\n\nStreamlit은 우리에게 도우미를 표시할 수 있는 쉬운 프론트엔드를 제공합니다. 사이트를 Streamlit을 통해 호스팅하는 것을 선택한다면 다음 코드를 사용해보세요.\n\n\n<div class=\"content-ad\"></div>\n\n```python\nimport streamlit as st\nfrom openai import OpenAI\nimport time\n\n# 클라이언트 생성\nclient = OpenAI(api_key='API 키를 여기에 입력하세요')\n\nst.title(':book: Book Bot')\n\n# 채팅 기록 초기화 (세션 상태 사용)\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\n# 채팅 기록 표시\nfor message in st.session_state.messages:\n    with st.container():\n        st.markdown(f\"**{message['role']}:** {message['content']}\")\n\n# 입력 텍스트 상자\nuser_input = st.text_input(\"You:\", \"\")\n\nif st.button(\"Send\") and user_input:\n    # 사용자 메시지를 채팅 기록에 추가\n    st.session_state.messages.append({\"role\": \"user\", \"content\": user_input})\n    \n    # 사용자 메시지를 즉시 표시\n    with st.container():\n        st.markdown(f\"**You:** {user_input}\")\n\n    # 쓰레드 및 메시지 생성\n    thread = client.beta.threads.create()\n    thread_message = client.beta.threads.messages.create(\n        thread_id=thread.id,\n        role=\"user\",\n        content=user_input,\n    )\n    run = client.beta.threads.runs.create(\n        thread_id=thread.id,\n        assistant_id='어시스턴트 ID를 여기에 입력하세요'  # 귀하의 어시스턴트 ID로 대체\n    )\n    \n    # 실행이 완료될 때까지 기다림\n    with st.spinner(\"Thinking...\"):\n        while run.status != \"completed\":\n            run = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)\n            time.sleep(0.5)\n\n    # 응답 검색 및 표시\n    messages = client.beta.threads.messages.list(thread_id=thread.id).data\n    latest_message = messages[0]\n    response_text = latest_message.content[0].text.value\n\n    # 어시스턴트 메시지를 채팅 기록에 추가\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": response_text})\n    \n    # 전송 후 입력 텍스트 상자 지우기\n    user_input = \"\"\n\n    # 어시스턴트 메시지를 즉시 표시\n    with st.container():\n        st.markdown(f\"**Assistant:** {response_text}\")\n```\n\n이렇게 고쳐지는 페이지 모습입니다!\n\n<img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_13.png\" />\n\nAI 모델 선택 및 비즈니스 통합 전체 프로세스를 다른 사람에게 맡기고 싶다면, www.woyera.com에서 연락하세요.\n","ogImage":{"url":"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_0.png"},"coverImage":"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_0.png\" alt=\"2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_0.png\"></p>\n<p>현재 인공 지능 뉴스를 따라갔다면 OpenAI가 최근에 최신 모델인 GPT-4o를 발표했다는 것을 알고 계실 것입니다. 가장 인상적인 새로운 기능은 다중 모달리티인데, 아쉽게도 이러한 기능들은 아직 공개되지 않았습니다.</p>\n<p>우리가 다중 모달 특징들이 롤아웃되길 기다리는 동안, 나는 여러분의 데이터에 GPT-4o를 사용하는 가장 쉬운 방법을 보여드리겠습니다, 어시스턴트!</p>\n<p>OpenAI는 최근에 어시스턴트를 업데이트하여 데이터를 섭취하는 능력을 크게 향상시켰습니다. GPT-4o의 효율성과 어시스턴트가 이제 최대 10,000개의 파일을 섭취할 수 있는 데, 여러분만의 어시스턴트를 만들기에 더 좋은 시기가 온 적이 없습니다.</p>\n<p>이 글에서는 GPT-4o를 사용하여 어시스턴트를 만드는 가장 쉬운 방법을 안내하겠습니다.</p>\n<p>만약 프로페셔널이 여러분과 비즈니스에 맞는 어시스턴트를 개인 맞춤형으로 만들어주길 원하신다면 <a href=\"http://www.woyera.com\" rel=\"nofollow\" target=\"_blank\">www.woyera.com</a> 으로 연락해주세요.</p>\n<h2>단계 1: 데이터 준비</h2>\n<p>시작하기 전에, 여러분의 웹사이트나 애플리케이션을 위해 어시스턴트를 사용하려면 OpenAI API 키가 필요하다는 사실을 알려드리고 싶습니다.</p>\n<p>먼저 OpenAI 플랫폼에 로그인하고 대시보드로 이동하세요. 그런 다음 아래에 표시된대로 “저장소”를 클릭하세요.</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_1.png\" alt=\"이미지\"></p>\n<p>저장소 페이지에서 “벡터 저장소”를 선택한 다음 “만들기”를 클릭하세요. 벡터 저장소를 사용하면 의미론적 검색, 효율적인 검색, 더 나은 문맥 파악, 확장성 및 OpenAI API와의 원활한 통합이 가능해집니다.</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_2.png\" alt=\"이미지\"></p>\n<p>벡터 저장소를 만들었으면, Assistant가 액세스하길 원하는 파일을 추가하고 벡터 저장소 ID를 복사하십시오. 나중에 필요하게 됩니다.</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_3.png\" alt=\"image\"></p>\n<h2>단계 2: Assistant 만들기</h2>\n<p>왼쪽 탐색 모음을 사용하여 \"Assistants\" 플레이그라운드로 이동하고 \"Assistant 만들기\"를 선택하십시오.</p>\n<p>어시스턴트를 만들었으면 어시스턴트 ID 코드를 복사하여 나중에 사용할 수 있도록 해주세요.</p>\n<p>어시스턴트에 정확한 지시를 제공하고 \"모델\"을 사용하여 원하는 모델을 선택하십시오. 여기서는 \"gpt-4o\"를 선택하면 됩니다.</p>\n<p>마크다운 형식으로 표 태그를 변경하십시오.</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_6.png\" alt=\"How to Use GPT-4 with Python - File Search\"></p>\n<p>저희 어시스턴트가 사용할 \"파일 검색\" 도구를 선택해 주세요.</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_7.png\" alt=\"How to Use GPT-4 with Python - Click Files\"></p>\n<p>아래에 보이는 대로 \"파일\"을 클릭해주세요.</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_8.png\" alt=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_8.png\"></p>\n<p>Click on \"Select vector store\"</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_9.png\" alt=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_9.png\"></p>\n<p>Finally, you will use the vector store id that we copied earlier and paste it into the field, click select after you have chosen the vector store you want.</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_10.png\" alt=\"이미지\"></p>\n<p>벡터 저장소에 애니메이션을 연결한 후에는 옵션 된 파일의 내용에 관한 질문으로 에이전트를 테스트해 보세요.</p>\n<p>내 어시스턴트의 경우, Colleen Hoover의 소설 'Verity'가 있는 벡터 저장소에 연결하도록 만들었습니다. 여러분의 파트너가 요청한대로 그리고 답변을 참조하면서 이 답변을 생성하는 모습을 확인할 수 있어요!</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_11.png\" alt=\"이미지\"></p>\n<p>이정도면 몇몇 사람들에게 충분할지도 모르지만, 파이썬을 사용하여 애플리케이션에 어시스턴트를 통합하는 방법을 자세히 보여드릴 수도 있습니다!</p>\n<h2>단계 3: API 확인</h2>\n<p>앱에 통합하기 전에 API 호출이 제대로 작동하는지 먼저 확인할 수 있습니다. 이를 위해 간단한 코드를 사용하여 확인할 수 있습니다. 전체 스크립트를 보고 싶다면 아래로 스크롤하세요.</p>\n<p>먼저, 이러한 인포트(imports)를 사용해야 합니다. 윈도우 환경이라면 \"pip install openai\"를 사용하고, 맥 환경이라면 \"pip3 install openai\"를 사용하는 것을 기억해 주세요.</p>\n<pre><code class=\"hljs language-python\">예를 들어, 다음과 같이 코드를 작성할 수 있습니다.\n\n<span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">from</span> openai <span class=\"hljs-keyword\">import</span> OpenAI\n\n먼저 API 키를 사용하여 클라이언트를 만듭니다.\n\nclient = OpenAI(api_key=<span class=\"hljs-string\">'여기에 키를 입력하세요'</span>)\n\n그런 다음 대화를 저장할 <span class=\"hljs-string\">\"스레드\"</span>를 만듭니다.\n</code></pre>\n<pre><code class=\"hljs language-js\">empty_thread = client.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-title function_\">create</span>()\n<span class=\"hljs-title function_\">print</span>(empty_thread)\n</code></pre>\n<p>그런 다음 메시지를 추가할 스레드 ID를 가져옵니다.</p>\n<pre><code class=\"hljs language-js\">thread_id= empty_thread.<span class=\"hljs-property\">id</span>\n</code></pre>\n<p>메시지 생성 및 스레드에 추가하기</p>\n<pre><code class=\"hljs language-js\">thread_message = client.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-property\">messages</span>.<span class=\"hljs-title function_\">create</span>(\n  thread_id=thread_id,\n  role=<span class=\"hljs-string\">\"user\"</span>,\n  content=<span class=\"hljs-string\">\"여기에 메시지를 입력하세요\"</span>,\n)\n<span class=\"hljs-title function_\">print</span>(thread_message)\n</code></pre>\n<p>이 코드 부분은 \"실행\" 상태를 추적하는 데 사용됩니다. 처음 실행했을 때 응답이로드되는 데 시간이 오래 걸렸고 작동 중인지 느리게 진행 중인지 확신할 수 없었습니다. 이것은 실행이 완료되지 않은 동안 실행 상태를 출력합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">while</span> run.<span class=\"hljs-property\">status</span> != <span class=\"hljs-string\">\"completed\"</span>:\n    run = client.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-property\">runs</span>.<span class=\"hljs-title function_\">retrieve</span>(thread_id=empty_thread.<span class=\"hljs-property\">id</span>, run_id=run.<span class=\"hljs-property\">id</span>)\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"실행 상태: {run.status}\"</span>)\n    time.<span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">0.5</span>)\n<span class=\"hljs-attr\">else</span>:\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"실행 완료!\"</span>)\n</code></pre>\n<p>쓰레드로부터의 응답 및 실행에서의 메시지를 얻으려면 다음을 사용합니다.</p>\n<p>message_response = client.beta.threads.messages.list(thread_id=empty_thread.id)\nmessages = message_response.data</p>\n<p>latest_message = messages[0]\nprint(f\" response: {latest_message.content[0].text.value}\")</p>\n<p>Put all the code together, and ask the OpenAI Assistant Interface the same question as earlier. It should give the same answer, and it did!</p>\n<p><img src=\"/assets/img/2024-06-19-HowIusethenewGPT-4oonmyownfileswithPython_12.png\" alt=\"Image\"></p>\n<p>This is the complete script!</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">from</span> openai <span class=\"hljs-keyword\">import</span> OpenAI\n\nclient = OpenAI(api_key=<span class=\"hljs-string\">'YOUR KEY HERE'</span>)\n\n<span class=\"hljs-comment\"># Create Thread</span>\nempty_thread = client.beta.threads.create()\n<span class=\"hljs-built_in\">print</span>(empty_thread)\n\n<span class=\"hljs-comment\"># Get thread id</span>\nthread_id = empty_thread.<span class=\"hljs-built_in\">id</span>\n\n<span class=\"hljs-comment\"># Create message to add to Thread</span>\nthread_message = client.beta.threads.messages.create(\n  thread_id=thread_id,\n  role=<span class=\"hljs-string\">\"user\"</span>,\n  content=<span class=\"hljs-string\">\"USER QUESTION HERE\"</span>,\n)\n<span class=\"hljs-built_in\">print</span>(thread_message)\n\n<span class=\"hljs-comment\"># Create a Run</span>\nrun = client.beta.threads.runs.create(\n  thread_id=thread_id,\n  assistant_id=<span class=\"hljs-string\">'YOUR ASSISTANT ID HERE'</span>\n)\n\nrun_id = run.<span class=\"hljs-built_in\">id</span>\n\n<span class=\"hljs-keyword\">while</span> run.status != <span class=\"hljs-string\">\"completed\"</span>:\n    run = client.beta.threads.runs.retrieve(thread_id=empty_thread.<span class=\"hljs-built_in\">id</span>, run_id=run.<span class=\"hljs-built_in\">id</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Run status: <span class=\"hljs-subst\">{run.status}</span>\"</span>)\n    time.sleep(<span class=\"hljs-number\">0.5</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Run Complete!\"</span>)\n\nmessage_response = client.beta.threads.messages.<span class=\"hljs-built_in\">list</span>(thread_id=empty_thread.<span class=\"hljs-built_in\">id</span>)\nmessages = message_response.data\n\nlatest_message = messages[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Response: <span class=\"hljs-subst\">{latest_message.content[<span class=\"hljs-number\">0</span>].text.value}</span>\"</span>)\n</code></pre>\n<h3>Step 4: 통합</h3>\n<p>도우미 API를 응용 프로그램에 통합하려면 수많은 다양한 방법을 사용할 수 있습니다. 이것은 API에 인터페이스를 제공하는 가장 쉬운 방법 중 하나였습니다.</p>\n<p>Streamlit은 우리에게 도우미를 표시할 수 있는 쉬운 프론트엔드를 제공합니다. 사이트를 Streamlit을 통해 호스팅하는 것을 선택한다면 다음 코드를 사용해보세요.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> streamlit <span class=\"hljs-keyword\">as</span> st\n<span class=\"hljs-keyword\">from</span> openai <span class=\"hljs-keyword\">import</span> OpenAI\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-comment\"># 클라이언트 생성</span>\nclient = OpenAI(api_key=<span class=\"hljs-string\">'API 키를 여기에 입력하세요'</span>)\n\nst.title(<span class=\"hljs-string\">':book: Book Bot'</span>)\n\n<span class=\"hljs-comment\"># 채팅 기록 초기화 (세션 상태 사용)</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\"messages\"</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> st.session_state:\n    st.session_state.messages = []\n\n<span class=\"hljs-comment\"># 채팅 기록 표시</span>\n<span class=\"hljs-keyword\">for</span> message <span class=\"hljs-keyword\">in</span> st.session_state.messages:\n    <span class=\"hljs-keyword\">with</span> st.container():\n        st.markdown(<span class=\"hljs-string\">f\"**<span class=\"hljs-subst\">{message[<span class=\"hljs-string\">'role'</span>]}</span>:** <span class=\"hljs-subst\">{message[<span class=\"hljs-string\">'content'</span>]}</span>\"</span>)\n\n<span class=\"hljs-comment\"># 입력 텍스트 상자</span>\nuser_input = st.text_input(<span class=\"hljs-string\">\"You:\"</span>, <span class=\"hljs-string\">\"\"</span>)\n\n<span class=\"hljs-keyword\">if</span> st.button(<span class=\"hljs-string\">\"Send\"</span>) <span class=\"hljs-keyword\">and</span> user_input:\n    <span class=\"hljs-comment\"># 사용자 메시지를 채팅 기록에 추가</span>\n    st.session_state.messages.append({<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>, <span class=\"hljs-string\">\"content\"</span>: user_input})\n    \n    <span class=\"hljs-comment\"># 사용자 메시지를 즉시 표시</span>\n    <span class=\"hljs-keyword\">with</span> st.container():\n        st.markdown(<span class=\"hljs-string\">f\"**You:** <span class=\"hljs-subst\">{user_input}</span>\"</span>)\n\n    <span class=\"hljs-comment\"># 쓰레드 및 메시지 생성</span>\n    thread = client.beta.threads.create()\n    thread_message = client.beta.threads.messages.create(\n        thread_id=thread.<span class=\"hljs-built_in\">id</span>,\n        role=<span class=\"hljs-string\">\"user\"</span>,\n        content=user_input,\n    )\n    run = client.beta.threads.runs.create(\n        thread_id=thread.<span class=\"hljs-built_in\">id</span>,\n        assistant_id=<span class=\"hljs-string\">'어시스턴트 ID를 여기에 입력하세요'</span>  <span class=\"hljs-comment\"># 귀하의 어시스턴트 ID로 대체</span>\n    )\n    \n    <span class=\"hljs-comment\"># 실행이 완료될 때까지 기다림</span>\n    <span class=\"hljs-keyword\">with</span> st.spinner(<span class=\"hljs-string\">\"Thinking...\"</span>):\n        <span class=\"hljs-keyword\">while</span> run.status != <span class=\"hljs-string\">\"completed\"</span>:\n            run = client.beta.threads.runs.retrieve(thread_id=thread.<span class=\"hljs-built_in\">id</span>, run_id=run.<span class=\"hljs-built_in\">id</span>)\n            time.sleep(<span class=\"hljs-number\">0.5</span>)\n\n    <span class=\"hljs-comment\"># 응답 검색 및 표시</span>\n    messages = client.beta.threads.messages.<span class=\"hljs-built_in\">list</span>(thread_id=thread.<span class=\"hljs-built_in\">id</span>).data\n    latest_message = messages[<span class=\"hljs-number\">0</span>]\n    response_text = latest_message.content[<span class=\"hljs-number\">0</span>].text.value\n\n    <span class=\"hljs-comment\"># 어시스턴트 메시지를 채팅 기록에 추가</span>\n    st.session_state.messages.append({<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"assistant\"</span>, <span class=\"hljs-string\">\"content\"</span>: response_text})\n    \n    <span class=\"hljs-comment\"># 전송 후 입력 텍스트 상자 지우기</span>\n    user_input = <span class=\"hljs-string\">\"\"</span>\n\n    <span class=\"hljs-comment\"># 어시스턴트 메시지를 즉시 표시</span>\n    <span class=\"hljs-keyword\">with</span> st.container():\n        st.markdown(<span class=\"hljs-string\">f\"**Assistant:** <span class=\"hljs-subst\">{response_text}</span>\"</span>)\n</code></pre>\n<p>이렇게 고쳐지는 페이지 모습입니다!</p>\n<p>AI 모델 선택 및 비즈니스 통합 전체 프로세스를 다른 사람에게 맡기고 싶다면, <a href=\"http://www.woyera.com%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">www.woyera.com에서</a> 연락하세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}