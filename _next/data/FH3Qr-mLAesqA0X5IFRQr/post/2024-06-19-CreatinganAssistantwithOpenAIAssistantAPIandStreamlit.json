{"pageProps":{"post":{"title":"OpenAI Assistant API와 Streamlit을 사용하여 도우미 만들기","description":"","date":"2024-06-19 19:58","slug":"2024-06-19-CreatinganAssistantwithOpenAIAssistantAPIandStreamlit","content":"\n\n## 단계별 가이드\n\n![이미지](https://miro.medium.com/v2/resize:fit:1200/1*bX5eqE7EUmnwxWuqjZDzIQ.gif)\n\n# OpenAI Assistant API\n\n최근 OpenAI가 새로운 기능을 소개했습니다. 이들은 Assistant API와 같이 에이전트와 같은 아키텍처를 보여줍니다. OpenAI에 따르면:\n\n<div class=\"content-ad\"></div>\n\n이러한 발전은 희망적이지만, 아직 LangChain을 따라가지 못합니다. LangChain은 자연어 입력을 처리하고 문맥 기반 액션을 실행하는 더 유연한 LLM을 활용하여 에이전트 형태의 시스템을 만들 수 있습니다.\n\n하지만, 이것은 시작에 불과합니다.\n\n높은 수준에서 Assistant API와 상호 작용하는 것은 루프로 상상할 수 있습니다:\n\n- 사용자 입력을 받으면 LLM이 호출되어 응답을 제공할지 또는 특정 조치를 취할지를 결정합니다.\n- LLM의 결정이 쿼리에 대한 답변으로 충분하다면 루프가 종료됩니다.\n- 만약 행동이 새로운 관찰로 이어진다면, 이 관찰은 프롬프트에 포함되고 LLM이 다시 호출됩니다.\n- 그런 다음 루프가 다시 시작됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-19-CreatinganAssistantwithOpenAIAssistantAPIandStreamlit_0.png)\n\n안타깝게도 발표된 장점에도 불구하고, API에 대한 문서는 특히 사용자 정의 함수 호출 및 Streamlit와 같은 프레임워크를 사용한 앱 구축과 관련하여 제대로 작성되지 않았다고 생각했습니다.\n\n이 블로그 포스트에서는 OpenAI Assistant API 및 사용자 정의 함수 호출을 사용하여 Streamlit 인터페이스와 함께 AI 어시스턴트를 구축하는 방법을 안내해드리겠습니다. 이를 통해 Assistant API를 효과적으로 사용하고자 하는 분들께 도움이 될 것입니다.\n\n# 사용 사례: 세금 계산 어시스턴트\n\n\n<div class=\"content-ad\"></div>\n\n이 블로그 포스트에서는 간단한 예제를 보여드리겠습니다: 주어진 수익에 기반한 세금을 계산할 수 있는 AI 어시스턴트입니다. Langchain 사용자들은 \"세금 계산\" 도구를 가진 에이전트를 생성함으로써 이를 쉽게 이해할 수 있습니다.\n\n이 도구에는 필요한 계산 단계와 LLM이 수익 또는 세금과 관련된 질문이 있을 때 도구를 호출해야 하는지를 알려주는 잘 설계된 프롬프트가 포함될 것입니다.\n\n그러나 이 프로세스는 OpenAI 어시스턴트 API와 정확히 동일하지는 않습니다. OpenAI의 문서에 따르면 코드 해석기와 파일 검색 도구는 직접적으로 간단한 방식으로 사용할 수 있지만, 사용자 정의 도구는 약간 다른 방식으로 접근해야 합니다.\n\n```js\nassistant = client.beta.assistants.create(\n  name=\"데이터 시각화자\",\n  description=\"당신은 아름다운 데이터 시각화를 만드는 데 뛰어나십니다. .csv 파일에 있는 데이터를 분석하며 트렌드를 이해하고 해당 트렌드에 관련된 데이터 시각화를 제시합니다. 또한 관찰된 트렌드에 대한 간단한 텍스트 요약을 공유합니다.\",\n  model=\"gpt-4o\",\n  tools=[{\"type\": \"code_interpreter\"}],\n)\n```\n\n<div class=\"content-ad\"></div>\n\n한 단계씩 세부 내용을 살펴보겠습니다. 다음을 목표로 합니다:\n\n- 주어진 수익에 기반한 세금을 계산하는 함수 정의하기.\n- 이 함수를 사용하는 도구 개발하기.\n- 이 도구에 액세스하고 세금 계산이 필요할 때 호출할 수 있는 어시스턴트 만들기.\n\n# 어시스턴트 통합을 위한 세금 계산 함수\n\n다음 단락에서 설명하는 세금 계산 도구는 이 글에서 논의된 API를 사용하는 방법을 보여주기 위한 예시로 설계되었음을 유념해 주세요. 실제 세금 계산에 사용해서는 안 됩니다.\n\n<div class=\"content-ad\"></div>\n\n다음과 같이 조각별 함수를 고려해 보세요. 이 함수는 주어진 매출에 대한 세금 값을 반환합니다. 입력이 간단한 구문 분석을 위해 문자열로 설정되어 있음을 유의하세요:\n\n```js\ndef calculate_tax(revenue: str):\n    try:\n        revenue = float(revenue)\n    except ValueError:\n        raise ValueError(\"매출은 숫자의 문자열 표현이어야 합니다.\")\n\n    if revenue <= 10000:\n        tax = 0\n    elif revenue <= 30000:\n        tax = 0.10 * (revenue - 10000)\n    elif revenue <= 70000:\n        tax = 2000 + 0.20 * (revenue - 30000)\n    elif revenue <= 150000:\n        tax = 10000 + 0.30 * (revenue - 70000)\n    else:\n        tax = 34000 + 0.40 * (revenue - 150000)\n\n    return tax\n```\n\n다음으로, 비서(assistant)를 정의합니다:\n\n```js\nfunction_tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"calculate_tax\",\n            \"description\": \"유로로 주어진 매출에 대한 세금을 가져옵니다.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"revenue\": {\n                        \"type\": \"string\",\n                        \"description\": \"유로로 연간 매출\"\n                    }\n                },\n                \"required\": [\"revenue\"]\n            }\n        }\n    }\n]\n\n# 비서(assistant) 정의\nassistant = client.beta.assistants.create(\n    name=\"Assistant\",\n    instructions=\"\",\n    tools=function_tools,\n    model=\"gpt-4o\",\n)\n```\n\n<div class=\"content-ad\"></div>\n\n이제, 주요한 포인트에 대해서 얘기해볼게요:\n\n어시스턴트가 \"calculate_tax\"가 호출될 때 어떻게 함수를 사용하는지 알고 계신가요? 이 부분은 OpenAI 어시스턴트에서 문서화가 잘 되어 있지 않아, 많은 사용자들이 처음 사용할 때 혼동을 겪을 수 있어요. 이를 해결하기 위해, 응담 스트림(response stream)에서 다양한 이벤트를 관리하기 위한 EventHandler를 정의해야 합니다. 특히 \"calculate_tax\" 도구가 호출될 때의 이벤트를 어떻게 처리하는지에 대해 명확히 알아둬야 해요.\n\n```js\n    def handle_requires_action(self, data, run_id):\n        tool_outputs = []\n\n        for tool in data.required_action.submit_tool_outputs.tool_calls:\n            if tool.function.name == \"calculate_tax\":\n                try:\n                    # 도구 매개변수에서 수익 추출\n                    revenue = ast.literal_eval(tool.function.arguments)[\"revenue\"]\n                    # 세금을 계산하는 calculate_tax 함수 호출\n                    tax_result = calculate_tax(revenue)\n                    # 필요한 형식에 맞게 도구 출력을 추가\n                    tool_outputs.append({\"tool_call_id\": tool.id, \"output\": f\"{tax_result}\"})\n                except ValueError as e:\n                    # 세금 계산 시 발생하는 모든 오류 처리\n                    tool_outputs.append({\"tool_call_id\": tool.id, \"error\": str(e)})\n        # 모든 도구 출력을 동시에 제출\n        self.submit_tool_outputs(tool_outputs)\n```\n\n위 코드는 다음과 같이 동작해요: 동작이 필요한 각 도구 호출에 대해:\n\n<div class=\"content-ad\"></div>\n\n- \"calculate_tax\" 함수 이름을 확인합니다.\n- 툴 매개변수에서 수익 값을 추출합니다.\n- 수익을 이용하여 calculate_tax 함수를 호출하여 세금을 계산합니다. (여기서 실제 상호작용이 이루어집니다.)\n- 모든 툴 호출을 처리한 후, 수집된 결과를 제출합니다.\n\n# 보조 인공지능과 대화하기\n\n다음은 OpenAI가 문서화한 표준 단계를 따라 보조 인공지능과 상호작용할 수 있습니다. 따라서 이 섹션에서는 많은 세부 정보를 제공하지 않겠습니다:\n\n- 스레드 생성: 이는 사용자와 보조 인공지능 간의 대화를 나타냅니다.\n- 사용자 메시지 추가: 이는 스레드에 추가되는 텍스트 및 파일을 포함할 수 있습니다.\n- 실행 생성: 보조 인공지능과 연관된 모델 및 도구를 활용하여 응답 생성합니다. 이 응답은 다시 스레드에 추가됩니다.\n\n<div class=\"content-ad\"></div>\n\n아래 코드 조각은 특정 사용 사례에서 어시스턴트를 실행하는 방법을 보여줍니다: 코드는 스레드 ID 및 어시스턴트 ID를 사용하는 특정 매개변수를 설정하여 어시스턴트와의 스트리밍 상호작용을 설정합니다. EventHandler 인스턴스는 스트림 중 이벤트를 관리합니다. stream.until_done() 메서드는 모든 상호작용이 완료될 때까지 스트림을 유지합니다. with 문은 스트림이 적절히 닫히도록 보장합니다.\n\n```js\n  with client.beta.threads.runs.stream(thread_id=st.session_state.thread_id,\n                                         assistant_id=assistant.id,\n                                         event_handler=EventHandler(),\n                                         temperature=0) as stream:\n        stream.until_done()\n```\n\n# Streamlit 인터페이스\n\n여기서 내 게시물을 마칠 수 있지만, Streamlit 포럼(예: 이 포스트)에서 사용자들이 터미널에서는 정상 작동하지만 인터페이스에서 스트리밍이 작동하지 않는다는 수많은 문의를 발견했습니다. 이것이 나로 하여금 더 깊이 파고들도록 유도했습니다.\n\n<div class=\"content-ad\"></div>\n\n스트리밍을 앱에 성공적으로 통합하려면, 앞서 언급한 EventHandler 클래스의 기능을 확장해야 합니다. 특히 텍스트 생성, 텍스트 델타 처리 및 텍스트 완료를 중점적으로 다루어야 합니다. 채팅 히스토리를 관리하면서 Streamlit 인터페이스에 텍스트를 표시하기 위해 필요한 세 가지 주요 단계는 다음과 같습니다:\n\n- 텍스트 생성 처리 (on_text_created): 어시스턴트의 각 응답마다 새로운 텍스트 상자를 초기화하고 표시하여 이전 작업의 상태를 반영하도록 UI를 업데이트합니다.\n- 텍스트 델타 처리 (on_text_delta): 어시스턴트가 텍스트를 생성할 때 현재 텍스트 상자를 동적으로 업데이트하여 전체 UI를 새로 고치지 않고도 점진적으로 변경할 수 있도록 합니다.\n- 텍스트 완료 처리 (on_text_done): 새로운 빈 텍스트 상자를 추가하여 각 상호작용 세그먼트를 완료하고, 다음 상호작용을 준비합니다. 또한, 대화 세그먼트를 chat_history에 기록합니다.\n\n예를 들어, 텍스트 델타를 관리하는 다음 코드 조각을 살펴봅시다:\n\n```python\ndef on_text_delta(self, delta: TextDelta, snapshot: Text):\n    \"\"\"\n    텍스트 델타가 생성될 때의 핸들러\n    \"\"\"\n    # 최신 텍스트 상자를 지웁니다.\n    st.session_state.text_boxes[-1].empty()\n    \n    # 새로운 텍스트가 있으면, 어시스턴트 텍스트 목록의 마지막 요소에 추가합니다.\n    if delta.value:\n        st.session_state.assistant_text[-1] += delta.value\n    \n    # 업데이트된 어시스턴트 텍스트를 최신 텍스트 상자에 다시 표시합니다.\n    st.session_state.text_boxes[-1].info(\"\".join(st.session_state[\"assistant_text\"][-1]))\n```\n\n<div class=\"content-ad\"></div>\n\n이 코드는 세 가지 주요 작업을 수행합니다:\n\n- 최신 텍스트 상자 지우기: 최신 텍스트 상자의 내용을 지워 새 입력을 준비합니다 (st.session_state.text_boxes[-1]).\n- 델타 값을 도우미 텍스트에 추가: 새 텍스트 (delta.value)가 있는 경우, 이를 st.session_state.assistant_text[-1]에 저장된 지속적인 도우미 텍스트에 추가합니다.\n- 업데이트된 도우미 텍스트 다시 표시: 지금까지 축적된 모든 도우미 텍스트의 내용을 반영하기 위해 최신 텍스트 상자의 내용을 업데이트합니다 (st.session_state[\"assistant_text\"][-1]).\n\n# 결론\n\n이 블로그 포스트에서는 OpenAI Assistant API와 Streamlit을 사용하여 세금을 계산할 수 있는 AI 도우미를 만드는 방법을 보여주었습니다.\n\n<div class=\"content-ad\"></div>\n\n저는 Assistant API의 능력을 강조하기 위해 이 간단한 프로젝트를 수행했어요. 문서가 다소 불명확하더라도, 목표는 모호한 부분을 명확하게 하고 Assistant API를 사용하고자 하는 분들에게 일부 지침을 제공하는 것이었습니다. 이 게시물이 도움이 되었으면 좋겠고, 이 강력한 도구로 더 많은 가능성을 탐험하도록 격려하길 바랍니다.\n\n공간 제약으로 인해 불필요한 코드 조각을 포함하지 않으려고 노력했어요. 그러나 필요한 경우, 제 Github 저장소를 방문하여 전체 구현 내용을 확인해주세요.","ogImage":{"url":"/assets/img/2024-06-19-CreatinganAssistantwithOpenAIAssistantAPIandStreamlit_0.png"},"coverImage":"/assets/img/2024-06-19-CreatinganAssistantwithOpenAIAssistantAPIandStreamlit_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>단계별 가이드</h2>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*bX5eqE7EUmnwxWuqjZDzIQ.gif\" alt=\"이미지\"></p>\n<h1>OpenAI Assistant API</h1>\n<p>최근 OpenAI가 새로운 기능을 소개했습니다. 이들은 Assistant API와 같이 에이전트와 같은 아키텍처를 보여줍니다. OpenAI에 따르면:</p>\n<p>이러한 발전은 희망적이지만, 아직 LangChain을 따라가지 못합니다. LangChain은 자연어 입력을 처리하고 문맥 기반 액션을 실행하는 더 유연한 LLM을 활용하여 에이전트 형태의 시스템을 만들 수 있습니다.</p>\n<p>하지만, 이것은 시작에 불과합니다.</p>\n<p>높은 수준에서 Assistant API와 상호 작용하는 것은 루프로 상상할 수 있습니다:</p>\n<ul>\n<li>사용자 입력을 받으면 LLM이 호출되어 응답을 제공할지 또는 특정 조치를 취할지를 결정합니다.</li>\n<li>LLM의 결정이 쿼리에 대한 답변으로 충분하다면 루프가 종료됩니다.</li>\n<li>만약 행동이 새로운 관찰로 이어진다면, 이 관찰은 프롬프트에 포함되고 LLM이 다시 호출됩니다.</li>\n<li>그런 다음 루프가 다시 시작됩니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-19-CreatinganAssistantwithOpenAIAssistantAPIandStreamlit_0.png\" alt=\"이미지\"></p>\n<p>안타깝게도 발표된 장점에도 불구하고, API에 대한 문서는 특히 사용자 정의 함수 호출 및 Streamlit와 같은 프레임워크를 사용한 앱 구축과 관련하여 제대로 작성되지 않았다고 생각했습니다.</p>\n<p>이 블로그 포스트에서는 OpenAI Assistant API 및 사용자 정의 함수 호출을 사용하여 Streamlit 인터페이스와 함께 AI 어시스턴트를 구축하는 방법을 안내해드리겠습니다. 이를 통해 Assistant API를 효과적으로 사용하고자 하는 분들께 도움이 될 것입니다.</p>\n<h1>사용 사례: 세금 계산 어시스턴트</h1>\n<p>이 블로그 포스트에서는 간단한 예제를 보여드리겠습니다: 주어진 수익에 기반한 세금을 계산할 수 있는 AI 어시스턴트입니다. Langchain 사용자들은 \"세금 계산\" 도구를 가진 에이전트를 생성함으로써 이를 쉽게 이해할 수 있습니다.</p>\n<p>이 도구에는 필요한 계산 단계와 LLM이 수익 또는 세금과 관련된 질문이 있을 때 도구를 호출해야 하는지를 알려주는 잘 설계된 프롬프트가 포함될 것입니다.</p>\n<p>그러나 이 프로세스는 OpenAI 어시스턴트 API와 정확히 동일하지는 않습니다. OpenAI의 문서에 따르면 코드 해석기와 파일 검색 도구는 직접적으로 간단한 방식으로 사용할 수 있지만, 사용자 정의 도구는 약간 다른 방식으로 접근해야 합니다.</p>\n<pre><code class=\"hljs language-js\">assistant = client.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">assistants</span>.<span class=\"hljs-title function_\">create</span>(\n  name=<span class=\"hljs-string\">\"데이터 시각화자\"</span>,\n  description=<span class=\"hljs-string\">\"당신은 아름다운 데이터 시각화를 만드는 데 뛰어나십니다. .csv 파일에 있는 데이터를 분석하며 트렌드를 이해하고 해당 트렌드에 관련된 데이터 시각화를 제시합니다. 또한 관찰된 트렌드에 대한 간단한 텍스트 요약을 공유합니다.\"</span>,\n  model=<span class=\"hljs-string\">\"gpt-4o\"</span>,\n  tools=[{<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"code_interpreter\"</span>}],\n)\n</code></pre>\n<p>한 단계씩 세부 내용을 살펴보겠습니다. 다음을 목표로 합니다:</p>\n<ul>\n<li>주어진 수익에 기반한 세금을 계산하는 함수 정의하기.</li>\n<li>이 함수를 사용하는 도구 개발하기.</li>\n<li>이 도구에 액세스하고 세금 계산이 필요할 때 호출할 수 있는 어시스턴트 만들기.</li>\n</ul>\n<h1>어시스턴트 통합을 위한 세금 계산 함수</h1>\n<p>다음 단락에서 설명하는 세금 계산 도구는 이 글에서 논의된 API를 사용하는 방법을 보여주기 위한 예시로 설계되었음을 유념해 주세요. 실제 세금 계산에 사용해서는 안 됩니다.</p>\n<p>다음과 같이 조각별 함수를 고려해 보세요. 이 함수는 주어진 매출에 대한 세금 값을 반환합니다. 입력이 간단한 구문 분석을 위해 문자열로 설정되어 있음을 유의하세요:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">calculate_tax</span>(<span class=\"hljs-attr\">revenue</span>: str):\n    <span class=\"hljs-attr\">try</span>:\n        revenue = <span class=\"hljs-title function_\">float</span>(revenue)\n    except <span class=\"hljs-title class_\">ValueError</span>:\n        raise <span class=\"hljs-title class_\">ValueError</span>(<span class=\"hljs-string\">\"매출은 숫자의 문자열 표현이어야 합니다.\"</span>)\n\n    <span class=\"hljs-keyword\">if</span> revenue &#x3C;= <span class=\"hljs-number\">10000</span>:\n        tax = <span class=\"hljs-number\">0</span>\n    elif revenue &#x3C;= <span class=\"hljs-number\">30000</span>:\n        tax = <span class=\"hljs-number\">0.10</span> * (revenue - <span class=\"hljs-number\">10000</span>)\n    elif revenue &#x3C;= <span class=\"hljs-number\">70000</span>:\n        tax = <span class=\"hljs-number\">2000</span> + <span class=\"hljs-number\">0.20</span> * (revenue - <span class=\"hljs-number\">30000</span>)\n    elif revenue &#x3C;= <span class=\"hljs-number\">150000</span>:\n        tax = <span class=\"hljs-number\">10000</span> + <span class=\"hljs-number\">0.30</span> * (revenue - <span class=\"hljs-number\">70000</span>)\n    <span class=\"hljs-attr\">else</span>:\n        tax = <span class=\"hljs-number\">34000</span> + <span class=\"hljs-number\">0.40</span> * (revenue - <span class=\"hljs-number\">150000</span>)\n\n    <span class=\"hljs-keyword\">return</span> tax\n</code></pre>\n<p>다음으로, 비서(assistant)를 정의합니다:</p>\n<pre><code class=\"hljs language-js\">function_tools = [\n    {\n        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"function\"</span>,\n        <span class=\"hljs-string\">\"function\"</span>: {\n            <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"calculate_tax\"</span>,\n            <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"유로로 주어진 매출에 대한 세금을 가져옵니다.\"</span>,\n            <span class=\"hljs-string\">\"parameters\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n                <span class=\"hljs-string\">\"properties\"</span>: {\n                    <span class=\"hljs-string\">\"revenue\"</span>: {\n                        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"string\"</span>,\n                        <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"유로로 연간 매출\"</span>\n                    }\n                },\n                <span class=\"hljs-string\">\"required\"</span>: [<span class=\"hljs-string\">\"revenue\"</span>]\n            }\n        }\n    }\n]\n\n# 비서(assistant) 정의\nassistant = client.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">assistants</span>.<span class=\"hljs-title function_\">create</span>(\n    name=<span class=\"hljs-string\">\"Assistant\"</span>,\n    instructions=<span class=\"hljs-string\">\"\"</span>,\n    tools=function_tools,\n    model=<span class=\"hljs-string\">\"gpt-4o\"</span>,\n)\n</code></pre>\n<p>이제, 주요한 포인트에 대해서 얘기해볼게요:</p>\n<p>어시스턴트가 \"calculate_tax\"가 호출될 때 어떻게 함수를 사용하는지 알고 계신가요? 이 부분은 OpenAI 어시스턴트에서 문서화가 잘 되어 있지 않아, 많은 사용자들이 처음 사용할 때 혼동을 겪을 수 있어요. 이를 해결하기 위해, 응담 스트림(response stream)에서 다양한 이벤트를 관리하기 위한 EventHandler를 정의해야 합니다. 특히 \"calculate_tax\" 도구가 호출될 때의 이벤트를 어떻게 처리하는지에 대해 명확히 알아둬야 해요.</p>\n<pre><code class=\"hljs language-js\">    def <span class=\"hljs-title function_\">handle_requires_action</span>(self, data, run_id):\n        tool_outputs = []\n\n        <span class=\"hljs-keyword\">for</span> tool <span class=\"hljs-keyword\">in</span> data.<span class=\"hljs-property\">required_action</span>.<span class=\"hljs-property\">submit_tool_outputs</span>.<span class=\"hljs-property\">tool_calls</span>:\n            <span class=\"hljs-keyword\">if</span> tool.<span class=\"hljs-property\">function</span>.<span class=\"hljs-property\">name</span> == <span class=\"hljs-string\">\"calculate_tax\"</span>:\n                <span class=\"hljs-attr\">try</span>:\n                    # 도구 매개변수에서 수익 추출\n                    revenue = ast.<span class=\"hljs-title function_\">literal_eval</span>(tool.<span class=\"hljs-property\">function</span>.<span class=\"hljs-property\">arguments</span>)[<span class=\"hljs-string\">\"revenue\"</span>]\n                    # 세금을 계산하는 calculate_tax 함수 호출\n                    tax_result = <span class=\"hljs-title function_\">calculate_tax</span>(revenue)\n                    # 필요한 형식에 맞게 도구 출력을 추가\n                    tool_outputs.<span class=\"hljs-title function_\">append</span>({<span class=\"hljs-string\">\"tool_call_id\"</span>: tool.<span class=\"hljs-property\">id</span>, <span class=\"hljs-string\">\"output\"</span>: f<span class=\"hljs-string\">\"{tax_result}\"</span>})\n                except <span class=\"hljs-title class_\">ValueError</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n                    # 세금 계산 시 발생하는 모든 오류 처리\n                    tool_outputs.<span class=\"hljs-title function_\">append</span>({<span class=\"hljs-string\">\"tool_call_id\"</span>: tool.<span class=\"hljs-property\">id</span>, <span class=\"hljs-string\">\"error\"</span>: <span class=\"hljs-title function_\">str</span>(e)})\n        # 모든 도구 출력을 동시에 제출\n        self.<span class=\"hljs-title function_\">submit_tool_outputs</span>(tool_outputs)\n</code></pre>\n<p>위 코드는 다음과 같이 동작해요: 동작이 필요한 각 도구 호출에 대해:</p>\n<ul>\n<li>\"calculate_tax\" 함수 이름을 확인합니다.</li>\n<li>툴 매개변수에서 수익 값을 추출합니다.</li>\n<li>수익을 이용하여 calculate_tax 함수를 호출하여 세금을 계산합니다. (여기서 실제 상호작용이 이루어집니다.)</li>\n<li>모든 툴 호출을 처리한 후, 수집된 결과를 제출합니다.</li>\n</ul>\n<h1>보조 인공지능과 대화하기</h1>\n<p>다음은 OpenAI가 문서화한 표준 단계를 따라 보조 인공지능과 상호작용할 수 있습니다. 따라서 이 섹션에서는 많은 세부 정보를 제공하지 않겠습니다:</p>\n<ul>\n<li>스레드 생성: 이는 사용자와 보조 인공지능 간의 대화를 나타냅니다.</li>\n<li>사용자 메시지 추가: 이는 스레드에 추가되는 텍스트 및 파일을 포함할 수 있습니다.</li>\n<li>실행 생성: 보조 인공지능과 연관된 모델 및 도구를 활용하여 응답 생성합니다. 이 응답은 다시 스레드에 추가됩니다.</li>\n</ul>\n<p>아래 코드 조각은 특정 사용 사례에서 어시스턴트를 실행하는 방법을 보여줍니다: 코드는 스레드 ID 및 어시스턴트 ID를 사용하는 특정 매개변수를 설정하여 어시스턴트와의 스트리밍 상호작용을 설정합니다. EventHandler 인스턴스는 스트림 중 이벤트를 관리합니다. stream.until_done() 메서드는 모든 상호작용이 완료될 때까지 스트림을 유지합니다. with 문은 스트림이 적절히 닫히도록 보장합니다.</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-keyword\">with</span> client.<span class=\"hljs-property\">beta</span>.<span class=\"hljs-property\">threads</span>.<span class=\"hljs-property\">runs</span>.<span class=\"hljs-title function_\">stream</span>(thread_id=st.<span class=\"hljs-property\">session_state</span>.<span class=\"hljs-property\">thread_id</span>,\n                                         assistant_id=assistant.<span class=\"hljs-property\">id</span>,\n                                         event_handler=<span class=\"hljs-title class_\">EventHandler</span>(),\n                                         temperature=<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">stream</span>:\n        stream.<span class=\"hljs-title function_\">until_done</span>()\n</code></pre>\n<h1>Streamlit 인터페이스</h1>\n<p>여기서 내 게시물을 마칠 수 있지만, Streamlit 포럼(예: 이 포스트)에서 사용자들이 터미널에서는 정상 작동하지만 인터페이스에서 스트리밍이 작동하지 않는다는 수많은 문의를 발견했습니다. 이것이 나로 하여금 더 깊이 파고들도록 유도했습니다.</p>\n<p>스트리밍을 앱에 성공적으로 통합하려면, 앞서 언급한 EventHandler 클래스의 기능을 확장해야 합니다. 특히 텍스트 생성, 텍스트 델타 처리 및 텍스트 완료를 중점적으로 다루어야 합니다. 채팅 히스토리를 관리하면서 Streamlit 인터페이스에 텍스트를 표시하기 위해 필요한 세 가지 주요 단계는 다음과 같습니다:</p>\n<ul>\n<li>텍스트 생성 처리 (on_text_created): 어시스턴트의 각 응답마다 새로운 텍스트 상자를 초기화하고 표시하여 이전 작업의 상태를 반영하도록 UI를 업데이트합니다.</li>\n<li>텍스트 델타 처리 (on_text_delta): 어시스턴트가 텍스트를 생성할 때 현재 텍스트 상자를 동적으로 업데이트하여 전체 UI를 새로 고치지 않고도 점진적으로 변경할 수 있도록 합니다.</li>\n<li>텍스트 완료 처리 (on_text_done): 새로운 빈 텍스트 상자를 추가하여 각 상호작용 세그먼트를 완료하고, 다음 상호작용을 준비합니다. 또한, 대화 세그먼트를 chat_history에 기록합니다.</li>\n</ul>\n<p>예를 들어, 텍스트 델타를 관리하는 다음 코드 조각을 살펴봅시다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">on_text_delta</span>(<span class=\"hljs-params\">self, delta: TextDelta, snapshot: Text</span>):\n    <span class=\"hljs-string\">\"\"\"\n    텍스트 델타가 생성될 때의 핸들러\n    \"\"\"</span>\n    <span class=\"hljs-comment\"># 최신 텍스트 상자를 지웁니다.</span>\n    st.session_state.text_boxes[-<span class=\"hljs-number\">1</span>].empty()\n    \n    <span class=\"hljs-comment\"># 새로운 텍스트가 있으면, 어시스턴트 텍스트 목록의 마지막 요소에 추가합니다.</span>\n    <span class=\"hljs-keyword\">if</span> delta.value:\n        st.session_state.assistant_text[-<span class=\"hljs-number\">1</span>] += delta.value\n    \n    <span class=\"hljs-comment\"># 업데이트된 어시스턴트 텍스트를 최신 텍스트 상자에 다시 표시합니다.</span>\n    st.session_state.text_boxes[-<span class=\"hljs-number\">1</span>].info(<span class=\"hljs-string\">\"\"</span>.join(st.session_state[<span class=\"hljs-string\">\"assistant_text\"</span>][-<span class=\"hljs-number\">1</span>]))\n</code></pre>\n<p>이 코드는 세 가지 주요 작업을 수행합니다:</p>\n<ul>\n<li>최신 텍스트 상자 지우기: 최신 텍스트 상자의 내용을 지워 새 입력을 준비합니다 (st.session_state.text_boxes[-1]).</li>\n<li>델타 값을 도우미 텍스트에 추가: 새 텍스트 (delta.value)가 있는 경우, 이를 st.session_state.assistant_text[-1]에 저장된 지속적인 도우미 텍스트에 추가합니다.</li>\n<li>업데이트된 도우미 텍스트 다시 표시: 지금까지 축적된 모든 도우미 텍스트의 내용을 반영하기 위해 최신 텍스트 상자의 내용을 업데이트합니다 (st.session_state[\"assistant_text\"][-1]).</li>\n</ul>\n<h1>결론</h1>\n<p>이 블로그 포스트에서는 OpenAI Assistant API와 Streamlit을 사용하여 세금을 계산할 수 있는 AI 도우미를 만드는 방법을 보여주었습니다.</p>\n<p>저는 Assistant API의 능력을 강조하기 위해 이 간단한 프로젝트를 수행했어요. 문서가 다소 불명확하더라도, 목표는 모호한 부분을 명확하게 하고 Assistant API를 사용하고자 하는 분들에게 일부 지침을 제공하는 것이었습니다. 이 게시물이 도움이 되었으면 좋겠고, 이 강력한 도구로 더 많은 가능성을 탐험하도록 격려하길 바랍니다.</p>\n<p>공간 제약으로 인해 불필요한 코드 조각을 포함하지 않으려고 노력했어요. 그러나 필요한 경우, 제 Github 저장소를 방문하여 전체 구현 내용을 확인해주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}