{"pageProps":{"post":{"title":"ESP32와 BME280을 이용한 웹 서버","description":"","date":"2024-06-19 05:53","slug":"2024-06-19-ESP32WebServerwithBME280","content":"\n\n이 튜토리얼에서는 ESP32를 사용하여 BME280 센서 모듈의 측정 값을 표시하기 위한 웹 서버를 만드는 방법을 배울 것입니다. BME280 센서는 온도, 습도 및 기압을 측정하여 소형 기상 관측소를 구축하고 이러한 측정 값을 웹 서버를 통해 실시간으로 모니터링할 수 있게 합니다.\n\n## 필요한 부품\n\n- ESP32 DOIT DEVKIT V1 보드\n- BME280 센서 모듈\n- 브레드보드\n- 점퍼 와이어\n\n## BME280 센서 배선\n\n<div class=\"content-ad\"></div>\n\nBME280 센서는 I2C 또는 SPI 통신 프로토콜을 사용할 수 있습니다. 간편하게 I2C를 사용하겠습니다. 다음과 같이 센서를 ESP32에 연결해 주세요:\n\n- BME280 SCL을 ESP32 GPIO 22에 연결\n- BME280 SDA를 ESP32 GPIO 21에 연결\n- BME280 VCC를 ESP32 3.3V에 연결\n- BME280 GND를 ESP32 GND에 연결\n\n![image](/assets/img/2024-06-19-ESP32WebServerwithBME280_0.png)\n\n## 필요한 라이브러리 설치\n\n<div class=\"content-ad\"></div>\n\nBME280 센서에서 데이터를 읽으려면 Arduino IDE에 Adafruit_BME280 및 Adafruit_Sensor 라이브러리를 설치해야 합니다.\n\n- Arduino IDE를 열고 스케치 `Include Library` Manage Libraries로 이동합니다.\n- \"Adafruit BME280\"를 검색하여 라이브러리를 설치합니다.\n- \"Adafruit Unified Sensor\"를 검색하여 라이브러리를 설치합니다.\n\n![image](/assets/img/2024-06-19-ESP32WebServerwithBME280_1.png)\n\n## BME280 센서 테스트\n\n<div class=\"content-ad\"></div>\n\n센서가 올바르게 작동하는지 확인하기 위해 예제 스케치를 로드해주세요. 파일로 이동해서 `Examples` -> `Adafruit BME280 Library` -> `bme280test`로 이동해주세요.\n\n```cpp\n#include <Wire.h>\n#include <Adafruit_Sensor.h>\n#include <Adafruit_BME280.h>\n\n#define SEALEVELPRESSURE_HPA (1013.25)\nAdafruit_BME280 bme; // I2C\n\nvoid setup() {\n    Serial.begin(9600);\n    if (!bme.begin(0x76)) {\n        Serial.println(\"유효한 BME280 센서를 찾을 수 없습니다. 연결을 확인해주세요!\");\n        while (1);\n    }\n}\n\nvoid loop() {\n    Serial.print(\"Temperature = \");\n    Serial.print(bme.readTemperature());\n    Serial.println(\" *C\");\n    Serial.print(\"Pressure = \");\n    Serial.print(bme.readPressure() / 100.0F);\n    Serial.println(\" hPa\");\n    Serial.print(\"Approx. Altitude = \");\n    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));\n    Serial.println(\" m\");\n    Serial.print(\"Humidity = \");\n    Serial.print(bme.readHumidity());\n    Serial.println(\" %\");\n    delay(1000);\n}\n```\n\n코드를 업로드하고 센서의 값을 확인하려면 9600 보드로 속성 설정된 시리얼 모니터를 열어주세요.\n\n## 웹 서버 생성\n\n<div class=\"content-ad\"></div>\n\n이제 웹 서버를 만들어 센서 읽기를 테이블 형식으로 표시해 보겠습니다.\n\n라이브러리 추가 및 변수 정의 포함\n\n```js\ncpp\n\n#include <WiFi.h>\n#include <Wire.h>\n#include <Adafruit_BME280.h>\n#include <Adafruit_Sensor.h>\n\n#define SEALEVELPRESSURE_HPA (1013.25)\nconst char* ssid = \"여러분의 SSID\";\nconst char* password = \"여러분의 비밀번호\";\nWiFiServer server(80);\nAdafruit_BME280 bme; // I2C\nvoid setup() {\n  Serial.begin(115200);\n  if (!bme.begin(0x76)) {\n    Serial.println(\"유효한 BME280 센서를 찾을 수 없습니다. 연결을 확인하세요!\");\n    while (1);\n  }\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"WiFi 연결됨.\");\n  Serial.println(\"IP 주소:\");\n  Serial.println(WiFi.localIP());\n  server.begin();\n}\nvoid loop() {\n  WiFiClient client = server.available();\n  if (client) {\n    String currentLine = \"\";\n    while (client.connected()) {\n      if (client.available()) {\n        char c = client.read();\n        if (c == '\\n') {\n          if (currentLine.length() == 0) {\n            client.println(\"HTTP/1.1 200 OK\");\n            client.println(\"Content-type:text/html\");\n            client.println(\"Connection: close\");\n            client.println();\n            client.println(\"<!DOCTYPE html><html>\");\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\n            client.println(\"<style>body { font-family: \\\"Trebuchet MS\\\", Arial; text-align: center; }\");\n            client.println(\"table { margin-left:auto; margin-right:auto; border-collapse: collapse; width:35%; }\");\n            client.println(\"th, td { padding: 12px; border: 1px solid #ddd; }\");\n            client.println(\"th { background-color: #0043af; color: white; }\");\n            client.println(\"tr:hover { background-color: #bcbcbc; }\");\n            client.println(\"</style></head>\");\n            client.println(\"<body><h1>ESP32 with BME280</h1>\");\n            client.println(\"<table><tr><th>측정 항목</th><th>값</th></tr>\");\n            client.println(\"<tr><td>온도 섭씨</td><td>\" + String(bme.readTemperature()) + \" *C</td></tr>\");\n            client.println(\"<tr><td>온도 화씨</td><td>\" + String(1.8 * bme.readTemperature() + 32) + \" *F</td></tr>\");\n            client.println(\"<tr><td>압력</td><td>\" + String(bme.readPressure() / 100.0F) + \" hPa</td></tr>\");\n            client.println(\"<tr><td>대략적 고도</td><td>\" + String(bme.readAltitude(SEALEVELPRESSURE_HPA)) + \" m</td></tr>\");\n            client.println(\"<tr><td>습도</td><td>\" + String(bme.readHumidity()) + \" %</td></tr>\");\n            client.println(\"</table></body></html>\");\n            client.println();\n            break;\n          } else {\n            currentLine = \"\";\n          }\n        } else if (c != '\\r') {\n          currentLine += c;\n        }\n      }\n    }\n    client.stop();\n    Serial.println(\"클라이언트 연결 해제됨.\");\n  }\n}\n```\n\n코드를 업로드하고 실행해 주세요.\n\n<div class=\"content-ad\"></div>\n\nESP32에 코드를 업로드하고, 시리얼 모니터를 115200의 보레이트로 열어주세요. 표시된 IP 주소를 메모해주세요.\n\n웹 서버에 액세스하기\n\n브라우저를 열고 시리얼 모니터에 표시된 IP 주소를 입력해주세요. 표 형식의 웹 페이지에서 온도, 습도, 기압, 고도 정보가 표시될 것입니다. \n\n![ESP32 Web Server](/assets/img/2024-06-19-ESP32WebServerwithBME280_2.png)\n\n<div class=\"content-ad\"></div>\n\n## 결론\n\nESP32를 사용하여 실시간 기상 데이터를 표시하는 웹 서버를 성공적으로 만들었습니다. 이 미니 기상 관측소는 홈 자동화, 환경 모니터링 및 교육 목적을 포함한 다양한 응용 프로그램에 사용할 수 있습니다. 웹 페이지의 모양과 기능을 향상시키기 위해 HTML 및 CSS를 자유롭게 사용해보세요. 즐거운 빌딩하세요!","ogImage":{"url":"/assets/img/2024-06-19-ESP32WebServerwithBME280_0.png"},"coverImage":"/assets/img/2024-06-19-ESP32WebServerwithBME280_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 튜토리얼에서는 ESP32를 사용하여 BME280 센서 모듈의 측정 값을 표시하기 위한 웹 서버를 만드는 방법을 배울 것입니다. BME280 센서는 온도, 습도 및 기압을 측정하여 소형 기상 관측소를 구축하고 이러한 측정 값을 웹 서버를 통해 실시간으로 모니터링할 수 있게 합니다.</p>\n<h2>필요한 부품</h2>\n<ul>\n<li>ESP32 DOIT DEVKIT V1 보드</li>\n<li>BME280 센서 모듈</li>\n<li>브레드보드</li>\n<li>점퍼 와이어</li>\n</ul>\n<h2>BME280 센서 배선</h2>\n<p>BME280 센서는 I2C 또는 SPI 통신 프로토콜을 사용할 수 있습니다. 간편하게 I2C를 사용하겠습니다. 다음과 같이 센서를 ESP32에 연결해 주세요:</p>\n<ul>\n<li>BME280 SCL을 ESP32 GPIO 22에 연결</li>\n<li>BME280 SDA를 ESP32 GPIO 21에 연결</li>\n<li>BME280 VCC를 ESP32 3.3V에 연결</li>\n<li>BME280 GND를 ESP32 GND에 연결</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-19-ESP32WebServerwithBME280_0.png\" alt=\"image\"></p>\n<h2>필요한 라이브러리 설치</h2>\n<p>BME280 센서에서 데이터를 읽으려면 Arduino IDE에 Adafruit_BME280 및 Adafruit_Sensor 라이브러리를 설치해야 합니다.</p>\n<ul>\n<li>Arduino IDE를 열고 스케치 <code>Include Library</code> Manage Libraries로 이동합니다.</li>\n<li>\"Adafruit BME280\"를 검색하여 라이브러리를 설치합니다.</li>\n<li>\"Adafruit Unified Sensor\"를 검색하여 라이브러리를 설치합니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-19-ESP32WebServerwithBME280_1.png\" alt=\"image\"></p>\n<h2>BME280 센서 테스트</h2>\n<p>센서가 올바르게 작동하는지 확인하기 위해 예제 스케치를 로드해주세요. 파일로 이동해서 <code>Examples</code> -> <code>Adafruit BME280 Library</code> -> <code>bme280test</code>로 이동해주세요.</p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;Wire.h></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;Adafruit_Sensor.h></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&#x3C;Adafruit_BME280.h></span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> SEALEVELPRESSURE_HPA (1013.25)</span>\nAdafruit_BME280 bme; <span class=\"hljs-comment\">// I2C</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">setup</span><span class=\"hljs-params\">()</span> </span>{\n    Serial.<span class=\"hljs-built_in\">begin</span>(<span class=\"hljs-number\">9600</span>);\n    <span class=\"hljs-keyword\">if</span> (!bme.<span class=\"hljs-built_in\">begin</span>(<span class=\"hljs-number\">0x76</span>)) {\n        Serial.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"유효한 BME280 센서를 찾을 수 없습니다. 연결을 확인해주세요!\"</span>);\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">loop</span><span class=\"hljs-params\">()</span> </span>{\n    Serial.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Temperature = \"</span>);\n    Serial.<span class=\"hljs-built_in\">print</span>(bme.<span class=\"hljs-built_in\">readTemperature</span>());\n    Serial.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\" *C\"</span>);\n    Serial.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Pressure = \"</span>);\n    Serial.<span class=\"hljs-built_in\">print</span>(bme.<span class=\"hljs-built_in\">readPressure</span>() / <span class=\"hljs-number\">100.0F</span>);\n    Serial.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\" hPa\"</span>);\n    Serial.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Approx. Altitude = \"</span>);\n    Serial.<span class=\"hljs-built_in\">print</span>(bme.<span class=\"hljs-built_in\">readAltitude</span>(SEALEVELPRESSURE_HPA));\n    Serial.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\" m\"</span>);\n    Serial.<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Humidity = \"</span>);\n    Serial.<span class=\"hljs-built_in\">print</span>(bme.<span class=\"hljs-built_in\">readHumidity</span>());\n    Serial.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\" %\"</span>);\n    <span class=\"hljs-built_in\">delay</span>(<span class=\"hljs-number\">1000</span>);\n}\n</code></pre>\n<p>코드를 업로드하고 센서의 값을 확인하려면 9600 보드로 속성 설정된 시리얼 모니터를 열어주세요.</p>\n<h2>웹 서버 생성</h2>\n<p>이제 웹 서버를 만들어 센서 읽기를 테이블 형식으로 표시해 보겠습니다.</p>\n<p>라이브러리 추가 및 변수 정의 포함</p>\n<pre><code class=\"hljs language-js\">cpp\n\n#include &#x3C;<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-property\">h</span>>\n#include &#x3C;<span class=\"hljs-title class_\">Wire</span>.<span class=\"hljs-property\">h</span>>\n#include &#x3C;<span class=\"hljs-title class_\">Adafruit</span>_BME280.<span class=\"hljs-property\">h</span>>\n#include &#x3C;<span class=\"hljs-title class_\">Adafruit</span>_Sensor.<span class=\"hljs-property\">h</span>>\n\n#define <span class=\"hljs-variable constant_\">SEALEVELPRESSURE_HPA</span> (<span class=\"hljs-number\">1013.25</span>)\n<span class=\"hljs-keyword\">const</span> char* ssid = <span class=\"hljs-string\">\"여러분의 SSID\"</span>;\n<span class=\"hljs-keyword\">const</span> char* password = <span class=\"hljs-string\">\"여러분의 비밀번호\"</span>;\n<span class=\"hljs-title class_\">WiFiServer</span> <span class=\"hljs-title function_\">server</span>(<span class=\"hljs-number\">80</span>);\n<span class=\"hljs-title class_\">Adafruit</span>_BME280 bme; <span class=\"hljs-comment\">// I2C</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">115200</span>);\n  <span class=\"hljs-keyword\">if</span> (!bme.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">0x76</span>)) {\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"유효한 BME280 센서를 찾을 수 없습니다. 연결을 확인하세요!\"</span>);\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>);\n  }\n  <span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">begin</span>(ssid, password);\n  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">status</span>() != <span class=\"hljs-variable constant_\">WL_CONNECTED</span>) {\n    <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">500</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\".\"</span>);\n  }\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"WiFi 연결됨.\"</span>);\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"IP 주소:\"</span>);\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-title class_\">WiFi</span>.<span class=\"hljs-title function_\">localIP</span>());\n  server.<span class=\"hljs-title function_\">begin</span>();\n}\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title class_\">WiFiClient</span> client = server.<span class=\"hljs-title function_\">available</span>();\n  <span class=\"hljs-keyword\">if</span> (client) {\n    <span class=\"hljs-title class_\">String</span> currentLine = <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-keyword\">while</span> (client.<span class=\"hljs-title function_\">connected</span>()) {\n      <span class=\"hljs-keyword\">if</span> (client.<span class=\"hljs-title function_\">available</span>()) {\n        char c = client.<span class=\"hljs-title function_\">read</span>();\n        <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">'\\n'</span>) {\n          <span class=\"hljs-keyword\">if</span> (currentLine.<span class=\"hljs-title function_\">length</span>() == <span class=\"hljs-number\">0</span>) {\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"Content-type:text/html\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"Connection: close\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>();\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;!DOCTYPE html>&#x3C;html>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;head>&#x3C;meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;link rel=\\\"icon\\\" href=\\\"data:,\\\">\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;style>body { font-family: \\\"Trebuchet MS\\\", Arial; text-align: center; }\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"table { margin-left:auto; margin-right:auto; border-collapse: collapse; width:35%; }\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"th, td { padding: 12px; border: 1px solid #ddd; }\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"th { background-color: #0043af; color: white; }\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"tr:hover { background-color: #bcbcbc; }\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;/style>&#x3C;/head>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;body>&#x3C;h1>ESP32 with BME280&#x3C;/h1>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;table>&#x3C;tr>&#x3C;th>측정 항목&#x3C;/th>&#x3C;th>값&#x3C;/th>&#x3C;/tr>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;tr>&#x3C;td>온도 섭씨&#x3C;/td>&#x3C;td>\"</span> + <span class=\"hljs-title class_\">String</span>(bme.<span class=\"hljs-title function_\">readTemperature</span>()) + <span class=\"hljs-string\">\" *C&#x3C;/td>&#x3C;/tr>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;tr>&#x3C;td>온도 화씨&#x3C;/td>&#x3C;td>\"</span> + <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-number\">1.8</span> * bme.<span class=\"hljs-title function_\">readTemperature</span>() + <span class=\"hljs-number\">32</span>) + <span class=\"hljs-string\">\" *F&#x3C;/td>&#x3C;/tr>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;tr>&#x3C;td>압력&#x3C;/td>&#x3C;td>\"</span> + <span class=\"hljs-title class_\">String</span>(bme.<span class=\"hljs-title function_\">readPressure</span>() / <span class=\"hljs-number\">100.</span>0F) + <span class=\"hljs-string\">\" hPa&#x3C;/td>&#x3C;/tr>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;tr>&#x3C;td>대략적 고도&#x3C;/td>&#x3C;td>\"</span> + <span class=\"hljs-title class_\">String</span>(bme.<span class=\"hljs-title function_\">readAltitude</span>(<span class=\"hljs-variable constant_\">SEALEVELPRESSURE_HPA</span>)) + <span class=\"hljs-string\">\" m&#x3C;/td>&#x3C;/tr>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;tr>&#x3C;td>습도&#x3C;/td>&#x3C;td>\"</span> + <span class=\"hljs-title class_\">String</span>(bme.<span class=\"hljs-title function_\">readHumidity</span>()) + <span class=\"hljs-string\">\" %&#x3C;/td>&#x3C;/tr>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"&#x3C;/table>&#x3C;/body>&#x3C;/html>\"</span>);\n            client.<span class=\"hljs-title function_\">println</span>();\n            <span class=\"hljs-keyword\">break</span>;\n          } <span class=\"hljs-keyword\">else</span> {\n            currentLine = <span class=\"hljs-string\">\"\"</span>;\n          }\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c != <span class=\"hljs-string\">'\\r'</span>) {\n          currentLine += c;\n        }\n      }\n    }\n    client.<span class=\"hljs-title function_\">stop</span>();\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"클라이언트 연결 해제됨.\"</span>);\n  }\n}\n</code></pre>\n<p>코드를 업로드하고 실행해 주세요.</p>\n<p>ESP32에 코드를 업로드하고, 시리얼 모니터를 115200의 보레이트로 열어주세요. 표시된 IP 주소를 메모해주세요.</p>\n<p>웹 서버에 액세스하기</p>\n<p>브라우저를 열고 시리얼 모니터에 표시된 IP 주소를 입력해주세요. 표 형식의 웹 페이지에서 온도, 습도, 기압, 고도 정보가 표시될 것입니다.</p>\n<p><img src=\"/assets/img/2024-06-19-ESP32WebServerwithBME280_2.png\" alt=\"ESP32 Web Server\"></p>\n<h2>결론</h2>\n<p>ESP32를 사용하여 실시간 기상 데이터를 표시하는 웹 서버를 성공적으로 만들었습니다. 이 미니 기상 관측소는 홈 자동화, 환경 모니터링 및 교육 목적을 포함한 다양한 응용 프로그램에 사용할 수 있습니다. 웹 페이지의 모양과 기능을 향상시키기 위해 HTML 및 CSS를 자유롭게 사용해보세요. 즐거운 빌딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}