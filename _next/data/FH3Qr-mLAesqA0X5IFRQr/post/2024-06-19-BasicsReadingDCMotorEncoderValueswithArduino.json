{"pageProps":{"post":{"title":"기초 아두이노로 DC 모터 인코더 값을 읽는 방법","description":"","date":"2024-06-19 17:46","slug":"2024-06-19-BasicsReadingDCMotorEncoderValueswithArduino","content":"\n\n본 예제는 동력 모터 인코더 값을 모니터링하는 방법을 학습하는 내용입니다. 제가 시작한곳은 https://www.electroniclinic.com/arduino-dc-motor-speed-control-with-encoder-arduino-dc-motor-encoder/ 인데, 이 예제에는 모터가 실제로 회전하지 않고 디지털 읽기 값을 아날로그 A2D 값인 것처럼 스케일링한다는 것을 발견했습니다.\n\n아두이노는 처음이라서 이 과정의 모든 단계를 정말 이해하고 싶었습니다. 아래는 튜토리얼을 업데이트한 내용입니다.\n\n우선, 좋은 자료가 있습니다. 무료로 직접 실행할 수 있습니다:\n\n![이미지](/assets/img/2024-06-19-BasicsReadingDCMotorEncoderValueswithArduino_0.png)\n\n<div class=\"content-ad\"></div>\n\n레이아웃 개요:\n\n- 모터 전원 배선: 모터의 빨간색과 검은색 선은 12V 전원 공급원에 연결됩니다. 시뮬레이션된 모터는 완전한 속도로 작동하기 위해 시뮬레이션된 12V가 필요합니다.\n- 인코더의 접지: 인코더의 접지는 녹색 선입니다.\n- 인코더 출력: 보라색과 노란색 선은 인코더의 디지털 출력으로, 펄스를 아두이노에 보내어 모터의 위치에 따른 정보를 제공합니다. 핀 7 및 8에 특별한 기능이 있는 것은 아닙니다. 이것은 그냥 제가 사용하기로 선택한 핀입니다.\n- 인코더 전원: 주황색 선은 인코더에 5V 전원을 공급합니다.\n\n마크다운 형식으로 표를 변경하였습니다.\n\n```js\n// Define pins for encoder channels\n#define encoder_ChA 7  // Channel A of the encoder connected to Digital Pin 7\n#define encoder_ChB 8  // Channel B of the encoder connected to Digital Pin 8\n\n// Variables to store the current state of encoder channels\nint encoder_ChA_value;\nint encoder_ChB_value;\n\nvoid setup() {\n   Serial.begin(9600); // Initialize serial communication at 9600 baud rate\n\n   // Set encoder pins as inputs with internal pull-up resistors \n   // to avoid floating states and provide stable readings\n   pinMode(encoder_ChA, INPUT_PULLUP); \n   pinMode(encoder_ChB, INPUT_PULLUP);\n}\n\nvoid loop() {\n    // Read the current state of encoder channels\n   encoder_ChA_value = digitalRead(encoder_ChA); \n   encoder_ChB_value = digitalRead(encoder_ChB); \n \n    // Print the encoder values to the serial monitor\n   Serial.print(encoder_ChA_value); \n   Serial.print(\" \");  // Separate the values with a space\n   Serial.println(encoder_ChB_value);  // Print the second value and move to a new line\n}\n```\n\n코드 개요:\n\n<div class=\"content-ad\"></div>\n\n인코더 채널 정의: 코드의 시작부분에서 우리는 인코더 채널(encoder channels)을 위한 두 개의 상수(encoder_ChA와 encoder_ChB)를 정의합니다. 이렇게 하면 코드를 더 읽기 쉽게 만들고, 필요한 경우 핀을 전환해야 할 때 쉽게 수정할 수 있습니다. 핀 7과 8에 특별한 것은 없습니다. 그저 사용하기로 결정한 것뿐입니다.\n\n- 변수 초기화: encoder_ChA_value와 encoder_ChB_value 변수는 각 인코더 채널로부터 현재 디지털 읽기(0 또는 1)를 저장하는 데 사용됩니다.\n- 설정 함수: setup() 함수 안에서 시리얼 통신을 초기화하고, Arduino IDE의 시리얼 모니터에 인코더 읽기를 출력할 수 있습니다. 또한 인코더 핀들을 INPUT_PULLUP 모드로 입력 설정합니다. 풀업 저항을 사용하는 것은 `플로팅(floating)` 핀을 방지하여 일그러지거나 예측할 수 없는 읽기를 방지하는 데 중요합니다.\n- 메인 루프: 프로그램의 핵심은 loop() 함수 안에 있습니다. digitalRead() 함수를 사용하여 계속해서 인코더 채널의 값을 읽습니다. 이러한 값은 시리얼 모니터에 출력되어, 우리는 실시간으로 인코더 출력을 볼 수 있습니다.\n\n여기까지입니다. 시뮬레이션을 실행하면 모터가 회전함에 따라 2개의 디지털 핀이 0 또는 1의 값을 반환하는 것을 보게 될 것입니다. 이 인코더 데이터를 얻으면 모터 방향 감지, 위치 추적 및 속도 측정과 같은 작업을 수행할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-19-BasicsReadingDCMotorEncoderValueswithArduino_0.png"},"coverImage":"/assets/img/2024-06-19-BasicsReadingDCMotorEncoderValueswithArduino_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>본 예제는 동력 모터 인코더 값을 모니터링하는 방법을 학습하는 내용입니다. 제가 시작한곳은 <a href=\"https://www.electroniclinic.com/arduino-dc-motor-speed-control-with-encoder-arduino-dc-motor-encoder/\" rel=\"nofollow\" target=\"_blank\">https://www.electroniclinic.com/arduino-dc-motor-speed-control-with-encoder-arduino-dc-motor-encoder/</a> 인데, 이 예제에는 모터가 실제로 회전하지 않고 디지털 읽기 값을 아날로그 A2D 값인 것처럼 스케일링한다는 것을 발견했습니다.</p>\n<p>아두이노는 처음이라서 이 과정의 모든 단계를 정말 이해하고 싶었습니다. 아래는 튜토리얼을 업데이트한 내용입니다.</p>\n<p>우선, 좋은 자료가 있습니다. 무료로 직접 실행할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-19-BasicsReadingDCMotorEncoderValueswithArduino_0.png\" alt=\"이미지\"></p>\n<p>레이아웃 개요:</p>\n<ul>\n<li>모터 전원 배선: 모터의 빨간색과 검은색 선은 12V 전원 공급원에 연결됩니다. 시뮬레이션된 모터는 완전한 속도로 작동하기 위해 시뮬레이션된 12V가 필요합니다.</li>\n<li>인코더의 접지: 인코더의 접지는 녹색 선입니다.</li>\n<li>인코더 출력: 보라색과 노란색 선은 인코더의 디지털 출력으로, 펄스를 아두이노에 보내어 모터의 위치에 따른 정보를 제공합니다. 핀 7 및 8에 특별한 기능이 있는 것은 아닙니다. 이것은 그냥 제가 사용하기로 선택한 핀입니다.</li>\n<li>인코더 전원: 주황색 선은 인코더에 5V 전원을 공급합니다.</li>\n</ul>\n<p>마크다운 형식으로 표를 변경하였습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Define pins for encoder channels</span>\n#define encoder_ChA <span class=\"hljs-number\">7</span>  <span class=\"hljs-comment\">// Channel A of the encoder connected to Digital Pin 7</span>\n#define encoder_ChB <span class=\"hljs-number\">8</span>  <span class=\"hljs-comment\">// Channel B of the encoder connected to Digital Pin 8</span>\n\n<span class=\"hljs-comment\">// Variables to store the current state of encoder channels</span>\nint encoder_ChA_value;\nint encoder_ChB_value;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) {\n   <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">9600</span>); <span class=\"hljs-comment\">// Initialize serial communication at 9600 baud rate</span>\n\n   <span class=\"hljs-comment\">// Set encoder pins as inputs with internal pull-up resistors </span>\n   <span class=\"hljs-comment\">// to avoid floating states and provide stable readings</span>\n   <span class=\"hljs-title function_\">pinMode</span>(encoder_ChA, <span class=\"hljs-variable constant_\">INPUT_PULLUP</span>); \n   <span class=\"hljs-title function_\">pinMode</span>(encoder_ChB, <span class=\"hljs-variable constant_\">INPUT_PULLUP</span>);\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Read the current state of encoder channels</span>\n   encoder_ChA_value = <span class=\"hljs-title function_\">digitalRead</span>(encoder_ChA); \n   encoder_ChB_value = <span class=\"hljs-title function_\">digitalRead</span>(encoder_ChB); \n \n    <span class=\"hljs-comment\">// Print the encoder values to the serial monitor</span>\n   <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(encoder_ChA_value); \n   <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\" \"</span>);  <span class=\"hljs-comment\">// Separate the values with a space</span>\n   <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(encoder_ChB_value);  <span class=\"hljs-comment\">// Print the second value and move to a new line</span>\n}\n</code></pre>\n<p>코드 개요:</p>\n<p>인코더 채널 정의: 코드의 시작부분에서 우리는 인코더 채널(encoder channels)을 위한 두 개의 상수(encoder_ChA와 encoder_ChB)를 정의합니다. 이렇게 하면 코드를 더 읽기 쉽게 만들고, 필요한 경우 핀을 전환해야 할 때 쉽게 수정할 수 있습니다. 핀 7과 8에 특별한 것은 없습니다. 그저 사용하기로 결정한 것뿐입니다.</p>\n<ul>\n<li>변수 초기화: encoder_ChA_value와 encoder_ChB_value 변수는 각 인코더 채널로부터 현재 디지털 읽기(0 또는 1)를 저장하는 데 사용됩니다.</li>\n<li>설정 함수: setup() 함수 안에서 시리얼 통신을 초기화하고, Arduino IDE의 시리얼 모니터에 인코더 읽기를 출력할 수 있습니다. 또한 인코더 핀들을 INPUT_PULLUP 모드로 입력 설정합니다. 풀업 저항을 사용하는 것은 <code>플로팅(floating)</code> 핀을 방지하여 일그러지거나 예측할 수 없는 읽기를 방지하는 데 중요합니다.</li>\n<li>메인 루프: 프로그램의 핵심은 loop() 함수 안에 있습니다. digitalRead() 함수를 사용하여 계속해서 인코더 채널의 값을 읽습니다. 이러한 값은 시리얼 모니터에 출력되어, 우리는 실시간으로 인코더 출력을 볼 수 있습니다.</li>\n</ul>\n<p>여기까지입니다. 시뮬레이션을 실행하면 모터가 회전함에 따라 2개의 디지털 핀이 0 또는 1의 값을 반환하는 것을 보게 될 것입니다. 이 인코더 데이터를 얻으면 모터 방향 감지, 위치 추적 및 속도 측정과 같은 작업을 수행할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}