{"pageProps":{"post":{"title":"윈도우용 ARM용 Go 패키지 빌드하기","description":"","date":"2024-06-19 15:34","slug":"2024-06-19-BuildingGopackagesforWindowsonARM","content":"\n\n<img src=\"/assets/img/2024-06-19-BuildingGopackagesforWindowsonARM_0.png\" />\n\n최근 Qualcomm이 새로운 Snapdragon X Elite 칩을 장착한 노트북 목록을 발표했습니다. 이 칩은 Apple의 M3 프로세서와 동등한 성능을 가진다고 주장하고 있습니다.\n\n이는 곧 시장에서 더 많은 Windows on ARM 노트북이 출시될 것이라는 뜻이며, 우리 개발자로서는 그에 대비할 준비를 해두어야 합니다.\n\n본 기사는 Q&A 섹션으로 구성되어 있어 해당 주제를 간략히 설명하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# WoA는 x86을 에뮬레이션할 수 있나요?\n\nWindows on ARM(WoA)는 x86 및 x86-64 에뮬레이션을 지원하지만, AVX2와 같은 벡터 명령어와 같은 일부 기능이 지원되지 않을 수 있으며, 에뮬레이션은 성능에 약간의 페널티를 가져올 수 있습니다.\n\nsimdjson과 같은 라이브러리를 사용하는 사람들은 위험에 노출될 수 있습니다.\n\n# Go는 이미 크로스 컴파일을 지원하지 않나요?\n\n<div class=\"content-ad\"></div>\n\nGo는 ARM64를 Windows용으로 포함한 즉시 교차 컴파일 지원을 제공합니다. 그러나 이에는 CGO가 포함되지 않습니다.\n\n즉, sqlite3와 같은 CGO 라이브러리를 사용하는 모든 프로그램은 교차 컴파일을 위해 C 및/또는 C++ 도구 체인이 필요합니다.\n\n# 알겠어요, MinGW가 이미 그것을 다루고 있지 않나요?\n\n윈도우 및 리눅스에서의 교차 컴파일을 위한 가장 인기 있는 솔루션은 MinGW입니다.\n\n<div class=\"content-ad\"></div>\n\n안타깝게도 MinGW는 ARM64 타겟을 지원하지 않습니다.\n\nMSYS2 툴체인은 ARM을 지원하지만 Windows 전용이기 때문에 사용할 수 있습니다.\n\n즉, Linux 기기에서 Windows ARM을 위한 프로그램을 빌드하려면 MinGW가 ARM64 타겟을 지원하지 않기 때문에 다른 옵션을 고려해야 합니다.\n\n# 그렇다면 CGO를 통해 WoA용 프로그램을 어떻게 빌드할까요?\n\n<div class=\"content-ad\"></div>\n\n걱정 마세요, 이미 대응되었습니다.\n\nWoA를 지원하는 llvm-mingw라는 대안 도구 체인이 있습니다.\n\n안타깝게도 Arch Linux를 제외한 대부분의 배포판에는 이용할 수 없지만, 여전히 릴리스 페이지에서 미리 빌드된 이진 파일을 다운로드할 수 있습니다.\n\nllvm-mingw를 더 편리하게 사용할 수 있는 방법이 있을까요?\n\n<div class=\"content-ad\"></div>\n\n네, 확실해요!\n\n모든 Windows 아키텍처용 특별한 도커 이미지가 있어요 — amd64, x86, 그리고 arm64 이에요.\n\n이 이미지는 x1unix/go-mingw 라고 불리며, go 1.21부터 arm64 타겟을 지원해요.\n\n이 이미지는 x86용으로 MinGW를 사용하고, arm64 타겟용으로는 llvm-mingw를 사용해요.\n\n<div class=\"content-ad\"></div>\n\n# 사용 방법\n\n아주 간단해요. 이미지를 가져와서 GOARCH=arm64 환경 변수와 함께 go build 명령을 호출하면 됩니다.\n\n예를 들어, 여기서 간단한 WinAPI CGO 예제를 살펴보겠습니다:\n\n```js\npackage main\n\n/*\n#cgo LDFLAGS: -lkernel32\n#include <windows.h>\n#include <stdio.h>\n\n// CGO가 작동하는지 테스트하기 위해 WinAPI를 사용하여 MessageBox를 표시하는 함수.\nvoid hello() {\n  SYSTEM_INFO si;\n  ZeroMemory( & si, sizeof(SYSTEM_INFO));\n  GetSystemInfo( & si);\n  char * arch;\n  switch (si.wProcessorArchitecture) {\n  case PROCESSOR_ARCHITECTURE_AMD64:\n    arch = \"AMD64\";\n    break;\n  case PROCESSOR_ARCHITECTURE_INTEL:\n    arch = \"x86\";\n    break;\n  case PROCESSOR_ARCHITECTURE_ARM:\n    arch = \"ARM\";\n    break;\n  case PROCESSOR_ARCHITECTURE_ARM64:\n    arch = \"ARM64\";\n    break;\n  case PROCESSOR_ARCHITECTURE_IA64:\n    arch = \"IA\";\n    break;\n  default:\n    arch = \"Unknown\";\n    break;\n  }\n\n  char message[30];\n  sprintf(message, \"CGO에서 %s에서 안녕하세요\", arch);\n\n  MessageBox(NULL, message, \"안녕, 세계\", MB_OK);\n}\n*/\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"MessageBox를 열기 위해 C 함수 호출 중입니다...\")\n    C.hello()\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 도커 이미지를 사용한 예제를 만들어 봅시다:\n\n```js\n# 사용할 Go 버전. Go 1.21부터 WoA를 지원합니다.\nexport GO_VERSION=1.22\n\ndocker run --rm -it -e GOARCH=arm64 \\\n    -v .:/go/work -w /go/work \\\n    x1unix/go-mingw:$GO_VERSION \\\n    go build -o hello.exe .\n```\n\n# 결과\n\n프로그램을 빌드한 후에는 Windows on Arm이 설치된 어떤 VM 안에서 실행해 보세요.\n\n<div class=\"content-ad\"></div>\n\n\n![그림](/assets/img/2024-06-19-BuildingGopackagesforWindowsonARM_1.png)\n\n이 예제에서는 Parallels Workstation을 사용합니다.\n\n# CI에 어떻게 통합할 수 있을까요?\n\n이것은 일반적인 Docker 이미지이기 때문에 GitHub Actions 및 Gitlab CI에서 손쉽게 사용할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\nCI 템플릿은 여기에서 확인하실 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-19-BuildingGopackagesforWindowsonARM_0.png"},"coverImage":"/assets/img/2024-06-19-BuildingGopackagesforWindowsonARM_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>최근 Qualcomm이 새로운 Snapdragon X Elite 칩을 장착한 노트북 목록을 발표했습니다. 이 칩은 Apple의 M3 프로세서와 동등한 성능을 가진다고 주장하고 있습니다.</p>\n<p>이는 곧 시장에서 더 많은 Windows on ARM 노트북이 출시될 것이라는 뜻이며, 우리 개발자로서는 그에 대비할 준비를 해두어야 합니다.</p>\n<p>본 기사는 Q&#x26;A 섹션으로 구성되어 있어 해당 주제를 간략히 설명하고 있습니다.</p>\n<h1>WoA는 x86을 에뮬레이션할 수 있나요?</h1>\n<p>Windows on ARM(WoA)는 x86 및 x86-64 에뮬레이션을 지원하지만, AVX2와 같은 벡터 명령어와 같은 일부 기능이 지원되지 않을 수 있으며, 에뮬레이션은 성능에 약간의 페널티를 가져올 수 있습니다.</p>\n<p>simdjson과 같은 라이브러리를 사용하는 사람들은 위험에 노출될 수 있습니다.</p>\n<h1>Go는 이미 크로스 컴파일을 지원하지 않나요?</h1>\n<p>Go는 ARM64를 Windows용으로 포함한 즉시 교차 컴파일 지원을 제공합니다. 그러나 이에는 CGO가 포함되지 않습니다.</p>\n<p>즉, sqlite3와 같은 CGO 라이브러리를 사용하는 모든 프로그램은 교차 컴파일을 위해 C 및/또는 C++ 도구 체인이 필요합니다.</p>\n<h1>알겠어요, MinGW가 이미 그것을 다루고 있지 않나요?</h1>\n<p>윈도우 및 리눅스에서의 교차 컴파일을 위한 가장 인기 있는 솔루션은 MinGW입니다.</p>\n<p>안타깝게도 MinGW는 ARM64 타겟을 지원하지 않습니다.</p>\n<p>MSYS2 툴체인은 ARM을 지원하지만 Windows 전용이기 때문에 사용할 수 있습니다.</p>\n<p>즉, Linux 기기에서 Windows ARM을 위한 프로그램을 빌드하려면 MinGW가 ARM64 타겟을 지원하지 않기 때문에 다른 옵션을 고려해야 합니다.</p>\n<h1>그렇다면 CGO를 통해 WoA용 프로그램을 어떻게 빌드할까요?</h1>\n<p>걱정 마세요, 이미 대응되었습니다.</p>\n<p>WoA를 지원하는 llvm-mingw라는 대안 도구 체인이 있습니다.</p>\n<p>안타깝게도 Arch Linux를 제외한 대부분의 배포판에는 이용할 수 없지만, 여전히 릴리스 페이지에서 미리 빌드된 이진 파일을 다운로드할 수 있습니다.</p>\n<p>llvm-mingw를 더 편리하게 사용할 수 있는 방법이 있을까요?</p>\n<p>네, 확실해요!</p>\n<p>모든 Windows 아키텍처용 특별한 도커 이미지가 있어요 — amd64, x86, 그리고 arm64 이에요.</p>\n<p>이 이미지는 x1unix/go-mingw 라고 불리며, go 1.21부터 arm64 타겟을 지원해요.</p>\n<p>이 이미지는 x86용으로 MinGW를 사용하고, arm64 타겟용으로는 llvm-mingw를 사용해요.</p>\n<h1>사용 방법</h1>\n<p>아주 간단해요. 이미지를 가져와서 GOARCH=arm64 환경 변수와 함께 go build 명령을 호출하면 됩니다.</p>\n<p>예를 들어, 여기서 간단한 WinAPI CGO 예제를 살펴보겠습니다:</p>\n<pre><code class=\"hljs language-js\">package main\n\n<span class=\"hljs-comment\">/*\n#cgo LDFLAGS: -lkernel32\n#include &#x3C;windows.h>\n#include &#x3C;stdio.h>\n\n// CGO가 작동하는지 테스트하기 위해 WinAPI를 사용하여 MessageBox를 표시하는 함수.\nvoid hello() {\n  SYSTEM_INFO si;\n  ZeroMemory( &#x26; si, sizeof(SYSTEM_INFO));\n  GetSystemInfo( &#x26; si);\n  char * arch;\n  switch (si.wProcessorArchitecture) {\n  case PROCESSOR_ARCHITECTURE_AMD64:\n    arch = \"AMD64\";\n    break;\n  case PROCESSOR_ARCHITECTURE_INTEL:\n    arch = \"x86\";\n    break;\n  case PROCESSOR_ARCHITECTURE_ARM:\n    arch = \"ARM\";\n    break;\n  case PROCESSOR_ARCHITECTURE_ARM64:\n    arch = \"ARM64\";\n    break;\n  case PROCESSOR_ARCHITECTURE_IA64:\n    arch = \"IA\";\n    break;\n  default:\n    arch = \"Unknown\";\n    break;\n  }\n\n  char message[30];\n  sprintf(message, \"CGO에서 %s에서 안녕하세요\", arch);\n\n  MessageBox(NULL, message, \"안녕, 세계\", MB_OK);\n}\n*/</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"C\"</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\nfunc <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    fmt.<span class=\"hljs-title class_\">Println</span>(<span class=\"hljs-string\">\"MessageBox를 열기 위해 C 함수 호출 중입니다...\"</span>)\n    C.<span class=\"hljs-title function_\">hello</span>()\n}\n</code></pre>\n<p>이제 도커 이미지를 사용한 예제를 만들어 봅시다:</p>\n<pre><code class=\"hljs language-js\"># 사용할 <span class=\"hljs-title class_\">Go</span> 버전. <span class=\"hljs-title class_\">Go</span> <span class=\"hljs-number\">1.21</span>부터 <span class=\"hljs-title class_\">WoA</span>를 지원합니다.\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-variable constant_\">GO_VERSION</span>=<span class=\"hljs-number\">1.22</span>\n\ndocker run --rm -it -e <span class=\"hljs-variable constant_\">GOARCH</span>=arm64 \\\n    -v .:<span class=\"hljs-regexp\">/go/</span>work -w /go/work \\\n    x1unix/go-<span class=\"hljs-attr\">mingw</span>:$GO_VERSION \\\n    go build -o hello.<span class=\"hljs-property\">exe</span> .\n</code></pre>\n<h1>결과</h1>\n<p>프로그램을 빌드한 후에는 Windows on Arm이 설치된 어떤 VM 안에서 실행해 보세요.</p>\n<p><img src=\"/assets/img/2024-06-19-BuildingGopackagesforWindowsonARM_1.png\" alt=\"그림\"></p>\n<p>이 예제에서는 Parallels Workstation을 사용합니다.</p>\n<h1>CI에 어떻게 통합할 수 있을까요?</h1>\n<p>이것은 일반적인 Docker 이미지이기 때문에 GitHub Actions 및 Gitlab CI에서 손쉽게 사용할 수 있습니다.</p>\n<p>CI 템플릿은 여기에서 확인하실 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}