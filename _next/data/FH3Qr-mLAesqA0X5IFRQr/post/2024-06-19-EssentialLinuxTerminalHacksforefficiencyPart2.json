{"pageProps":{"post":{"title":"핵심 리눅스 터미널 해킹 요령 효율성을 위한  파트 2","description":"","date":"2024-06-19 08:35","slug":"2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2","content":"\n\n## 파트 2: 팁과 꿀팁 - 역 cmd 검색, 히스토리에서 날짜와 시간 등.\n\n![이미지](/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_0.png)\n\n참고: 일부는 기본 명령어일 뿐입니다.\n\n## 1. 역 검색 cmds:\n\n<div class=\"content-ad\"></div>\n\n명령을 재사용하려면 Ctrl + R을 누르고 일치하는 키워드 몇 개를 입력하여 최근에 사용된 명령을 확인할 수 있습니다. 검색은 명령 히스토리를 기반으로 합니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*8d6OCQLH_WCzvQCcUpCfcQ.gif)\n\n## 2. 히스토리에서 특정 명령 사용하기\n\n이전에 사용된 모든 명령을 나열하려면 history 명령을 사용하고 “!`숫자`”를 사용하여 해당 명령을 재사용하세요.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_1.png)\n\n## 3. Show Date and time in History:\n\nTo view the date and time in the command history, use HISTTIMEFORMAT and select how you want the date to be displayed.\n\n```sh\nHISTTIMEFORMAT=\"%d-%m-%y %r\" history\n\n%d - Day\n%m - Month\n%y - Year\n%T / %r - Time in 24/12 hour format\n```  \n\n<div class=\"content-ad\"></div>\n\n영구적으로 설정하려면 .bashrc 파일에 아래 코드를 추가하세요.\n\n```js\nexport HISTTIMEFORMAT=\"%d-%m-%y %r \"\n```\n\n<img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_2.png\" />\n\n참고: 현재 일자가 기록되지 않았기 때문에 현재 날짜가 모든 날짜에 표시될 수 있지만, 이후에는 정확한 날짜가 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 4. 한 번에 여러 명령 실행하기:\n\n여러 명령을 동시에 실행하려면 3가지 옵션을 사용하여 함께 연결할 수 있습니다.\n\n-  `;` — 명령을 순차적으로 실행합니다.\n\n- `&&` — 하나의 명령이 실패하면 다음 명령이 실행되지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n\n|| — Command runs only if the previous cmd fails.\n\n![Screenshot](/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_3.png)\n\n## 5. View content with Less:\n\nViewing a file with large data using “cat” spams the whole window, using less shows a chunk of content, and then you can scroll up or down.\n\n\n<div class=\"content-ad\"></div>\n\n다른 기능들은 다음과 같습니다:\n\n- 검색: 파일 내에서 특정 용어를 /`검색 용어`를 사용하여 검색합니다.\n- 탐색: 파일 끝으로 이동하려면 G를 입력하세요, 1G(1행으로 이동), N(이전 검색 반복) 등이 있습니다.\n- 옵션: -N(행 번호 표시), -i(검색 시 대소문자 구분 없음), -S(텍스트 자동 줄 바꿈 비활성화) 등과 같이 동작을 사용자 정의할 수 있는 여러 옵션이 있습니다.\n\n## 6. 열(Column):\n\ncolumn 명령어를 사용하여 텍스트 파일이나 명령어 출력을 더 읽기 쉬운 형식으로 볼 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```sh\n# -t 옵션을 사용하여 표 형식으로 보여줍니다. -s 옵션은 구분자를 지정합니다. column 명령어로 실행하거나 다른 명령어의 출력을 column으로 파이핑하세요.\n\ncolumn -s ',' -t data.csv # 파일로부터 구분된 값으로 표시\n\ncat /etc/passwd | column -s ':' -t\n```\n\n<img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_4.png\" />\n\n## 6. 파일 자르기\n\n\n<div class=\"content-ad\"></div>\n\n파일을 열지 않고 내용을 지우려면 truncate를 사용하세요. -s (--size)로 크기를 지정할 수 있습니다. 0은 파일을 비우는 것이고 다른 숫자는 해당 크기로 줄이는 것을 의미합니다.\n\n```js\ntruncate -s 0 filename.txt -- 모든 데이터 삭제\ntruncate -s 100 filename.txt\n```\n\n<img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_5.png\" />\n\n## 7. Head and Tail:\n\n<div class=\"content-ad\"></div>\n\n이름 그대로 말하듯이, head는 파일의 처음 몇 줄을 보여주고, tail은 마지막 몇 줄을 보여줍니다.\n\n표시할 줄 수도 지정할 수 있습니다.\n\n```js\nhead/tail -n 20 <file>\n```\n\n`-f` 옵션을 사용한 tail은 로그와 같이 변경되는 파일을 볼 때 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ntail -f <file>\n```\n\n![Image](/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_6.png)\n\n## 8. View exit code:\n\nExit codes show the results of execution, typically useful for shell scripts. Use `echo $?` to view the exit code of the previous command.  \n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_7.png\" />\n\n## 9. 중첩 디렉토리 만들기:\n\n중첩 디렉토리를 만들어야 할 때는 /를 사용하여 하위 디렉토리를 정의하세요.\n\n```js\nmkdir -p dir/{dir1/subdir1,dir2,dir3/subdir3}\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_8.png\" />\n\n## 10. 파일 명령어:\n\nfile 명령어를 사용하여 어떤 파일의 유형을 확인할 수 있습니다. 특히 확장자가 없는 파일이나 diff 파일로 위장된 파일을 식별하는 데 유용합니다.\n\n예시: #!에 파이썬 인터프리터가 있는 .sh 파일.\n\n<div class=\"content-ad\"></div>\n\n오늘은 여기까지입니다.\n\npart 1은 여기에서 확인하세요:\n\n<img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_10.png\" />\n\n<div class=\"content-ad\"></div>\n\n## 👋 만약 이 내용이 도움이 되었다면, 아래 👏 버튼을 몇 번 클릭하여 작성자에 대한 지원을 보여주세요 👇\n\n## 🚀 FAUN 개발자 커뮤니티에 가입하고 매주 이메일로 비슷한 이야기를 받아보세요","ogImage":{"url":"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_0.png"},"coverImage":"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>파트 2: 팁과 꿀팁 - 역 cmd 검색, 히스토리에서 날짜와 시간 등.</h2>\n<p><img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_0.png\" alt=\"이미지\"></p>\n<p>참고: 일부는 기본 명령어일 뿐입니다.</p>\n<h2>1. 역 검색 cmds:</h2>\n<p>명령을 재사용하려면 Ctrl + R을 누르고 일치하는 키워드 몇 개를 입력하여 최근에 사용된 명령을 확인할 수 있습니다. 검색은 명령 히스토리를 기반으로 합니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*8d6OCQLH_WCzvQCcUpCfcQ.gif\" alt=\"이미지\"></p>\n<h2>2. 히스토리에서 특정 명령 사용하기</h2>\n<p>이전에 사용된 모든 명령을 나열하려면 history 명령을 사용하고 “!<code>숫자</code>”를 사용하여 해당 명령을 재사용하세요.</p>\n<p><img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_1.png\" alt=\"image\"></p>\n<h2>3. Show Date and time in History:</h2>\n<p>To view the date and time in the command history, use HISTTIMEFORMAT and select how you want the date to be displayed.</p>\n<pre><code class=\"hljs language-sh\">HISTTIMEFORMAT=<span class=\"hljs-string\">\"%d-%m-%y %r\"</span> <span class=\"hljs-built_in\">history</span>\n\n%d - Day\n%m - Month\n%y - Year\n%T / %r - Time <span class=\"hljs-keyword\">in</span> 24/12 hour format\n</code></pre>\n<p>영구적으로 설정하려면 .bashrc 파일에 아래 코드를 추가하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-variable constant_\">HISTTIMEFORMAT</span>=<span class=\"hljs-string\">\"%d-%m-%y %r \"</span>\n</code></pre>\n<p>참고: 현재 일자가 기록되지 않았기 때문에 현재 날짜가 모든 날짜에 표시될 수 있지만, 이후에는 정확한 날짜가 표시됩니다.</p>\n<h2>4. 한 번에 여러 명령 실행하기:</h2>\n<p>여러 명령을 동시에 실행하려면 3가지 옵션을 사용하여 함께 연결할 수 있습니다.</p>\n<ul>\n<li>\n<p><code>;</code> — 명령을 순차적으로 실행합니다.</p>\n</li>\n<li>\n<p><code>&#x26;&#x26;</code> — 하나의 명령이 실패하면 다음 명령이 실행되지 않습니다.</p>\n</li>\n</ul>\n<p>|| — Command runs only if the previous cmd fails.</p>\n<p><img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_3.png\" alt=\"Screenshot\"></p>\n<h2>5. View content with Less:</h2>\n<p>Viewing a file with large data using “cat” spams the whole window, using less shows a chunk of content, and then you can scroll up or down.</p>\n<p>다른 기능들은 다음과 같습니다:</p>\n<ul>\n<li>검색: 파일 내에서 특정 용어를 /<code>검색 용어</code>를 사용하여 검색합니다.</li>\n<li>탐색: 파일 끝으로 이동하려면 G를 입력하세요, 1G(1행으로 이동), N(이전 검색 반복) 등이 있습니다.</li>\n<li>옵션: -N(행 번호 표시), -i(검색 시 대소문자 구분 없음), -S(텍스트 자동 줄 바꿈 비활성화) 등과 같이 동작을 사용자 정의할 수 있는 여러 옵션이 있습니다.</li>\n</ul>\n<h2>6. 열(Column):</h2>\n<p>column 명령어를 사용하여 텍스트 파일이나 명령어 출력을 더 읽기 쉬운 형식으로 볼 수 있습니다.</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-comment\"># -t 옵션을 사용하여 표 형식으로 보여줍니다. -s 옵션은 구분자를 지정합니다. column 명령어로 실행하거나 다른 명령어의 출력을 column으로 파이핑하세요.</span>\n\ncolumn -s <span class=\"hljs-string\">','</span> -t data.csv <span class=\"hljs-comment\"># 파일로부터 구분된 값으로 표시</span>\n\n<span class=\"hljs-built_in\">cat</span> /etc/passwd | column -s <span class=\"hljs-string\">':'</span> -t\n</code></pre>\n<h2>6. 파일 자르기</h2>\n<p>파일을 열지 않고 내용을 지우려면 truncate를 사용하세요. -s (--size)로 크기를 지정할 수 있습니다. 0은 파일을 비우는 것이고 다른 숫자는 해당 크기로 줄이는 것을 의미합니다.</p>\n<pre><code class=\"hljs language-js\">truncate -s <span class=\"hljs-number\">0</span> filename.<span class=\"hljs-property\">txt</span> -- 모든 데이터 삭제\ntruncate -s <span class=\"hljs-number\">100</span> filename.<span class=\"hljs-property\">txt</span>\n</code></pre>\n<h2>7. Head and Tail:</h2>\n<p>이름 그대로 말하듯이, head는 파일의 처음 몇 줄을 보여주고, tail은 마지막 몇 줄을 보여줍니다.</p>\n<p>표시할 줄 수도 지정할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">head/tail -n <span class=\"hljs-number\">20</span> &#x3C;file>\n</code></pre>\n<p><code>-f</code> 옵션을 사용한 tail은 로그와 같이 변경되는 파일을 볼 때 유용합니다.</p>\n<pre><code class=\"hljs language-js\">tail -f &#x3C;file>\n</code></pre>\n<p><img src=\"/assets/img/2024-06-19-EssentialLinuxTerminalHacksforefficiencyPart2_6.png\" alt=\"Image\"></p>\n<h2>8. View exit code:</h2>\n<p>Exit codes show the results of execution, typically useful for shell scripts. Use <code>echo $?</code> to view the exit code of the previous command.</p>\n<h2>9. 중첩 디렉토리 만들기:</h2>\n<p>중첩 디렉토리를 만들어야 할 때는 /를 사용하여 하위 디렉토리를 정의하세요.</p>\n<pre><code class=\"hljs language-js\">mkdir -p dir/{dir1/subdir1,dir2,dir3/subdir3}\n</code></pre>\n<h2>10. 파일 명령어:</h2>\n<p>file 명령어를 사용하여 어떤 파일의 유형을 확인할 수 있습니다. 특히 확장자가 없는 파일이나 diff 파일로 위장된 파일을 식별하는 데 유용합니다.</p>\n<p>예시: #!에 파이썬 인터프리터가 있는 .sh 파일.</p>\n<p>오늘은 여기까지입니다.</p>\n<p>part 1은 여기에서 확인하세요:</p>\n<h2>👋 만약 이 내용이 도움이 되었다면, 아래 👏 버튼을 몇 번 클릭하여 작성자에 대한 지원을 보여주세요 👇</h2>\n<h2>🚀 FAUN 개발자 커뮤니티에 가입하고 매주 이메일로 비슷한 이야기를 받아보세요</h2>\n</body>\n</html>\n"},"__N_SSG":true}