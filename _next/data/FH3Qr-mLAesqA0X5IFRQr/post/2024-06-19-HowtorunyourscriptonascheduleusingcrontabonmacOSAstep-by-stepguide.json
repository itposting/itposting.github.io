{"pageProps":{"post":{"title":"맥OS에서 크론탭을 사용하여 스크립트를 정해진 시간에 실행하는 방법 단계별 안내","description":"","date":"2024-06-19 15:14","slug":"2024-06-19-HowtorunyourscriptonascheduleusingcrontabonmacOSAstep-by-stepguide","content":"\n맥에서는 쉘(Shell), 노드(Node), 파이썬(Python) 및 데노(Deno) 스크립트를 쉽게 자동화할 수 있습니다.\n\n![이미지](/assets/img/2024-06-19-HowtorunyourscriptonascheduleusingcrontabonmacOSAstep-by-stepguide_0.png)\n\n# 소개\n\nMac에서 파일 백업, 보고서 생성 또는 이메일 전송과 같은 작업을 자동화하고 싶은 적이 있나요? 이러한 작업은 반복적이고 시간이 많이 소비되지만 crontab을 사용하면 특정 시간에 실행되도록 예약하여 더 중요한 일에 집중할 수 있습니다. 이 기사에서는 crontab 도구를 탐색하고, 쉘, 노드, 파이썬 및 데노로 작성된 스크립트를 예약하는 방법을 보여드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\n# 맥에서의 Crontab 작동 방식\n\nCrontab은 macOS에서 작업을 관리하고 자동화하는 Unix 기반 도구입니다. 예약된 작업, 즉 cron 작업을 저장하는 \"crontab 파일\"이라는 구성 파일을 사용합니다. Crontab 파일의 각 줄은 cron 식으로 시작하여 실행할 명령을 포함하는 단일 cron 작업을 나타냅니다.\n\n일반적인 crontab 파일은 다음과 같이 보일 수 있습니다:\n\n```shell\n# 매일 새벽 3시에 백업 스크립트 실행\n0 3 * * * /경로/백업.sh\n\n# 매 시간마다 Node.js 스크립트 실행\n0 * * * * /usr/local/bin/node /경로/스크립트.js\n\n# 매주 월요일 오후 4시에 Python 스크립트 실행\n0 16 * * 1 /usr/bin/python3 /경로/스크립트.py\n```\n\n<div class=\"content-ad\"></div>\n\n표 태그를 마크다운 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\ncrontab - e;\n```\n\n이 명령을 입력하면 일반적으로 Vim이 열리며 기본 텍스트 편집기를 사용하여 crontab 파일을 수정할 수 있습니다. 이 파일에서 cron 작업을 추가, 수정 또는 제거할 수 있습니다. 변경 사항을 적용하려면 편집기에서 저장하고 종료하세요.\n\n## 시각적 텍스트 편집기를 사용하여 Crontab 편집\n\nVisual Studio Code, Sublime Text 또는 Atom과 같은 시각적 텍스트 편집기를 선호하는 경우 VISUAL 환경 변수를 설정하여 기본 편집기를 지정할 수 있습니다. 예를 들어 Visual Studio Code를 사용하려면 터미널에서 다음 명령을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nexport VISUAL=\"code --wait\"\n```\n\n그런 다음 crontab -e를 실행하면 crontab 파일이 Visual Studio Code에서 열립니다. 변경 사항을 저장한 다음 편집기를 닫아 변경 사항을 적용하세요.\n\n이 변경 사항을 영구적으로 적용하려면 export VISUAL 명령을 귀하의 셸 설정 파일 (예: ~/.bashrc, ~/.bash_profile 또는 ~/.zshrc)에 추가하세요.\n\n# 크론 표현식 101\n\n<div class=\"content-ad\"></div>\n\n크론 표현식은 공백으로 구분된 다섯 필드의 문자열입니다. 각 필드는 시간 단위를 나타냅니다:\n\n```js\n*  *  * * *\n│  │  │ │ └───── 요일 (0 - 7, 0과 7은 모두 일요일을 나타냄)\n│  │  │ └─────── 월 (1 - 12)\n│  │  └───────── 한 달의 날짜 (1 - 31)\n│  └──────────── 시 (0 - 23)\n└─────────────── 분 (0 - 59)\n```\n\n별표(\\*)는 와일드카드로 사용되며 \"모든 값을\" 의미합니다. 쉼표로 구분된 값, 범위 및 증분(/ 기호 사용)을 사용할 수도 있습니다.\n\n## 여러 값 지정에 쉼표 사용하기\n\n<div class=\"content-ad\"></div>\n\n1시 30분 오후와 6시 30분 오후에 작업을 실행하려면:\n\n```js\n30 13,18 * * * your-command\n```\n\n## 값 범위 지정을 사용하여 값을 범위로 지정하기\n\n오전 9시부터 오후 5시까지 매 30분마다 작업을 실행하려면:\n\n<div class=\"content-ad\"></div>\n\n## 간격 지정을 사용한 작업 실행\n\n매 2시간마다 작업을 실행하려면:\n\n```js\n0 */2 * * * your-command\n```\n\n<div class=\"content-ad\"></div>\n\n# macOS에서 가장 일반적인 Cron 표현식\n\n## 지정된 시간에 매일 작업 실행하기\n\n매일 새벽 2시 30분에 작업을 실행하려면:\n\n```js\n30 2 * * * 실행할-명령어\n```\n\n<div class=\"content-ad\"></div>\n\n## 매 시간마다 작업 실행\n\n매 시간의 처음부터 작업을 실행하려면:\n\n```js\n0 * * * * your-command\n```\n\n## 특정 요일과 시간마다 매주 작업 실행\n\n<div class=\"content-ad\"></div>\n\n매주 수요일 오후 3:45에 작업을 실행하려면:\n\n```js\n45 15 * * 3 your-command\n```\n\n## 특정 날짜와 시간에 매달 작업 실행하기\n\n매월 15일 오후 1시에 작업을 실행하려면:\n\n<div class=\"content-ad\"></div>\n\n```js\n0 13 15 * * your-command\n```\n\n# 작업 예약하는 단계별 가이드\n\n## 쉘 스크립트 예제\n\n- \"backup.sh\" 라는 쉘 스크립트 파일을 만들고 실행 가능하게 만듭니다:\n\n\n\n<div class=\"content-ad\"></div>\n\n```js\n#!/bin/bash\n# 백업 명령어\n```\n\n2. 스크립트를 매일 새벽 3시에 실행되도록 스케줄링하십시오:\n\n```js\n0 3 * * * /path/to/backup.sh\n```\n\n## Node.js 스크립트 예제\n\n<div class=\"content-ad\"></div>\n\n- \"email.js\"라는 Node.js 스크립트 파일을 생성해보세요:\n\n```js\nconst nodemailer = require(\"nodemailer\");\n\n// 여러분의 이메일 전송 로직을 작성해주세요\n```\n\n2. 매 시간마다 스크립트가 실행되도록 예약해보세요:\n\n```js\n0 * * * * /usr/local/bin/node /path/to/email.js\n```\n\n<div class=\"content-ad\"></div>\n\n## 데모 스크립트 예시\n\n- \"report.ts\"라는 Deno 스크립트 파일을 만들어보세요:\n\n```ts\nimport { generateReport } from \"./reportGenerator.ts\";\n\n// 보고서 생성 후 파일로 저장\n```\n\n2. 매주 화요일 오후 8시에 스크립트를 실행할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n0 20 * * 2 /usr/local/bin/deno run --allow-read --allow-write /path/to/report.ts\n```\n\n## Python 스크립트 예시\n\n- \"analytics.py\"라는 Python 스크립트 파일을 생성하세요:\n\n```js\nimport pandas as pd\n\n# 데이터 분석 및 시각화 로직을 작성하세요\n```\n\n<div class=\"content-ad\"></div>\n\n2. 매주 금요일 오후 12시에 스크립트를 실행하도록 일정을 예약해주세요:\n\n```js\n0 12 * * 5 /usr/bin/python3 /path/to/analytics.py\n```\n\n# 크론 표현식을 만들 수 있는 도구\n\nmacOS용 크론 표현식을 만들 수 있는 여러 웹사이트 및 앱이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n- Crontab Generator\n- CronTab.guru\n- CronMaker\n\n이 도구들을 사용하면 원하는 일정을 지정하고 해당하는 cron 식을 제공받아 cron 작업을 쉽게 생성하고 테스트할 수 있습니다.\n\n# Crontab을 사용한 스케줄된 작업 모니터링 및 로깅\n\n스케줄된 작업을 효과적으로 관리하기 위해서는 현재 예약된 작업을 확인하고 이전 실행 로그를 확인하는 방법을 알아야 합니다. 이 섹션에서는 이러한 중요한 모니터링 및 로깅 작업을 안내해 드립니다.\n\n<div class=\"content-ad\"></div>\n\n## 예약된 작업 확인하기\n\n현재 예약된 작업 목록을 확인하려면 터미널을 열고 다음 명령어를 입력하세요:\n\n```js\ncrontab - l;\n```\n\n이 명령은 현재의 crontab 파일을 표시하며, 모든 예약된 cron 작업을 보여줍니다. 각 줄은 하나의 cron 작업을 나타내며, cron 표현식 다음에 실행할 명령이 오게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 이전 실행 로그 보기\n\n기본적으로 macOS는 cron 작업의 자세한 로그를 저장하지 않습니다. 하지만 cron 작업의 출력을 로그 파일로 리다이렉트하여 실행을 추적할 수 있습니다. 이를 위해 crontab 파일을 수정하여 각 cron 작업에 출력 리다이렉션을 추가하세요.\n\n예를 들어, 매일 새벽 3시에 실행되는 셸 스크립트의 출력을 기록하려면 crontab 항목을 다음과 같이 업데이트하세요:\n\n```js\n0 3 * * * /path/to/backup.sh >> /path/to/backup.log 2>&1\n```\n\n<div class=\"content-ad\"></div>\n\n``` operator는 출력을 지정된 로그 파일에 추가하고, 2`&1을 사용하여 표준 출력(stdout)과 표준 오류(stderr)를 모두 캡처합니다.\n\n크론 작업이 출력을 로깅하도록 설정되면, 이러한 로그 파일을 확인하여 작업에 의해 생성된 결과 및 오류 메시지를 확인할 수 있습니다.\n\n또는 크론 작업의 실행에 대한 기본 정보를 확인하기 위해 시스템 로그를 확인할 수도 있습니다. 이를 위해 터미널을 열고 아래 명령어를 입력하세요:\n\ngrep -i cron /var/log/system.log\n\n<div class=\"content-ad\"></div>\n\n이 명령은 크론 작업과 관련된 모든 로그 항목을 표시하여 예약된 작업의 실행에 관한 타임스탬프와 기본 정보를 제공합니다.\n","ogImage":{"url":"/assets/img/2024-06-19-HowtorunyourscriptonascheduleusingcrontabonmacOSAstep-by-stepguide_0.png"},"coverImage":"/assets/img/2024-06-19-HowtorunyourscriptonascheduleusingcrontabonmacOSAstep-by-stepguide_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>맥에서는 쉘(Shell), 노드(Node), 파이썬(Python) 및 데노(Deno) 스크립트를 쉽게 자동화할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-19-HowtorunyourscriptonascheduleusingcrontabonmacOSAstep-by-stepguide_0.png\" alt=\"이미지\"></p>\n<h1>소개</h1>\n<p>Mac에서 파일 백업, 보고서 생성 또는 이메일 전송과 같은 작업을 자동화하고 싶은 적이 있나요? 이러한 작업은 반복적이고 시간이 많이 소비되지만 crontab을 사용하면 특정 시간에 실행되도록 예약하여 더 중요한 일에 집중할 수 있습니다. 이 기사에서는 crontab 도구를 탐색하고, 쉘, 노드, 파이썬 및 데노로 작성된 스크립트를 예약하는 방법을 보여드리겠습니다.</p>\n<h1>맥에서의 Crontab 작동 방식</h1>\n<p>Crontab은 macOS에서 작업을 관리하고 자동화하는 Unix 기반 도구입니다. 예약된 작업, 즉 cron 작업을 저장하는 \"crontab 파일\"이라는 구성 파일을 사용합니다. Crontab 파일의 각 줄은 cron 식으로 시작하여 실행할 명령을 포함하는 단일 cron 작업을 나타냅니다.</p>\n<p>일반적인 crontab 파일은 다음과 같이 보일 수 있습니다:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"bash\">매일 새벽 3시에 백업 스크립트 실행</span>\n0 3 * * * /경로/백업.sh\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"bash\">매 시간마다 Node.js 스크립트 실행</span>\n0 * * * * /usr/local/bin/node /경로/스크립트.js\n<span class=\"hljs-meta prompt_\">\n# </span><span class=\"bash\">매주 월요일 오후 4시에 Python 스크립트 실행</span>\n0 16 * * 1 /usr/bin/python3 /경로/스크립트.py\n</code></pre>\n<p>표 태그를 마크다운 형식으로 변경해주세요.</p>\n<pre><code class=\"hljs language-js\">crontab - e;\n</code></pre>\n<p>이 명령을 입력하면 일반적으로 Vim이 열리며 기본 텍스트 편집기를 사용하여 crontab 파일을 수정할 수 있습니다. 이 파일에서 cron 작업을 추가, 수정 또는 제거할 수 있습니다. 변경 사항을 적용하려면 편집기에서 저장하고 종료하세요.</p>\n<h2>시각적 텍스트 편집기를 사용하여 Crontab 편집</h2>\n<p>Visual Studio Code, Sublime Text 또는 Atom과 같은 시각적 텍스트 편집기를 선호하는 경우 VISUAL 환경 변수를 설정하여 기본 편집기를 지정할 수 있습니다. 예를 들어 Visual Studio Code를 사용하려면 터미널에서 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-variable constant_\">VISUAL</span>=<span class=\"hljs-string\">\"code --wait\"</span>\n</code></pre>\n<p>그런 다음 crontab -e를 실행하면 crontab 파일이 Visual Studio Code에서 열립니다. 변경 사항을 저장한 다음 편집기를 닫아 변경 사항을 적용하세요.</p>\n<p>이 변경 사항을 영구적으로 적용하려면 export VISUAL 명령을 귀하의 셸 설정 파일 (예: ~/.bashrc, ~/.bash_profile 또는 ~/.zshrc)에 추가하세요.</p>\n<h1>크론 표현식 101</h1>\n<p>크론 표현식은 공백으로 구분된 다섯 필드의 문자열입니다. 각 필드는 시간 단위를 나타냅니다:</p>\n<pre><code class=\"hljs language-js\">*  *  * * *\n│  │  │ │ └───── 요일 (<span class=\"hljs-number\">0</span> - <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>과 <span class=\"hljs-number\">7</span>은 모두 일요일을 나타냄)\n│  │  │ └─────── 월 (<span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">12</span>)\n│  │  └───────── 한 달의 날짜 (<span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">31</span>)\n│  └──────────── 시 (<span class=\"hljs-number\">0</span> - <span class=\"hljs-number\">23</span>)\n└─────────────── 분 (<span class=\"hljs-number\">0</span> - <span class=\"hljs-number\">59</span>)\n</code></pre>\n<p>별표(*)는 와일드카드로 사용되며 \"모든 값을\" 의미합니다. 쉼표로 구분된 값, 범위 및 증분(/ 기호 사용)을 사용할 수도 있습니다.</p>\n<h2>여러 값 지정에 쉼표 사용하기</h2>\n<p>1시 30분 오후와 6시 30분 오후에 작업을 실행하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">30</span> <span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">18</span> * * * your-command\n</code></pre>\n<h2>값 범위 지정을 사용하여 값을 범위로 지정하기</h2>\n<p>오전 9시부터 오후 5시까지 매 30분마다 작업을 실행하려면:</p>\n<h2>간격 지정을 사용한 작업 실행</h2>\n<p>매 2시간마다 작업을 실행하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">0</span> */<span class=\"hljs-number\">2</span> * * * your-command\n</code></pre>\n<h1>macOS에서 가장 일반적인 Cron 표현식</h1>\n<h2>지정된 시간에 매일 작업 실행하기</h2>\n<p>매일 새벽 2시 30분에 작업을 실행하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">30</span> <span class=\"hljs-number\">2</span> * * * 실행할-명령어\n</code></pre>\n<h2>매 시간마다 작업 실행</h2>\n<p>매 시간의 처음부터 작업을 실행하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">0</span> * * * * your-command\n</code></pre>\n<h2>특정 요일과 시간마다 매주 작업 실행</h2>\n<p>매주 수요일 오후 3:45에 작업을 실행하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">45</span> <span class=\"hljs-number\">15</span> * * <span class=\"hljs-number\">3</span> your-command\n</code></pre>\n<h2>특정 날짜와 시간에 매달 작업 실행하기</h2>\n<p>매월 15일 오후 1시에 작업을 실행하려면:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-number\">15</span> * * your-command\n</code></pre>\n<h1>작업 예약하는 단계별 가이드</h1>\n<h2>쉘 스크립트 예제</h2>\n<ul>\n<li>\"backup.sh\" 라는 쉘 스크립트 파일을 만들고 실행 가능하게 만듭니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">#!<span class=\"hljs-regexp\">/bin/</span>bash\n# 백업 명령어\n</code></pre>\n<ol start=\"2\">\n<li>스크립트를 매일 새벽 3시에 실행되도록 스케줄링하십시오:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">3</span> * * * <span class=\"hljs-regexp\">/path/</span>to/backup.<span class=\"hljs-property\">sh</span>\n</code></pre>\n<h2>Node.js 스크립트 예제</h2>\n<ul>\n<li>\"email.js\"라는 Node.js 스크립트 파일을 생성해보세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> nodemailer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"nodemailer\"</span>);\n\n<span class=\"hljs-comment\">// 여러분의 이메일 전송 로직을 작성해주세요</span>\n</code></pre>\n<ol start=\"2\">\n<li>매 시간마다 스크립트가 실행되도록 예약해보세요:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">0</span> * * * * <span class=\"hljs-regexp\">/usr/</span>local/bin/node /path/to/email.<span class=\"hljs-property\">js</span>\n</code></pre>\n<h2>데모 스크립트 예시</h2>\n<ul>\n<li>\"report.ts\"라는 Deno 스크립트 파일을 만들어보세요:</li>\n</ul>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { generateReport } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./reportGenerator.ts\"</span>;\n\n<span class=\"hljs-comment\">// 보고서 생성 후 파일로 저장</span>\n</code></pre>\n<ol start=\"2\">\n<li>매주 화요일 오후 8시에 스크립트를 실행할 수 있습니다:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">20</span> * * <span class=\"hljs-number\">2</span> /usr/local/bin/deno run --allow-read --allow-write /path/to/report.<span class=\"hljs-property\">ts</span>\n</code></pre>\n<h2>Python 스크립트 예시</h2>\n<ul>\n<li>\"analytics.py\"라는 Python 스크립트 파일을 생성하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\n# 데이터 분석 및 시각화 로직을 작성하세요\n</code></pre>\n<ol start=\"2\">\n<li>매주 금요일 오후 12시에 스크립트를 실행하도록 일정을 예약해주세요:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">12</span> * * <span class=\"hljs-number\">5</span> /usr/bin/python3 /path/to/analytics.<span class=\"hljs-property\">py</span>\n</code></pre>\n<h1>크론 표현식을 만들 수 있는 도구</h1>\n<p>macOS용 크론 표현식을 만들 수 있는 여러 웹사이트 및 앱이 있습니다.</p>\n<ul>\n<li>Crontab Generator</li>\n<li>CronTab.guru</li>\n<li>CronMaker</li>\n</ul>\n<p>이 도구들을 사용하면 원하는 일정을 지정하고 해당하는 cron 식을 제공받아 cron 작업을 쉽게 생성하고 테스트할 수 있습니다.</p>\n<h1>Crontab을 사용한 스케줄된 작업 모니터링 및 로깅</h1>\n<p>스케줄된 작업을 효과적으로 관리하기 위해서는 현재 예약된 작업을 확인하고 이전 실행 로그를 확인하는 방법을 알아야 합니다. 이 섹션에서는 이러한 중요한 모니터링 및 로깅 작업을 안내해 드립니다.</p>\n<h2>예약된 작업 확인하기</h2>\n<p>현재 예약된 작업 목록을 확인하려면 터미널을 열고 다음 명령어를 입력하세요:</p>\n<pre><code class=\"hljs language-js\">crontab - l;\n</code></pre>\n<p>이 명령은 현재의 crontab 파일을 표시하며, 모든 예약된 cron 작업을 보여줍니다. 각 줄은 하나의 cron 작업을 나타내며, cron 표현식 다음에 실행할 명령이 오게 됩니다.</p>\n<h2>이전 실행 로그 보기</h2>\n<p>기본적으로 macOS는 cron 작업의 자세한 로그를 저장하지 않습니다. 하지만 cron 작업의 출력을 로그 파일로 리다이렉트하여 실행을 추적할 수 있습니다. 이를 위해 crontab 파일을 수정하여 각 cron 작업에 출력 리다이렉션을 추가하세요.</p>\n<p>예를 들어, 매일 새벽 3시에 실행되는 셸 스크립트의 출력을 기록하려면 crontab 항목을 다음과 같이 업데이트하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">3</span> * * * <span class=\"hljs-regexp\">/path/</span>to/backup.<span class=\"hljs-property\">sh</span> >> <span class=\"hljs-regexp\">/path/</span>to/backup.<span class=\"hljs-property\">log</span> <span class=\"hljs-number\">2</span>>&#x26;<span class=\"hljs-number\">1</span>\n</code></pre>\n<p>``` operator는 출력을 지정된 로그 파일에 추가하고, 2`&#x26;1을 사용하여 표준 출력(stdout)과 표준 오류(stderr)를 모두 캡처합니다.</p>\n<p>크론 작업이 출력을 로깅하도록 설정되면, 이러한 로그 파일을 확인하여 작업에 의해 생성된 결과 및 오류 메시지를 확인할 수 있습니다.</p>\n<p>또는 크론 작업의 실행에 대한 기본 정보를 확인하기 위해 시스템 로그를 확인할 수도 있습니다. 이를 위해 터미널을 열고 아래 명령어를 입력하세요:</p>\n<p>grep -i cron /var/log/system.log</p>\n<p>이 명령은 크론 작업과 관련된 모든 로그 항목을 표시하여 예약된 작업의 실행에 관한 타임스탬프와 기본 정보를 제공합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}