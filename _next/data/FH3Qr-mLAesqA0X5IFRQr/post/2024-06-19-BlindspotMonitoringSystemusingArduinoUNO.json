{"pageProps":{"post":{"title":"아두이노 UNO를 활용한 블라인드스팟 모니터링 시스템","description":"","date":"2024-06-19 17:42","slug":"2024-06-19-BlindspotMonitoringSystemusingArduinoUNO","content":"\n\n\n![2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_0](/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_0.png)\n\n저는 현재 여름 휴가 중이에요. 시간 보내는 제가 가장 좋아하는 방법 중 하나는 결코 사지 못할 차량들을 소개하는 YouTube 동영상을 보는 거예요. YouTube에서 차량 리뷰를 살펴보다가, 2021년 메르세데스 벤츠 S클래스의 리뷰를 발견했는데, 차량이 블라인드 스팟에 감지되면 문 옆 주변 조명이 빨갛게 깜빡이는 멋진 작은 기능에 꽂혔어요 (액티브 앰비언트 라이팅, 그렇게 생각해요). 간단하면서 효과적이죠 — 그것이 독일의 엔지니어링이죠.\n\n![2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_1](/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_1.png)\n\n제가 보고 있던 리뷰 링크를 여기에 공유할게요.\n\n\n<div class=\"content-ad\"></div>\n\n최근에 Arduino Uno도 시도해봤어요. AtMega328P 마이크로컨트롤러를 탑재한 작은 개발 보드인데요. 2021 메르세데스 S-Class의 블라인드스팟 경고 시스템에 놀랐기에 Arduino UNO를 활용해 나만의 시스템을 만들어보기로 결심했어요.\n\n## 부품 및 준비물\n\n- Arduino Uno\n- 브레드보드 (옵션)\n- RGB LED 스트립 (≤1 미터)\n- HC-SR04 초음파 센서\n- Arduino IDE가 설치된 노트북/데스크탑\n\n## 회로 설계\n\n<div class=\"content-ad\"></div>\n\n아래는 코드에 대한 링크입니다.\n\n## 논리\n\n<div class=\"content-ad\"></div>\n\n- 핀 및 트리거 거리를 초기화합니다. \n- 호스트와 오브젝트 간의 거리를 계산합니다.\n- 계산된 거리를 트리거 거리와 비교하여 색깔을 깜빡입니다.\n- 내 코드에서는 오브젝트가 30cm 이내에 있을 때 LED 스트립이 주황색으로 깜빡이고, 10cm 이내에 있을 때는 빨간색으로 깜빡입니다. 객체를 감지하지 못할 때는 LED 스트립이 파랑색으로 변합니다. 원하는 대로 색상을 변경할 수 있습니다.\n\n![이미지](/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_3.png)\n\n## 코드 설명\n\n변수 및 상수를 초기화합니다.\n\n<div class=\"content-ad\"></div>\n\n먼저, 코드 작성 시 나중에 사용할 모든 변수와 상수를 초기화해야 합니다. 상수 g, b, r은 RGB LED 스트립의 핀을 정의하는 데 사용됩니다. echoPin 및 trigPin은 초음파 센서에 사용된 상수입니다.\n\n참고: LED 스트립의 밝기를 제어하기 위해 아두이노의 PWM 핀을 사용하고 있습니다.\n\n```js\n// RGB 스트립 핀 초기화\n#define b 6 \n#define g 5 \n#define r 3 \n// 초음파 센서 핀 초기화\n#define echoPin 8\n#define trigPin 12\n```\n\n블라인드스팟 경고 알림에는 두 단계가 있으므로 trigDist1 (첫 번째 트리거) 및 trigDist2 (두 번째 트리거) 두 상수를 초기화해야 합니다. duration 및 distance 변수는 센서와 개체 사이의 거리를 계산하는 데 사용됩니다. fade 변수는 LED가 대기 상태일 때 fade-in 효과에 사용될 부울 형식의 변수입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n#define trigDist1 30\n#define trigDist2 10\nlong duration;\nint distance;\n \nbool fade=true;\n```\n\n설정\n\n모든 변수와 상수를 초기화한 후에, 핀 모드를 설정하고 시리얼 통신을 baud rate 9600으로 시작합니다. setup() 함수는 코드를 컴파일한 후에 처음에 한 번만 실행됩니다.\n\n```js\nvoid setup() {\n Serial.begin(9600);  \n pinMode(g,OUTPUT);  \n pinMode(b,OUTPUT);  \n pinMode(r,OUTPUT);  \n pinMode(trigPin, OUTPUT);  \n pinMode(echoPin, INPUT);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n호스트와 객체 사이의 거리를 계산하는 함수입니다.\n\n```js\nvoid calDistance(){  \n digitalWrite(trigPin, LOW); \n delayMicroseconds(2); \n digitalWrite(trigPin, HIGH); \n delayMicroseconds(10); \n digitalWrite(trigPin, LOW); \n duration = pulseIn(echoPin, HIGH); \n distance = duration * 0.034 / 2; \n Serial.println(distance);\n}\n```\n\n<div class=\"content-ad\"></div>\n\npulseIn() 함수는 핀이 LOW에서 HIGH로 전환될 때 대기하고 타이밍을 시작한 다음 핀이 LOW로 전환되기를 기다리고 타이밍을 중지합니다. 펄스의 길이를 마이크로초 단위로 반환하거나 제한 시간 내에 완전한 펄스를 받지 못하면 0을 반환합니다.\n\n2. fadedRed()\n\n이 함수는 펄스 폭 변조와 for 루프의 도움으로 LED 스트립을 서서히 깜박거리게 만듭니다. 첫 번째 for 루프는 LED의 밝기를 서서히 증가시키고 두 번째 for 루프는 LED의 밝기를 서서히 감소시킵니다. val은 깜박임의 빈도를 제어할 수 있는 매개변수로 사용됩니다.\n\n```js\nvoid fadedRed(int val){ \n for(int i=255; i>0; i-=val){    \n  analogWrite(r, i);        \n  analogWrite(g, 255);    \n  analogWrite(b, 255);    \n  delay(5); \n }   \n for(int i=0; i<255; i+=val){   \n  analogWrite(r, i);         \n  analogWrite(g, 255);     \n  analogWrite(b, 255);     \n  delay(5);  \n }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n3. fadedOrange()\n\n이 함수는 이전 것과 비슷하지만, 빨강과 초록을 섞어 주황색을 생성하는 데 약간의 어려움이 있었습니다. 아직 완벽하지 않지만, 초록색의 백분율을 제한하기 위해 삼항 연산자를 사용하여 최선을 다했습니다. 이에 대한 더 나은 해결책이 있으면 댓글 섹션에서 알려주세요.\n\n```js\nvoid fadedOrange(int val){ \n for(int i=255; i>0; i-=val){     \n  analogWrite(r, i);          \n  analogWrite(b, 255);    \n  analogWrite(g, i>230?i:230);    \n  delay(5);  \n }   \n for(int i=0; i<255; i+=val){    \n  analogWrite(r, i);         \n  analogWrite(b, 255);    \n  analogWrite(g,i<230?240:i);   \n  delay(5);  \n  }\n}\n```\n\n4. fadeInBlue()\n\n<div class=\"content-ad\"></div>\n\n이 함수는 LED를 깜박이지 않고, 깜박이는 LED에서 정적 LED로 전환하는 데, fade 변수를 사용하여 페이드 효과를 추가했습니다. 이 변수는 LED가 이미 파란색으로 변했는지 확인하고, 아직 변하지 않았다면 파란색으로 서서히 변합니다.\n\n```js\nvoid fadeInBlue(){  \n if(fade==true){   \n  for(int i=255; i>0; i-=1){     \n   analogWrite(g, 255);     \n   analogWrite(r, 255);     \n   analogWrite(b, i);      \n   delay(5);    \n  }  \n }  \n fade=false;  \n analogWrite(g, 255);  \n analogWrite(r, 255); \n analogWrite(b, 0);\n}\n```\n\nloop() 함수로 모든 것을 묶기\n\nloop() 함수는 코드가 실행되기 시작하면 반복해서 실행됩니다. 이전에 선언된 모든 함수는 loop() 함수에서 호출됩니다. 거리를 계산한 후, 거리를 트리거 거리와 비교하고 적절한 색상을 출력합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nvoid loop() {  \n calDistance(); \n if(distance<=trigDist1 && distance>trigDist2){  \n  fadedOrange(3);  \n  fade=true; \n }\n else if(distance<=trigDist2){  \n  fadedRed(3);  \n  fade=true; \n } \n else{  \n  fadeInBlue(); \n }\n}\n```\n\n이 프로젝트의 로직은 전체적으로 매우 직관적이며 코드를 쉽게 조정할 수 있습니다.\n\n프로젝트의 비디오 데모는 다음과 같습니다:\n\n<img src=\"/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_4.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_5.png\" />\n\n## 향후 개선 사항\n\n- 일반 RGB LED 스트립을 WS2812B 주소 지정 가능한 LED 스트립으로 교체합니다. WS2812B LED는 FastLED 라이브러리와 함께 사용하면 동적한 스와이프 패턴과 다양한 색상 생성이 쉬워집니다.\n\n## 이 프로젝트를 왜 만들었나요?\n\n<div class=\"content-ad\"></div>\n\n저의 재미있는 첫 번째 아두이노 기반 프로젝트였어요. 이 프로젝트를 통해 완전히 즐길 수 있는 흥미로운 것을 만들고 싶었어요. 자동차와 기술은 항상 가장 흥미로운 주제였죠. 게다가 오랜만에 미디움 기사를 쓰지 않았고, 이것을 모두와 공유하면 좋겠다고 생각했어요. 이 기사가 여러분의 삶에 가치를 더해주고, 저처럼 이 재미있고 작지만 재미있는 프로젝트를 즐기셨으면 좋겠어요. 프로젝트와 관련된 의구심이 있으면 댓글란에 남겨주시면 최선을 다해 도와드리겠습니다. 안녕!\n\n제 블로그를 좋아하셨다면 커피 사주실 수도 있어요.","ogImage":{"url":"/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_0.png"},"coverImage":"/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_0.png\" alt=\"2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_0\"></p>\n<p>저는 현재 여름 휴가 중이에요. 시간 보내는 제가 가장 좋아하는 방법 중 하나는 결코 사지 못할 차량들을 소개하는 YouTube 동영상을 보는 거예요. YouTube에서 차량 리뷰를 살펴보다가, 2021년 메르세데스 벤츠 S클래스의 리뷰를 발견했는데, 차량이 블라인드 스팟에 감지되면 문 옆 주변 조명이 빨갛게 깜빡이는 멋진 작은 기능에 꽂혔어요 (액티브 앰비언트 라이팅, 그렇게 생각해요). 간단하면서 효과적이죠 — 그것이 독일의 엔지니어링이죠.</p>\n<p><img src=\"/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_1.png\" alt=\"2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_1\"></p>\n<p>제가 보고 있던 리뷰 링크를 여기에 공유할게요.</p>\n<p>최근에 Arduino Uno도 시도해봤어요. AtMega328P 마이크로컨트롤러를 탑재한 작은 개발 보드인데요. 2021 메르세데스 S-Class의 블라인드스팟 경고 시스템에 놀랐기에 Arduino UNO를 활용해 나만의 시스템을 만들어보기로 결심했어요.</p>\n<h2>부품 및 준비물</h2>\n<ul>\n<li>Arduino Uno</li>\n<li>브레드보드 (옵션)</li>\n<li>RGB LED 스트립 (≤1 미터)</li>\n<li>HC-SR04 초음파 센서</li>\n<li>Arduino IDE가 설치된 노트북/데스크탑</li>\n</ul>\n<h2>회로 설계</h2>\n<p>아래는 코드에 대한 링크입니다.</p>\n<h2>논리</h2>\n<ul>\n<li>핀 및 트리거 거리를 초기화합니다.</li>\n<li>호스트와 오브젝트 간의 거리를 계산합니다.</li>\n<li>계산된 거리를 트리거 거리와 비교하여 색깔을 깜빡입니다.</li>\n<li>내 코드에서는 오브젝트가 30cm 이내에 있을 때 LED 스트립이 주황색으로 깜빡이고, 10cm 이내에 있을 때는 빨간색으로 깜빡입니다. 객체를 감지하지 못할 때는 LED 스트립이 파랑색으로 변합니다. 원하는 대로 색상을 변경할 수 있습니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-19-BlindspotMonitoringSystemusingArduinoUNO_3.png\" alt=\"이미지\"></p>\n<h2>코드 설명</h2>\n<p>변수 및 상수를 초기화합니다.</p>\n<p>먼저, 코드 작성 시 나중에 사용할 모든 변수와 상수를 초기화해야 합니다. 상수 g, b, r은 RGB LED 스트립의 핀을 정의하는 데 사용됩니다. echoPin 및 trigPin은 초음파 센서에 사용된 상수입니다.</p>\n<p>참고: LED 스트립의 밝기를 제어하기 위해 아두이노의 PWM 핀을 사용하고 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// RGB 스트립 핀 초기화</span>\n#define b <span class=\"hljs-number\">6</span> \n#define g <span class=\"hljs-number\">5</span> \n#define r <span class=\"hljs-number\">3</span> \n<span class=\"hljs-comment\">// 초음파 센서 핀 초기화</span>\n#define echoPin <span class=\"hljs-number\">8</span>\n#define trigPin <span class=\"hljs-number\">12</span>\n</code></pre>\n<p>블라인드스팟 경고 알림에는 두 단계가 있으므로 trigDist1 (첫 번째 트리거) 및 trigDist2 (두 번째 트리거) 두 상수를 초기화해야 합니다. duration 및 distance 변수는 센서와 개체 사이의 거리를 계산하는 데 사용됩니다. fade 변수는 LED가 대기 상태일 때 fade-in 효과에 사용될 부울 형식의 변수입니다.</p>\n<pre><code class=\"hljs language-js\">#define trigDist1 <span class=\"hljs-number\">30</span>\n#define trigDist2 <span class=\"hljs-number\">10</span>\nlong duration;\nint distance;\n \nbool fade=<span class=\"hljs-literal\">true</span>;\n</code></pre>\n<p>설정</p>\n<p>모든 변수와 상수를 초기화한 후에, 핀 모드를 설정하고 시리얼 통신을 baud rate 9600으로 시작합니다. setup() 함수는 코드를 컴파일한 후에 처음에 한 번만 실행됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">9600</span>);  \n <span class=\"hljs-title function_\">pinMode</span>(g,<span class=\"hljs-variable constant_\">OUTPUT</span>);  \n <span class=\"hljs-title function_\">pinMode</span>(b,<span class=\"hljs-variable constant_\">OUTPUT</span>);  \n <span class=\"hljs-title function_\">pinMode</span>(r,<span class=\"hljs-variable constant_\">OUTPUT</span>);  \n <span class=\"hljs-title function_\">pinMode</span>(trigPin, <span class=\"hljs-variable constant_\">OUTPUT</span>);  \n <span class=\"hljs-title function_\">pinMode</span>(echoPin, <span class=\"hljs-variable constant_\">INPUT</span>);\n}\n</code></pre>\n<p>호스트와 객체 사이의 거리를 계산하는 함수입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">calDistance</span>(<span class=\"hljs-params\"></span>){  \n <span class=\"hljs-title function_\">digitalWrite</span>(trigPin, <span class=\"hljs-variable constant_\">LOW</span>); \n <span class=\"hljs-title function_\">delayMicroseconds</span>(<span class=\"hljs-number\">2</span>); \n <span class=\"hljs-title function_\">digitalWrite</span>(trigPin, <span class=\"hljs-variable constant_\">HIGH</span>); \n <span class=\"hljs-title function_\">delayMicroseconds</span>(<span class=\"hljs-number\">10</span>); \n <span class=\"hljs-title function_\">digitalWrite</span>(trigPin, <span class=\"hljs-variable constant_\">LOW</span>); \n duration = <span class=\"hljs-title function_\">pulseIn</span>(echoPin, <span class=\"hljs-variable constant_\">HIGH</span>); \n distance = duration * <span class=\"hljs-number\">0.034</span> / <span class=\"hljs-number\">2</span>; \n <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(distance);\n}\n</code></pre>\n<p>pulseIn() 함수는 핀이 LOW에서 HIGH로 전환될 때 대기하고 타이밍을 시작한 다음 핀이 LOW로 전환되기를 기다리고 타이밍을 중지합니다. 펄스의 길이를 마이크로초 단위로 반환하거나 제한 시간 내에 완전한 펄스를 받지 못하면 0을 반환합니다.</p>\n<ol start=\"2\">\n<li>fadedRed()</li>\n</ol>\n<p>이 함수는 펄스 폭 변조와 for 루프의 도움으로 LED 스트립을 서서히 깜박거리게 만듭니다. 첫 번째 for 루프는 LED의 밝기를 서서히 증가시키고 두 번째 for 루프는 LED의 밝기를 서서히 감소시킵니다. val은 깜박임의 빈도를 제어할 수 있는 매개변수로 사용됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fadedRed</span>(<span class=\"hljs-params\">int val</span>){ \n <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">255</span>; i><span class=\"hljs-number\">0</span>; i-=val){    \n  <span class=\"hljs-title function_\">analogWrite</span>(r, i);        \n  <span class=\"hljs-title function_\">analogWrite</span>(g, <span class=\"hljs-number\">255</span>);    \n  <span class=\"hljs-title function_\">analogWrite</span>(b, <span class=\"hljs-number\">255</span>);    \n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">5</span>); \n }   \n <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&#x3C;<span class=\"hljs-number\">255</span>; i+=val){   \n  <span class=\"hljs-title function_\">analogWrite</span>(r, i);         \n  <span class=\"hljs-title function_\">analogWrite</span>(g, <span class=\"hljs-number\">255</span>);     \n  <span class=\"hljs-title function_\">analogWrite</span>(b, <span class=\"hljs-number\">255</span>);     \n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">5</span>);  \n }\n}\n</code></pre>\n<ol start=\"3\">\n<li>fadedOrange()</li>\n</ol>\n<p>이 함수는 이전 것과 비슷하지만, 빨강과 초록을 섞어 주황색을 생성하는 데 약간의 어려움이 있었습니다. 아직 완벽하지 않지만, 초록색의 백분율을 제한하기 위해 삼항 연산자를 사용하여 최선을 다했습니다. 이에 대한 더 나은 해결책이 있으면 댓글 섹션에서 알려주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fadedOrange</span>(<span class=\"hljs-params\">int val</span>){ \n <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">255</span>; i><span class=\"hljs-number\">0</span>; i-=val){     \n  <span class=\"hljs-title function_\">analogWrite</span>(r, i);          \n  <span class=\"hljs-title function_\">analogWrite</span>(b, <span class=\"hljs-number\">255</span>);    \n  <span class=\"hljs-title function_\">analogWrite</span>(g, i><span class=\"hljs-number\">230</span>?<span class=\"hljs-attr\">i</span>:<span class=\"hljs-number\">230</span>);    \n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">5</span>);  \n }   \n <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">0</span>; i&#x3C;<span class=\"hljs-number\">255</span>; i+=val){    \n  <span class=\"hljs-title function_\">analogWrite</span>(r, i);         \n  <span class=\"hljs-title function_\">analogWrite</span>(b, <span class=\"hljs-number\">255</span>);    \n  <span class=\"hljs-title function_\">analogWrite</span>(g,i&#x3C;<span class=\"hljs-number\">230</span>?<span class=\"hljs-number\">240</span>:i);   \n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">5</span>);  \n  }\n}\n</code></pre>\n<ol start=\"4\">\n<li>fadeInBlue()</li>\n</ol>\n<p>이 함수는 LED를 깜박이지 않고, 깜박이는 LED에서 정적 LED로 전환하는 데, fade 변수를 사용하여 페이드 효과를 추가했습니다. 이 변수는 LED가 이미 파란색으로 변했는지 확인하고, 아직 변하지 않았다면 파란색으로 서서히 변합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fadeInBlue</span>(<span class=\"hljs-params\"></span>){  \n <span class=\"hljs-keyword\">if</span>(fade==<span class=\"hljs-literal\">true</span>){   \n  <span class=\"hljs-keyword\">for</span>(int i=<span class=\"hljs-number\">255</span>; i><span class=\"hljs-number\">0</span>; i-=<span class=\"hljs-number\">1</span>){     \n   <span class=\"hljs-title function_\">analogWrite</span>(g, <span class=\"hljs-number\">255</span>);     \n   <span class=\"hljs-title function_\">analogWrite</span>(r, <span class=\"hljs-number\">255</span>);     \n   <span class=\"hljs-title function_\">analogWrite</span>(b, i);      \n   <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">5</span>);    \n  }  \n }  \n fade=<span class=\"hljs-literal\">false</span>;  \n <span class=\"hljs-title function_\">analogWrite</span>(g, <span class=\"hljs-number\">255</span>);  \n <span class=\"hljs-title function_\">analogWrite</span>(r, <span class=\"hljs-number\">255</span>); \n <span class=\"hljs-title function_\">analogWrite</span>(b, <span class=\"hljs-number\">0</span>);\n}\n</code></pre>\n<p>loop() 함수로 모든 것을 묶기</p>\n<p>loop() 함수는 코드가 실행되기 시작하면 반복해서 실행됩니다. 이전에 선언된 모든 함수는 loop() 함수에서 호출됩니다. 거리를 계산한 후, 거리를 트리거 거리와 비교하고 적절한 색상을 출력합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>) {  \n <span class=\"hljs-title function_\">calDistance</span>(); \n <span class=\"hljs-keyword\">if</span>(distance&#x3C;=trigDist1 &#x26;&#x26; distance>trigDist2){  \n  <span class=\"hljs-title function_\">fadedOrange</span>(<span class=\"hljs-number\">3</span>);  \n  fade=<span class=\"hljs-literal\">true</span>; \n }\n <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(distance&#x3C;=trigDist2){  \n  <span class=\"hljs-title function_\">fadedRed</span>(<span class=\"hljs-number\">3</span>);  \n  fade=<span class=\"hljs-literal\">true</span>; \n } \n <span class=\"hljs-keyword\">else</span>{  \n  <span class=\"hljs-title function_\">fadeInBlue</span>(); \n }\n}\n</code></pre>\n<p>이 프로젝트의 로직은 전체적으로 매우 직관적이며 코드를 쉽게 조정할 수 있습니다.</p>\n<p>프로젝트의 비디오 데모는 다음과 같습니다:</p>\n<h2>향후 개선 사항</h2>\n<ul>\n<li>일반 RGB LED 스트립을 WS2812B 주소 지정 가능한 LED 스트립으로 교체합니다. WS2812B LED는 FastLED 라이브러리와 함께 사용하면 동적한 스와이프 패턴과 다양한 색상 생성이 쉬워집니다.</li>\n</ul>\n<h2>이 프로젝트를 왜 만들었나요?</h2>\n<p>저의 재미있는 첫 번째 아두이노 기반 프로젝트였어요. 이 프로젝트를 통해 완전히 즐길 수 있는 흥미로운 것을 만들고 싶었어요. 자동차와 기술은 항상 가장 흥미로운 주제였죠. 게다가 오랜만에 미디움 기사를 쓰지 않았고, 이것을 모두와 공유하면 좋겠다고 생각했어요. 이 기사가 여러분의 삶에 가치를 더해주고, 저처럼 이 재미있고 작지만 재미있는 프로젝트를 즐기셨으면 좋겠어요. 프로젝트와 관련된 의구심이 있으면 댓글란에 남겨주시면 최선을 다해 도와드리겠습니다. 안녕!</p>\n<p>제 블로그를 좋아하셨다면 커피 사주실 수도 있어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}