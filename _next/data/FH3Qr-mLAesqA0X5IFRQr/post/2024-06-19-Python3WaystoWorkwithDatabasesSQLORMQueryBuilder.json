{"pageProps":{"post":{"title":"파이썬 - 데이터베이스 작업하는 3가지 방법SQL, ORM, Query Builder","description":"","date":"2024-06-19 16:39","slug":"2024-06-19-Python3WaystoWorkwithDatabasesSQLORMQueryBuilder","content":"\n\n## 원시 SQL 쿼리, ORM 및 SQL 쿼리 빌더 비교와 코드 예제\n\n대부분의 데이터 엔지니어링 스크립트는 어떤 식으로든 데이터베이스에 연결하는 작업을 수반합니다. 우리는 종종 데이터를 검색하고, 해당 데이터에 작업을 수행한 후 다시 데이터벤에로로드해야합니다. 다행히도, 현대 프로그래밍 언어는 이러한 워크플로우를 실행할 수 있는 여러 가지 방법을 제공합니다.\n\n가장 간단한 접근 방법은 SQL 쿼리를 사용하는 것인데, 이는 텍스트로 작성되고 이를 통해 데이터베이스와 통신합니다. 파이썬은 이러한 목적으로 Database API라는 형식의 표준을 제공합니다. 그러나 이 방법은 크고 복잡한 프로그램에 대해 복잡해질 수 있습니다.\n\n따라서 ORM (객체 관계 매핑) 및 SQL 쿼리 빌더와 같은 다른 옵션이 있습니다. 이 둘은 각각의 장단점을 가지고 있습니다. 이 세 가지 표준을 모두 탐구해 보기 위해 여기에 들어가 봅시다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-Python3WaystoWorkwithDatabasesSQLORMQueryBuilder_0.png\" />\n\n내 GitHub에서 모든 코드를 확인할 수 있습니다. 또한 제 다른 기사 예시도 찾아볼 수 있어요. 자유롭게 사용하시고 질문이 있으면 언제든지 물어봐주세요.\n\n## 사전 준비 작업\n\n다양한 방법을 논의하기 전에 PostgreSQL 데이터베이스에 테이블을 생성해야 합니다. 이전에 SQL 문의 순서에 대해 썼던 이전 기사 중 하나에서 동일한 데이터를 사용했습니다. 생성 문은 그곳에서 찾을 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n이 모든 방법을 비교하기 위해 동일한 SELECT 문을 사용할 것입니다. 이 SELECT 문은 모든 중요한 작업을 포함하고 있습니다. 집계 및 필터링 (GROUP BY, WHERE 및 HAVING) 같은 작업입니다.\n\n```js\nSELECT\n c.country\n ,c.year\n ,MAX(e.horse_power) AS max_horse_power\nFROM public.cars c\nJOIN public.engines e\n ON c.engine_name = e.name\nWHERE c.country != 'USA'\nGROUP BY\n c.country\n ,c.year\nHAVING MAX(e.horse_power) > 200\nORDER BY max_horse_power DESC\n```\n\n![이미지](/assets/img/2024-06-19-Python3WaystoWorkwithDatabasesSQLORMQueryBuilder_1.png)\n\n## Raw SQL\n\n<div class=\"content-ad\"></div>\n\n장점: 사용하기 쉽고 SQL 언어의 모든 기능을 활용할 수 있습니다.\n\n단점: SQL 방언에 따라 다르며, 대규모 애플리케이션에서 확장성과 가독성에 문제가 있을 수 있습니다.\n\n가장 쉬운 옵션부터 시작해 보죠. 데이터베이스와 통신하기 위해 쿼리를 사용하는 것입니다. 이를 위해 psycopg2 (또는 다른 데이터베이스)와 같은 라이브러리를 사용할 때의 표준 규칙을 따른 스크립트를 만들었습니다.\n\n```js\nimport psycopg2\nfrom pathlib import Path\n\nconn = psycopg2.connect()\ncur = conn.cursor()\n\nsql = Path('python-sql/sql/max_horsepower.sql').read_text()\n\ncur.execute(sql)\nres = cur.fetchall()\nprint(res)\n\ncur.close()\nconn.close()\n\n# [('Germany', 2019, 612), ('UK', 2019, 612), ('Germany', 2021, 510), ('Germany', 2023, 469)]\n```\n\n<div class=\"content-ad\"></div>\n\n위 내용을 보면 코드에서 SQL 문을 구현하는 것이 간단하며, 데이터베이스 쪽에서 하는 것처럼 사용할 수 있습니다. 그러나 대규모 애플리케이션을 작업할 때 여러 SQL 스크립트를 처리하는 것은 복잡할 수 있습니다. 다시 말해, 확장 가능하고 가독성이 좋은 코드를 개발하는 가장 최적의 방법은 아닐 수 있습니다.\n\n## ORM (객체 관계 매핑)\n\n장점: 가독성이 높다. 텍스트 SQL 쿼리가 없으므로 보안이 강화된다. 쉽게 확장하여 새로운 기능을 추가할 수 있다. 모든 언어에 적합하다.\n\n단점: 추가적인 학습이 필요하며 구현하는 데 더 많은 노력이 필요하다. 기능이 제한될 수 있으며, 서로 다른 ORM은 다른 사용 방법을 가질 수 있다. 엄격한 스키마를 가질 수 있다.\n\n<div class=\"content-ad\"></div>\n\nORM (Object-Relational Mapping)은 시간이 흐름에 따라 많은 애플리케이션에서 널리 사용되는 기술입니다. 이는 클래스와 객체를 사용하여 테이블을 나타내며, 이러한 클래스를 사용하여 레코드를 다룰 수 있습니다. 본질적으로, 이는 데이터베이스 테이블을 Python 클래스로 변환한 다음 이 언어에서 사용하는 것을 의미합니다.\n\nPython에서 ORM에 대한 가장 인기 있는 프레임워크는 SQLAlchemy입니다. 그러나 Django를 개발할 때도 같은 개념을 만날 수 있으므로 더 효율적으로 작업하기 위해 이를 탐구하고 공부해보는 것이 좋습니다. 코드가 더 길고 복잡해 보일 수 있지만, 보다 유연한 클래스를 사용하여 Python으로 완전히 작성되었다는 점을 주목해주세요. ORM 객체를 사용하여 쿼리를 수행하는 방법에도 주의를 기울여야 합니다. 이는 각각의 명령문(join 및 group_by와 같은)에 대한 메서드를 사용하는 것을 보여줍니다.\n\n```python\nfrom dotenv import load_dotenv\nimport os\n\nfrom sqlalchemy import URL, create_engine, func, select\nfrom sqlalchemy.orm import declarative_base, sessionmaker\nfrom sqlalchemy import Column, Integer, String\n\nBase = declarative_base()\n\nclass Cars(Base):\n    __tablename__ = \"cars\"\n    \n    manufacturer = Column(String(64))\n    model = Column(String(64))\n    country = Column(String(64))\n    engine_name = Column(String(64), primary_key=True, nullable=False)\n    year = Column(Integer)\n    \nclass Engines(Base):\n    __tablename__ = \"engines\"\n    \n    name = Column(String(64), primary_key=True, nullable=False)\n    horse_power = Column(Integer)\n\ndef main():\n    \n    load_dotenv()\n    \n    connection_string = URL.create(\n        'postgresql',\n        username=os.getenv('USERNAME'),\n        password=os.getenv('PASSWORD'),\n        host=os.getenv('HOST'),\n        database=os.getenv('DB'),\n        #connect_args={'sslmode':'require'}\n        )\n    \n    engine = create_engine(connection_string)\n    Session = sessionmaker(bind=engine)\n    session = Session()\n    \n    sql = (\n        select(\n            Cars.country,\n            Cars.year,\n            func.max(Engines.horse_power).label(\"max_horse_power\"),\n        )\n        .join(Engines, Cars.engine_name == Engines.name)\n        .where(Cars.country != 'USA')\n        .group_by(Cars.country, Cars.year)\n        .having(func.max(Engines.horse_power) > 200)\n        .order_by(func.max(Engines.horse_power).label(\"max_horse_power\").desc())\n    )\n    \n    for i in session.execute(sql):\n        print(i)\n    \nif __name__ == '__main__':\n    main()\n\n#('Germany', 2019, 612)\n#('UK', 2019, 612)\n#('Germany', 2021, 510)\n#('Germany', 2023, 469)\n```\n\n여기에는 SELECT 쿼리만을 위한 예제가 있지만, SQLAlchemy는 모든 중요한 작업 (INSERT, UPDATE, DELETE 및 기타 작업)을 위한 기능을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n## SQL 쿼리 빌더\n\n장점: 각 테이블에 대한 클래스(모델)를 결정하지 않고도 Python 코드만 사용하여 구현이 쉬우며 가독성 및 기타 장점을 유지할 수 있음\n\n단점: 각 라이브러리마다 특정 구문을 사용해야 하며, 일부 SQL 기능이 아직 누락될 수 있음\n\nPython에서 쿼리 빌더를 사용하는 것은 원시 문장과 ORM 사이의 중간 옵션이다. 각 테이블의 스키마를 정의할 필요가 없고 테이블 이름만 사용하면 된다.\n\n<div class=\"content-ad\"></div>\n\n쿼리 빌더에는 준수해야 하는 특정 구문이 있습니다. 이 구문의 목적은 Python 코드를 SQL 문으로 변환하여 데이터베이스로 전송하는 것입니다. 아래 예제에서는 이를 위해 pypika 라이브러리를 사용하고 있습니다. 또한 psycopg2를 통해 간단한 데이터베이스 통신을 수행합니다.\n\n```python\nfrom pypika import Query, Table, functions, Order\nimport psycopg2\n\nconn = psycopg2.connect()\ncur = conn.cursor()\n\ncars = Table(\"cars\")\nengines = Table(\"engines\")\n\nquery = (\n    Query.from_(cars)\n    .join(engines)\n    .on(cars.engine_name == engines.name)\n    .where(cars.country != \"USA\")\n    .groupby(cars.country, cars.year)\n    .having(functions.Max(engines.horse_power) > 200)\n    .orderby(functions.Max(engines.horse_power), order=Order.desc)\n    .select(\n        cars.country,\n        cars.year,\n        functions.Max(engines.horse_power).as_(\"max_horse_power\")\n    )\n)\nsql = query.get_sql()\n\ncur.execute(sql)\nres = cur.fetchall()\nprint(res)\n\ncur.close()\nconn.close()\n\n# [('Germany', 2019, 612), ('UK', 2019, 612), ('Germany', 2021, 510), ('Germany', 2023, 469)]\n```\n\n흥미로운 점은 모든 작업을 실제로 SQL 측에서 실행되는 순서대로 작성한다는 것입니다. 위에서 언급한 대로, 이 순서를 설명한 이전 게시물을 방문할 수 있습니다.\n\n## 결론\n\n<div class=\"content-ad\"></div>\n\n이 기사에서는 파이썬에서 데이터베이스와 상호 작용하는 세 가지 주요 방법에 대해 논의했습니다. 각각에는 장단점이 있습니다. 그러나 사용할 방법을 선택하는 것은 대부분 귀하의 구체적인 사용 사례에 달려 있습니다.\n\n- SQL 쿼리의 구문에 익숙하고 빠르고 간단한 해결책을 찾는 경우, 원시 SQL 쿼리를 사용하는 것이 최선일 수 있습니다. 또한 복잡한 쿼리를 실행해야 하는 경우 이 접근 방식이 유일한 선택일 수도 있습니다.\n- 반면에, 보안 요구 사항이 있는 대규모 복잡한 애플리케이션을 개발해야 하는 경우 ORM을 사용하는 것이 가장 적합할 것입니다.\n- 보안이 필요한 작은 애플리케이션을 개발하고자 하는 경우 쿼리 빌더를 사용하는 것이 좋은 선택일 수 있습니다. 쿼리 빌더는 모델을 만들 필요 없이 ORM의 대부분의 장점을 제공합니다.\n\n이 기사를 읽고 나서 다양한 접근 방식에 대해 더 잘 이해하고 차후 프로젝트에 최적의 방법을 선택할 수 있기를 바랍니다.\n\nLinkedIn에서 저를 만날 수 있으며, 데이터 과학과 데이터 엔지니어링의 복잡한 세계에 대해 함께 논의하고 싶습니다. 연결하기를 기다리고 있습니다. 함께 흥미로운 대화를 나눠봅시다.\n\n<div class=\"content-ad\"></div>\n\n# 스택데믹\n\n끝까지 읽어 주셔서 감사합니다. 떠나시기 전에:\n\n- 작가를 박수로 격려하고 팔로우해 주세요! 👏\n- 저희를 팔로우해 주세요: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼도 방문해 주세요: In Plain English | CoFeed | Venture","ogImage":{"url":"/assets/img/2024-06-19-Python3WaystoWorkwithDatabasesSQLORMQueryBuilder_0.png"},"coverImage":"/assets/img/2024-06-19-Python3WaystoWorkwithDatabasesSQLORMQueryBuilder_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>원시 SQL 쿼리, ORM 및 SQL 쿼리 빌더 비교와 코드 예제</h2>\n<p>대부분의 데이터 엔지니어링 스크립트는 어떤 식으로든 데이터베이스에 연결하는 작업을 수반합니다. 우리는 종종 데이터를 검색하고, 해당 데이터에 작업을 수행한 후 다시 데이터벤에로로드해야합니다. 다행히도, 현대 프로그래밍 언어는 이러한 워크플로우를 실행할 수 있는 여러 가지 방법을 제공합니다.</p>\n<p>가장 간단한 접근 방법은 SQL 쿼리를 사용하는 것인데, 이는 텍스트로 작성되고 이를 통해 데이터베이스와 통신합니다. 파이썬은 이러한 목적으로 Database API라는 형식의 표준을 제공합니다. 그러나 이 방법은 크고 복잡한 프로그램에 대해 복잡해질 수 있습니다.</p>\n<p>따라서 ORM (객체 관계 매핑) 및 SQL 쿼리 빌더와 같은 다른 옵션이 있습니다. 이 둘은 각각의 장단점을 가지고 있습니다. 이 세 가지 표준을 모두 탐구해 보기 위해 여기에 들어가 봅시다.</p>\n<p>내 GitHub에서 모든 코드를 확인할 수 있습니다. 또한 제 다른 기사 예시도 찾아볼 수 있어요. 자유롭게 사용하시고 질문이 있으면 언제든지 물어봐주세요.</p>\n<h2>사전 준비 작업</h2>\n<p>다양한 방법을 논의하기 전에 PostgreSQL 데이터베이스에 테이블을 생성해야 합니다. 이전에 SQL 문의 순서에 대해 썼던 이전 기사 중 하나에서 동일한 데이터를 사용했습니다. 생성 문은 그곳에서 찾을 수 있어요.</p>\n<p>이 모든 방법을 비교하기 위해 동일한 SELECT 문을 사용할 것입니다. 이 SELECT 문은 모든 중요한 작업을 포함하고 있습니다. 집계 및 필터링 (GROUP BY, WHERE 및 HAVING) 같은 작업입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">SELECT</span>\n c.<span class=\"hljs-property\">country</span>\n ,c.<span class=\"hljs-property\">year</span>\n ,<span class=\"hljs-title function_\">MAX</span>(e.<span class=\"hljs-property\">horse_power</span>) <span class=\"hljs-variable constant_\">AS</span> max_horse_power\n<span class=\"hljs-variable constant_\">FROM</span> public.<span class=\"hljs-property\">cars</span> c\n<span class=\"hljs-variable constant_\">JOIN</span> public.<span class=\"hljs-property\">engines</span> e\n <span class=\"hljs-variable constant_\">ON</span> c.<span class=\"hljs-property\">engine_name</span> = e.<span class=\"hljs-property\">name</span>\n<span class=\"hljs-variable constant_\">WHERE</span> c.<span class=\"hljs-property\">country</span> != <span class=\"hljs-string\">'USA'</span>\n<span class=\"hljs-variable constant_\">GROUP</span> <span class=\"hljs-variable constant_\">BY</span>\n c.<span class=\"hljs-property\">country</span>\n ,c.<span class=\"hljs-property\">year</span>\n<span class=\"hljs-variable constant_\">HAVING</span> <span class=\"hljs-title function_\">MAX</span>(e.<span class=\"hljs-property\">horse_power</span>) > <span class=\"hljs-number\">200</span>\n<span class=\"hljs-variable constant_\">ORDER</span> <span class=\"hljs-variable constant_\">BY</span> max_horse_power <span class=\"hljs-variable constant_\">DESC</span>\n</code></pre>\n<p><img src=\"/assets/img/2024-06-19-Python3WaystoWorkwithDatabasesSQLORMQueryBuilder_1.png\" alt=\"이미지\"></p>\n<h2>Raw SQL</h2>\n<p>장점: 사용하기 쉽고 SQL 언어의 모든 기능을 활용할 수 있습니다.</p>\n<p>단점: SQL 방언에 따라 다르며, 대규모 애플리케이션에서 확장성과 가독성에 문제가 있을 수 있습니다.</p>\n<p>가장 쉬운 옵션부터 시작해 보죠. 데이터베이스와 통신하기 위해 쿼리를 사용하는 것입니다. 이를 위해 psycopg2 (또는 다른 데이터베이스)와 같은 라이브러리를 사용할 때의 표준 규칙을 따른 스크립트를 만들었습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> psycopg2\n<span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Path</span>\n\nconn = psycopg2.<span class=\"hljs-title function_\">connect</span>()\ncur = conn.<span class=\"hljs-title function_\">cursor</span>()\n\nsql = <span class=\"hljs-title class_\">Path</span>(<span class=\"hljs-string\">'python-sql/sql/max_horsepower.sql'</span>).<span class=\"hljs-title function_\">read_text</span>()\n\ncur.<span class=\"hljs-title function_\">execute</span>(sql)\nres = cur.<span class=\"hljs-title function_\">fetchall</span>()\n<span class=\"hljs-title function_\">print</span>(res)\n\ncur.<span class=\"hljs-title function_\">close</span>()\nconn.<span class=\"hljs-title function_\">close</span>()\n\n# [(<span class=\"hljs-string\">'Germany'</span>, <span class=\"hljs-number\">2019</span>, <span class=\"hljs-number\">612</span>), (<span class=\"hljs-string\">'UK'</span>, <span class=\"hljs-number\">2019</span>, <span class=\"hljs-number\">612</span>), (<span class=\"hljs-string\">'Germany'</span>, <span class=\"hljs-number\">2021</span>, <span class=\"hljs-number\">510</span>), (<span class=\"hljs-string\">'Germany'</span>, <span class=\"hljs-number\">2023</span>, <span class=\"hljs-number\">469</span>)]\n</code></pre>\n<p>위 내용을 보면 코드에서 SQL 문을 구현하는 것이 간단하며, 데이터베이스 쪽에서 하는 것처럼 사용할 수 있습니다. 그러나 대규모 애플리케이션을 작업할 때 여러 SQL 스크립트를 처리하는 것은 복잡할 수 있습니다. 다시 말해, 확장 가능하고 가독성이 좋은 코드를 개발하는 가장 최적의 방법은 아닐 수 있습니다.</p>\n<h2>ORM (객체 관계 매핑)</h2>\n<p>장점: 가독성이 높다. 텍스트 SQL 쿼리가 없으므로 보안이 강화된다. 쉽게 확장하여 새로운 기능을 추가할 수 있다. 모든 언어에 적합하다.</p>\n<p>단점: 추가적인 학습이 필요하며 구현하는 데 더 많은 노력이 필요하다. 기능이 제한될 수 있으며, 서로 다른 ORM은 다른 사용 방법을 가질 수 있다. 엄격한 스키마를 가질 수 있다.</p>\n<p>ORM (Object-Relational Mapping)은 시간이 흐름에 따라 많은 애플리케이션에서 널리 사용되는 기술입니다. 이는 클래스와 객체를 사용하여 테이블을 나타내며, 이러한 클래스를 사용하여 레코드를 다룰 수 있습니다. 본질적으로, 이는 데이터베이스 테이블을 Python 클래스로 변환한 다음 이 언어에서 사용하는 것을 의미합니다.</p>\n<p>Python에서 ORM에 대한 가장 인기 있는 프레임워크는 SQLAlchemy입니다. 그러나 Django를 개발할 때도 같은 개념을 만날 수 있으므로 더 효율적으로 작업하기 위해 이를 탐구하고 공부해보는 것이 좋습니다. 코드가 더 길고 복잡해 보일 수 있지만, 보다 유연한 클래스를 사용하여 Python으로 완전히 작성되었다는 점을 주목해주세요. ORM 객체를 사용하여 쿼리를 수행하는 방법에도 주의를 기울여야 합니다. 이는 각각의 명령문(join 및 group_by와 같은)에 대한 메서드를 사용하는 것을 보여줍니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> dotenv <span class=\"hljs-keyword\">import</span> load_dotenv\n<span class=\"hljs-keyword\">import</span> os\n\n<span class=\"hljs-keyword\">from</span> sqlalchemy <span class=\"hljs-keyword\">import</span> URL, create_engine, func, select\n<span class=\"hljs-keyword\">from</span> sqlalchemy.orm <span class=\"hljs-keyword\">import</span> declarative_base, sessionmaker\n<span class=\"hljs-keyword\">from</span> sqlalchemy <span class=\"hljs-keyword\">import</span> Column, Integer, String\n\nBase = declarative_base()\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cars</span>(<span class=\"hljs-title class_ inherited__\">Base</span>):\n    __tablename__ = <span class=\"hljs-string\">\"cars\"</span>\n    \n    manufacturer = Column(String(<span class=\"hljs-number\">64</span>))\n    model = Column(String(<span class=\"hljs-number\">64</span>))\n    country = Column(String(<span class=\"hljs-number\">64</span>))\n    engine_name = Column(String(<span class=\"hljs-number\">64</span>), primary_key=<span class=\"hljs-literal\">True</span>, nullable=<span class=\"hljs-literal\">False</span>)\n    year = Column(Integer)\n    \n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Engines</span>(<span class=\"hljs-title class_ inherited__\">Base</span>):\n    __tablename__ = <span class=\"hljs-string\">\"engines\"</span>\n    \n    name = Column(String(<span class=\"hljs-number\">64</span>), primary_key=<span class=\"hljs-literal\">True</span>, nullable=<span class=\"hljs-literal\">False</span>)\n    horse_power = Column(Integer)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    \n    load_dotenv()\n    \n    connection_string = URL.create(\n        <span class=\"hljs-string\">'postgresql'</span>,\n        username=os.getenv(<span class=\"hljs-string\">'USERNAME'</span>),\n        password=os.getenv(<span class=\"hljs-string\">'PASSWORD'</span>),\n        host=os.getenv(<span class=\"hljs-string\">'HOST'</span>),\n        database=os.getenv(<span class=\"hljs-string\">'DB'</span>),\n        <span class=\"hljs-comment\">#connect_args={'sslmode':'require'}</span>\n        )\n    \n    engine = create_engine(connection_string)\n    Session = sessionmaker(bind=engine)\n    session = Session()\n    \n    sql = (\n        select(\n            Cars.country,\n            Cars.year,\n            func.<span class=\"hljs-built_in\">max</span>(Engines.horse_power).label(<span class=\"hljs-string\">\"max_horse_power\"</span>),\n        )\n        .join(Engines, Cars.engine_name == Engines.name)\n        .where(Cars.country != <span class=\"hljs-string\">'USA'</span>)\n        .group_by(Cars.country, Cars.year)\n        .having(func.<span class=\"hljs-built_in\">max</span>(Engines.horse_power) > <span class=\"hljs-number\">200</span>)\n        .order_by(func.<span class=\"hljs-built_in\">max</span>(Engines.horse_power).label(<span class=\"hljs-string\">\"max_horse_power\"</span>).desc())\n    )\n    \n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> session.execute(sql):\n        <span class=\"hljs-built_in\">print</span>(i)\n    \n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    main()\n\n<span class=\"hljs-comment\">#('Germany', 2019, 612)</span>\n<span class=\"hljs-comment\">#('UK', 2019, 612)</span>\n<span class=\"hljs-comment\">#('Germany', 2021, 510)</span>\n<span class=\"hljs-comment\">#('Germany', 2023, 469)</span>\n</code></pre>\n<p>여기에는 SELECT 쿼리만을 위한 예제가 있지만, SQLAlchemy는 모든 중요한 작업 (INSERT, UPDATE, DELETE 및 기타 작업)을 위한 기능을 제공합니다.</p>\n<h2>SQL 쿼리 빌더</h2>\n<p>장점: 각 테이블에 대한 클래스(모델)를 결정하지 않고도 Python 코드만 사용하여 구현이 쉬우며 가독성 및 기타 장점을 유지할 수 있음</p>\n<p>단점: 각 라이브러리마다 특정 구문을 사용해야 하며, 일부 SQL 기능이 아직 누락될 수 있음</p>\n<p>Python에서 쿼리 빌더를 사용하는 것은 원시 문장과 ORM 사이의 중간 옵션이다. 각 테이블의 스키마를 정의할 필요가 없고 테이블 이름만 사용하면 된다.</p>\n<p>쿼리 빌더에는 준수해야 하는 특정 구문이 있습니다. 이 구문의 목적은 Python 코드를 SQL 문으로 변환하여 데이터베이스로 전송하는 것입니다. 아래 예제에서는 이를 위해 pypika 라이브러리를 사용하고 있습니다. 또한 psycopg2를 통해 간단한 데이터베이스 통신을 수행합니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> pypika <span class=\"hljs-keyword\">import</span> Query, Table, functions, Order\n<span class=\"hljs-keyword\">import</span> psycopg2\n\nconn = psycopg2.connect()\ncur = conn.cursor()\n\ncars = Table(<span class=\"hljs-string\">\"cars\"</span>)\nengines = Table(<span class=\"hljs-string\">\"engines\"</span>)\n\nquery = (\n    Query.from_(cars)\n    .join(engines)\n    .on(cars.engine_name == engines.name)\n    .where(cars.country != <span class=\"hljs-string\">\"USA\"</span>)\n    .groupby(cars.country, cars.year)\n    .having(functions.Max(engines.horse_power) > <span class=\"hljs-number\">200</span>)\n    .orderby(functions.Max(engines.horse_power), order=Order.desc)\n    .select(\n        cars.country,\n        cars.year,\n        functions.Max(engines.horse_power).as_(<span class=\"hljs-string\">\"max_horse_power\"</span>)\n    )\n)\nsql = query.get_sql()\n\ncur.execute(sql)\nres = cur.fetchall()\n<span class=\"hljs-built_in\">print</span>(res)\n\ncur.close()\nconn.close()\n\n<span class=\"hljs-comment\"># [('Germany', 2019, 612), ('UK', 2019, 612), ('Germany', 2021, 510), ('Germany', 2023, 469)]</span>\n</code></pre>\n<p>흥미로운 점은 모든 작업을 실제로 SQL 측에서 실행되는 순서대로 작성한다는 것입니다. 위에서 언급한 대로, 이 순서를 설명한 이전 게시물을 방문할 수 있습니다.</p>\n<h2>결론</h2>\n<p>이 기사에서는 파이썬에서 데이터베이스와 상호 작용하는 세 가지 주요 방법에 대해 논의했습니다. 각각에는 장단점이 있습니다. 그러나 사용할 방법을 선택하는 것은 대부분 귀하의 구체적인 사용 사례에 달려 있습니다.</p>\n<ul>\n<li>SQL 쿼리의 구문에 익숙하고 빠르고 간단한 해결책을 찾는 경우, 원시 SQL 쿼리를 사용하는 것이 최선일 수 있습니다. 또한 복잡한 쿼리를 실행해야 하는 경우 이 접근 방식이 유일한 선택일 수도 있습니다.</li>\n<li>반면에, 보안 요구 사항이 있는 대규모 복잡한 애플리케이션을 개발해야 하는 경우 ORM을 사용하는 것이 가장 적합할 것입니다.</li>\n<li>보안이 필요한 작은 애플리케이션을 개발하고자 하는 경우 쿼리 빌더를 사용하는 것이 좋은 선택일 수 있습니다. 쿼리 빌더는 모델을 만들 필요 없이 ORM의 대부분의 장점을 제공합니다.</li>\n</ul>\n<p>이 기사를 읽고 나서 다양한 접근 방식에 대해 더 잘 이해하고 차후 프로젝트에 최적의 방법을 선택할 수 있기를 바랍니다.</p>\n<p>LinkedIn에서 저를 만날 수 있으며, 데이터 과학과 데이터 엔지니어링의 복잡한 세계에 대해 함께 논의하고 싶습니다. 연결하기를 기다리고 있습니다. 함께 흥미로운 대화를 나눠봅시다.</p>\n<h1>스택데믹</h1>\n<p>끝까지 읽어 주셔서 감사합니다. 떠나시기 전에:</p>\n<ul>\n<li>작가를 박수로 격려하고 팔로우해 주세요! 👏</li>\n<li>저희를 팔로우해 주세요: X | LinkedIn | YouTube | Discord</li>\n<li>다른 플랫폼도 방문해 주세요: In Plain English | CoFeed | Venture</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}