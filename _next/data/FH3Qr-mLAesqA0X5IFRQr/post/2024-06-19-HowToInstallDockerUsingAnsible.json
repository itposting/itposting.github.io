{"pageProps":{"post":{"title":"안녕하세요 Ansible을 사용하여 Docker 설치하는 방법에 관해 안내해 드리겠습니다 함께 시작해 보도록 하죠","description":"","date":"2024-06-19 18:18","slug":"2024-06-19-HowToInstallDockerUsingAnsible","content":"\n\n<img src=\"/assets/img/2024-06-19-HowToInstallDockerUsingAnsible_0.png\" />\n\n이 게시물에서는 macOS에 Ansible을 설치하고 Docker를 설치하는 방법을 살펴볼 것입니다. Ansible은 서버 및 응용 프로그램 구성을 조직화하고 반복 가능한 방식으로 관리할 수 있는 강력한 자동화 도구입니다.\n\n단계 1: macOS에 Ansible 설치하기\nmacOS에 Ansible을 설치하는 가장 간단한 방법은 macOS의 패키지 관리자 인 Homebrew를 사용하는 것입니다. 터미널을 열고 다음 명령어를 입력하세요:\n\n```js\nbrew install ansible\n\n# 또는 도커 이미지를 사용하여 플레이북 실행하기, 예시:\ndocker run --rm -it -v $PWD:/app -v ~/.ssh/id_rsa:/root/.ssh/id_rsa alpinelinux/ansible ansible-playbook -i app/inventory.ini app/playbooks/docker.yml\n```\n\n<div class=\"content-ad\"></div>\n\n### 단계 2: Ansible 구성\nAnsible 작업을 실행하려는 기계의 IP 주소를 포함하는 inventory.ini 파일을 준비하십시오. 파일의 샘플 내용은 다음과 같습니다:\n\n\n[all]\n# 이 경우, node1은 192.168.18.131 IP 주소를 가진 호스트명이며 garis는 sudo 사용자입니다.\nnode1 ansible_host=192.168.18.131 ansible_user=garis ansible_ssh_common_args='-o StrictHostKeyChecking=no'\n\n\n### 단계 3: Docker 설치용 Ansible 플레이북 생성\n다음으로, playbooks라는 디렉토리 아래 docker.yml이라는 플레이북을 생성하십시오. 이 플레이북에는 원격 Ubuntu 서버에 Docker를 설치하는 데 필요한 모든 작업이 포함되어 있습니다. 플레이북은 다음과 같습니다:\n\n\n---\n- name: Ubuntu에 Docker 설치\n  hosts: all\n  remote_user: garis  # 원격 사용자를 sudo 사용자로 변경하세요!\n  become: true\n  vars:\n    arch_mapping:  # Ansible 아키텍처 { ansible_architecture } 이름을 Docker 아키텍처 이름으로 매핑\n      x86_64: amd64\n      aarch64: arm64\n\n  tasks:\n    - name: 모든 패키지를 최신 버전으로 업데이트 및 업그레이드\n      ansible.builtin.apt:\n        update_cache: true\n        upgrade: dist\n        cache_valid_time: 3600\n\n    - name: 필요한 패키지 설치\n      ansible.builtin.apt:\n        pkg:\n          - apt-transport-https\n          - ca-certificates\n          - curl\n          - gnupg\n          - software-properties-common\n\n    - name: Docker의 GPG 키를 생성하기 위한 디렉터리 생성\n      ansible.builtin.file:\n        path: /etc/apt/keyrings\n        state: directory\n        mode: '0755'\n\n    - name: Docker의 공식 GPG 키 추가\n      ansible.builtin.apt_key:\n        url: https://download.docker.com/linux/ubuntu/gpg\n        keyring: /etc/apt/keyrings/docker.gpg\n        state: present\n\n    - name: 아키텍처 변수 출력\n      ansible.builtin.debug:\n        msg: \"아키텍처: { ansible_architecture }, Codename: { ansible_lsb.codename }\"\n\n    - name: Docker 저장소 추가\n      ansible.builtin.apt_repository:\n        repo: >-\n          deb [arch={ arch_mapping[ansible_architecture] | default(ansible_architecture) }\n          signed-by=/etc/apt/keyrings/docker.gpg]\n          https://download.docker.com/linux/ubuntu { ansible_lsb.codename } stable\n        filename: docker\n        state: present\n\n    - name: Docker 및 관련 패키지 설치\n      ansible.builtin.apt:\n        name: \"{ item }\"\n        state: present\n        update_cache: true\n      loop:\n        - docker-ce\n        - docker-ce-cli\n        - containerd.io\n        - docker-buildx-plugin\n        - docker-compose-plugin\n\n    - name: Docker 그룹 추가\n      ansible.builtin.group:\n        name: docker\n        state: present\n\n    - name: 사용자를 Docker 그룹에 추가\n      ansible.builtin.user:\n        name: \"{ ansible_user }\"\n        groups: docker\n        append: true\n\n    - name: Docker 서비스 활성화 및 시작\n      ansible.builtin.systemd:\n        name: \"{ item }\"\n        enabled: true\n        state: started\n      loop:\n        - docker.service\n        - containerd.service\n\n\n<div class=\"content-ad\"></div>\n\n이 플레이북에는 패키지 업데이트, 필요한 종속성 설치, Docker의 GPG 키 추가, Docker 저장소 설정, Docker 및 관련 패키지 설치, Docker 그룹 추가, Docker 서비스가 활성화되고 실행되도록 하는 등 다양한 작업이 포함되어 있습니다.\n\n단계 4: 플레이북 실행\n마지막으로 다음 명령을 사용하여 플레이북을 실행할 수 있습니다:\n\n```js\nansible-playbook -i inventory.ini playbooks/docker.yml\n\n# 또는 도커 사용\ndocker run --rm -it -v $PWD:/app -v ~/.ssh/id_rsa:/root/.ssh/id_rsa alpinelinux/ansible ansible-playbook -i app/inventory.ini app/playbooks/docker.yml\n```\n\n이 명령은 inventory.ini 파일에서 지정된 호스트에 플레이북을 실행하여 Docker를 설치합니다.\n\n<div class=\"content-ad\"></div>\n\n결론\n위 단계를 따라서 macOS 노트북에 Ansible을 성공적으로 설치하고 원격 서버에 Docker 설치를 자동화했습니다. 이는 Ansible이 다양한 시스템 간 작업을 자동화하는 데 얼마나 강력하고 간단한지를 보여줍니다.","ogImage":{"url":"/assets/img/2024-06-19-HowToInstallDockerUsingAnsible_0.png"},"coverImage":"/assets/img/2024-06-19-HowToInstallDockerUsingAnsible_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 게시물에서는 macOS에 Ansible을 설치하고 Docker를 설치하는 방법을 살펴볼 것입니다. Ansible은 서버 및 응용 프로그램 구성을 조직화하고 반복 가능한 방식으로 관리할 수 있는 강력한 자동화 도구입니다.</p>\n<p>단계 1: macOS에 Ansible 설치하기\nmacOS에 Ansible을 설치하는 가장 간단한 방법은 macOS의 패키지 관리자 인 Homebrew를 사용하는 것입니다. 터미널을 열고 다음 명령어를 입력하세요:</p>\n<pre><code class=\"hljs language-js\">brew install ansible\n\n# 또는 도커 이미지를 사용하여 플레이북 실행하기, 예시:\ndocker run --rm -it -v <span class=\"hljs-attr\">$PWD</span>:<span class=\"hljs-regexp\">/app -v ~/</span>.<span class=\"hljs-property\">ssh</span>/<span class=\"hljs-attr\">id_rsa</span>:<span class=\"hljs-regexp\">/root/</span>.<span class=\"hljs-property\">ssh</span>/id_rsa alpinelinux/ansible ansible-playbook -i app/inventory.<span class=\"hljs-property\">ini</span> app/playbooks/docker.<span class=\"hljs-property\">yml</span>\n</code></pre>\n<h3>단계 2: Ansible 구성</h3>\n<p>Ansible 작업을 실행하려는 기계의 IP 주소를 포함하는 inventory.ini 파일을 준비하십시오. 파일의 샘플 내용은 다음과 같습니다:</p>\n<p>[all]</p>\n<h1>이 경우, node1은 192.168.18.131 IP 주소를 가진 호스트명이며 garis는 sudo 사용자입니다.</h1>\n<p>node1 ansible_host=192.168.18.131 ansible_user=garis ansible_ssh_common_args='-o StrictHostKeyChecking=no'</p>\n<h3>단계 3: Docker 설치용 Ansible 플레이북 생성</h3>\n<p>다음으로, playbooks라는 디렉토리 아래 docker.yml이라는 플레이북을 생성하십시오. 이 플레이북에는 원격 Ubuntu 서버에 Docker를 설치하는 데 필요한 모든 작업이 포함되어 있습니다. 플레이북은 다음과 같습니다:</p>\n<hr>\n<ul>\n<li>\n<p>name: Ubuntu에 Docker 설치\nhosts: all\nremote_user: garis  # 원격 사용자를 sudo 사용자로 변경하세요!\nbecome: true\nvars:\narch_mapping:  # Ansible 아키텍처 { ansible_architecture } 이름을 Docker 아키텍처 이름으로 매핑\nx86_64: amd64\naarch64: arm64</p>\n<p>tasks:</p>\n<ul>\n<li>\n<p>name: 모든 패키지를 최신 버전으로 업데이트 및 업그레이드\nansible.builtin.apt:\nupdate_cache: true\nupgrade: dist\ncache_valid_time: 3600</p>\n</li>\n<li>\n<p>name: 필요한 패키지 설치\nansible.builtin.apt:\npkg:\n- apt-transport-https\n- ca-certificates\n- curl\n- gnupg\n- software-properties-common</p>\n</li>\n<li>\n<p>name: Docker의 GPG 키를 생성하기 위한 디렉터리 생성\nansible.builtin.file:\npath: /etc/apt/keyrings\nstate: directory\nmode: '0755'</p>\n</li>\n<li>\n<p>name: Docker의 공식 GPG 키 추가\nansible.builtin.apt_key:\nurl: <a href=\"https://download.docker.com/linux/ubuntu/gpg\" rel=\"nofollow\" target=\"_blank\">https://download.docker.com/linux/ubuntu/gpg</a>\nkeyring: /etc/apt/keyrings/docker.gpg\nstate: present</p>\n</li>\n<li>\n<p>name: 아키텍처 변수 출력\nansible.builtin.debug:\nmsg: \"아키텍처: { ansible_architecture }, Codename: { ansible_lsb.codename }\"</p>\n</li>\n<li>\n<p>name: Docker 저장소 추가\nansible.builtin.apt_repository:\nrepo: >-\ndeb [arch={ arch_mapping[ansible_architecture] | default(ansible_architecture) }\nsigned-by=/etc/apt/keyrings/docker.gpg]\n<a href=\"https://download.docker.com/linux/ubuntu\" rel=\"nofollow\" target=\"_blank\">https://download.docker.com/linux/ubuntu</a> { ansible_lsb.codename } stable\nfilename: docker\nstate: present</p>\n</li>\n<li>\n<p>name: Docker 및 관련 패키지 설치\nansible.builtin.apt:\nname: \"{ item }\"\nstate: present\nupdate_cache: true\nloop:</p>\n<ul>\n<li>docker-ce</li>\n<li>docker-ce-cli</li>\n<li>containerd.io</li>\n<li>docker-buildx-plugin</li>\n<li>docker-compose-plugin</li>\n</ul>\n</li>\n<li>\n<p>name: Docker 그룹 추가\nansible.builtin.group:\nname: docker\nstate: present</p>\n</li>\n<li>\n<p>name: 사용자를 Docker 그룹에 추가\nansible.builtin.user:\nname: \"{ ansible_user }\"\ngroups: docker\nappend: true</p>\n</li>\n<li>\n<p>name: Docker 서비스 활성화 및 시작\nansible.builtin.systemd:\nname: \"{ item }\"\nenabled: true\nstate: started\nloop:</p>\n<ul>\n<li>docker.service</li>\n<li>containerd.service</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>이 플레이북에는 패키지 업데이트, 필요한 종속성 설치, Docker의 GPG 키 추가, Docker 저장소 설정, Docker 및 관련 패키지 설치, Docker 그룹 추가, Docker 서비스가 활성화되고 실행되도록 하는 등 다양한 작업이 포함되어 있습니다.</p>\n<p>단계 4: 플레이북 실행\n마지막으로 다음 명령을 사용하여 플레이북을 실행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">ansible-playbook -i inventory.<span class=\"hljs-property\">ini</span> playbooks/docker.<span class=\"hljs-property\">yml</span>\n\n# 또는 도커 사용\ndocker run --rm -it -v <span class=\"hljs-attr\">$PWD</span>:<span class=\"hljs-regexp\">/app -v ~/</span>.<span class=\"hljs-property\">ssh</span>/<span class=\"hljs-attr\">id_rsa</span>:<span class=\"hljs-regexp\">/root/</span>.<span class=\"hljs-property\">ssh</span>/id_rsa alpinelinux/ansible ansible-playbook -i app/inventory.<span class=\"hljs-property\">ini</span> app/playbooks/docker.<span class=\"hljs-property\">yml</span>\n</code></pre>\n<p>이 명령은 inventory.ini 파일에서 지정된 호스트에 플레이북을 실행하여 Docker를 설치합니다.</p>\n<p>결론\n위 단계를 따라서 macOS 노트북에 Ansible을 성공적으로 설치하고 원격 서버에 Docker 설치를 자동화했습니다. 이는 Ansible이 다양한 시스템 간 작업을 자동화하는 데 얼마나 강력하고 간단한지를 보여줍니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}