{"pageProps":{"post":{"title":"라즈베리 파이에서 도커 스웜 도커 인 도커DinD로 스웜 시뮬레이션하기","description":"","date":"2024-06-20 17:31","slug":"2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD","content":"\n\n![이미지](/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_0.png)\n\n이 프로젝트에서는 Raspberry Pi 4B 4Gb Raspberry Pi OS Lite 64비트 및 도커를 사용하여 놀고 있었어요. 가이드가 아닌 과정 보고서이니 먼저 전체 내용을 읽어보시는 걸 추천해요.\n\n## 1) Raspberry Pi OS Lite 64비트에 도커 설치하기\n\n## 2) 매니저 설정하기\n\n<div class=\"content-ad\"></div>\n\n## 3) 작업자를 배포하세요.\n\n## 4) Docker Swarm을 Docker-in-Docker (DinD)로 시뮬레이션하는 단계\n\n## 1) Raspberry Pi OS Lite 64비트에 Docker 설치하기\n\n```js\nsudo apt-get update && sudo apt-get upgrade -y\nfor pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done\n# 도커의 공식 GPG 키 추가:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n# Apt 소스에 저장소 추가:\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\nsudo docker run hello-world\n```\n\n<div class=\"content-ad\"></div>\n\n## 매니저 설정하기\n\n다음 단계에서는 tmux를 사용하는 것이 좋습니다.\n\n![이미지](/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_1.png)\n\n저는 호스트 머신을 위해 하나의 큰 수평 창을 사용했고, 워커들을 위해 두 개의 수직 창을 사용했어요.\n\n<div class=\"content-ad\"></div>\n\n이 명령어 중 하나를 사용하여 IP를 확인해보세요.\n\n```js\ndocker swarm init --advertise-addr <매니저-IP>\n```\n\n```js\ndocker swarm init --advertise-addr 192.168.99.100\n스웜이 초기화되었습니다: 현재 노드 (dxn1zf6l61qsb1josjja83ngz)가 이제 매니저가 되었습니다.\n```\n\n```js\n이 스웜에 워커를 추가하려면 다음 명령어를 실행하세요:\n    docker swarm join \\\n    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n    192.168.99.100:2377\n매니저를 추가하려면 'docker swarm join-token manager'를 실행하고 안내를 따르세요.\n```\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_2.png)\n\n## 워커들을 배포하세요.\n\n먼저 워커들을 위한 OS 이미지가 필요합니다:\n\n```js\nsudo docker pull alpine\n```\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! 아치를 사용해보려고 했는데 아치64용 빌드가 없었어요.\n\n(참고: 알파인 이미지는 종종 /bin/bash 대신에 /bin/sh를 사용합니다.)\n\n![이미지](/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_3.png)\n\n운영 체제 이미지를 받은 후에 워커들을 배포해야 해요. 여기서 두 가지 상황이 있어요. `sudo docker run alpine`으로 컨테이너를 만드는 경우 랜덤한 이름이 생성되므로, 이름을 얻으려면 `docker ps -a`를 사용하고, 그 후 새 이름으로 변경해야 해요.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nsudo docker rename helloworld.1.6mwtenk3wdxik9kpposg6hd3j Worker1\nsudo docker start Worker1\nsudo docker exec -it Worker1 /bin/sh\n```\n\n두 번째 시나리오에서는 사용자 정의 이름으로 컨테이너를 직접 설정했습니다:\n\n```js\nsudo docker run -itd --name worker2 alpine /bin/sh\nsudo docker exec -it worker2 /bin/sh\n```\n\n이 방법은 VM이나 클러스터를 사용하는 경우에 적합하지만, 제 경우에는 도커 내부에서 도커를 실행해야 합니다:\n\n\n<div class=\"content-ad\"></div>\n\n## 도커 인 디 도커 (DinD)를 사용하여 도커 스웜 시뮬레이션하기\n\n도커 스웜을 설정하려면 워커 노드는 도커 컨테이너가 아닌 물리적 또는 가상 머신이어야 합니다. 도커 스웜은 각 호스트 머신(물리 서버, VM 또는 클라우드 인스턴스)의 도커 데몬이 통신하여 스웜을 형성하는 방식으로 작동합니다. 컨테이너 자체는 도커 데몬을 실행하지 않으며 직접 스웜에 참여할 수 없습니다.\n\n그러나 도커 스웜 환경을 도커 컨테이너를 사용하여 단일 호스트에서 시뮬레이션하려고 합니다. 따라서 도커 인 디 도커 (DinD)를 사용할 것입니다. 이는 도커 컨테이너 내부에서 도커를 실행하는 것을 의미합니다.\n\n```js\n#호스트 머신\nsudo docker pull docker:19.03-dind\ndocker swarm init --advertise-addr Your_IP #만약 이전에 수행했다면 다시 수행할 필요가 없습니다\n\n#워커 추가 토큰을 잊어버린 경우 다음을 사용하세요:\nsudo docker swarm join-token worker\n\n#워커1 창:\nsudo docker run -d --privileged --name worker1 docker:19.03-dind\nsudo docker exec -it worker1 /bin/sh\ndocker swarm join --token YOUR_TOKEN YOUR_IP_PORT\n\n#워커2 창:\nsudo docker run -d --privileged --name worker2 docker:19.03-dind\nsudo docker exec -it worker2 /bin/sh\ndocker swarm join --token YOUR_TOKEN YOUR_IP_PORT\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_4.png\" />\n\n이제 중첩된 도커 컨테이너가 작동 중이지만 몇 번의 시도 끝에 각 워커에 작업을 제대로 배포할 수 없었습니다.\n\n이것은 실험으로써 도커 명령어와 스왐 관리 방법을 배우는 흥미로운 방법이지만, 경험을 통해 굴러간 뒤에는, 하나의 라즈베리파이에 도커를 중첩하는 대신 세 개 이상의 라즈베리파이를 사용하는 것을 권장드립니다. 그러나 DinD는 다른 많은 작업에 유용할 수 있으며 하나의 싱글 보드 컴퓨터에서 도커를 사용하여 여러 개의 운영 체제를 실행할 수 있다는 것은 정말 놀라운 일이죠.\n\n# 참고사항:\n\n<div class=\"content-ad\"></div>\n\n아래는 Alpine 컨테이너에 neofetch를 설치하는 방법입니다. Alpine의 커뮤니티 저장소를 활성화해야 합니다.\n\n```sh\necho \"http://dl-cdn.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories\napk update\napk add neofetch\n```\n\n기존 컨테이너를 중지하고 제거하는 방법은 다음과 같습니다.\n\n```sh\nsudo docker ps -a\nsudo docker stop worker1 worker2\nsudo docker rm worker1 worker2\n```\n\n<div class=\"content-ad\"></div>\n\n가상 머신/머신에 작업자를 배포하는 방법 안내서\n\nhttps://docs.docker.com/engine/swarm/swarm-tutorial/","ogImage":{"url":"/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_0.png"},"coverImage":"/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_0.png\" alt=\"이미지\"></p>\n<p>이 프로젝트에서는 Raspberry Pi 4B 4Gb Raspberry Pi OS Lite 64비트 및 도커를 사용하여 놀고 있었어요. 가이드가 아닌 과정 보고서이니 먼저 전체 내용을 읽어보시는 걸 추천해요.</p>\n<h2>1) Raspberry Pi OS Lite 64비트에 도커 설치하기</h2>\n<h2>2) 매니저 설정하기</h2>\n<h2>3) 작업자를 배포하세요.</h2>\n<h2>4) Docker Swarm을 Docker-in-Docker (DinD)로 시뮬레이션하는 단계</h2>\n<h2>1) Raspberry Pi OS Lite 64비트에 Docker 설치하기</h2>\n<pre><code class=\"hljs language-js\">sudo apt-get update &#x26;&#x26; sudo apt-get upgrade -y\n<span class=\"hljs-keyword\">for</span> pkg <span class=\"hljs-keyword\">in</span> docker.<span class=\"hljs-property\">io</span> docker-doc docker-compose podman-docker containerd runc; <span class=\"hljs-keyword\">do</span> sudo apt-get remove $pkg; done\n# 도커의 공식 <span class=\"hljs-variable constant_\">GPG</span> 키 추가:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m <span class=\"hljs-number\">0755</span> -d /etc/apt/keyrings\nsudo curl -fsSL <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc</span>\nsudo chmod a+r /etc/apt/keyrings/docker.<span class=\"hljs-property\">asc</span>\n# <span class=\"hljs-title class_\">Apt</span> 소스에 저장소 추가:\necho <span class=\"hljs-string\">\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release &#x26;&#x26; echo \"</span>$VERSION_CODENAME<span class=\"hljs-string\">\") stable\"</span> | sudo tee /etc/apt/sources.<span class=\"hljs-property\">list</span>.<span class=\"hljs-property\">d</span>/docker.<span class=\"hljs-property\">list</span> > <span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-literal\">null</span>\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.<span class=\"hljs-property\">io</span> docker-buildx-plugin docker-compose-plugin\nsudo docker run hello-world\n</code></pre>\n<h2>매니저 설정하기</h2>\n<p>다음 단계에서는 tmux를 사용하는 것이 좋습니다.</p>\n<p><img src=\"/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_1.png\" alt=\"이미지\"></p>\n<p>저는 호스트 머신을 위해 하나의 큰 수평 창을 사용했고, 워커들을 위해 두 개의 수직 창을 사용했어요.</p>\n<p>이 명령어 중 하나를 사용하여 IP를 확인해보세요.</p>\n<pre><code class=\"hljs language-js\">docker swarm init --advertise-addr &#x3C;매니저-<span class=\"hljs-variable constant_\">IP</span>>\n</code></pre>\n<pre><code class=\"hljs language-js\">docker swarm init --advertise-addr <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.99</span><span class=\"hljs-number\">.100</span>\n스웜이 초기화되었습니다: 현재 노드 (dxn1zf6l61qsb1josjja83ngz)가 이제 매니저가 되었습니다.\n</code></pre>\n<pre><code class=\"hljs language-js\">이 스웜에 워커를 추가하려면 다음 명령어를 실행하세요:\n    docker swarm join \\\n    --token <span class=\"hljs-variable constant_\">SWMTKN</span>-<span class=\"hljs-number\">1</span>-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n    <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.99</span><span class=\"hljs-number\">.100</span>:<span class=\"hljs-number\">2377</span>\n매니저를 추가하려면 <span class=\"hljs-string\">'docker swarm join-token manager'</span>를 실행하고 안내를 따르세요.\n</code></pre>\n<p><img src=\"/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_2.png\" alt=\"이미지\"></p>\n<h2>워커들을 배포하세요.</h2>\n<p>먼저 워커들을 위한 OS 이미지가 필요합니다:</p>\n<pre><code class=\"hljs language-js\">sudo docker pull alpine\n</code></pre>\n<p>안녕하세요! 아치를 사용해보려고 했는데 아치64용 빌드가 없었어요.</p>\n<p>(참고: 알파인 이미지는 종종 /bin/bash 대신에 /bin/sh를 사용합니다.)</p>\n<p><img src=\"/assets/img/2024-06-20-DockerSwarminaRaspberryPiSimulatingaSwarmwithDocker-in-DockerDinD_3.png\" alt=\"이미지\"></p>\n<p>운영 체제 이미지를 받은 후에 워커들을 배포해야 해요. 여기서 두 가지 상황이 있어요. <code>sudo docker run alpine</code>으로 컨테이너를 만드는 경우 랜덤한 이름이 생성되므로, 이름을 얻으려면 <code>docker ps -a</code>를 사용하고, 그 후 새 이름으로 변경해야 해요.</p>\n<pre><code class=\"hljs language-js\">sudo docker rename helloworld<span class=\"hljs-number\">.1</span>.6mwtenk3wdxik9kpposg6hd3j <span class=\"hljs-title class_\">Worker1</span>\nsudo docker start <span class=\"hljs-title class_\">Worker1</span>\nsudo docker exec -it <span class=\"hljs-title class_\">Worker1</span> /bin/sh\n</code></pre>\n<p>두 번째 시나리오에서는 사용자 정의 이름으로 컨테이너를 직접 설정했습니다:</p>\n<pre><code class=\"hljs language-js\">sudo docker run -itd --name worker2 alpine /bin/sh\nsudo docker exec -it worker2 /bin/sh\n</code></pre>\n<p>이 방법은 VM이나 클러스터를 사용하는 경우에 적합하지만, 제 경우에는 도커 내부에서 도커를 실행해야 합니다:</p>\n<h2>도커 인 디 도커 (DinD)를 사용하여 도커 스웜 시뮬레이션하기</h2>\n<p>도커 스웜을 설정하려면 워커 노드는 도커 컨테이너가 아닌 물리적 또는 가상 머신이어야 합니다. 도커 스웜은 각 호스트 머신(물리 서버, VM 또는 클라우드 인스턴스)의 도커 데몬이 통신하여 스웜을 형성하는 방식으로 작동합니다. 컨테이너 자체는 도커 데몬을 실행하지 않으며 직접 스웜에 참여할 수 없습니다.</p>\n<p>그러나 도커 스웜 환경을 도커 컨테이너를 사용하여 단일 호스트에서 시뮬레이션하려고 합니다. 따라서 도커 인 디 도커 (DinD)를 사용할 것입니다. 이는 도커 컨테이너 내부에서 도커를 실행하는 것을 의미합니다.</p>\n<pre><code class=\"hljs language-js\">#호스트 머신\nsudo docker pull <span class=\"hljs-attr\">docker</span>:<span class=\"hljs-number\">19.03</span>-dind\ndocker swarm init --advertise-addr <span class=\"hljs-title class_\">Your</span>_IP #만약 이전에 수행했다면 다시 수행할 필요가 없습니다\n\n#워커 추가 토큰을 잊어버린 경우 다음을 사용하세요:\nsudo docker swarm join-token worker\n\n#워커<span class=\"hljs-number\">1</span> 창:\nsudo docker run -d --privileged --name worker1 <span class=\"hljs-attr\">docker</span>:<span class=\"hljs-number\">19.03</span>-dind\nsudo docker exec -it worker1 /bin/sh\ndocker swarm join --token <span class=\"hljs-variable constant_\">YOUR_TOKEN</span> <span class=\"hljs-variable constant_\">YOUR_IP_PORT</span>\n\n#워커<span class=\"hljs-number\">2</span> 창:\nsudo docker run -d --privileged --name worker2 <span class=\"hljs-attr\">docker</span>:<span class=\"hljs-number\">19.03</span>-dind\nsudo docker exec -it worker2 /bin/sh\ndocker swarm join --token <span class=\"hljs-variable constant_\">YOUR_TOKEN</span> <span class=\"hljs-variable constant_\">YOUR_IP_PORT</span>\n</code></pre>\n<p>이제 중첩된 도커 컨테이너가 작동 중이지만 몇 번의 시도 끝에 각 워커에 작업을 제대로 배포할 수 없었습니다.</p>\n<p>이것은 실험으로써 도커 명령어와 스왐 관리 방법을 배우는 흥미로운 방법이지만, 경험을 통해 굴러간 뒤에는, 하나의 라즈베리파이에 도커를 중첩하는 대신 세 개 이상의 라즈베리파이를 사용하는 것을 권장드립니다. 그러나 DinD는 다른 많은 작업에 유용할 수 있으며 하나의 싱글 보드 컴퓨터에서 도커를 사용하여 여러 개의 운영 체제를 실행할 수 있다는 것은 정말 놀라운 일이죠.</p>\n<h1>참고사항:</h1>\n<p>아래는 Alpine 컨테이너에 neofetch를 설치하는 방법입니다. Alpine의 커뮤니티 저장소를 활성화해야 합니다.</p>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"http://dl-cdn.alpinelinux.org/alpine/edge/community\"</span> >> /etc/apk/repositories\napk update\napk add neofetch\n</code></pre>\n<p>기존 컨테이너를 중지하고 제거하는 방법은 다음과 같습니다.</p>\n<pre><code class=\"hljs language-sh\">sudo docker ps -a\nsudo docker stop worker1 worker2\nsudo docker <span class=\"hljs-built_in\">rm</span> worker1 worker2\n</code></pre>\n<p>가상 머신/머신에 작업자를 배포하는 방법 안내서</p>\n<p><a href=\"https://docs.docker.com/engine/swarm/swarm-tutorial/\" rel=\"nofollow\" target=\"_blank\">https://docs.docker.com/engine/swarm/swarm-tutorial/</a></p>\n</body>\n</html>\n"},"__N_SSG":true}