{"pageProps":{"post":{"title":"화면 녹화 감지 - 안드로이드 15","description":"","date":"2024-06-19 21:34","slug":"2024-06-19-Screenrecordingdetection-Android15","content":"\n\n![이미지](/assets/img/2024-06-19-Screenrecordingdetection-Android15_0.png)\n\n안드로이드 15에는 여러 개인 정보 보호 기능이 제공됩니다. 이 기사에서는 이 중 하나인 화면 녹화 감지에 대해 논의할 것입니다 ⏺\n\n# 모든 것이 예상대로 작동되도록 하는 4단계 절차\n\n# 1️⃣. — install-time 권한을 앱의 AndroidManifest.xml 파일에 추가하기\n\n<div class=\"content-ad\"></div>\n\n```java\n<uses-permission android:name=\"android.permission.DETECT_SCREEN_RECORDING\" />\n```\n\n# 2️⃣. — 스크린 녹화 콜백 정의\n\n```java\nprivate val screenRecordingCallback = { state: Int ->\n    when (state) {\n\n        SCREEN_RECORDING_STATE_VISIBLE -> {\n            // 녹화 중이에요 - 사용자에게 알림\n           \n        }\n\n        else -> {\n            // 녹화 중이 아닙니다\n        }\n    }\n}\n```\n\n# 3️⃣. — 콜백 추가 — WindowManager\n\n\n<div class=\"content-ad\"></div>\n\n- WindowManager.addScreenRecordingCallback()을 사용할 것입니다. 이 함수는 2개의 필수 매개변수를 필요로합니다:\n\n  - Executor,\n  - Consumer<Integer>\n\n```kotlin\n@RequiresApi(35)\noverride fun onStart() {\n    //...\n    val initialState =\n        windowManager.addScreenRecordingCallback(\n            mainExecutor, \n            screenRecordingCallback\n        )\n    \n    Log.d(\"MainActivity\", \"onStart: Initial state: $initialState\")\n    \n    // 초기 상태로 콜백을 트리거합니다\n    screenRecordingCallback.invoke(initialState)\n}\n```\n\n# 4️⃣. — 콜백 제거 — WindowManager\n\n<div class=\"content-ad\"></div>\n\n- 활동이 활성 상태일 때만 콜백을 수신하도록 활동의 onStop 메서드가 호출될 때 콜백을 제거해야 합니다.\n- WindowManager.removeScreenRecordingCallback() 메서드를 사용하여 콜백을 제거합니다. 이 메서드는 단일 비널 매개변수 `Consumer<Integer>`를 사용합니다.\n\n```js\n/** 활동의 화면 녹화 감지 모니터링을 중지합니다 */\n@RequiresApi(35)\noverride fun onStop() {\n    // ...\n    windowManager.removeScreenRecordingCallback(screenRecordingCallback)\n}\n```\n\n## 오늘은 여기까지입니다. 새로운 것을 배워서 좋았으면 좋겠어요\n\n# 연락을 유지해주세요\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-Screenrecordingdetection-Android15_1.png\" />\n\n# 참고 자료","ogImage":{"url":"/assets/img/2024-06-19-Screenrecordingdetection-Android15_0.png"},"coverImage":"/assets/img/2024-06-19-Screenrecordingdetection-Android15_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-Screenrecordingdetection-Android15_0.png\" alt=\"이미지\"></p>\n<p>안드로이드 15에는 여러 개인 정보 보호 기능이 제공됩니다. 이 기사에서는 이 중 하나인 화면 녹화 감지에 대해 논의할 것입니다 ⏺</p>\n<h1>모든 것이 예상대로 작동되도록 하는 4단계 절차</h1>\n<h1>1️⃣. — install-time 권한을 앱의 AndroidManifest.xml 파일에 추가하기</h1>\n<pre><code class=\"hljs language-java\">&#x3C;uses-permission android:name=<span class=\"hljs-string\">\"android.permission.DETECT_SCREEN_RECORDING\"</span> />\n</code></pre>\n<h1>2️⃣. — 스크린 녹화 콜백 정의</h1>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">val</span> <span class=\"hljs-variable\">screenRecordingCallback</span> <span class=\"hljs-operator\">=</span> { state: Int ->\n    when (state) {\n\n        SCREEN_RECORDING_STATE_VISIBLE -> {\n            <span class=\"hljs-comment\">// 녹화 중이에요 - 사용자에게 알림</span>\n           \n        }\n\n        <span class=\"hljs-keyword\">else</span> -> {\n            <span class=\"hljs-comment\">// 녹화 중이 아닙니다</span>\n        }\n    }\n}\n</code></pre>\n<h1>3️⃣. — 콜백 추가 — WindowManager</h1>\n<ul>\n<li>\n<p>WindowManager.addScreenRecordingCallback()을 사용할 것입니다. 이 함수는 2개의 필수 매개변수를 필요로합니다:</p>\n<ul>\n<li>Executor,</li>\n<li>Consumer</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@RequiresApi(35)</span>\n<span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onStart</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-comment\">//...</span>\n    <span class=\"hljs-keyword\">val</span> initialState =\n        windowManager.addScreenRecordingCallback(\n            mainExecutor, \n            screenRecordingCallback\n        )\n    \n    Log.d(<span class=\"hljs-string\">\"MainActivity\"</span>, <span class=\"hljs-string\">\"onStart: Initial state: <span class=\"hljs-variable\">$initialState</span>\"</span>)\n    \n    <span class=\"hljs-comment\">// 초기 상태로 콜백을 트리거합니다</span>\n    screenRecordingCallback.invoke(initialState)\n}\n</code></pre>\n<h1>4️⃣. — 콜백 제거 — WindowManager</h1>\n<ul>\n<li>활동이 활성 상태일 때만 콜백을 수신하도록 활동의 onStop 메서드가 호출될 때 콜백을 제거해야 합니다.</li>\n<li>WindowManager.removeScreenRecordingCallback() 메서드를 사용하여 콜백을 제거합니다. 이 메서드는 단일 비널 매개변수 <code>Consumer&#x3C;Integer></code>를 사용합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/** 활동의 화면 녹화 감지 모니터링을 중지합니다 */</span>\n@<span class=\"hljs-title class_\">RequiresApi</span>(<span class=\"hljs-number\">35</span>)\noverride fun <span class=\"hljs-title function_\">onStop</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// ...</span>\n    windowManager.<span class=\"hljs-title function_\">removeScreenRecordingCallback</span>(screenRecordingCallback)\n}\n</code></pre>\n<h2>오늘은 여기까지입니다. 새로운 것을 배워서 좋았으면 좋겠어요</h2>\n<h1>연락을 유지해주세요</h1>\n<h1>참고 자료</h1>\n</body>\n</html>\n"},"__N_SSG":true}