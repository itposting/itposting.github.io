{"pageProps":{"posts":[{"title":"GenPiCam - 생성적 AI 카메라","description":"","date":"2024-05-27 13:51","slug":"2024-05-27-GenPiCam-GenerativeAICamera","content":"\n![image](https://miro.medium.com/v2/resize:fit:1268/1*eZzfeCJggafmHaYGcjqEDA.gif)\n\n이 프로젝트의 무거운 처리와 진정한 지혜는 머신 러닝 기반 이미지 생성기를 사용하는 외부 서비스인 Midjourney가 처리합니다. GenPiCam은 두 가지 Midjourney 능력을 활용합니다.\n\n- 존재하는 사진을 사용하여 이미지에 대한 텍스트 설명 프롬프트를 생성하는 \"Describe\"\n- 자연어 프롬프트를 이미지로 변환하는 \"Imagine\"\n\n이 두 단계 사이에서 나는 창의적 입력 수준을 허용하므로 GenPiCam 카메라에는 최종 이미지의 스타일을 조정하는 다이얼이 있습니다. 이것은 본질적으로 생성된 이미지에 \"애니메이션\", \"팝 아트\" 또는 \"미래적\" 영향을 더하는 필터가 되게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 지루해요 — 비디오를 보고 싶어요?\n\n물론이죠 — 여기 2분 요약 영상이 있어요\n\n# \"사진\" 프로세스\n\n초기 사진 이미지는 라즈베리 파이 카메라 모듈로 촬영됩니다. 외부 카메라 셔터(라즈베리 파이 GPIO 핀에 연결된 푸시 버튼)를 누르면 정지 이미지를 촬영하고 사진을 jpeg 이미지로 저장합니다.\n\n<div class=\"content-ad\"></div>\n\n![GenPiCam-GenerativeAICamera_0](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_0.png)\n\n이 사진은 Midjourney에 업로드되었는데, 기존 사진을 시작으로 이미지에 대한 텍스트 설명 프롬프트를 생성합니다. 궁금하신 분들을 위해, 저는 PyAutoGUI를 사용하여 매우 서투른 봇 상호 작용을 마우스와 키보드를 제어하는 데 사용하고 있습니다(API가 없기 때문에) — 이것은 쓰면 안 되는 코드의 예제가 될 수 있도록 해주세요.\n\nMidjourney의 describe 도구는 이미지를 입력으로 받아와 텍스트 프롬프트를 생성합니다. 이는 \"텍스트를 이미지로\" 하는 일반적인 과정을 반대로 해서 사진을 시작으로 이미지의 본질을 설명하는 텍스트를 추출하는 매우 탐구적인 서비스입니다. 여기에는 Snowy가 있지만 Midjourney에는 훨씬 더 표현력이 풍부한 설명이 있습니다.\n\n![GenPiCam-GenerativeAICamera_1](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_1.png)\n\n<div class=\"content-ad\"></div>\n\n\"describe\" 함수는 실제로 이미지를 기반으로 네 가지 설명을 반환하지만, GenPiCam은 임의로 첫 번째 설명을 선택합니다.\n\n이제 재미난 부분이 시작됐어요. 우리는 그 텍스트 프롬프트를 가져와서 새로운 이미지를 Generative AI를 사용하여 Midjouney imagine에 새로운 호출로 만들 수 있어요. 이전 텍스트 프롬프트에서 생성된 이미지가 여기 있어요.\n\n![image](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_2.png)\n\nGenPiCam에는 스타일 지시 사항으로 텍스트 프롬프트를 업데이트하는 선택 스위치가 있어요.\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_3.png)\n\n라즈베리 파이 GPIO 핀에 연결된 12진 스위치입니다. 현재 \"예술적 선택\"을 읽어서 GenPiCam이 텍스트 프롬프트에 \"레트로 팝 아트 스타일 일러스트\"와 같은 접두사를 추가할 것입니다. 다른 스타일 프롬프트 중 일부는 다음과 같습니다.\n\n- 애니메이션 스타일\n- 초현실주의, 다양한 모자와 풍선이 있는 화려한 히퍼리얼리즘\n- 흐릿한 브러시 스트로크\n- 우주 정거장에서 초현실주의인 미래주의\n\n눈이 내린 이미지의 \"팝아트\" 이미지를 보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n\n[![](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_4.png)](https://example.com)\n\nThe final image is created using the Pillow Python imaging library and consists of:\n\n- The initial photo taken by the Raspberry Pi camera module, resized on the left\n- The final Midjouney image—the first of four images is selected, composited to the right\n- Text prompt—against a colored background and icon signifying the style mode\n\nHere's the same process, but adding the text “Hyper-Realistic, whimsical with a colorful hat and balloons”.\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_5.png)\n\n우측 이미지가 Generative AI로 만들어진 것임에도 불구하고, 스노위의 비평적인 시선을 통해 실망감이 느껴집니다.\n\n# Generative AI 이미지 — 배운 점\n\nGenPiCam 카메라를 구축하는 데 정말 즐겁게 시간을 보냈고, 이는 Generative AI에 대한 프립트 엔지니어링을 탐구하는 흥미로운 경로였습니다. 더 좋았던 사진들은 단순한 구성을 가진 것들이었는데, 즉, 말로 표현하기 쉬운 이미지였습니다. 예를 들어, 이 장면은 색상과 명확한 객체로 쉽게 설명할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n![Generated Image 1](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_6.png)\n\nHowever, there were some very strange results while describing more unique scenes. I found the description of a classic Australian clothesline created an unusual image.\n\n![Generated Image 2](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_7.png)\n\nOne of my favorite reimagined images was the identification of my laser mouse. It turns out a laser mouse has multiple meanings leading to a striking result.\n\n\n<div class=\"content-ad\"></div>\n\n\n![GenPiCam Hardware](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_8.png)\n\n# 하드웨어\n\nGenPiCam의 가장 세련되지 않은 부분은 서둘러 조립한 하드웨어입니다. 만약 당신이 자신만의 현실 왜곡 카메라를 만들고 싶다면, 아래 항목이 필요합니다.\n\n- RaspberryPi 4가 설치된 Raspberry Pi OS\n- Raspberry Pi 카메라 모듈 v2\n- Raspberry Pi용 터치스크린 모니터\n- 12개의 PCB 회전 스위치\n- 푸시버튼 (순간접촉)\n- 폴리카보네이트 케이스\n- 재충전 가능한 배터리 팩\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_9.png\" />\n\n가장 아름다운 빌드는 아닐지 몰라요. 하지만 이건 기능성이 뛰어나다는 점으로만 용서하겠습니다.\n\n<img src=\"/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_10.png\" />\n\n# 요약, 코드 및 크레딧\n\n<div class=\"content-ad\"></div>\n\nGenPiCam은 생성 AI를 탐험하는 재미있는 방법이었어요. 그림을 스타일에 맞게 변환해주는 (때로는 놀랄만한) 이미지들을 만들어내죠.\n\n![GenPiCam](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_11.png)\n\n## 크레딧\n\n- Ned Letcher — Midjourney의 describe 기능을 보여줌으로써 저를 영감받게 한 분이자 이미지를 재창조하는 개념을 제공해준 분\n- Michael King의 'Midjourney 이미지 다운로드하는 Discord 봇 만들기' — Midjourney와 상호작용하기 위한 Python 자동화 및 Discord 봇 설정을 보여주는 훌륭한 글\n- Midjourney — 봇 채널을 위한 Midjourney 명령 구문\n- discord.py — Discord를 위한 Python API 래퍼\n\n<div class=\"content-ad\"></div>\n\n## 코드\n\n[https://github.com/saubury/GenPiCam](https://github.com/saubury/GenPiCam)\n","ogImage":{"url":"/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_0.png"},"coverImage":"/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_0.png","tag":["Tech"],"readingTime":5},{"title":"어디서나 Tailscale을 통해 Immich 라이브러리에 접근하고 동기화하기","description":"","date":"2024-05-27 13:49","slug":"2024-05-27-AccessingandSyncingYourImmichLibraryfromAnywherewithTailscale","content":"\n\n<img src=\"/assets/img/2024-05-27-AccessingandSyncingYourImmichLibraryfromAnywherewithTailscale_0.png\" />\n\n이전 글에서 Raspberry Pi에 추가 SSD 저장 공간을 이용해 오픈 소스 사진 백업 솔루션인 Immich를 자체 호스팅하는 방법에 대해 이야기했습니다. 자신의 미디어 서버를 호스팅함으로써 데이터에 완전한 제어권을 갖는 장점 중 하나는 있습니다. 그러나 어디서든 라이브러리에 액세스하고 동기화하는 것은 견고하고 안전한 방법 없이는 어려울 수 있습니다. 이때 Tailscale이 등장합니다. Tailscale은 어디에 있든 안전하게 디바이스를 인터넷을 통해 연결할 수 있게 해주는 망 VPN 서비스입니다.\n\n# Tailscale이란?\n\nTailscale은 WireGuard를 기반으로 한 현대적인 VPN 솔루션으로, 쉽게 설정하고 사용할 수 있도록 설계되었습니다. 디바이스 간에 안전하고 암호화된 네트워크를 만들어주어 전 세계 어디에서나 로컬 네트워크에 연결된 것처럼 Immich 라이브러리에 액세스할 수 있습니다. Tailscale은 NAT 트래버셜을 처리해주므로 라우터 구성이나 복잡한 네트워크 설정에 대해 걱정할 필요가 없습니다.\n\n<div class=\"content-ad\"></div>\n\n# Tailscale와 Immich 함께 사용하는 이점\n\n- 사용 편의성: 네트워킹 지식이 제한된 사용자도 쉽게 설정하고 사용할 수 있는 Tailscale입니다.\n- 보안성: 모든 연결은 WireGuard를 사용하여 암호화되어 데이터가 안전하게 전송됩니다.\n- 이용 편의성: 세계 어디에서나 어떤 기기에서든 Immich 라이브러리에 액세스할 수 있습니다.\n- 포트 포워딩 불필요: Tailscale은 포트 포워딩이나 동적 DNS 설정이 필요없어요.\n\n# Immich의 주요 이점: 자동 동기화 기능\n\nImmich의 주목할 만한 기능 중 하나는 모바일 앱의 통합 자동 동기화 기능입니다. 이 기능을 사용하면 동기화할 폴더를 선택할 수 있고 Immich가 사진과 비디오를 자동으로 업로드합니다. 사용자는 장치가 충전 중이거나 Wi-Fi에 연결되어 있을 때에만 업로드하도록 설정할 수 있어 데이터 사용량과 배터리 수명을 효율적으로 관리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n일반적으로 집 네트워크에 연결된 상태일 때만 작동하지만, Tailscale을 사용하면 RaspberryPi에 어디서나 안전하게 액세스할 수 있습니다. 해외 여행 중일 때도 이미지를 업로드하고 저장할 수 있습니다. 이것은 구글 포토와 같은 클라우드 서비스와 비교했을 때 하드웨어 제한을 제외하고 저장 용량 제한이 없어서 특히 유용합니다. \n\n# Immich와 Tailscale 설정 방법\n\n## 전제 조건\n\n- Raspberry Pi에 Immich가 정상적으로 설치되어 있어야 합니다.\n- 무료로 Tailscale 계정을 만들 수 있습니다 (Tailscale에서 가입할 수 있습니다).\n\n<div class=\"content-ad\"></div>\n\n## 단계별 안내\n\n라즈베리 파이에 Tailscale 설치하기:\n\n- 라즈베리 파이에서 터미널을 엽니다.\n- Tailscale 설치하기:\n\n```bash\ncurl -fsSL https://tailscale.com/install.sh | sh\n```\n\n<div class=\"content-ad\"></div>\n\nTailscale를 시작하고 로그인하세요:\n\n\nsudo tailscale up\n\n\n- 기기를 인증하기 위해 지침을 따르세요. 웹 브라우저에서 URL을 열고 Tailscale 계정으로 로그인해야 합니다.\n\n다른 기기에 Tailscale 설치하기:\n\n<div class=\"content-ad\"></div>\n\n- 다른 기기(예: 휴대폰, 노트북 또는 데스크톱)에 Tailscale을 다운로드하고 설치하세요.\n- 동일한 계정을 사용하여 각 기기에서 Tailscale에 로그인하세요.\n\n라즈베리 파이에 액세스:\n\n- 모든 기기에 Tailscale이 설정되면 Tailscale 대시보드에서 각 기기에서 라즈베리 파이가 나열될 것입니다.\n- 라즈베리 파이에 할당된 Tailscale IP 주소를 기록하세요. IP 주소는 100.x.x.x와 같은 형식일 것입니다.\n\n어디서나 Immich에 액세스하세요:\n\n<div class=\"content-ad\"></div>\n\n- Tailscale에 연결된 장치의 웹 브라우저를 엽니다.\n- http://100.x.x.x:2283 으로 이동합니다 (100.x.x.x를 Raspberry Pi의 Tailscale IP 주소로 교체합니다).\n- Immich 인터페이스가 표시되어 사진 및 비디오 라이브러리에 액세스하고 관리할 수 있습니다.\n\nImmich 모바일 앱을 사용하여 라이브러리 동기화하기:\n\n- 모바일 장치에 Immich 앱을 다운로드하고 설치합니다.\n- 앱을 열고 서버 설정을 Tailscale IP 주소로 구성합니다.\n- 앱 내 설정으로 이동하여 자동 동기화할 폴더를 선택합니다.\n- 배경 업로드 설정을 활성화하고 충전 중이거나 Wi-Fi에 연결되어 있는 경우에만 업로드하는 환경 설정을 선택합니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\nTailscale을 Immich와 함께 사용하면 전 세계 어디에서나 미디어 라이브러리에 안전하고 쉽게 액세스하고 동기화할 수 있는 솔루션을 제공합니다. Immich의 모바일 애플리케이션의 자동 동기화 기능은 배경 업로드를 원활하게하며 수동 개입없이 미디어가 항상 백업되도록 보장합니다. 이 설정은 원격 액세스의 편리함을 유지하면서 데이터에 대한 완전한 제어를 보장합니다. Tailscale의 강력한 보안 기능과 간편한 구성을 통해 전통적인 VPN이나 포트 포워딩 설정의 번거로움없이 자체 호스팅 미디어 서버의 이점을 즐길 수 있습니다.\nTailscale을 활용하여 라즈베리 파이를 강력하고 접근성이 있는 미디어 허브로 변신시킬 수 있으며 상용 클라우드 서비스와 견줄 만한 라이벌이 될 수 있습니다. Immich의 자동 동기화 기능과 Tailscale의 안전한 연결이 결합되어 개인 미디어 라이브러리를 효과적이고 효율적으로 관리할 수 있는 포괄적인 솔루션을 제공합니다.","ogImage":{"url":"/assets/img/2024-05-27-AccessingandSyncingYourImmichLibraryfromAnywherewithTailscale_0.png"},"coverImage":"/assets/img/2024-05-27-AccessingandSyncingYourImmichLibraryfromAnywherewithTailscale_0.png","tag":["Tech"],"readingTime":4},{"title":"내 끝내지 못한 프로젝트에 대한 추모","description":"","date":"2024-05-27 13:48","slug":"2024-05-27-Amemorialtomyunfinishedproject","content":"\n\n# 모든 것 그리고 내가 버린 모든 것)\n\n지난 주에, 거의 완성된 크로셰 프로젝트를 버렸어요. 기분이 좋지 않았어요.\n\n그것은 몇 년 전에 기본 가디건이었던 것인데, 그때는 팬데믹의 봉쇄 기간 동안 시작한 것이었어요. 프로젝트를 멈춘 것은 모든 별도의 패널들을 함께 꿰매는 마지막 단계였어요. 불행하게도, 그때까지 제 작품에서 발견한 주요 실수들을 알아차릴 때 너무 늦었어요.\n\n<img src=\"/assets/img/2024-05-27-Amemorialtomyunfinishedproject_0.png\" />\n\n<div class=\"content-ad\"></div>\n\n일단, 얀 염색 로트가 일치하지 않았어요. 앞 패널의 절반은 다른 카디건 부분의 푸르스름한 회색 대신 분홍 회색이었어요. 낮에는 색 차이가 뚜렷했어요. 마치 주머니에 빨간 양말이 들어있는 채로 세탁기에 세탁된 것처럼 보였어요. \n\n그리고 한 쪽 앞 패널이 다른 쪽보다 짧았어요. 그것도 조금이 아니라, 약 다섯 인치나 짧았어요. 얼룩의 긴장이 감정 수준의 지표이라면, 그 때 저는 정말 스트레스가 많았나 봐요.\n\n이런 일들에 대한 해결책은 있어요: Rit 직물 염료 상자나 직물을 전략적으로 늘리고 블로킹하는 것 등이요. 그리고 정말 좋은 해결책 없을 때는 항상 작품을 풀어서 얀을 회수하고 새로 시작할 수 있어요. 그러나 이 경우에는 얀도 정말 싫었어요. 미끄럼성이 있고, 쪼개지기 쉬웠고, 일 처리하기 어려웠어요. 분명 구할 가치가 없었어요.\n\n완전히 좌절하여, 공예 물품 바구니에 프로젝트를 놓고 나중에 돌아오자고 다짐했어요.\n\n<div class=\"content-ad\"></div>\n\n훨씬, 훨씬 후에.\n\n구체적으로는 3년 후에요.\n\n![Image](/assets/img/2024-05-27-Amemorialtomyunfinishedproject_1.png)\n\n마침내 그것으로 돌아왔어요. 보관 중에 약간 먼지가 쌓였고, 내게는 쓰릴 듯한 쓸쓸함이 모였어요. 모든 장인은 재료가 싸지 않다는 걸 알아요. 그런데 비용을 어떻게 상환할 수 있을지는 몰라도, 나의 시간과 노력은 다시 얻을 수 없어요.\n\n<div class=\"content-ad\"></div>\n\n하지만 물론, 제 분노의 진짜 대상은 제 프로젝트가 아니라 제 자신의 나쁜, 잘못된 결정이었습니다. 선택을 해야 했어요. 제 분노와 후회에 집착할 수도 있었고, 영원히 놓아줄 수도 있었어요.\n\n그래서 난 가디건을 쓰레기통에 넣었어요.\n\n쓰레기통 위를 맴돌며, 나는 얼마나 많은 사람들이 같은 경험을 했는지 궁금했어요. 공예가로만이 아니라 물건을 사고 소유한 사람으로서 일반적으로 경험했을지도 몰랐어요. 난 얼마나 많은 다른 사람들이 원치 않는 비용이 많이든 물건을 범죄자처럼 쓰레기통에 버린 적이 있는지 궁금해졌어요. \n\n![이미지](/assets/img/2024-05-27-Amemorialtomyunfinishedproject_2.png)\n\n<div class=\"content-ad\"></div>\n\n하지만 이 순간을 범죄 현장이 아닌 기념비로 취급하기로 결심했어요. 시간과 재료가 낭비된 것은 사실이지만, 이로부터 얻은 경험은 낭비되지 않았답니다.\n\n내 마무리되지 않은 가디건은 많은 것을 가르쳐 주었어요. 프로젝트를 시작하기 전에 더 많은 조사를 하고, 염색배치와 게이지에 더 근면해지는 법을 배웠어요. 이것들은 시간이 흐를수록 나에게 큰 도움이 되는 교훈들이에요, 비록 그 소스가 되는 프로젝트가 궁극적으로 쓰레기였든 말이에요.\n\n나는 버린 모든 것들과 낭비해온 것을 곰곰히 생각했어요. 그것들로부터 무슨 교훈을 얻을 수 있었을까요? 아마 임펄시브하게 구입하는 대신 미니 와플 제조기를 사고서 생각해볼 것이었지요. 아마 모든 살사와 피클병 대신 새로운 메이슨 브랜드 케이스를 사는 대신 재활용할 수 있었을 거예요. 아마 신체에 잘 맞지 않은 저렴하고 빠른 패션 스웨터보다는 잘 만들어진 터틀넥 스웨터에 투자했어야 했을지도 몰라요.\n\n하지만 그 구멍에 왕따지기하지 마세요. 배우고 나아갈 때가 훨씬 좋아요.\n\n<div class=\"content-ad\"></div>\n\n그럼 이제 안녕, 옛 카디건! 안녕, 미완성 작품! 내게 함께한 시간이 끝났지만, 너희의 교훈은 계속되리라.\n\n고마워.\n\n그리고 평화롭게 쉬어가세요.","ogImage":{"url":"/assets/img/2024-05-27-Amemorialtomyunfinishedproject_0.png"},"coverImage":"/assets/img/2024-05-27-Amemorialtomyunfinishedproject_0.png","tag":["Tech"],"readingTime":3},{"title":"물 한 방울씩 절약하기","description":"","date":"2024-05-27 13:48","slug":"2024-05-27-SAVINGWATERDROPBYDROP","content":"\n\n<img src=\"/assets/img/2024-05-27-SAVINGWATERDROPBYDROP_0.png\" />\n\n팔라모스, 히로나, 스페인 지역의 지역 수도 사무소에서 받은 이메일입니다. 이해하지 못해도 걱정하지 마세요. 이 지역은 카탈루냐어로 대부분의 통지가 작성됩니다.\n\n최근 세 날 동안 제 물 공급 시스템의 일부가 계속 실행되고 있다고 합니다. 정말 똑똑한 시스템이죠, 그렇죠?\n\n그런 다음 \"fuga\"를 확인하는 방법에 대해 안내합니다. 이는 누출을 의미합니다. 이전에도 여러 번 있었던 문제에 대한 것으로 누출이 아니라 고장이었습니다. 저희 물은 칼슘 악화가 심하게 발생하여 시스템의 여러 부분에 축적됩니다. 아내가 화장실 중 하나가 계속 작동 중이라고 이미 말해 주었었어요. 변기 물조절 장치의 분리 핀을 빼고 고무 밀봉판에 어떤 결정이 달라붙어 있는 것을 발견했습니다. 10분 정도 소요되는 남은 작업을 했더니 고쳐졌어요.\n\n<div class=\"content-ad\"></div>\n\n스페인에 대해 생각하는 많은 사람들이 프랑코 시대에 뒤쳐졌다고 생각합니다. 하지만 그것은 사실과는 거리가 멉니다. 우리는 하이테크 생산 분야에서 세계 리더는 아니지만 응용 분야에서는 세계 리더입니다. 우리 나라의 모든 집은 유틸리티 공급 업체에 연결된 디지털 미터를 통해 전력 공급 및 상수도 공급에 연결되어 있습니다.\n\n따라서 어떠한 불규칙성도 자동으로 반응합니다. 스페인에서 물은 50년 이상 계량되어 왔지만 지난 3년 동안 매우 심각한 가뭄이 있었습니다. 그래서 모든 한 방울이 중요합니다. 이런 “Fuga” 통지를 받안 때는 보통 골칫거리입니다. 저희 집에는 화장실이 12개, 세면대가 12개, 욕조나 샤워실이 12개, 정원 호스가 2개, 지붕에 3개의 저장탱크, 전기 온수기가 4개, 그리고 PVC 파이프 연결은 몇 개인지 모릅니다. 이번에는 쉬웠어요.\n\n몇 년 전에 미친 상황이 있었어요. 거리 맞은편 두 채짜리 집을 철거할 때였죠. 굴착기가 상수도 메인을 들어올린 후 운전수는 새로운 후버 댐을 만드는 것에 대해 알아차리지 못 했습니다. 저는 수도 사무실에 전화를 걸어서 상태를 알리니, 명랑해 보이는 어린 남자가 나왔어요. 그는 제가 물 미터와 설치물을 모두 점검하도록 요구했습니다. 나는 우리 발코니에서 물 분수를 보며 거리가 가라앉아가는 것을 지켜보았습니다. 내가 그 어린 남자에게 매우 무례했죠! 그가 문제를 일으킨 것은 나가 아니라 물 회사인 것을 납득시키기도 했습니다.\n\n한편, 물 누수 문제가 해결되었다는 자동 통지를 받았어요. 따라서 변기 탱크 밸브 청소가 작용한 것 같아요.\n\n<div class=\"content-ad\"></div>\n\n저는 DIY를 즐기는 것을 좋아해요. 하지만 배관 공사는 정말로 싫어해요.\n이제는 조금의 그림 그리기를 할 예정이에요. 제 이야기가 즐거웠으면 좋겠어요. 현재 Medium에서 여러 주제에 관한 이야기가 거의 70편 있어요. 모두 무료로 읽을 수 있어요.","ogImage":{"url":"/assets/img/2024-05-27-SAVINGWATERDROPBYDROP_0.png"},"coverImage":"/assets/img/2024-05-27-SAVINGWATERDROPBYDROP_0.png","tag":["Tech"],"readingTime":2},{"title":"도커 컴포즈로 Nextcloud를 배포하기","description":"","date":"2024-05-27 13:46","slug":"2024-05-27-DeployNextcloudwithDockerCompose","content":"\n\nDIY, 실험, 그리고 학습을 즐기며, Google Drive와 One Drive를 대체하기 위해 Nextcloud 서버를 설정했어요. 몇 년 동안 제 Nextcloud 인스턴스는 백업된 파일, 연락처, 캘린더, 노트 등이 모두 모여 있는 집이 되었고, Collabora 덕분에 서버에는 사무실 스위트도 갖췄네요.\n\nNextcloud는 여러 서비스에 대한 멋진 오픈 소스 대안일 수 있어요.\n\n좋은 점이든 나쁜 점이든, 저는 도커 컨테이너를 사용해 홈 서버에 Nextcloud를 배포하기로 결정했어요. 도커 경험을 쌓고자 하거나 Nextcloud 배포를 위한 도커 컴포즈 파일을 설정하는 방법을 찾고 있다면, 여기가 바로 옳은 장소에요.\n\n다음은 docker-compose.yml입니다.\n\n<div class=\"content-ad\"></div>\n\n```yaml\n---\nversion: '3'\n\nservices:\n  nextcloud:\n    image: nextcloud\n    container_name: nextcloud\n    restart: unless-stopped\n    networks: \n      - cloud\n    depends_on:\n      - nextclouddb\n      - redis\n    ports:\n      - 8081:80\n    volumes:\n      - ./html:/var/www/html\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./config:/var/www/html/config\n      - ./data:/var/www/html/data\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=dbpassword\n      - MYSQL_HOST=nextclouddb\n      - REDIS_HOST=redis\n\n  nextclouddb:\n    image: mariadb\n    container_name: nextcloud-db\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW\n    networks: \n      - cloud\n    volumes:\n      - ./nextclouddb:/var/lib/mysql\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n      - MYSQL_RANDOM_ROOT_PASSWORD=true\n      - MYSQL_PASSWORD=dbpassword\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      \n  collabora:\n    image: collabora/code\n    container_name: collabora\n    restart: unless-stopped\n    networks: \n      - cloud\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n      - password=password\n      - username=nextcloud\n      - domain=example.com\n      - extra_params=--o:ssl.enable=true\n    ports:\n      - 9980:9980\n\n  redis:\n    image: redis:alpine\n    container_name: redis\n    volumes:\n      - ./redis:/data  \n    networks: \n      - cloud\n  \n  nginx-proxy:\n    image: 'jc21/nginx-proxy-manager:latest'\n    container_name: nginx-proxy\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n    restart: unless-stopped\n    ports:\n      - '80:80'\n      - '81:81'\n      - '443:443'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n\nnetworks:\n  cloud:\n    name: cloud\n    driver: bridge\n```\n\n알겠어요. 이제 한 번 살펴볼게요.\n\n이 Docker Compose 파일은 5개의 컨테이너를 배포합니다. 그들은 다음과 같습니다:\n\n- Nextcloud\n- Nextcloud에 필요한 MySQL 데이터베이스\n- Collabora - 구글 문서와 유사한 멋진 오픈 소스 오피스 스위트입니다. Collabora Office에는 모바일 앱도 있습니다.\n- Redis - 메모리 캐싱입니다. 중요한 파일을 다음 클라우드에 의존할 계획이라면 Redis를 설정하는 것을 강력히 권장합니다.\n- Nginx Proxy Manager - 서버로 들어오는 요청을 처리하는 리버스 프록시 매니저입니다.\n\n\n<div class=\"content-ad\"></div>\n\n## 도커 컴포즈\n\n각 줄이 하는 일에 대한 간단한 설명.\n\nNextcloud:\n\n```js\nnextcloud:\n    image: nextcloud # 사용할 이미지입니다. 공식 Nextcloud 도커 이미지\n    container_name: nextcloud # 컨테이너의 이름입니다. 식별하는 데 도움이 됩니다\n    restart: unless-stopped # 컨테이너가 충돌하는 등의 문제가 발생하면 다시 시작되도록 설정\n    networks: # 모든 컨테이너를 \"cloud\" 네트워크를 통해 연결합니다\n      - cloud\n    depends_on: # Nextcloud를 시작하기 전에 데이터베이스와 레디스 컨테이너가 준비될 때까지 기다립니다\n      - nextclouddb \n      - redis\n    ports: # 서버에 여러 웹 서비스가 있다면 포트를 변경해야 합니다. 저는 Nextcloud를 포트 80에서 8081로 연결하고 있습니다\n      - 8081:80\n    volumes: # 이 부분은 중요합니다. 컨테이너 내의 파일 디렉토리를 실제 컴퓨터의 디렉토리에 매핑합니다\n      - ./html:/var/www/html # 컨테이너 내의 /var/www/html 디렉토리를 docker-compose.yml 파일이 있는 폴더 내의 html 폴더에 매핑합니다\n      - ./custom_apps:/var/www/html/custom_apps # 이러한 볼륨을 사용하면 컨테이너 내의 파일에 쉽게 액세스할 수 있습니다\n      - ./config:/var/www/html/config\n      - ./data:/var/www/html/data\n    environment: # 환경 변수 설정\n      - PUID=1000 # 사용자 ID입니다. 아마도 둘 다 1000이어야 합니다. 이를 잘못 설정하면 파일 권한 문제가 발생할 수 있습니다\n      - PGID=1000 # 사용자 ID를 설정하세요.\n      - TZ=America/Los_Angeles # 사용하는 시간대를 설정하세요\n      - MYSQL_DATABASE=nextcloud # 다음 섹션에서 설정할 데이터베이스 정보입니다\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=dbpassword\n      - MYSQL_HOST=nextclouddb\n      - REDIS_HOST=redis # 사용할 Redis 컨테이너\n```\n\n<div class=\"content-ad\"></div>\n\nNextcloud 데이터베이스:\n\n```yaml\nnextclouddb:\n    image: mariadb # 공식 mariadb 이미지\n    container_name: nextcloud-db \n    restart: unless-stopped \n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW # 정말 기억이 나지 않아요. 알고 계시면 알려주세요.\n    networks: \n      - cloud\n    volumes:\n      - ./nextclouddb:/var/lib/mysql\n    environment:\n      - PUID=1000 # 다른 컨테이너와 동일해야 함\n      - PGID=1000\n      - TZ=America/Los_Angeles\n      - MYSQL_RANDOM_ROOT_PASSWORD=true\n      - MYSQL_PASSWORD=dbpassword # Nextcloud 부분에 입력한 정보와 같아야 함\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n```\n\nCollabora (선택 사항, 하지만 정말 멋짐):\n\n```yaml\ncollabora:\n    image: collabora/code:latest\n    container_name: collabora\n    restart: unless-stopped\n    networks: \n      - cloud\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles # 다른 것과 동일해야 함\n      - password=password \n      - username=nextcloud\n      - domain=example.com # Nextcloud가 있는 도메인\n      - extra_params=--o:ssl.enable=true # SSL을 사용하는 경우에 사용합니다. 꼭 사용해야 합니다.\n    ports:\n      - 9980:9980\n```\n\n<div class=\"content-ad\"></div>\n\nRedis (선택 사항이지만, 진지하게, 추가하세요. 파일 잠금 문제가 나타날 수 있으며 Redis가 이를 방지해줄 것입니다):\n\n```js\nredis:\n    image: redis:alpine\n    container_name: redis\n    volumes:\n      - ./redis:/data  \n    networks: \n      - cloud\n```\n\nNginx Proxy Manager:\n\n```js\nnginx-proxy:\n    image: 'jc21/nginx-proxy-manager:latest'\n    container_name: nginx-proxy\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n    restart: unless-stopped\n    ports:\n      - '80:80'\n      - '81:81'\n      - '443:443'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n```\n\n<div class=\"content-ad\"></div>\n\nNginx Proxy Manager는 서버로 들어오는 트래픽을 Nextcloud로 전달하는 멋진 프로그램이에요. 새 호스트를 추가해보세요.\n\n세부 정보 패널에 도메인 이름을 입력해주세요.\n\nScheme = http, Forward Hostname = 이용 중인 기기의 로컬 IP 주소(예: 192.168.1.35), 전달할 포트 = 80.\n\n자산 캐시, 일반적인 공격 차단, 웹소켓 지원은 모두 켜두시는 게 좋아요.\n\n<div class=\"content-ad\"></div>\n\n\"맞춤 위치\" 탭에서 caldav와 carddav를 활성화하여 캘린더와 연락처에 대한 원격 액세스를 허용할 예정입니다.\n\n위치 1:\n\n- 위치 = /.well-known/caldav\n- 스킴 = html\n- 전방 호스트 이름 = `로컬 IP`/ remote.php/dav\n- 전방 포트 80\n\n위치 2:\n\n<div class=\"content-ad\"></div>\n\n- 위치 = /.well-known/carddav\n- scheme = html\n- 전달 호스트 이름 = `로컬 IP`/ remote.php/dav\n- 전달 포트 80\n\n## 추가 구성\n\n이제 Nextcloud를 사용자 정의 도메인과 함께 사용하도록 설정하는 경우 config.php 파일을 열어 신뢰할 수있는 도메인을 사용자의 도메인으로 변경해야합니다.\n\nNextcloud를 네트워크에서 액세스하려는 경우 Nextcloud의 로컬 IP 주소를 추가하는 것이 유용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n'trusted_domains' => \narray (\n 0 => 'example.com',\n 1 => '192.168.1.12:8081',\n),\n'overwritehost' => 'example.com',\n'overwriteprotocol' => 'https',\n```\n\nNiginx Proxy Manager이 설정되어 있으므로 config.php 파일에 다음을 추가해야 합니다:\n\n```js\n'default_phone_region' => 'US',\n'trustedproxies' => \narray (\n 0 => 'NginxProxyManager',\n 1 => '192.168.0.145',\n),\n```\n\n일부 경고를 해결하려면 다음을 수행해야 합니다:\n  \n\n<div class=\"content-ad\"></div>\n\n```js\n 'default_phone_region' => 'US', \n```\n\n메일 알림을 설정하려면 구성 파일에 다음을 추가해야 합니다. 필요한 값은 이메일 공급업체에서 얻어야 합니다.\n\n```js\n 'mail_from_address' => 'user', # 이메일 사용자를 입력하세요\n 'mail_smtpmode' => 'smtp',\n 'mail_sendmailmode' => 'smtp',\n 'mail_domain' => 'example.com', # 귀하의 이메일 도메인\n 'mail_smtphost' => 'smtp.example.com',\n 'mail_smtpport' => '465',\n 'mail_smtpauth' => 1,\n 'mail_smtpsecure' => 'ssl',\n 'mail_smtpname' => 'user@example.com',\n 'mail_smtppassword' => '비밀번호',\n```\n\n## 컨테이너 실행하기\n\n\n<div class=\"content-ad\"></div>\n\n```yaml\ndocker-compose up -d\n```\n\n축하합니다! Docker 컨테이너와 docker compose를 사용하여 Nextcloud를 설정했습니다! 궁금한 점이 있으면 언제든지 물어보세요.\n\n## 잠재적인 문제점\n\n- 502 Gateway 오류가 발생하면 호스트 서버의 도메인에 대한 브라우저 쿠키를 지워보세요. 대부분의 경우에 도움이 됩니다.\n- 정기적으로 Docker 이미지를 업데이트해야 합니다. Docker에서는 Nextcloud의 버전을 한 번에 건너뛸 수 없습니다. 예를 들어, 현재 버전이 24이고 가장 최신 버전이 26인 경우, 바로 26으로 업데이트하지 마세요. 저는 이를 까다로운 방법으로 배웠습니다. 먼저 25로 업데이트하세요. 그래서 정기적으로 `docker-compose pull` 명령을 실행해 주세요.","ogImage":{"url":"/assets/img/2024-05-27-DeployNextcloudwithDockerCompose_0.png"},"coverImage":"/assets/img/2024-05-27-DeployNextcloudwithDockerCompose_0.png","tag":["Tech"],"readingTime":8},{"title":"텍스트를 움직여 발견한 시의 이야기","description":"","date":"2024-05-27 13:46","slug":"2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround","content":"\n## 창의성\n\n![이미지](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_0.png)\n\n지난 주말에 새 시를 썼어요. 다름이 아니라 식탁에서 일하면서 며칠 동안 시가 완성되었죠. 만약 식탁을 보셨다면 시를 쓰는 게 아니라 공예 프로젝트를 하고 있는 것 같을 거에요.\n\n![이미지](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_1.png)\n\n<div class=\"content-ad\"></div>\n\n태그를 마크다운 형식으로 변경하십시오.\n\n<div class=\"content-ad\"></div>\n\n그대의 곁 — 선물같은 근접함을 얻어,\n문을 두드리며 함께해요. 방 안에서\n\n우리는 완벽한 잠 자는 달 같아.\n\n자, 이 텍스트를 내가 테이블 위에 모두 놓아 놨을 때의 모습 그대로 전달해볼게. 다양한 글꼴을 보는 것도 멋진 것 같아요 — 그리고 각 라인이 어디서 왔는지 상상하는 것도 재미있어요.\n\n특히 손글씨와 인쇄체 텍스트를 조합하는 것을 특히 좋아해요. 텍스트를 이리저리 움직여 나의 단어가 새로운 아이디어를 불러들이는 더 무작위한 단어들과 상호 작용하게 되어 시인으로서 더 창의적이고 몰입된 느낌을 받을 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_2.png)\n\n요즘 몇 달 동안 쓰기에 애를 먹고 있었는데, 최근에 텍스트 줄들을 물리적으로 이동시키는 건 해방감을 느끼게 해줬어요. 최근에 텍스트로 가져다 쓰는 것들로는, 제 손글씨로 노트나 인덱스 카드에서 자른 줄들, 최근 드래프트/시를 출력한 것들로부터 타이핑된 줄들, 그리고 이웃에 있는 리틀 프리 라이브러리에서 우연히 찾은 책과 잡지의 줄들을 사용하고 있어요.\n\n글을 쓰고 싶지만 작성은 하고 싶지 않은 때에 줄들을 잘라내는 것도 좋아요. 이 활동은 TV를 보거나 오디오북을 듣는 시간에 딱 좋아요.\n\n테이블에 시를 펼친 다음, 사진을 찍고 컴퓨터 파일에 저장할 텍스트를 타이핑해요. 그리고 물리적인 텍스트를 어떻게/어디에 붙이고 저장할지 결정해요. 항상 저장하지는 않아요 — 때로는 텍스트 줄들을 다시 잘라내기 모아 둔 모음집에 넣기도 해요. 하지만 대부분의 경우에는 어렵지 않게 내 붙이기 같은 작은 수제 책(짠) 만들기 위해 글 붙이를 꺼내고 줄들을 플라스틱으로 엮은 잡지에서 찢어진 한 장으로 접은 책을 만들어 붙여요.\n\n<div class=\"content-ad\"></div>\n\n\n![이동하는 텍스트로 찾은 시 이야기](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_3.png)\n\n![이동하는 텍스트로 찾은 시 이야기](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_4.png)\n\n가끔은 한 장에 전체 시를 콜라주하기도 합니다. 작은 노트북이나 스케치북의 일부로 남겨두기도 해요. 짧은 시의 경우, 시 전체 텍스트를 5x7인치 색인 카드에 맞출 수 있어요. 일부는 카드 위에 콜라주를 먼저 해요 (다른 일을 하면서 보거나 들을 때 하는 좋은 활동이기도 해요).\n\n나에게 중요한 이 작업의 다른 부분은 시를 출력하고 한 줄씩 자르는 과정을 통해, 개인적으로 너무 민감하다고 느껴지거나 원래 완성된 형태로는 (적어도 지금은) 공개하거나 발표하기가 어려웠던 시를 다시 작업해 볼 수 있다는 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n노트북에서 손으로 쓴 글도 이런 방식으로 사용할 수 있어요. 보통 나의 일기에서 편집되지 않은 글을 공유하지는 않지만, 라인을 잘라내고 그것들이 가끔 어떻게 새로운 시의 맥락에서 작동할 수 있는지 찾아내는 과정이 좋아요. 이 과정을 통해 서로 다른 텍스트 조각들을 교차로 배치하면서 형성되는 시를 통해 아이디어와 테마에 대해 더 의식적으로 생각하게 됩니다.\n\n또한, 이러한 재활용과 재상상이 나에게 내 시에 반복에 대해 더 의식적으로 생각하게 해줍니다. 고의적으로 잘라내고 재사용할 수 있는 구체적인 단어들 뿐만 아니라 아이디어와 주제의 반복에 대해서도 말이죠. 이와 같은 아이디어를 다시 살펴보고 다양한 표현 수단을 시도해보는 것을 좋아해요.\n\n이러한 공예적 과정을 통해 나에게 개인적이고 독특한 글을 쓸 수 있지만, 작품에 대한 작은 예술적 거리를 두어 나의 시에 쉽게 가져오지 못했던 경험과 감정에 대해 쓰는 데 더 편안함을 느끼게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n글을 읽는 독자들에게 너무 간접적일 수 있지만, 저는 최종적으로 공유하게 된 시에 숨어있는 레이어들을 알고 있어요. 이야기에서 선택한 시를 읽어 주셔서 감사드리며, 그 창작 과정에 대한 설명까지 함께 공유하게 되어 기쁩니다.\n\n창의적인 과정을 어떻게 변화시켜 왔는지, 더 풀어지거나 자유로워지거나 더 접근하기 쉬운 방식으로 글을 쓸 수 있었나요?\n\n댓글에서 여러분의 경험에 대해 듣고 싶어요 — 물론, 공유하고 싶은 더 긴 이야기가 있다면 언제든지 The DIY Diaries로 보내주시면 항상 환영합니다.\n","ogImage":{"url":"/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_0.png"},"coverImage":"/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_0.png","tag":["Tech"],"readingTime":3},{"title":"각 AI에게 맞는 Python","description":"","date":"2024-05-27 13:44","slug":"2024-05-27-ToeachAIitsownPython","content":"\n![2024-05-27-ToeachAIitsownPython_0](/assets/img/2024-05-27-ToeachAIitsownPython_0.png)\n\n약간 까다로운 주제로 보일 수 있지만 믿거나 말거나, AI 애플리케이션을 구축하는 데 발생하는 문제의 90%는 Python 종속성 때문이죠.\n\n어제까지 잘 작동하던 AI 앱을 시험했는데 갑자기 모든 게 망가졌다고 합니다! 원인을 찾고 코드를 디버깅하려고 애쓰지만... 아마도 문제는 단순히 파이썬 라이브러리 업데이트 때문인 것 같아요!\n\n5가지 다른 파이썬 버전을 설치하지 않고도 문제를 해결할 수 있는 방법을 찾았습니다. 이제 한 번에 모든 문제를 해결할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 파이썬 임베디드 만나보기\n\n임베디드 배포는 최소한의 파이썬 환경이 포함된 ZIP 파일입니다. 이는 최종 사용자가 직접 액세스하는 대신 다른 응용 프로그램의 일부로 작동하기 위해 설계되었습니다.\n\n이 조금 단조로운 ZIP 파일에는 pip가 없기 때문에 의존성을 설치할 수 없습니다.\n\n하지만 우리가 pip를 사용할 수 있다고 가정해 봅시다... 여전히 소스에서 패키지를 빌드할 수 없습니다: 이미 컴파일된 휠 패키지를 얻으면 문제가 전혀 없지만 설치에 빌드가 필요한 경우에는 할 수 없습니다.\n\n<div class=\"content-ad\"></div>\n\n하지만 이 문제에 대한 해결책이 있습니다.\n\n# 실제 시나리오\n\n내 게시물 중 몇 가지를 따라가보면, 거의 항상 Python 3.10을 사용한다는 것을 알 수 있을 것입니다. 내가 그것에 집착하는 것이 아닌... 단지 몇 주 전까지는 sentence-piece 라이브러리가 더 높은 Python 버전을 사용하려고 할 때마다 망가졌기 때문입니다.\n\n동시에, 웹 서버를 구축하는 동안 Protobuf가 모든 API 호출을 망가뜨리는 바람에 Streamlit 버전 1.27.0 이전을 사용해야 했습니다.\n\n<div class=\"content-ad\"></div>\n\n그럼 어떻게 해야 할까요? Windows 기계에 여러 Python 버전을 설치하는 것은 Linux/Mac OS보다 조금 까다로울 수 있습니다. PATH에 추가해야 하며, 이는 명령어로 작업하는 데 영향을 줄 것입니다.\n\n해결책은 적어도 두 가지가 있습니다.\n\n# 1 Python을 독립적으로 사용\n\n컴파일해야 할 패키지가 없다는 것을 알면 이 옵션이 가장 안전합니다. 공식 ZIP 파일을 추출하고, 약간의 해킹을 한 후에 작업이 끝납니다.\n\n<div class=\"content-ad\"></div>\n\n예시: OpenAI 호환 API에 연결되는 Streamlit 앱을 만들어보세요.\n\n이 시나리오에서는 최신 Streamlit 버전(1.34.0)을 사용하고자 합니다. 이 버전은 완전한 채팅 인터페이스 지원, 텍스트 스트리머 및 새로운 스타일 관리 기능을 제공합니다. 이를 위해서는 Python 3.11+이 필요합니다.\n\n브랜드 네임 폴더(저는 pythontests라고 이름 짓겠습니다)를 생성하고, 공식 페이지에서 Python 3.11.7 Embedded를 다운로드하세요. 제 시스템은 64비트 미니PC이므로, 64비트용 ZIP 아카이브를 다운로드할 것입니다.\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_1.png)\n\n<div class=\"content-ad\"></div>\n\n지금 ZIP 파일을 python311이라는 하위 폴더로 푸실 수 있어요.\n\n만약 Windows 터미널을 사용 중이시라면, Windows 11에 있는 것처럼 터미널 창에서 아카이브를 푸실 수도 있어요:\n\n```js\nExpand-Archive -Force .\\python-3.11.7-embed-amd64.zip .\\python311\n```\n\n이제 새로운 Python 인터프리터를 바로 사용하실 수 있어요! pythontests 폴더에서 터미널을 열고 아래 명령어를 실행하면 됩니다:\n\n<div class=\"content-ad\"></div>\n\n\n.\\python311\\python.exe\n\n\n![ToeachAIitsownPython_2](/assets/img/2024-05-27-ToeachAIitsownPython_2.png)\n\nThis portable version cannot install pip dependencies. Try and you will see an annoying message:\n\n![ToeachAIitsownPython_3](/assets/img/2024-05-27-ToeachAIitsownPython_3.png)\n\n\n\n<div class=\"content-ad\"></div>\n\n## 내장 Python에 pip를 설치하는 것은 쉽습니다. 먼저 새롭게 추출한 python311 디렉토리 내부의 python311._pth 파일을 편집해야 합니다.\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_4.png)\n\n그런 다음 텍스트 파일 맨 위에 Lib/site-packages를 추가하고 site를 import하는 마지막 줄의 주석을 해제해야 합니다.\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_5.png)\n\n<div class=\"content-ad\"></div>\n\n이제 python311 폴더 안으로 이동하여 터미널에서 아래 curl 명령어를 실행하여 get-pip.py 파일을 설치하세요. 이 파일은 임베디드 파이썬에 pip 지원을 추가하는 데 필요합니다.\n\n```js\ncd .\\python311\\\n\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n```\n\n마지막으로 python311 폴더에서 python.exe get-pip.py를 실행하세요.\n\n지금은 pip 패키지를 설치하는 것이 평소와 같습니다. 임베디드 Python 폴더에서 Python 실행 파일을 사용하는지 확실하게 확인하세요.\n\n<div class=\"content-ad\"></div>\n\n예를 들어:\n\n\n# 메인 프로젝트 디렉토리인 pythontests 안에서\n.\\python311\\python.exe -m pip install streamlit==1.34.0\n\n# python311 디렉토리에서\npython.exe -m pip install openai\n\n\n참고: 여기서는 아주 잘 작동하지만 여전히 문제가 있습니다. 미리 빌드된 휠을 제공하지 않는 종류의 패키지를 설치할 수 없습니다. 예를 들어, 저는 llama-cpp-python의 팬인데, 최신 버전 0.2.75는 미리 빌드된 휠이 제공되지 않습니다.\n\n어떻게 사용해야 하나요?\n\n<div class=\"content-ad\"></div>\n\n파이썬 프로젝트를 함께 보내려면 동료나 친구들에게 venv을 전달할 수 없습니다. 장치된 Python 디렉토리에 종속성을 설치하면 상대 경로로 종속성을 유지하며... 주요 폴더를 이동하더라도 아무것도 깨지지 않습니다.\n\n![image](/assets/img/2024-05-27-ToeachAIitsownPython_6.png)\n\n## 2. Embedded Python 사용하여 가상 환경 만들기\n\n개인적으로 생각해보면, 이 두 번째 옵션이 적어도 로컬 프로토타이핑에 있어서 선호되는 옵션입니다. 기본적으로 장치된 Python을 사용하여 선택한 Python 버전으로 가상 환경을 만드는 방법입니다.\n\n<div class=\"content-ad\"></div>\n\n내 세팅을 봐볼까요:\n\n- 미니 PC에는 Python 3.10이 설치되어 있어요.\n- 방금 Python311 버전을 만들었어요.\n\n만약 Python 3.12를 사용하는 가상 환경이 필요하다면 어떻게 하면 될까요?\n\n쉽죠!! 여기에서 Python 3.12를 위한 임베디드 Python을 다운로드합시다. ZIP 파일 다운로드를 위해 동일한 pythontests 디렉토리를 사용해볼까요? 터미널에서도 같은 작업을 할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n\nwget https://www.python.org/ftp/python/3.12.2/python-3.12.2-embed-amd64.zip -OutFile python-3.12.2-embed-amd64.zip\n\n\n터미널에서 ZIP 파일을 새 폴더로 압축 해제할 수도 있어요:\n\n\nExpand-Archive -Force .\\python-3.12.2-embed-amd64.zip .\\python312\n\n\n지금은 우리의 테스트 폴더에 pip 패키지와 이미 몇 개의 다른 패키지(streamlit, openai, llama-cpp-python)가 설치된 python311과 아직 pip조차 지원하지 않는 새로운 휴대용 Python이 있어요...\n\n\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_7.png)\n\n그리고 가상 환경을 지원하지 않습니다!\n\n그래서 첫 번째 단계는 python312가 pip 패키지를 다운로드할 수 있는지 확인하는 것입니다. python312 디렉토리로 이동하고 python312._pth를 이전과 동일하게 변경하십시오.\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_8.png)\n\n<div class=\"content-ad\"></div>\n\n터미널 창 안에서 python312 디렉토리 내에서 유명한 get-pip.py를 다운로드하고 명령을 실행합니다.\n\n```js\ncd .\\python312\\\n\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n\n.\\python.exe .\\get-pip.py\n```\n\n## 휴대용 Python 내에 virtualenv 설치하기\n\n내장된 Python에는 venv 도구가 필요합니다. 전통적인 방식으로 Python을 설치하면 이미 이 도구가 함께 제공됩니다.\n\n<div class=\"content-ad\"></div>\n\n저희 경우에는 해당하는 기능이 없지만 간단히 다음과 같이 할 수 있어요.\n\n```js\n.\\python.exe -m pip install virtualenv\n```\n\n휴대용 파이썬으로 가상 환경 생성하기\n\n이제 이 단계에 주의해야 해요. python312로 venv를 생성하려면 가상 환경을 만들 폴더의 메인 폴더에 있어야 해요. 가상 환경을 main directory인 pythontests 폴더 안에 만들고 싶다고 가정해봅시다.\n\n<div class=\"content-ad\"></div>\n\n터미널에서 프로젝트 폴더를 열고 다음을 실행합니다:\n\n```js\n.\\python312\\python.exe -m virtualenv venv\n```\n\n간단히 활성화하려고 시도해보면 작동 중인 것을 확인할 수 있습니다:\n\n```js\nvenv\\Scripts\\activate\n```\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_9.png)\n\n파이썬 버전 확인을 위해 다음 명령어를 실행하세요:\n\n```bash\n.\\venv\\Scripts\\python.exe --version\nPython 3.12.2\n```\n\n# 결론\n\n\n\n<div class=\"content-ad\"></div>\n\n파이썬으로 작업하는 것은 즐겁고 항상 새로운 모험이에요. 이 프로그래밍 언어는 놀라울 만큼 쉽고 인공 지능 애플리케이션을 만드는 데 매우 편리해요.\n\n간단한 해킹을 사용하여 의존성과 설치와 같은 문제조차 해결할 수 있는 것이 놀라울 정도에요. 직접 시도해 보세요!\n\n이 실용적인 기사를 즐겁게 읽었기를 바라요. 이 이야기가 가치 있는 정보를 제공했고 조금이라도 지원하고 싶으면:\n\n- 이 이야기에 많이 박수를 보내주세요\n- 나중에 찾기 쉽도록 기억해야 할 부분을 강조해주세요(나중에 찾기 쉽고 훌륭한 기사 작성에 용이해요)\n- 여기를 클릭하여 자신만의 AI 만드는 방법 배우기, 이 무료 eBook 다운로드 받기\n- 링크를 통해 Medium 회원 가입하기($5/월로 무제한 Medium 이야기 읽기)\n- Medium에서 저를 팔로우하기\n- 내 최신 기사 읽기 https://medium.com/@fabio.matricardi\n\n<div class=\"content-ad\"></div>\n\n더 많은 내용을 보시려면 몇 가지 아이디어가 있습니다:\n\n![Read More](/assets/img/2024-05-27-ToeachAIitsownPython_10.png)\n\n이 이야기는 Generative AI에서 발행되었습니다. LinkedIn에서 연락을 유지하고 Zeniteq를 팔로우하여 최신 AI 이야기를 계속해서 만나보세요.\n\n최신 뉴스 및 생성 AI에 대한 업데이트를 받으시려면 뉴스레터를 구독해주세요. 함께 AI의 미래를 함께 만들어봅시다!\n\n<div class=\"content-ad\"></div>\n\n![2024-05-27-ToeachAIitsownPython_11.png](/assets/img/2024-05-27-ToeachAIitsownPython_11.png)\n\n","ogImage":{"url":"/assets/img/2024-05-27-ToeachAIitsownPython_0.png"},"coverImage":"/assets/img/2024-05-27-ToeachAIitsownPython_0.png","tag":["Tech"],"readingTime":7},{"title":"아두이노 나노 33 BLE Sense의 P1 및 P0 포트 핀을 제어하는 방법","description":"","date":"2024-05-27 13:42","slug":"2024-05-27-HowtocontroltheP1andP0portpinsofArduinoNano33BLESense","content":"\n안녕하세요! 이 간단한 안내서에 오신 것을 환영합니다. 바로 시작해 봅시다. 기존의 아두이노 보드인 UNO, 나노 등은 핀 번호매기기를 기준으로 배치되어 있습니다. 디지털 및 아날로그 핀을 쉽게 다룰 수 있으며 아두이노 스케치에서 GPIO 핀을 쉽게 다룰 수 있어요. 매핑(mapping)이나 핀 가용성에 대해 걱정할 필요가 없습니다.\n\n아두이노 나노 33 BLE Sense가 등장하면서 함께 공부해야할 것이 몇 가지 있습니다. 첫째, 이 보드는 마이크로컨트롤러 nrf52840을 사용하며 다양한 핀(약 48핀)을 가지고 있습니다. 우리는 이 중에서 아두이노 나노 33 BLE Sense가 지원하는 핀들을 제어할 수 있습니다. 둘째, 이 보드에는 Port 0 및 Port 1과 같이 두 가지 포트 핀이 있습니다. 마지막으로, 이 보드를 프로그래밍하는 두 가지 방법이 있습니다: 전통적인 아두이노 방법 또는 Real-Time Operating System (RTOS)을 사용하는 방법입니다. 이 방법이 더 나은 방법이며 권장되는 방법입니다.\n\n이제 아래 다이어그램을 살펴보세요.\n\n<div class=\"content-ad\"></div>\n\n\n![Arduino Nano 33 BLE Sense Pinout](/assets/img/2024-05-27-HowtocontroltheP1andP0portpinsofArduinoNano33BLESense_1.png)\n\nThis information was sourced from the board’s pinout: [Pinout-NANOsense_latest.pdf](https://content.arduino.cc/assets/Pinout-NANOsense_latest.pdf)\n\nOne interesting aspect you'll notice is the pins labeled with D and A, such as D1, D2, and so on. These labels map the original nRF52840 pins to an Arduino-like naming convention. Essentially, this allows us to write Arduino code and refer to the pins using these D and A designations, following the traditional Arduino approach. For instance, if we want to make an LED connected to D6 blink, we can use the following code:\n\n```js\nint led = 6;\n\nvoid setup(){\n  pinMode(led, OUTPUT);\n}\n\nvoid loop(){\n  digitalWrite(led, HIGH);\n  delay(1000);\n  digitalWrite(led, LOW);\n  delay(1000);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n위 대화는 기본적으로 일을 처리하는 간단한 방법이긴 하지만, Nano 33 BLE Sense 보드에는 권장되지 않습니다. 따라서 RTOS의 방식을 따라야 합니다. 현재 발생한 문제는 mbed.h 헤더 파일을 통해 RTOS를 사용하여 보드를 프로그래밍할 때 Arduino 핀 번호를 사용할 수 없다는 것입니다. 그렇다면 핀 번호를 어떻게 얻을까요? 위에서 언급한 도표로 돌아가 보겠습니다. P0.13 형태의 0번 포트 핀과 P1.02 형태의 1번 포트 핀을 사용할 것입니다.\n\n## 핀 번호를 어떻게 얻을까요?\n\n예를 들어 P1.14 핀 (D6)을 사용하려면 32를 1 (P1 부분)로 곱하고 14 (.14 부분)를 더해야 합니다.\n\n다시 말씀드리면:\n\n<div class=\"content-ad\"></div>\n\nP1.14 = 32 \\* 1 + 14 = 46 = p46;\n\nP0.13 = 32\\*0 + 13 = 13 = p13;\n\n선행하는 \"p\" 즉 p46와 같은 것을 추가해야 합니다. mbed.h RTOS 라이브러리를 사용하여 LED를 튜닝하는 예제를 살펴보겠습니다:\n\n```js\n#include \"mbed.h\"\n\n// D6 - P1.14\n//D13 - P0.13 = 32 * 0 + 13 = 13 = p13\n// 32 * 1 + 14 = 32 + 14 = 46 = p46\n\nstatic const PinName led = p46 //계산 결과를 확인하세요, D6 핀과 동일한 것입니다\n\nstatic mbed::DigitalOut myLed(led);\n\nvoid setup() {\n\n}\n\nvoid loop() {\nmyLed = 1;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n그게 다에요. 올바른 계산만 하면 Nano 33 BLE Sense 보드의 모든 GPIO 핀을 제어할 수 있어요.\n\n더 배우고 데모를 보려면 이 TinyML 튜토리얼 시리즈의 영상을 확인해보세요: [https://youtu.be/VDJx7d4BaVg](https://youtu.be/VDJx7d4BaVg)\n","ogImage":{"url":"/assets/img/2024-05-27-HowtocontroltheP1andP0portpinsofArduinoNano33BLESense_0.png"},"coverImage":"/assets/img/2024-05-27-HowtocontroltheP1andP0portpinsofArduinoNano33BLESense_0.png","tag":["Tech"],"readingTime":3},{"title":"마이크로파이썬PyCharms로 시작하기 기본 설정","description":"","date":"2024-05-27 13:41","slug":"2024-05-27-MicroPythoninPyCharmsBasicSetup","content":"\n지난 기사에서는 ESP32에 Python을 설치하고 실행하는 방법을 안내했어요. 하지만 해당 기사는 Thonny를 Python 코드를 마이크로컨트롤러에 작성하는 데 사용할 수 있는 편집기로 소개하며 끝이 났죠. 이는 기초 학습 및 신속하게 시작하는 데에는 훌륭한 도구이지만, 진정한 현대 IDE의 모든 기능을 제공하지는 못합니다. 만약 \"진짜\" 작업을 수행하고 싶다면 가능한 모든 도움이 필요할 거예요. 이 기사에서는 PyCharm에 대해 알아보도록 할게요. 다음 기사에서는 프로세스를 완전히 자동화하여 놀라운 효율성으로 작업할 수 있도록 할 것이에요.\n\n# JetBrains PyCharm, 파이썬의 최고봉\n\n<img src=\"/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_0.png\" />\n\nJetBrains PyCharm을 소개합니다. 오늘날 파이썬 코딩을 위한 최고의 IDE입니다. 여러분이 전체 잠재력을 발휘할 수 있도록 도와주는 인상적인 기능 범위를 제공합니다. 설정에 큰 부담을 주지 않으면서 최대한의 도움을 받을 수 있어요. (Python 확장 프로그램이 있는 VSCode도 훌륭하지만, 개인적으로는 상당히 초보자 친화적이지 않다고 생각해요.) 여기서 Community 버전을 다운로드하세요. 지금 당장 해보세요.\n\n<div class=\"content-ad\"></div>\n\n# 파이참에 MicroPython 플러그인 설치하기\n\n파이참을 설치하고 열었으면, File`Settings`Plugins`Marketplace로 이동하여 MicroPython을 검색하고 설치하세요.\n\n<img src=\"/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_1.png\" />\n\n# 새로운 프로젝트 시작, Micro으로 설정\n\n<div class=\"content-ad\"></div>\n\n![마이크로파이썬 프로젝트 설정](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_2.png)\n\n설치가 완료되면(파이참을 재시작해야 하는지 확인해야 하나요? 그렇다면 분명히 알려줄거에요), 이제 우리는 마이크로파이썬 프로젝트를 시작할 준비가 되었어요! `파일` - `새 프로젝트`로 이동하여 프로젝트 이름을 마음대로 지어보세요. 저는 멋진 이름 MicroTest를 선택했지만, 실제로는 중요하지 않아요. 즐거운 시간을 가지세요. 이 페이지에서 유일하게 확장 가능한 항목인 프로젝트 인터프리터를 확장하면(아마도) 이전에 설치된 파이썬이 자동으로 감지된 것을 보게 될 거에요. 원하는 건 그것뿐이에요. 그냥 컴퓨터 능력을 찬양하고, 그리고 CREATE를 클릭하세요. 파이썬 프로젝트를 만들었어요!\n\n우리가 아름다운 $3 WiFi 듀얼코어 컴퓨터에서 실행할 수 있게 만들어볼까요. 파이참에서 `파일` - `설정` - `언어 및 프레임워크` - `마이크로파이썬`으로 이동하세요. 마이크로파이썬 지원 활성화를 확인하고, 장치 유형으로 ESP8266을 드롭다운에서 선택하세요. 그리고 정말 멋진 DETECT 버튼을 누르는 게 좋겠죠? 음, 그 결과가 좋지 않아요. 왜냐하면 장치를 감지하기 어려울 겁니다. 시도해보세요, 행운아일지도 몰라요. 그렇지 않으면 기기 관리자를 열어서 포트를 직접 찾아야 해요. 이 작업을 어떻게 하는 지 기억이 나지 않는다면, 지난 글의 \"USB에서 보드가 표시되는지 확인하기\" 섹션을 참조하세요. Device path란에 COM 및 #을 입력하세요. 제 기기는 COM4에요. Apply 버튼을 누르세요, 그러나 이 창은 열어둬야 해요...\n\n![장치 포트 찾기](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_3.png)\n\n<div class=\"content-ad\"></div>\n\n아직 설정 창에 있습니다. Project: YourName`Project Structure`로 이동합니다. .idea를 마우스 오른쪽 버튼으로 클릭하고 \"제외됨\"으로 표시하세요. 이 .idea 폴더 안의 파일은 PyCharm을 위한 특정 설정 파일이므로 제외하면 이 파일이 ESP32로 복사되는 것을 방지하게 됩니다. 그렇게 하면 이 파일들이 무용한 공간을 차지하지 않게 됩니다. 그것들에 목적을 부여하고 그대로 두어보세요.\n\n<img src=\"/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_4.png\" />\n\n이제 OK를 누르고 설정 창을 닫을 수 있습니다.\n\n# 프로젝트에 추가하세요, 미친놈 같은^^\n\n<div class=\"content-ad\"></div>\n\n프로젝트 구조를 확인하고 싶다면, 파일 탐색기를 보려면, 아래쪽 왼쪽에 있는 1:Project 버튼을 클릭하거나, Alt + 1을 눌러서 마법 같이 나타나게 합니다. 프로젝트와 동일한 이름을 가진 폴더를 보세요. 제 경우에는 MicroTest입니다. 이 곳에 ESP32에 전송할 파일을 만들어야 합니다. 그러면 시작해보죠.\n\n폴더 이름을 마우스 오른쪽 버튼 클릭하여 New Python File로 이동하세요. 그리고 main.py로 이름 짓기.\n\n<div class=\"content-ad\"></div>\n\n특정 파일이 ESP가 시작될 때마다 자동으로 실행됩니다. 이것은 당신의 주요 큰 소년, 당신의 흔듬, 삼바 파트너, 그리고 2k30 스퀴즈 마스터입니다. 이제 그것을 만드세요. 에디터에서 열기\n\n![이미지](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_7.png)\n\n이제 뭐죠? 필요한 패키지가 있나요? 여기 (언제나) PyCharm이 손을 잡아 주고 미래의 땅으로 안내해줄 것입니다. 그 경고의 오른쪽에 있는 \"요구 사항 설치\"를 클릭하세요. 에디터 창 하단에서 진행 상황을 확인할 수 있고 팝업 창이 나올 때까지 기다리세요.\n\n![이미지](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_8.png)\n\n<div class=\"content-ad\"></div>\n\n# 프로그램 업로드\n\n![이미지](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_9.png)\n\n이 파일 안에 print(“Hello charming world”)를 넣고 저장해 봅시다. 프로그램이 만들어졌어요. 기기로 어떻게 옮기나요?\n\n왼쪽의 프로젝트 브라우저(숨겨져 있으면 alt+1)에서 main.py 파일을 마우스 오른쪽 버튼으로 클릭하고 'Flash main.py'을 선택하세요.\n\n<div class=\"content-ad\"></div>\n\n`<img src=\"/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_10.png\" />`\n\n장치가 연결되고 업로드되고 부드러운 다시 시작이 출력된 것을 볼 수 있습니다. 프로그램을 디바이스에 넣기만 하면 됩니다!\n\n`<img src=\"/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_11.png\" />`\n\n# 장치에 연결하여 프로그램이 컴퓨터 작업을 수행하는 것을 확인하세요\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_12.png)\n\nPyCharm에서 Tools -> MicroPython -> MicroPython REPL로 이동하십시오. 이렇게 하면 화면 하단에 시리얼 연결이 열립니다. 여기에서 상호 작용하는 것은 실제로 ESP32 내부에서 실행되는 MicroPython입니다. 여기에 내용을 입력하고 실제로 장치에서 작업을 수행하는 것을 볼 수 있습니다. LED가 있다면 GPIO 핀을 알고 있다면 해당 내용을 여기에 입력하고 깜박임을 볼 수 있습니다.\n\n![image](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_13.png)\n\n![image](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_14.png)\n\n\n<div class=\"content-ad\"></div>\n\n연결된 상태라면 기기에 리셋 버튼이 있다면 지금 눌러보세요. 그러면 부팅 중인 다양한 \"쓰레기\"가 화면에 나타날 거에요. 이를 '하드 리부트'라고 해요, 잠깐 동안 전원을 끄고 다시 시작하는 것이거든요.\n\n일반적으로 이 정도는 너무 복잡할 수 있어요. 더 가벼우면서 더 빠른 소프트 리부트를 위해 CTRL-D를 누르세요.\n\n이 둘 다에서 화면에 놀라운 온전하게 찍힌 텍스트를 볼 수 있을 거예요. 여보세요, 매력적인 세상!\n\n<div class=\"content-ad\"></div>\n\n# 시리얼 연결에 관한 몇 가지 매우 중요한 참고 사항\n\n- 하이랜더처럼 COM 포트 당 하나의 시리얼 연결만 가능합니다.\n\n이 사실을 기억하는 것이 정말 중요합니다. 마지막 단계 초반처럼 또 다른 MicroPython REPL을 열어보려고 하지 마세요. 임베디드 프로그래밍 생활에서 이런 메시지를 수백만 번이나 보게 될 것입니다:\n\n![이미지](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_16.png)\n\n<div class=\"content-ad\"></div>\n\n이는 거의 항상 다른 장치가 어딘가에 여전히 연결되어 있음을 의미합니다. PyCharm에는 이를 해결하는 훌륭한 기능이 있습니다. 간단히 마우스 오른쪽 버튼을 클릭하고 \"모두 닫기\"를 선택하면 됩니다. 다시 시도하면 성공적으로 연결될 것입니다. 간단죠!\n\n![이미지](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_17.png)\n\n2. 이 터미널에 문제가 있습니다.\n\n![이미지](/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_18.png)\n\n<div class=\"content-ad\"></div>\n\n아마 이미 보셨을 거에요. 백스페이스 처리를 정말 잘 못하죠. 사실 엄청 잘 처리하고 있긴 한데, 보여지는 건 우리가 이상한 쓰레기를 본답니다 ?[. 짜증나죠, 근데 우리는 여기서 타이핑을 할 기회가 많지 않을 거에요, 그래서 필요할 때 그냥 감수해야 해요.\n\n# 일단 가능하지만 완전히 강화되지는 않음\n\n이것은 사실 마이크로파이썬을 PyCharm에서 설정하는 표준적인 방법이에요. 모든 것을 할 수는 있지만, 아직도 우리가 효율적으로 반복하고 개발할 수 있도록 방해하는 심각한 문제가 있어요. 다음 기사에서는 마이크로파이썬을 오늘 가장 효율적으로 작업할 수 있는 개인 스크립트, 설정, 팁을 보여드릴 거에요. 그리고 모든 COM 포트를 닫는 단추 시스템을 만들고, 모든 파일을 장치로 플래싱하고, 디버깅 출력을 볼 수 있는 콘솔을 열 수 있도록 하는 방법을 안내할 거에요.\n","ogImage":{"url":"/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_0.png"},"coverImage":"/assets/img/2024-05-27-MicroPythoninPyCharmsBasicSetup_0.png","tag":["Tech"],"readingTime":6},{"title":"더 나은 것을 만드는 연습","description":"","date":"2024-05-27 13:39","slug":"2024-05-27-Anexerciseinbuildingbetter","content":"\n## 스튜디오 LUFF에 의한 Air Quality Sensory 뒤의 이야기\n\n디자이너로서, 나는 항상 신중한 창작의 힘을 믿어왔습니다 — 아름답게 보이는 것뿐만 아니라 그 이상의 목적을 가진 물건을 만드는 것. 여러 제품을 상상하고 만들어왔지만, 클라이언트와 기업을 위해 많은 제품을 만들었지만, 이번에는 하드웨어와 소프트웨어가 결합된 최초의 프로젝트인데, 나의 창의적인 통제력으로 만들어진 프로젝트입니다. 나는 모든 유물이 창조자의 이념을 담고 있다고 믿습니다. 따라서, kickstarter에서 방영된 스튜디오 LUFF의 Air Quality Sensor는 그저 실용적인 물건 이상을 제공하며, 아름다운 실행 이상을 제공합니다.\n\n파트너인 자자 주일호프와 함께, 우리는 지속 가능한 컴퓨팅 원칙을 기반으로 세트를 작성했으며, 더 나은 물건을 만드는 방법을 탐색하는 것을 약속했습니다.\n\n![이미지](https://miro.medium.com/v2/resize:fit:512/1*iujP39dLZVpEORDyRBNXUw.gif)\n\n<div class=\"content-ad\"></div>\n\n독립적인 창조자로서, 공기 질 센서 프로젝트는 저희가 “지속 가능한 컴퓨팅을 위한 여섯 가지 원칙”에서 제시한 소재 최소화, 내구성 추구, 이해 증진, 그리고 개성을 자극하는 노력을 향한 것을 스케치해 볼 기회를 제공했습니다. 이것은 그 방향으로 나아가는 첫걸음일 뿐, 목적지에 도달한 것이 아니라, 여행을 시작한 것에 불과합니다.\n\n![Air Quality Sensor Project](/assets/img/2024-05-27-Anexerciseinbuildingbetter_0.png)\n\n## 대기 오염\n\n대기 오염에 대해 이야기해봅시다. 우리가 숨쉬는 공기는 우리의 건강에 꼭 필요합니다(WHO 웹사이트에서 더 알아보세요), 하지만 많은 사람들이 우리 주변 환경에 도사리는 보이지 않는 미세 입자와 오염물질에 대해 알지 못하고 있습니다. 외부 대기 질 모니터링이 점점 보급되고 있지만, 사실은 대기 질은 매우 지역적인 문제이며, 한 도시 블록에서 다른 블록, 집에서 집, 심지어 방에서 방으로도 크게 달라질 수 있습니다. 이 지역적 대기 오염의 특성으로 우리가 실제로 숨쉬는 공기의 질을 평가하는 것이 어려운 상황이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-Anexerciseinbuildingbetter_1.png\" />\n\n개인 건강에 미치는 대기 오염의 영향을 이해하기 위해서는 우리 주거 공간에서 숨 쉬는 공기에 대해 알아야 합니다. 우리가 사는 곳에 상관없이 영향을 미치는데, 도시 환경부터 시골까지 사는 사람들에 영향을 미치며, 산불이나 산업 오염과 같은 대규모 원인부터 요리, 바베큐, 혹은 벽난로 사용과 같은 소규모 원인까지 다양합니다.\n\n기술은 우리에게 초능력을 부여해야 한다고 믿습니다. 우리가 볼 수 없는 것을 보이게 하고, 보이지 않는 것을 보이게 한다면, 대기질 모니터를 가지고 있는 것은 우리의 건강과 환경 이해에 도움이 되며, 만들 가치가 있다고 생각합니다.\n\n저는 항상 자신에게 묻는 첫 번째 질문은 \"이것을 만드는 가치가 있을까?\" 그리고 그렇다면, \"남들을 위해서도 만드는 가치가 있을까?\"입니다.\n\n<div class=\"content-ad\"></div>\n\n## 조용한 기술\n\n![air quality sensor](/assets/img/2024-05-27-Anexerciseinbuildingbetter_2.png)\n\n스튜디오 LUFF의 Air Quality Sensor는 \"조용한 기술\" 개념을 구현한 제품입니다. 이 기술은 우리의 거주 공간에 매끄럽게 통합되어 지속적인 주의를 요구하지 않고 일상 생활을 방해하지 않습니다. 화려하고 시각적으로 매력적으로 가정 내 공기를 모니터링하는 방법을 제공하며 방해가 되는 스크린 없이 정보를 제공합니다.\n\n벽에 반사된 LED 다이얼은 현재 공기 질 수준을 AQI(Air Quality Index) 척도를 기반으로 한 원형 시각화를 통해 보여줍니다. 센서 자체의 패턴은 떠다니는 미세 먼지의 개념을 연상시키며 측정 중인 보이지 않는 입자들에 대한 생각을 일깨워줍니다. 이 그래픽은 프로그래밍 코딩 관행을 통해 제작되었습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Sensor Image](/assets/img/2024-05-27-Anexerciseinbuildingbetter_3.png)\n\n센서와의 상호 작용은 동일하게 방해받지 않습니다. 중앙 버튼을 간단히 누르면 현재 대기 질을 나타내는 정보가 표시되며, AQI 척도에서 수준이 중간 이상으로 상승하면 부드러운 애니메이션이 알림을 표시합니다. 크게 시끄럽게 알람이 울리지 않습니다. 대기 질 센서는 진단 도구이며 신원이 아닙니다. 원인을 조사하고 대응할 수 있는 데이터와 통찰을 제공합니다.\n\n## 소재 최소화\n\n제약 조건과 최소 소재 및 에너지 사용량으로 최대한 효과를 뽑아내는 것에 항상 매료되어 왔습니다. 기후 위기 및 그 결과를 가리키는 헤드라인으로 지배되는 세계에서, 아무 것이나 만드는 최상의 접근법은 필요한 소재의 투입을 최소화하는 것입니다. 그 이유로 초기 프로토타입에서 케이스(아마도 플라스틱으로 만들어진 것)가 필요했을 것으로 예상되는 것으로부터 벗어나 대신 프린트된 회로 기판과 센서 모듈만을 사용한 디자인을 선택했습니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n![An exercise in building better](/assets/img/2024-05-27-Anexerciseinbuildingbetter_4.png)\n\n이 방식은 매우 정확한 PMS 7003 센서 모듈을 다른 상용 제품에서 찾기 어려운 가격으로 보다 넓은 대중들이 사용할 수 있게 합니다. 자연에서 발표한 이 기사에 따르면 연구들이 PMS 7003의 신뢰성을 입증하여 시간이 흐름에 따라 공기 오염을 정확하게 측정하기 위한 최상의 센서 모듈 중 하나로 인정하고 있습니다.\n\n## 오래 가도록 노력하세요\n\n또 다른 반성점은 하드웨어 제품들이 점점 더 클라우드 서비스에 의존하고 있다는 점입니다. 일부 하드웨어 제품들은 클라우드 서비스의 \"프론트 엔드\"일 뿐이며, 클라우드 서비스가 작동을 중지하면 하드웨어 제품은 많은 기능을 상실하거나 완전히 작동을 멈출 수 있습니다. 예를 들어 jibo, pebble 또는 revolv와 같은 많은 제품들이 이에 해당합니다.\n\n\n<div class=\"content-ad\"></div>\n\n스튜디오 LUFF의 에어 품질 센서 뒤에 담겨진 철학은 \"로컬 우선\"입니다. 이 접근 방식은 기기의 기능이 견고하고 미래 지향적이며, 로컬 데이터 저장 및 오프라인 기능을 중시하여 클라우드 서비스에 의존하지 않습니다. 인터넷 연결이 끊겨도 센서는 계속 작동하여, 대시보드의 SD 카드에 로컬로 공기 품질 데이터를 저장하며, 개인 정보 보호와 장기적인 사용을 위한 안전장치로 작용합니다. 게다가 로컬 WiFi 네트워크를 통해 센서로 직접 액세스할 수 있는 웹 인터페이스를 통해, 외부 서버가 필요하지 않고 역사적인 공기 품질 및 실시간 데이터에 접근할 수 있습니다.\n\n![Air Quality Sensor](/assets/img/2024-05-27-Anexerciseinbuildingbetter_5.png)\n\n오픈 하드웨어 아키텍쳐를 갖춘 저희 센서는 쉽게 수리할 수 있습니다. 사실, 고장난 센서 모듈을 교체하는 것은 상당히 간단하며, 앞으로 작동이 중단된다면 구성 요소를 쉽게 디버깅하고 교체할 수 있습니다.\n\n## 이해 심기\n\n<div class=\"content-ad\"></div>\n\n장치는 그의 미니멀리즘의 본질로 인해 이해하기 쉽습니다. 센서 뒷면의 구성 요소들은 하드웨어를 사용자 정의하려는 사용자에게 쉽게 접근하고 볼 수 있습니다.\n\n또 다른 측면인 클라우드 컴퓨팅을 피함에 따라, 서버에 의존하지 않고 소프트웨어가 자체 포함되어 있기 때문에 센서의 작동 전체 구조를 파악하기가 더 쉽습니다. 또 다른 혜택으로는 훨씬 낮은 전력 소비가 있습니다. 주로 C 및 C++로 작성된 임베디드 소프트웨어를 사용하는 것이 웹 기반 소프트웨어 스택보다 효율적이기 때문입니다. 클라우드 개념은 컴퓨팅을 무형화합니다. 그러나 온라인으로 소비하는 모든 것에 전력을 공급하는 데이터 센터는 많은 전기를 사용하며 땅을 차지하고 많은 물을 사용하며 큰 탄소 발자국을 남기고 많은 전자 폐기물을 생산합니다.\n\n우리는 이러한 동적들 중 한 가지에 고수하고 싶지 않았기 때문에 공기 질 센서를 디자인했으며, 이전에 설명한 대로 역사적 데이터를 내부 SD 카드에 지역적으로 저장할 수 있도록 하고 자체 웹 페이지에서 해당 데이터를 제공합니다. 또한 사용자와 코드를 공유하여 사용자들이 이해할 수 있도록 했습니다.\n\n## 창의적인 전자 공작\n\n<div class=\"content-ad\"></div>\n\n저희가 고안한 소프트웨어 아키텍처는 다양한 수준에서 사용자 정의가 가능합니다. 로컬 네트워크를 통해 제공되는 웹 페이지는 SD 카드에 저장되어 쉽게 사용자 정의 및 개선할 수 있습니다.\n\n장치의 동작은 장치의 지능을 제공하는 마이크로컨트롤러의 코드를 변경함으로써 더욱 개인화할 수 있습니다. ESP32-S3를 사용하여 노트북에 연결하고 Arduino를 통해 코드를 업로드하면 새 소프트웨어를 업로드할 수 있습니다.\n\n![이미지](/assets/img/2024-05-27-Anexerciseinbuildingbetter_6.png)\n\n스튜디오 LUFF의 공기 품질 센서는 우리가 기술 제품에서 보고 싶은 원칙을 많이 담은 열정 프로젝트입니다. 수명을 추구하고 이해를 잘하며 소재를 최소화하고 만들기를 영감을 준다는 원칙을 준수하면서, 저희 장치는 사물을 만드는 다른 접근 방식을 보여주려 노력합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Air Quality Sensor](/assets/img/2024-05-27-Anexerciseinbuildingbetter_7.png)\n\nThrough its thoughtful design and localized data storage, the Air Quality Sensor empowers individuals to take control of the invisible factors impacting their health and well-being. It serves as an example that well designed technology can be beautiful yet last long, insightful yet customizable, but most importantly this project wants to be a catalyst for starting a wider conversation about how we can create better products.\n\nThank you for reading.\n\nIf you are interested in supporting the project or just learn more check out the product page.\n\n","ogImage":{"url":"/assets/img/2024-05-27-Anexerciseinbuildingbetter_0.png"},"coverImage":"/assets/img/2024-05-27-Anexerciseinbuildingbetter_0.png","tag":["Tech"],"readingTime":6}],"page":"108","totalPageCount":113,"totalPageGroupCount":6,"lastPageGroup":13,"currentPageGroup":5},"__N_SSG":true}