{"pageProps":{"post":{"title":"맥OS 풀 높이 사이드바 창","description":"","date":"2024-06-20 14:37","slug":"2024-06-20-macOSfullheightsidebarwindow","content":"\n\n요즘, macOS 앱에서 전체 높이 사이드바와 풍부한 툴바 및 타이틀바를 원했어요.\n\n그럴 때 SwiftUI의 NavigationSplitView와 AppKit API의 NSSplitViewController를 사용하면 됩니다.\n\n# SwiftUI 앱 라이프사이클에서\n\nWindowGroup와 샘플 프로젝트에서 NavigationSplitView를 빠르게 경험했는데, 아주 쉽게 작동했어요:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*H0R5oiWQVLVOyNl686y6RA.gif\" />\n\n# 앱킷 앱 라이프사이클에서\n\n하지만 NSHostingController를 사용하거나 심지어 AppKit 및 NSSplitViewController를 사용하여 실제 프로젝트로 돌아가면 (내 앱이 SwiftUI 앱 라이프사이클로 완전히 이관되지 않았기 때문에) 기본적으로 다른 동작을 하며 처음부터 왜 그런 건지 이해할 수 없습니다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*KeIibd3zjL-7Twq6vfFHtQ.gif\" />\n\n<div class=\"content-ad\"></div>\n\n저는 먼저 Xcode에서 창 보기 계층을 비교해 보려고 합니다:\n\n![Window view hierarchy](/assets/img/2024-06-20-macOSfullheightsidebarwindow_0.png)\n\n하지만 거의 비슷해 보입니다.\n\n많은 연구 끝에 다음을 발견하고 시청했습니다:\n- [SwiftUI 네비게이션 분할 보기에서 사이드바 버튼 사용하는 방법](https://stackoverflow.com/questions/78604429/using-sidebar-button-jump-in-swiftui-navigationsplitview-with-nshostingcontrolle/78615176#78615176)\n- [Apple 개발자 비디오](https://developer.apple.com/videos/play/wwdc2020/10104/)\n\n<div class=\"content-ad\"></div>\n\n저와 같이 프로젝트가 아직 SwiftUI 앱 라이프사이클로 전환되지 않았다면 다음과 같이 할 수 있습니다:\n\n```js\n// SwiftUI.NavigationSplitView를 NSHostingView 또는 NSHostingController와 함께 사용\n// 👀 .fullSizeContentView를 살펴봅니다\nlet window = NSWindow(contentRect: .init(origin: .zero, size: .init(width: 800, height: 600)), styleMask: [.closable, .miniaturizable, .titled, .resizable, .fullSizeContentView], backing: .buffered, defer: false)\nwindow.contentView = NSHostingView(rootView: ContentView())\nwindow.center()\nwindow.title = \"Hello world\"\nlet controller = NSWindowController(window: window)\ncontroller.showWindow(nil)\n\n...\nstruct ContentView: View {\n    var body: some View {\n        NavigationSplitView {\n            Text(\"A\")\n        } content: {\n            Text(\"B\")\n        } detail: {\n            Text(\"C\")\n        }\n    }\n}\n```\n\n```js\n// 👀 NSSplitViewController 사용\nwindow = NSWindow(\n    contentRect: NSRect(x: 0, y: 0, width: 800, height: 600),\n    // 👀 .fullSizeContentView를 살펴봅니다\n    styleMask: [.titled, .closable, .resizable, .miniaturizable, .fullSizeContentView],\n    backing: .buffered,\n    defer: false\n)\nwindow.center()\nwindow.title = \"Hello world\"\nwindow.titlebarAppearsTransparent = true\nlet toolbar = NSToolbar(identifier: \"my-identifier\")\ntoolbar.delegate = self\ntoolbar.allowsUserCustomization = false\ntoolbar.displayMode = .iconOnly\nself.window?.toolbar = toolbar\n\n// 👀 sidebarWithViewController를 살펴봅니다\nlet sidebarItem = NSSplitViewItem(sidebarWithViewController: SidebarViewController())\nsidebarItem.allowsFullHeightLayout = true\nsidebarItem.minimumThickness = 200\nsidebarItem.maximumThickness = 300\nsidebarItem.canCollapse = true\nsidebarItem.isCollapsed = false\nsplitViewController.addSplitViewItem(sidebarItem)\n\n// 👀 contentListWithViewController를 살펴봅니다\nlet mainContentItem = NSSplitViewItem(contentListWithViewController: MainContentViewController())\nmainContentItem.allowsFullHeightLayout = true\nsplitViewController.addSplitViewItem(mainContentItem)\n\nlet windowController = NSWindowController(window: window)\nwindowController.contentViewController = splitViewController\nwindowController.showWindow(nil)\n\n...\n\nprivate extension NSToolbarItem.Identifier {\n    static let searchItem: NSToolbarItem.Identifier = NSToolbarItem.Identifier(rawValue: \"SearchItem\")\n}\n\nextension AppDelegate: NSToolbarDelegate {\n    func toolbarDefaultItemIdentifiers(_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {\n        return [\n            .toggleSidebar,\n            // 👀 sidebarTrackingSeparator를 살펴봅니다\n            .sidebarTrackingSeparator,\n            .flexibleSpace,\n            .searchItem\n        ]\n    }\n\n    func toolbarAllowedItemIdentifiers(_ toolbar: NSToolbar) -> [NSToolbarItem.Identifier] {\n        return toolbarDefaultItemIdentifiers(toolbar)\n    }\n\n    func toolbar(_ toolbar: NSToolbar, itemForItemIdentifier itemIdentifier: NSToolbarItem.Identifier, willBeInsertedIntoToolbar flag: Bool) -> NSToolbarItem? {\n        var toolbarItem: NSToolbarItem?\n\n        switch itemIdentifier {\n            case .toggleSidebar:\n                let item = NSToolbarItem(itemIdentifier: .toggleSidebar)\n                item.image = NSImage(systemSymbolName: \"sidebar.left\", accessibilityDescription: nil)\n                toolbarItem = item\n            case .sidebarTrackingSeparator:\n                let item = NSToolbarItem(itemIdentifier: .sidebarTrackingSeparator)\n                toolbarItem = item\n            case .searchItem:\n                let searchToolbarItem = NSSearchToolbarItem(itemIdentifier: .searchItem)\n                searchToolbarItem.searchField = .init()\n                toolbarItem = searchToolbarItem\n            default:\n                toolbarItem = nil\n        }\n        toolbarItem?.isBordered = true\n\n        return toolbarItem\n    }\n}\n```\n\nAppKit에서 NSSplitViewController를 사용하는 경우 코드가 조금 더 구체적이지만 윈도우의 styleMask에 .fullSizeContentView를 사용하고 sidebarTrackingSeparator를 사용하는 것이 주요 포인트입니다. AppKit은 sidebarTrackingSeparator를 이용하여 타이틀 바 내에 구분선을 배치하고 전체 높이의 바를 효과적으로 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n그럼, 이제 yourNavigationSplitView가 WindowGroup를 사용했을 때와 동일한 스타일과 동작을 갖게 되었습니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*s28vqaok0sNDgQZdjF4qKA.gif)\n\n앞으로 다른 사람들에게 도움이 되길 바랍니다. 정말 이 부분에 꽤 많은 시간을 소비했었거든 :(","ogImage":{"url":"/assets/img/2024-06-20-macOSfullheightsidebarwindow_0.png"},"coverImage":"/assets/img/2024-06-20-macOSfullheightsidebarwindow_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>요즘, macOS 앱에서 전체 높이 사이드바와 풍부한 툴바 및 타이틀바를 원했어요.</p>\n<p>그럴 때 SwiftUI의 NavigationSplitView와 AppKit API의 NSSplitViewController를 사용하면 됩니다.</p>\n<h1>SwiftUI 앱 라이프사이클에서</h1>\n<p>WindowGroup와 샘플 프로젝트에서 NavigationSplitView를 빠르게 경험했는데, 아주 쉽게 작동했어요:</p>\n<div class=\"content-ad\"></div>\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*H0R5oiWQVLVOyNl686y6RA.gif\">\n<h1>앱킷 앱 라이프사이클에서</h1>\n<p>하지만 NSHostingController를 사용하거나 심지어 AppKit 및 NSSplitViewController를 사용하여 실제 프로젝트로 돌아가면 (내 앱이 SwiftUI 앱 라이프사이클로 완전히 이관되지 않았기 때문에) 기본적으로 다른 동작을 하며 처음부터 왜 그런 건지 이해할 수 없습니다.</p>\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*KeIibd3zjL-7Twq6vfFHtQ.gif\">\n<div class=\"content-ad\"></div>\n<p>저는 먼저 Xcode에서 창 보기 계층을 비교해 보려고 합니다:</p>\n<p><img src=\"/assets/img/2024-06-20-macOSfullheightsidebarwindow_0.png\" alt=\"Window view hierarchy\"></p>\n<p>하지만 거의 비슷해 보입니다.</p>\n<p>많은 연구 끝에 다음을 발견하고 시청했습니다:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/78604429/using-sidebar-button-jump-in-swiftui-navigationsplitview-with-nshostingcontrolle/78615176#78615176\" rel=\"nofollow\" target=\"_blank\">SwiftUI 네비게이션 분할 보기에서 사이드바 버튼 사용하는 방법</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2020/10104/\" rel=\"nofollow\" target=\"_blank\">Apple 개발자 비디오</a></li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>저와 같이 프로젝트가 아직 SwiftUI 앱 라이프사이클로 전환되지 않았다면 다음과 같이 할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// SwiftUI.NavigationSplitView를 NSHostingView 또는 NSHostingController와 함께 사용</span>\n<span class=\"hljs-comment\">// 👀 .fullSizeContentView를 살펴봅니다</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable language_\">window</span> = <span class=\"hljs-title class_\">NSWindow</span>(<span class=\"hljs-attr\">contentRect</span>: .<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">origin</span>: .<span class=\"hljs-property\">zero</span>, <span class=\"hljs-attr\">size</span>: .<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">800</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">600</span>)), <span class=\"hljs-attr\">styleMask</span>: [.<span class=\"hljs-property\">closable</span>, .<span class=\"hljs-property\">miniaturizable</span>, .<span class=\"hljs-property\">titled</span>, .<span class=\"hljs-property\">resizable</span>, .<span class=\"hljs-property\">fullSizeContentView</span>], <span class=\"hljs-attr\">backing</span>: .<span class=\"hljs-property\">buffered</span>, <span class=\"hljs-attr\">defer</span>: <span class=\"hljs-literal\">false</span>)\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">contentView</span> = <span class=\"hljs-title class_\">NSHostingView</span>(<span class=\"hljs-attr\">rootView</span>: <span class=\"hljs-title class_\">ContentView</span>())\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">center</span>()\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">title</span> = <span class=\"hljs-string\">\"Hello world\"</span>\n<span class=\"hljs-keyword\">let</span> controller = <span class=\"hljs-title class_\">NSWindowController</span>(<span class=\"hljs-attr\">window</span>: <span class=\"hljs-variable language_\">window</span>)\ncontroller.<span class=\"hljs-title function_\">showWindow</span>(nil)\n\n...\nstruct <span class=\"hljs-title class_\">ContentView</span>: <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n        <span class=\"hljs-title class_\">NavigationSplitView</span> {\n            <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"A\"</span>)\n        } <span class=\"hljs-attr\">content</span>: {\n            <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"B\"</span>)\n        } <span class=\"hljs-attr\">detail</span>: {\n            <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"C\"</span>)\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 👀 NSSplitViewController 사용</span>\n<span class=\"hljs-variable language_\">window</span> = <span class=\"hljs-title class_\">NSWindow</span>(\n    <span class=\"hljs-attr\">contentRect</span>: <span class=\"hljs-title class_\">NSRect</span>(<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">800</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">600</span>),\n    <span class=\"hljs-comment\">// 👀 .fullSizeContentView를 살펴봅니다</span>\n    <span class=\"hljs-attr\">styleMask</span>: [.<span class=\"hljs-property\">titled</span>, .<span class=\"hljs-property\">closable</span>, .<span class=\"hljs-property\">resizable</span>, .<span class=\"hljs-property\">miniaturizable</span>, .<span class=\"hljs-property\">fullSizeContentView</span>],\n    <span class=\"hljs-attr\">backing</span>: .<span class=\"hljs-property\">buffered</span>,\n    <span class=\"hljs-attr\">defer</span>: <span class=\"hljs-literal\">false</span>\n)\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">center</span>()\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">title</span> = <span class=\"hljs-string\">\"Hello world\"</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">titlebarAppearsTransparent</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">let</span> toolbar = <span class=\"hljs-title class_\">NSToolbar</span>(<span class=\"hljs-attr\">identifier</span>: <span class=\"hljs-string\">\"my-identifier\"</span>)\ntoolbar.<span class=\"hljs-property\">delegate</span> = self\ntoolbar.<span class=\"hljs-property\">allowsUserCustomization</span> = <span class=\"hljs-literal\">false</span>\ntoolbar.<span class=\"hljs-property\">displayMode</span> = .<span class=\"hljs-property\">iconOnly</span>\nself.<span class=\"hljs-property\">window</span>?.<span class=\"hljs-property\">toolbar</span> = toolbar\n\n<span class=\"hljs-comment\">// 👀 sidebarWithViewController를 살펴봅니다</span>\n<span class=\"hljs-keyword\">let</span> sidebarItem = <span class=\"hljs-title class_\">NSSplitViewItem</span>(<span class=\"hljs-attr\">sidebarWithViewController</span>: <span class=\"hljs-title class_\">SidebarViewController</span>())\nsidebarItem.<span class=\"hljs-property\">allowsFullHeightLayout</span> = <span class=\"hljs-literal\">true</span>\nsidebarItem.<span class=\"hljs-property\">minimumThickness</span> = <span class=\"hljs-number\">200</span>\nsidebarItem.<span class=\"hljs-property\">maximumThickness</span> = <span class=\"hljs-number\">300</span>\nsidebarItem.<span class=\"hljs-property\">canCollapse</span> = <span class=\"hljs-literal\">true</span>\nsidebarItem.<span class=\"hljs-property\">isCollapsed</span> = <span class=\"hljs-literal\">false</span>\nsplitViewController.<span class=\"hljs-title function_\">addSplitViewItem</span>(sidebarItem)\n\n<span class=\"hljs-comment\">// 👀 contentListWithViewController를 살펴봅니다</span>\n<span class=\"hljs-keyword\">let</span> mainContentItem = <span class=\"hljs-title class_\">NSSplitViewItem</span>(<span class=\"hljs-attr\">contentListWithViewController</span>: <span class=\"hljs-title class_\">MainContentViewController</span>())\nmainContentItem.<span class=\"hljs-property\">allowsFullHeightLayout</span> = <span class=\"hljs-literal\">true</span>\nsplitViewController.<span class=\"hljs-title function_\">addSplitViewItem</span>(mainContentItem)\n\n<span class=\"hljs-keyword\">let</span> windowController = <span class=\"hljs-title class_\">NSWindowController</span>(<span class=\"hljs-attr\">window</span>: <span class=\"hljs-variable language_\">window</span>)\nwindowController.<span class=\"hljs-property\">contentViewController</span> = splitViewController\nwindowController.<span class=\"hljs-title function_\">showWindow</span>(nil)\n\n...\n\nprivate extension <span class=\"hljs-title class_\">NSToolbarItem</span>.<span class=\"hljs-property\">Identifier</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">searchItem</span>: <span class=\"hljs-title class_\">NSToolbarItem</span>.<span class=\"hljs-property\">Identifier</span> = <span class=\"hljs-title class_\">NSToolbarItem</span>.<span class=\"hljs-title class_\">Identifier</span>(<span class=\"hljs-attr\">rawValue</span>: <span class=\"hljs-string\">\"SearchItem\"</span>)\n}\n\nextension <span class=\"hljs-title class_\">AppDelegate</span>: <span class=\"hljs-title class_\">NSToolbarDelegate</span> {\n    func <span class=\"hljs-title function_\">toolbarDefaultItemIdentifiers</span>(_ <span class=\"hljs-attr\">toolbar</span>: <span class=\"hljs-title class_\">NSToolbar</span>) -> [<span class=\"hljs-title class_\">NSToolbarItem</span>.<span class=\"hljs-property\">Identifier</span>] {\n        <span class=\"hljs-keyword\">return</span> [\n            .<span class=\"hljs-property\">toggleSidebar</span>,\n            <span class=\"hljs-comment\">// 👀 sidebarTrackingSeparator를 살펴봅니다</span>\n            .<span class=\"hljs-property\">sidebarTrackingSeparator</span>,\n            .<span class=\"hljs-property\">flexibleSpace</span>,\n            .<span class=\"hljs-property\">searchItem</span>\n        ]\n    }\n\n    func <span class=\"hljs-title function_\">toolbarAllowedItemIdentifiers</span>(_ <span class=\"hljs-attr\">toolbar</span>: <span class=\"hljs-title class_\">NSToolbar</span>) -> [<span class=\"hljs-title class_\">NSToolbarItem</span>.<span class=\"hljs-property\">Identifier</span>] {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">toolbarDefaultItemIdentifiers</span>(toolbar)\n    }\n\n    func <span class=\"hljs-title function_\">toolbar</span>(_ <span class=\"hljs-attr\">toolbar</span>: <span class=\"hljs-title class_\">NSToolbar</span>, itemForItemIdentifier <span class=\"hljs-attr\">itemIdentifier</span>: <span class=\"hljs-title class_\">NSToolbarItem</span>.<span class=\"hljs-property\">Identifier</span>, willBeInsertedIntoToolbar <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-title class_\">Bool</span>) -> <span class=\"hljs-title class_\">NSToolbarItem</span>? {\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">toolbarItem</span>: <span class=\"hljs-title class_\">NSToolbarItem</span>?\n\n        <span class=\"hljs-keyword\">switch</span> itemIdentifier {\n            <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">toggleSidebar</span>:\n                <span class=\"hljs-keyword\">let</span> item = <span class=\"hljs-title class_\">NSToolbarItem</span>(<span class=\"hljs-attr\">itemIdentifier</span>: .<span class=\"hljs-property\">toggleSidebar</span>)\n                item.<span class=\"hljs-property\">image</span> = <span class=\"hljs-title class_\">NSImage</span>(<span class=\"hljs-attr\">systemSymbolName</span>: <span class=\"hljs-string\">\"sidebar.left\"</span>, <span class=\"hljs-attr\">accessibilityDescription</span>: nil)\n                toolbarItem = item\n            <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">sidebarTrackingSeparator</span>:\n                <span class=\"hljs-keyword\">let</span> item = <span class=\"hljs-title class_\">NSToolbarItem</span>(<span class=\"hljs-attr\">itemIdentifier</span>: .<span class=\"hljs-property\">sidebarTrackingSeparator</span>)\n                toolbarItem = item\n            <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">searchItem</span>:\n                <span class=\"hljs-keyword\">let</span> searchToolbarItem = <span class=\"hljs-title class_\">NSSearchToolbarItem</span>(<span class=\"hljs-attr\">itemIdentifier</span>: .<span class=\"hljs-property\">searchItem</span>)\n                searchToolbarItem.<span class=\"hljs-property\">searchField</span> = .<span class=\"hljs-title function_\">init</span>()\n                toolbarItem = searchToolbarItem\n            <span class=\"hljs-attr\">default</span>:\n                toolbarItem = nil\n        }\n        toolbarItem?.<span class=\"hljs-property\">isBordered</span> = <span class=\"hljs-literal\">true</span>\n\n        <span class=\"hljs-keyword\">return</span> toolbarItem\n    }\n}\n</code></pre>\n<p>AppKit에서 NSSplitViewController를 사용하는 경우 코드가 조금 더 구체적이지만 윈도우의 styleMask에 .fullSizeContentView를 사용하고 sidebarTrackingSeparator를 사용하는 것이 주요 포인트입니다. AppKit은 sidebarTrackingSeparator를 이용하여 타이틀 바 내에 구분선을 배치하고 전체 높이의 바를 효과적으로 만듭니다.</p>\n<div class=\"content-ad\"></div>\n<p>그럼, 이제 yourNavigationSplitView가 WindowGroup를 사용했을 때와 동일한 스타일과 동작을 갖게 되었습니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*s28vqaok0sNDgQZdjF4qKA.gif\" alt=\"image\"></p>\n<p>앞으로 다른 사람들에게 도움이 되길 바랍니다. 정말 이 부분에 꽤 많은 시간을 소비했었거든 :(</p>\n</body>\n</html>\n"},"__N_SSG":true}