{"pageProps":{"post":{"title":"SQL 윈도우 함수 데이터 열정가들을 위한 최고의 도구","description":"","date":"2024-06-19 01:43","slug":"2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts","content":"\n\n\n![SQL Window Functions](/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_0.png)\n\n요즘에는 엄청난 양의 데이터를 다루고 있습니다. 이 주요한 도전에 따라 다양한 소스의 복잡도도 함께 증가하고 있습니다. 이러한 환경에서 SQL은 여전히 영웅이며, 이 데이터 바다에서 가치 있는 통찰을 추출하고 탐색하는 데 꼭 필요한 도구입니다.\n\nSQL이 제공하는 많은 강력한 기능 중에서도 윈도우 함수는 특히 주목할 만한 요소입니다. 이러한 함수들은 테이블 행 집합을 대상으로 높명한 계산을 가능하게 하며, 고급 데이터 분석에 필수적이며 데이터와 상호작용하는 방법을 변화시키는 데 중요합니다.\n\n이 기사에서는 SQL의 윈도우 함수 개념을 해부하고 이해할 것입니다. 언제 윈도우 함수를 사용해야 하는지, 그리고 SQL 쿼리에서 효과적으로 구현하는 방법에 대해 살펴볼 것입니다. 이 가이드를 마치면 윈도우 함수의 강력함과 유연성에 대한 깊은 이해를 얻게 될 것이며, 데이터 분석 기술을 향상시키기 위한 실제 예제를 활용할 수 있을 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 윈도우 함수가 뭔가요?\n\n경험 수준에 상관 없이 모든 데이터 애호가는 윈도우 함수에 대해 들어봤거나 사용해 본 적이 있을 것입니다. 이 강력한 도구들은 모든 SQL 강좌에서 퍼져 있으며 데이터 작업을 하는 사람들의 일상생활에서 필수불가결합니다.\n\n구글에서 빠르게 검색을 해보죠…몇 분 후에 혹은 TV 광고를 보고 나서, 우리는 윈도우 함수가 다음과 같다는 사실을 알게 됩니다:\n\n<div class=\"content-ad\"></div>\n\n# 문법에 관해서 뭔가 언급했다고 했나요?\n\n그렇습니다. 이 매우 강력한 도구에는 특정 구문과 같은 트릭이 함께 제공됩니다.\n\n![image](/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_1.png)\n\n위 이미지에서 볼 수 있듯이, 윈도우 함수의 구문은 네 부분으로 나뉠 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- 집계/함수: 여기서 집계 (예: AVG, SUM) 또는 LAG(), LEAD(), ROW_NUMBER(), RANK(), DENSE_RANK()과 같은 특정 창 함수를 배치하여 작업을 시작합니다. 몇 가지 더 있지만, 이 중에서는 가장 일반적으로 사용되는 것들이에요 (적어도 저는 이것들을 가장 많이 사용해요 😁)\n- OVER: 이 키워드는 윈도우 함수를 사용할 것임을 IDE에 \"알리는\" 데에 사용됩니다. 이는 \"여기서 무언가를 할 것이고, 무언가 복잡한 것에 대비해야 한다\"고 말하는 것과 같아요.\n- PARTITION BY: 이 절은 결과를 파티션 또는 창으로 나눕니다. 우리는 이 과정에서 초기에 설정한 집계나 함수를 적용할 것입니다. 이 부분을 작성한 후에는 파티션을 기준으로 필드를 개발해야 합니다. 순위 함수와 함께 사용되지 않아요.\n- ORDER BY: 경우에 따라 선택 사항일 수 있지만, 이것이 하는 일을 알아두는 것이 좋아요. 이는 각 파티션 내의 행을 정렬하는 데 사용되며, RANK(), DENSE_RANK(), ROW_NUMBER()와 같은 순위 함수를 사용할 때 유용합니다.\n\n# 목표를 달성하기 위한 다양한 창 함수\n\n이전 섹션에서 창 함수 구문에 대해 이야기했어요. 창 함수 구문과 독립적으로 작동하지 않는 몇 가지 함수를 언급했죠.\n\n일부는 각 파티션의 각 행에 대한 순위 값을 반환하기 때문에 순위 함수라고 불리며, 다른 것은 시계열 창 함수입니다.\n\n<div class=\"content-ad\"></div>\n\n순위 함수:\n\n- RANK() : 결과 집합의 파티션 내 각 행에 순위를 할당하며, 동일한 값을 가진 행은 동일한 순위를 받습니다.\n- DENSE_RANK() : RANK()와 유사하지만 연속적인 순위 값을 가집니다. 동일한 값은 동일한 순위를 받으며, 다음 순위 값은 다음 연속 정수입니다.\n- NTILE() : 결과 집합을 동일한 그룹으로 분할하고 각 행에 속하는 그룹을 나타내는 숫자를 할당합니다.\n- ROW_NUMBER() : 결과 집합의 파티션 내 각 행에 고유한 연속 정수를 할당하며, 각 파티션의 첫 번째 행부터 1로 시작합니다.\n\n시계열 함수:\n\n- LAG() : 결과 집합 내 이전 행의 값을 가져오는 함수로, 자체 조인이 필요하지 않습니다. 연속된 행 간의 차이를 계산하는 데 도움이 됩니다.\n- LEAD() : 다음 행의 값을 예측하는 데 유용한, 자체 조인 없이 다음 행의 값을 액세스할 수 있습니다. 추세나 값의 변화를 예측하는 데 도움이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 영원한 질문: 왜...\n\n많은 것들에 대해 우리가 하는 일반적인 질문들이 있습니다. SQL의 창 함수도 예왽이 아닙니다. 창 함수가 여러분에게 시간과 노력을 절약해줄 수 있는 상황을 이해하려면 다음을 살펴보겠습니다:\n\n왜 그리고 언제 우리는 창 함수를 사용해야 할까요?\n\n언제부터 시작해볼까요. 언제 우리는 창 함수를 사용할까요? 잘, 우리가 창 함수를 사용해야 하는 시점은 언제든지 우리가 필요로 할 때 입니다:\n\n<div class=\"content-ad\"></div>\n\n- 특정 조건에 따라 데이터 하위 집합에서 누적 합계, 순위, 평균 또는 다른 계산을 계산합니다.\n- 현재 및 이전/다음 행 값 비교\n\n왜 윈도우 함수를 사용해야 하는지 왜도 빼놓지 마세요. 상황에 필요할 때 윈도우 함수를 사용해야 하는 이유는 무엇인가요?\n \n윈도우 함수를 사용해야 하는 이유:\n\n- 행 레벨 세부 정보 유지 — 데이터를 축소하지 않고 계산을 수행할 수 있는데, 이는 원본 데이터를 유지한 채 여러 행을 대상으로 계산할 수 있도록 합니다.\n- 복잡한 쿼리 간소화 — 이 도구를 사용하면 가장 복잡한 쿼리를 간소화하여 읽기 좋고 작성하기 쉽고, 무엇보다도 유지보수하기 쉽게 만들어줍니다.\n- 성능 향상 — SQL 엔진에서 최적화되어 대량 데이터셋의 경우 더 나은 성능을 제공하는 경우가 많습니다.\n- 고급 분석 활성화 — 누적 합계, 이동 평균 및 기타 고급 분석 작업을 실행할 수 있도록 합니다.\n- 자세한 분석을 위한 데이터 파티션 — 특정 기준에 따라 데이터를 분할하여 전체 데이터 집계 없이 그룹 내에서 자세한 분석을 가능하게 합니다.\n- 시계열 및 변경 감지 지원 — 이전 또는 다음 행 값에 액세스하는 내장 지원을 제공하여 시계열 데이터 및 변경 감지에 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n# 실제 사용 사례\n\n은행 분야에서 데이터 엔지니어로 일하고 있는데, 계약의 \"단계\"가 변경된 레코드를 식별하고 이 변경 날짜를 기록해야 하는 요청을 받았어요.\n\n쉽게 말해, 그렇게 하는 게 쉽지 않을 것 같죠? 그렇게는 안 돼요. 윈도우 함수를 사용해서 요청을 완료하고 결과를 빠르게 전달하는 데 도움이 되었어요.\n\n우리가 두 개의 테이블이 있다고 가정해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n\nsource.data_records\n\n![Image 2](/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_2.png)\n\nand temp.data_records:\n\n![Image 3](/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_3.png)\n\n\n<div class=\"content-ad\"></div>\n\n그리고 다음 안에 테이블을 생성해야 합니다. 그 안에는 다음과 같은 정보가 포함되어 있어야 합니다:\n\n- 식별자\n- 식별자의 현재 레벨\n- 현재 단계의 참조 날짜\n- 식별자의 이전 레벨\n- 이전 참조 날짜\n- 식별자가 레벨을 변경한 날짜\n\n테이블은 아래 코드를 기반으로 생성되었습니다:\n\n```js\ncreate table tmp_change_level_date as\n(\nselect distinct * from ( \n    select \n        fct.identifier, fct.level, fct.date_ref,\n        lag(fct.level) over (partition by fct.identifier order by fct.date_ref) as previous_level,\n        lag(fct.date_ref) over (partition by fct.identifier order by fct.date_ref) as previous_date,\n        case\n            when lag(fct.level) over (partition by fct.identifier order by fct.date_ref) is not null then fct.date_ref\n            else NULL\n        end as change_level_date,\n        dense_rank() over (partition by fct.identifier order by fct.date_ref desc) as ranks\n    from source.data_records fct  join temp.data_records TFCT \n    on fct.identifier = TFCT.identifier\n    where TFCT.amount <> 0 and TFCT.account in (select account_code from accounts_list)\n    ) x\nwhere ranks = 1 \nand level <> previous_level\nand previous_date <> change_level_date\n)\ncommit;\n```\n\n<div class=\"content-ad\"></div>\n\n자, 이제 설명으로 들어가볼게요:\n\n- 우선적으로, loan identifier(대출 식별자), level, date_ref(대출의 실제 단계 및 현재 단계의 기준 날짜)와 같은 정보를 가져오는 주요 SELECT 문을 만들었습니다:\n\n```js\nselect \n        fct.identifier, fct.level, fct.date_ref,\n        lag(fct.level) over (partition by fct.identifier order by fct.date_ref) as previous_level,\n        lag(fct.date_ref) over (partition by fct.identifier order by fct.date_ref) as previous_date,\n        case\n            when lag(fct.level) over (partition by fct.identifier order by fct.date_ref) is not null then fct.date_ref\n            else NULL\n        end as change_level_date,\n        dense_rank() over (partition by fct.identifier order by fct.date_ref desc) as ranks\n    from source.data_records fct  join temp.data_records TFCT \n    on fct.identifier = TFCT.identifier\n    where TFCT.amount <> 0 and TFCT.account in (select account_code from accounts_list)\n    ) x\n```\n\n그 다음으로, 각 대출에 대해 이전 대출 단계와 이전 참조 날짜를 가져오기 위해 LAG() 함수를 사용했습니다. PARTITION BY를 사용하여 식별자에 따라 데이터셋을 작은 파티션으로 나누고, 각 파티션 내에서 레코드를 date_ref에 따라 정렬했습니다.\n\n<div class=\"content-ad\"></div>\n\n\nlag(fct.level) over (partition by fct.identifier order by fct.date_ref) as previous_level,\nlag(fct.date_ref) over (partition by fct.identifier order by fct.date_ref) as previous_date\n\n\nand assign a rank to each record within the partition by using DENSE_RANK() function:\n\n\ndense_rank() over (partition by fct.identifier order by fct.date_ref desc) as ranks\n\n\nThis code will return the following result:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_4.png\" />\n\n더 나아가서, 이전 결과에서 일부 필터를 적용할 수 있도록 다음 SELECT문을 작성합니다 (위의 표에 해당하는):\n\n```js\nselect distinct * from (\n\n---- 이전 select를 하위 쿼리로 사용 ----\n\n) x\nwhere ranks = 1 \nand level <> previous_level\nand previous_date <> change_level_date\n```\n\n그리고 각 식별자에 대해 가장 최근 레코드만 가져와서 (ranks = 1은 설명에서 앞에서 언급한 가장 최근 레코드에 해당함), 현재 레벨이 이전 레벨과 다른 레코드만 가져오도록 필터를 적용하며 (level != previous_level), 변경 날짜가 유효하고 이전 참조 날짜와 다른지 확인합니다. 이러한 필터를 기반으로 결과를 새로운 테이블 tmp_change_level_date에 삽입합니다 (CREATE TABLE table_name AS와 유명한 구문을 사용하여 만든 것):\n\n<div class=\"content-ad\"></div>\n\n\n![SQL Window Functions](/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_5.png)\n\n이 결과를 통해 다음을 알 수 있습니다:\n\n- 식별자 2의 경우: 레벨이 2023년 03월 15일에 A에서 C로 변경되었습니다.\n- 식별자 3의 경우: 레벨이 2023년 02월 20일에 B에서 A로 변경되었습니다.\n\n# 결론\n\n\n<div class=\"content-ad\"></div>\n\nSQL 윈도우 함수는 복잡한 데이터 분석을 간편하게 하고 성능을 향상시킵니다. 이 글에서는 기본 사항, 구문, 랭킹 및 시계열 분석과 같은 일반적인 사용 사례, 실제 예제에 대해 다룹니다. 이러한 함수를 숙달하면 SQL 쿼리를 더 효율적이고 통찰력 있게 만들 수 있습니다.\n\n실습하고 실험하여 그 능력을 최대로 발휘하고 데이터 분석 능력을 향상시키세요.","ogImage":{"url":"/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_0.png"},"coverImage":"/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_0.png\" alt=\"SQL Window Functions\"></p>\n<p>요즘에는 엄청난 양의 데이터를 다루고 있습니다. 이 주요한 도전에 따라 다양한 소스의 복잡도도 함께 증가하고 있습니다. 이러한 환경에서 SQL은 여전히 영웅이며, 이 데이터 바다에서 가치 있는 통찰을 추출하고 탐색하는 데 꼭 필요한 도구입니다.</p>\n<p>SQL이 제공하는 많은 강력한 기능 중에서도 윈도우 함수는 특히 주목할 만한 요소입니다. 이러한 함수들은 테이블 행 집합을 대상으로 높명한 계산을 가능하게 하며, 고급 데이터 분석에 필수적이며 데이터와 상호작용하는 방법을 변화시키는 데 중요합니다.</p>\n<p>이 기사에서는 SQL의 윈도우 함수 개념을 해부하고 이해할 것입니다. 언제 윈도우 함수를 사용해야 하는지, 그리고 SQL 쿼리에서 효과적으로 구현하는 방법에 대해 살펴볼 것입니다. 이 가이드를 마치면 윈도우 함수의 강력함과 유연성에 대한 깊은 이해를 얻게 될 것이며, 데이터 분석 기술을 향상시키기 위한 실제 예제를 활용할 수 있을 것입니다.</p>\n<div class=\"content-ad\"></div>\n<h1>윈도우 함수가 뭔가요?</h1>\n<p>경험 수준에 상관 없이 모든 데이터 애호가는 윈도우 함수에 대해 들어봤거나 사용해 본 적이 있을 것입니다. 이 강력한 도구들은 모든 SQL 강좌에서 퍼져 있으며 데이터 작업을 하는 사람들의 일상생활에서 필수불가결합니다.</p>\n<p>구글에서 빠르게 검색을 해보죠…몇 분 후에 혹은 TV 광고를 보고 나서, 우리는 윈도우 함수가 다음과 같다는 사실을 알게 됩니다:</p>\n<div class=\"content-ad\"></div>\n<h1>문법에 관해서 뭔가 언급했다고 했나요?</h1>\n<p>그렇습니다. 이 매우 강력한 도구에는 특정 구문과 같은 트릭이 함께 제공됩니다.</p>\n<p><img src=\"/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_1.png\" alt=\"image\"></p>\n<p>위 이미지에서 볼 수 있듯이, 윈도우 함수의 구문은 네 부분으로 나뉠 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>집계/함수: 여기서 집계 (예: AVG, SUM) 또는 LAG(), LEAD(), ROW_NUMBER(), RANK(), DENSE_RANK()과 같은 특정 창 함수를 배치하여 작업을 시작합니다. 몇 가지 더 있지만, 이 중에서는 가장 일반적으로 사용되는 것들이에요 (적어도 저는 이것들을 가장 많이 사용해요 😁)</li>\n<li>OVER: 이 키워드는 윈도우 함수를 사용할 것임을 IDE에 \"알리는\" 데에 사용됩니다. 이는 \"여기서 무언가를 할 것이고, 무언가 복잡한 것에 대비해야 한다\"고 말하는 것과 같아요.</li>\n<li>PARTITION BY: 이 절은 결과를 파티션 또는 창으로 나눕니다. 우리는 이 과정에서 초기에 설정한 집계나 함수를 적용할 것입니다. 이 부분을 작성한 후에는 파티션을 기준으로 필드를 개발해야 합니다. 순위 함수와 함께 사용되지 않아요.</li>\n<li>ORDER BY: 경우에 따라 선택 사항일 수 있지만, 이것이 하는 일을 알아두는 것이 좋아요. 이는 각 파티션 내의 행을 정렬하는 데 사용되며, RANK(), DENSE_RANK(), ROW_NUMBER()와 같은 순위 함수를 사용할 때 유용합니다.</li>\n</ul>\n<h1>목표를 달성하기 위한 다양한 창 함수</h1>\n<p>이전 섹션에서 창 함수 구문에 대해 이야기했어요. 창 함수 구문과 독립적으로 작동하지 않는 몇 가지 함수를 언급했죠.</p>\n<p>일부는 각 파티션의 각 행에 대한 순위 값을 반환하기 때문에 순위 함수라고 불리며, 다른 것은 시계열 창 함수입니다.</p>\n<div class=\"content-ad\"></div>\n<p>순위 함수:</p>\n<ul>\n<li>RANK() : 결과 집합의 파티션 내 각 행에 순위를 할당하며, 동일한 값을 가진 행은 동일한 순위를 받습니다.</li>\n<li>DENSE_RANK() : RANK()와 유사하지만 연속적인 순위 값을 가집니다. 동일한 값은 동일한 순위를 받으며, 다음 순위 값은 다음 연속 정수입니다.</li>\n<li>NTILE() : 결과 집합을 동일한 그룹으로 분할하고 각 행에 속하는 그룹을 나타내는 숫자를 할당합니다.</li>\n<li>ROW_NUMBER() : 결과 집합의 파티션 내 각 행에 고유한 연속 정수를 할당하며, 각 파티션의 첫 번째 행부터 1로 시작합니다.</li>\n</ul>\n<p>시계열 함수:</p>\n<ul>\n<li>LAG() : 결과 집합 내 이전 행의 값을 가져오는 함수로, 자체 조인이 필요하지 않습니다. 연속된 행 간의 차이를 계산하는 데 도움이 됩니다.</li>\n<li>LEAD() : 다음 행의 값을 예측하는 데 유용한, 자체 조인 없이 다음 행의 값을 액세스할 수 있습니다. 추세나 값의 변화를 예측하는 데 도움이 됩니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>영원한 질문: 왜...</h1>\n<p>많은 것들에 대해 우리가 하는 일반적인 질문들이 있습니다. SQL의 창 함수도 예왽이 아닙니다. 창 함수가 여러분에게 시간과 노력을 절약해줄 수 있는 상황을 이해하려면 다음을 살펴보겠습니다:</p>\n<p>왜 그리고 언제 우리는 창 함수를 사용해야 할까요?</p>\n<p>언제부터 시작해볼까요. 언제 우리는 창 함수를 사용할까요? 잘, 우리가 창 함수를 사용해야 하는 시점은 언제든지 우리가 필요로 할 때 입니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>특정 조건에 따라 데이터 하위 집합에서 누적 합계, 순위, 평균 또는 다른 계산을 계산합니다.</li>\n<li>현재 및 이전/다음 행 값 비교</li>\n</ul>\n<p>왜 윈도우 함수를 사용해야 하는지 왜도 빼놓지 마세요. 상황에 필요할 때 윈도우 함수를 사용해야 하는 이유는 무엇인가요?</p>\n<p>윈도우 함수를 사용해야 하는 이유:</p>\n<ul>\n<li>행 레벨 세부 정보 유지 — 데이터를 축소하지 않고 계산을 수행할 수 있는데, 이는 원본 데이터를 유지한 채 여러 행을 대상으로 계산할 수 있도록 합니다.</li>\n<li>복잡한 쿼리 간소화 — 이 도구를 사용하면 가장 복잡한 쿼리를 간소화하여 읽기 좋고 작성하기 쉽고, 무엇보다도 유지보수하기 쉽게 만들어줍니다.</li>\n<li>성능 향상 — SQL 엔진에서 최적화되어 대량 데이터셋의 경우 더 나은 성능을 제공하는 경우가 많습니다.</li>\n<li>고급 분석 활성화 — 누적 합계, 이동 평균 및 기타 고급 분석 작업을 실행할 수 있도록 합니다.</li>\n<li>자세한 분석을 위한 데이터 파티션 — 특정 기준에 따라 데이터를 분할하여 전체 데이터 집계 없이 그룹 내에서 자세한 분석을 가능하게 합니다.</li>\n<li>시계열 및 변경 감지 지원 — 이전 또는 다음 행 값에 액세스하는 내장 지원을 제공하여 시계열 데이터 및 변경 감지에 유용합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>실제 사용 사례</h1>\n<p>은행 분야에서 데이터 엔지니어로 일하고 있는데, 계약의 \"단계\"가 변경된 레코드를 식별하고 이 변경 날짜를 기록해야 하는 요청을 받았어요.</p>\n<p>쉽게 말해, 그렇게 하는 게 쉽지 않을 것 같죠? 그렇게는 안 돼요. 윈도우 함수를 사용해서 요청을 완료하고 결과를 빠르게 전달하는 데 도움이 되었어요.</p>\n<p>우리가 두 개의 테이블이 있다고 가정해 봅시다.</p>\n<div class=\"content-ad\"></div>\n<p>source.data_records</p>\n<p><img src=\"/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_2.png\" alt=\"Image 2\"></p>\n<p>and temp.data_records:</p>\n<p><img src=\"/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_3.png\" alt=\"Image 3\"></p>\n<div class=\"content-ad\"></div>\n<p>그리고 다음 안에 테이블을 생성해야 합니다. 그 안에는 다음과 같은 정보가 포함되어 있어야 합니다:</p>\n<ul>\n<li>식별자</li>\n<li>식별자의 현재 레벨</li>\n<li>현재 단계의 참조 날짜</li>\n<li>식별자의 이전 레벨</li>\n<li>이전 참조 날짜</li>\n<li>식별자가 레벨을 변경한 날짜</li>\n</ul>\n<p>테이블은 아래 코드를 기반으로 생성되었습니다:</p>\n<pre><code class=\"hljs language-js\">create table tmp_change_level_date <span class=\"hljs-keyword\">as</span>\n(\nselect distinct * <span class=\"hljs-keyword\">from</span> ( \n    select \n        fct.<span class=\"hljs-property\">identifier</span>, fct.<span class=\"hljs-property\">level</span>, fct.<span class=\"hljs-property\">date_ref</span>,\n        <span class=\"hljs-title function_\">lag</span>(fct.<span class=\"hljs-property\">level</span>) over (partition by fct.<span class=\"hljs-property\">identifier</span> order by fct.<span class=\"hljs-property\">date_ref</span>) <span class=\"hljs-keyword\">as</span> previous_level,\n        <span class=\"hljs-title function_\">lag</span>(fct.<span class=\"hljs-property\">date_ref</span>) over (partition by fct.<span class=\"hljs-property\">identifier</span> order by fct.<span class=\"hljs-property\">date_ref</span>) <span class=\"hljs-keyword\">as</span> previous_date,\n        <span class=\"hljs-keyword\">case</span>\n            when <span class=\"hljs-title function_\">lag</span>(fct.<span class=\"hljs-property\">level</span>) over (partition by fct.<span class=\"hljs-property\">identifier</span> order by fct.<span class=\"hljs-property\">date_ref</span>) is not <span class=\"hljs-literal\">null</span> then fct.<span class=\"hljs-property\">date_ref</span>\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-variable constant_\">NULL</span>\n        end <span class=\"hljs-keyword\">as</span> change_level_date,\n        <span class=\"hljs-title function_\">dense_rank</span>() over (partition by fct.<span class=\"hljs-property\">identifier</span> order by fct.<span class=\"hljs-property\">date_ref</span> desc) <span class=\"hljs-keyword\">as</span> ranks\n    <span class=\"hljs-keyword\">from</span> source.<span class=\"hljs-property\">data_records</span> fct  join temp.<span class=\"hljs-property\">data_records</span> <span class=\"hljs-variable constant_\">TFCT</span> \n    on fct.<span class=\"hljs-property\">identifier</span> = <span class=\"hljs-variable constant_\">TFCT</span>.<span class=\"hljs-property\">identifier</span>\n    where <span class=\"hljs-variable constant_\">TFCT</span>.<span class=\"hljs-property\">amount</span> &#x3C;> <span class=\"hljs-number\">0</span> and <span class=\"hljs-variable constant_\">TFCT</span>.<span class=\"hljs-property\">account</span> <span class=\"hljs-keyword\">in</span> (select account_code <span class=\"hljs-keyword\">from</span> accounts_list)\n    ) x\nwhere ranks = <span class=\"hljs-number\">1</span> \nand level &#x3C;> previous_level\nand previous_date &#x3C;> change_level_date\n)\ncommit;\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>자, 이제 설명으로 들어가볼게요:</p>\n<ul>\n<li>우선적으로, loan identifier(대출 식별자), level, date_ref(대출의 실제 단계 및 현재 단계의 기준 날짜)와 같은 정보를 가져오는 주요 SELECT 문을 만들었습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">select \n        fct.<span class=\"hljs-property\">identifier</span>, fct.<span class=\"hljs-property\">level</span>, fct.<span class=\"hljs-property\">date_ref</span>,\n        <span class=\"hljs-title function_\">lag</span>(fct.<span class=\"hljs-property\">level</span>) over (partition by fct.<span class=\"hljs-property\">identifier</span> order by fct.<span class=\"hljs-property\">date_ref</span>) <span class=\"hljs-keyword\">as</span> previous_level,\n        <span class=\"hljs-title function_\">lag</span>(fct.<span class=\"hljs-property\">date_ref</span>) over (partition by fct.<span class=\"hljs-property\">identifier</span> order by fct.<span class=\"hljs-property\">date_ref</span>) <span class=\"hljs-keyword\">as</span> previous_date,\n        <span class=\"hljs-keyword\">case</span>\n            when <span class=\"hljs-title function_\">lag</span>(fct.<span class=\"hljs-property\">level</span>) over (partition by fct.<span class=\"hljs-property\">identifier</span> order by fct.<span class=\"hljs-property\">date_ref</span>) is not <span class=\"hljs-literal\">null</span> then fct.<span class=\"hljs-property\">date_ref</span>\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-variable constant_\">NULL</span>\n        end <span class=\"hljs-keyword\">as</span> change_level_date,\n        <span class=\"hljs-title function_\">dense_rank</span>() over (partition by fct.<span class=\"hljs-property\">identifier</span> order by fct.<span class=\"hljs-property\">date_ref</span> desc) <span class=\"hljs-keyword\">as</span> ranks\n    <span class=\"hljs-keyword\">from</span> source.<span class=\"hljs-property\">data_records</span> fct  join temp.<span class=\"hljs-property\">data_records</span> <span class=\"hljs-variable constant_\">TFCT</span> \n    on fct.<span class=\"hljs-property\">identifier</span> = <span class=\"hljs-variable constant_\">TFCT</span>.<span class=\"hljs-property\">identifier</span>\n    where <span class=\"hljs-variable constant_\">TFCT</span>.<span class=\"hljs-property\">amount</span> &#x3C;> <span class=\"hljs-number\">0</span> and <span class=\"hljs-variable constant_\">TFCT</span>.<span class=\"hljs-property\">account</span> <span class=\"hljs-keyword\">in</span> (select account_code <span class=\"hljs-keyword\">from</span> accounts_list)\n    ) x\n</code></pre>\n<p>그 다음으로, 각 대출에 대해 이전 대출 단계와 이전 참조 날짜를 가져오기 위해 LAG() 함수를 사용했습니다. PARTITION BY를 사용하여 식별자에 따라 데이터셋을 작은 파티션으로 나누고, 각 파티션 내에서 레코드를 date_ref에 따라 정렬했습니다.</p>\n<div class=\"content-ad\"></div>\n<p>lag(fct.level) over (partition by fct.identifier order by fct.date_ref) as previous_level,\nlag(fct.date_ref) over (partition by fct.identifier order by fct.date_ref) as previous_date</p>\n<p>and assign a rank to each record within the partition by using DENSE_RANK() function:</p>\n<p>dense_rank() over (partition by fct.identifier order by fct.date_ref desc) as ranks</p>\n<p>This code will return the following result:</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_4.png\">\n<p>더 나아가서, 이전 결과에서 일부 필터를 적용할 수 있도록 다음 SELECT문을 작성합니다 (위의 표에 해당하는):</p>\n<pre><code class=\"hljs language-js\">select distinct * <span class=\"hljs-keyword\">from</span> (\n\n---- 이전 select를 하위 쿼리로 사용 ----\n\n) x\nwhere ranks = <span class=\"hljs-number\">1</span> \nand level &#x3C;> previous_level\nand previous_date &#x3C;> change_level_date\n</code></pre>\n<p>그리고 각 식별자에 대해 가장 최근 레코드만 가져와서 (ranks = 1은 설명에서 앞에서 언급한 가장 최근 레코드에 해당함), 현재 레벨이 이전 레벨과 다른 레코드만 가져오도록 필터를 적용하며 (level != previous_level), 변경 날짜가 유효하고 이전 참조 날짜와 다른지 확인합니다. 이러한 필터를 기반으로 결과를 새로운 테이블 tmp_change_level_date에 삽입합니다 (CREATE TABLE table_name AS와 유명한 구문을 사용하여 만든 것):</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-19-SQLWindowFunctionsTheUltimateToolforDataEnthusiasts_5.png\" alt=\"SQL Window Functions\"></p>\n<p>이 결과를 통해 다음을 알 수 있습니다:</p>\n<ul>\n<li>식별자 2의 경우: 레벨이 2023년 03월 15일에 A에서 C로 변경되었습니다.</li>\n<li>식별자 3의 경우: 레벨이 2023년 02월 20일에 B에서 A로 변경되었습니다.</li>\n</ul>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>SQL 윈도우 함수는 복잡한 데이터 분석을 간편하게 하고 성능을 향상시킵니다. 이 글에서는 기본 사항, 구문, 랭킹 및 시계열 분석과 같은 일반적인 사용 사례, 실제 예제에 대해 다룹니다. 이러한 함수를 숙달하면 SQL 쿼리를 더 효율적이고 통찰력 있게 만들 수 있습니다.</p>\n<p>실습하고 실험하여 그 능력을 최대로 발휘하고 데이터 분석 능력을 향상시키세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}