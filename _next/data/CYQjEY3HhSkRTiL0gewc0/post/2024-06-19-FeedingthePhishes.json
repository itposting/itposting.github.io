{"pageProps":{"post":{"title":"사용자의 허가 없이 인증 정보를 요구하는 피싱 사이트를 차단하는 방법","description":"","date":"2024-06-19 21:12","slug":"2024-06-19-FeedingthePhishes","content":"\n\n## 사기 교실\n\n당신은 목표로 하는 안전한 이메일 게이트웨이(SEG)를 우회하는 실질적인 핑계를 만들 수 있을 지도 모르겠어요; 그러나 링크가 너무 수상하게 보이거나, 즉 \"사기 같이\" 느껴진다면, 당신의 사기는 심지어 흔들리기도 전에 실패할 수 있어요. 그래서 저는 링크 필터를 자체적인 제어로 생각하는 편이에요. 우리는 이 링크 필터들이 어떻게 작동하는지 간단히 살펴보고, 그들을 우회할 수 있는 몇 가지 방법을 알아볼까요.\n\n# 필터가 뭐길래? (WTF)\n\n지난 몇 년 동안, 링크 자체를 기반으로 한 사기 탐지에 대한 관심이 늘어나는 것을 알아봤어요 - 또는 적어도, 매우 인기 있는 SEG 중 몇몇은 이메일에 링크의 존재에 매우 높은 가중치를 두는 것을 알았어요. 그렇게 많이 보아와서 SEG가 나를 차단할 때 이런 종류의 감지를 내 처음으로 해결해야 하는 단계 중 하나로 만들었어요. 단순히 이메일에서 모든 링크를 제거하고 메시지 내용이 통과되는지 확인해봅니다.\n\n<div class=\"content-ad\"></div>\n\n적어도 한 번에 SEG를 만난 적이 있는데, 어떠한 내용이든 상관없이 어떤 미인식된 도메인에 대한 링크가 포함된 이메일을 차단하는 SEG가 있었습니다. 이 경우에는 내 고객이 허용된 도메인 목록을 관리하고 SEG에게 나머지 모든 것을 차단하도록 지시한 것으로 알고 있습니다. 이는 극단적인 조치일 수 있지만, 매우 타당한 우려라고 생각합니다. 링크가 포함된 이메일은 링크가 없는 이메일보다 기본적으로 더 위험하므로, 대부분의 현대적인 SEG들은 링크를 포함하는 메시지의 SPAM 점수를 증가시키고 종종 링크 자체에 추가적인 검토를 적용할 것입니다.\n\n# 링크 필터링 작동 방식 — 링크 찾기\n\n이메일에서 링크를 필터링하는 SEG는 먼저 콘텐츠 내의 각 링크를 감지/구문 분석해야 합니다. 이를 위해 거의 모든 경험 많은 소프트웨어 엔지니어는 직접적으로 정규 표현식(“regex”로 줄여서 함)을 사용할 것입니다:\n\n![FeedingthePhishes_0](/assets/img/2024-06-19-FeedingthePhishes_0.png)\n\n<div class=\"content-ad\"></div>\n\n어떤 다른 경험 많은 소프트웨어 엔지니어도 정규 표현식은 매우 강력하지만 실수하기 쉽다는 것을 빨리 상기시켜줄 것입니다:\n\n![Regex Example](/assets/img/2024-06-19-FeedingthePhishes_1.png)\n\n예를 들어, 스택오버플로에서 링크를 구문 분석하기 위해 발견한 몇 가지 최고의 정규 표현식 필터 중 일부는 다음과 같습니다:\n\n\n(http|ftp|https):\\/\\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:\\/~+#-]*[\\w@?^=%&\\/~+#-])\n\n\n<div class=\"content-ad\"></div>\n\n(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0–9+&@#\\/%=~_|$?!:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])\n\n(?:(?:https?|ftp):\\/\\/)?[\\w/\\-?=%.]+\\.[\\w/\\-&?=%.]+\n\n([\\w+]+\\:\\/\\/)?([\\w\\d-]+\\.)*[\\w-]+[\\.\\:]\\w+([\\/\\?\\=\\&\\#\\.]?[\\w-]+)*\\/?\n\n(?i)\\b((?:[a-z][\\w-]+:(?:/'1,3'|[a-z0–9%])|www\\d'0,3'[.]|[a-z0-9.\\-]+[.][a-z]'2,4'/)(?:[^\\s()``]+|\\(([^\\s()``]+|(\\([^\\s()``]+\\)))*\\))+(?:\\(([^\\s()``]+|(\\([^\\s()``]+\\)))*\\)|[^\\s`!()\\[\\]'';:’”.,``?«»“”‘’]))\n\n<div class=\"content-ad\"></div>\n\n위 내용 중 이해하기 어렵더라도 걱정하지 마세요. 나는 정규 표현식에 대해 꽤 익숙한 편이지만, 여기에 있는 옵션 중 어떤 것이 더 좋을지에 대한 의견조차 없습니다. 그러나 여기 예시들로부터 주목할 몇 가지 사항이 있습니다:\n\n- \"정답\"은 없습니다; URL은 매우 복잡할 수 있습니다.\n- 대부분은 \"http\"로 시작하는 문자열을 찾고자 하는 것을 나타냅니다 (하지만 전부는 아닙니다).\n\n이것들은 링크 구문 분석 문제에 대한 가장 인기 있는 (똑똑한 사람들이라 생각해보세요) 대답 중 일부입니다. 또한 일부 소프트웨어 엔지니어들이 \"a\" HTML 태그를 포함하는 모든 앵커 태그를 찾거나 링크 시작을 나타내는 \"href=\"를 찾는 더 순진한 접근을 취할 수 있다고 상상할 수 있습니다. 소프트웨어 엔지니어가 선택한 어떤 솔루션이든, 그들의 파서가 잡아내지 못하는 유효한 URL이 적어도 약간은 존재하고 범주적 우회 가능성을 남겨둘 것입니다. \"http\"와 같은 일반적인 표시를 피하게 될 경우 또는 링크를 여러 부분으로 나누는 것으로 파서를 회피할 수도 있을 것입니다.\n\n부연 설명: 이 유명한 URL 파서 중 일부는 FTP를 고려하고 일부는 고려하지 않는 것을 보셨나요? 대부분의 브라우저가 FTP 공유에 연결할 수 있다는 것을 알고 계셨나요? 익명 FTP 링크를 통해 피싱 페이로드를 전달해 본 적이 있나요?\n\n<div class=\"content-ad\"></div>\n\n# 링크 필터링이 작동하는 방식 - 링크 필터링\n\n이메일에서 모든 링크를 분석한 후 SEG가 어떻게 합법적으로 보이는 링크와 그렇지 않은 링크를 결정해야 할까요? 요즘 대부분의 SEG는 각 링크에 대해 두 가지 주요 요소를 살펴봅니다:\n\n- 도메인의 평판\n- 링크의 \"모습\"\n\n도메인 평판을 확인하는 것은 꽤 간단합니다; 링크를 나누어 첫 번째 두 슬래시(\"/\")와 다음 슬래시(\"/\") 사이에 있는 내용을 확인한 다음 해당 도메인이나 서브도메인을 Virustotal이나 유사한 곳에서 찾아봅니다. 많은 SEG는 악성 도메인으로 식별된 경우 다른 보안 제품과 정보를 공유할 것이며 그 반대도 마찬가지입니다. 당신의 도메인이 악성으로 식별된 경우, SEG는 해당 이메일을 차단하거나 링크를 제거할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n링크가 \"어떻게 보이는지\" 확인하는 데는 대부분의 SEG(이메일 보안 게이트웨이)들이 요즘 인공 지능 또는 머신 러닝(즉, AI/ML)을 사용하여 링크를 악의적인지 또는 선행된 것으로 분류합니다. 이러한 AI 모델은 악성 링크의 대량의 알려진 데이터로 훈련되어 SPAM 작성자들이 일반적으로 사용하는 주제와 패턴을 감지할 수 있습니다. 사이버 사기범으로서, 우리는 그 명언의 \"알려진 악의적인\" 부분에 집중하는 것이 중요하다고 생각합니다.\n\n한 연구자의 발표를 본 적이 있는데, 그들의 AI 모델이 훈련 데이터에서 악성 링크 중 98% 이상을 감지할 수 있다고 주장했습니다. 처음에는 매우 인상적인 숫자로 보입니다. 그러나 처음 보았을 때는 100%의 악성 훈련 세트를 사람들이 악의적으로 감지해야 했기 때문에, AI 모델은 \"링크의 외관\"만으로 사기 링크를 감지하는 데 사람의 능력의 98%만큼만 뛰어난 것이었습니다. 이론적으로 이러한 집합을 가지고 있다는 것이 가능한 경우, 알려지지 않은 악의적인 링크 집합에서는 훨씬 나쁠 것으로 상상됩니다. 우리의 링크가 그 알려지지 않은 악의적인 범주로 들어갈 수 있게 음모를 꾸리는 게 중요합니다.\n\n우리는 AI 모델과 맞서고 있지만, 이러한 모델이 인간이 선별한 데이터를 기반으로 훈련되므로 결론적으로는 이 작업에서 인간의 능력에 수준에 달할 뿐 아니라 뛰어넘을 수 없다는 것을 상기하는 것을 좋아합니다. 우리 링크가 인간에게 충분히 설득력 있게 보이게 만들면, AI가 우리에게 어떤 문제도 제공하지 않을 것입니다.\n\n# 링크 필터 우회하기\n\n<div class=\"content-ad\"></div>\n\n우리가 링크 필터가 작동하는 방식에 대해 알게 된 지금, 필터를 우회하는 데 사용할 수 있는 두 가지 주요 전략이 있습니다:\n\n- 링크를 형식화하여 링크 파싱 단계를 통과시킵니다\n- 링크를 더 \"합법적\"으로 보이게 만듭니다\n\n만약 파서가 우리의 링크를 링크로 등록하지 않는다면, 추가적인 검토를 할 수 없습니다. 우리가 우리의 링크 위치를 어떤 합법적인 링크처럼 보이게 만들 수 있다면, 파서를 우회하지 못하더라도 우리가 그래도 허용을 받을 수도 있습니다. 이러한 접근 방식은 상호 배타적이 아니며 기법을 혼합하는 것이 더 큰 성공을 거둘 수도 있다는 점에 유의하십시오.\n\n# 파서 우회하기\n\n<div class=\"content-ad\"></div>\n\n## 앵커 태그 사용하지 마세요\n\n일부 SEG들에 대한 가장 기본적인 파서 우회 방법 중 하나는 Outlook에서 하이퍼링크를 제거하여 링크 URL을 일반 텍스트로 남겨두는 것입니다. 보통 링크 URL은 HTML 앵커 태그(`a`)의 \"하이퍼텍스트 참조\" (href) 속성에 배치됩니다. 앞서 설명한대로, 링크를 구문 분석하는 한 가지 단순하지만 놀라울 정도로 흔한 해결책은 Python의 BeautifulSoup와 같은 HTML 파싱 라이브러리를 사용하는 것입니다. 예를 들면:\n\n```js\nsoup = BeautifulSoup(email.content, 'html.parser')\nlinks = soup.find_all(\"a\") # <a> 태그 모두 찾기\nfor link in links:\n  print(\"링크:\", link.get(\"href\"), \"텍스트:\", link.string)\n```\n\n이 접근 방식을 사용하여 링크를 구문 분석하는 SEG는 앵커 태그 바깥에 있는 URL을 보지 못할 것입니다. 클릭 가능한 링크가 아닌 URL은 최종 사용자에게 약간 이상할 수 있지만, 이 우회 방법이 작동할 때는 일반적으로 이런 절충이 가치 있다고 할 수 있습니다. 많은 경우에 메일 클라이언트들은 앵커 태그 안에 있지 않더라도 URL을 하이퍼링크로 구문 분석하고 표시할 것이기 때문에, 이 기술을 사용하는 것에는 대개 거의 또는 전혀 단점이 없습니다.\n\n<div class=\"content-ad\"></div>\n\n## Base Tag 사용법 (a.k.a BaseStriker 공격)\n\n일부 링크 필터를 우회하는 흥미로운 방법 중 하나는 \"base\"라는 잘 알려지지 않은 HTML 태그를 사용하는 것입니다. 이 태그를 사용하면 상대 참조를 사용하는 모든 링크에 대해 기본 도메인을 설정할 수 있습니다 (즉, href가 \"/something\"으로 시작하는 링크가 아니라 \"https://example.com/something\"과 같이 직접 참조가 아닌 링크). 이 경우에는 \"https://example.com\"이 URL의 \"base\"로 간주됩니다. HTML 콘텐츠의 헤더에서 HTML base 태그를 사용하여 기본을 정의하면 메시지의 본문에서는 상대 참조만 사용할 수 있습니다. HTML 헤더에는 일반적으로 CSS나 XML 스키마와 같은 것들을 위한 URL이 포함되지만, 헤더에는 악의적인 내용이 포함되지 않을 것으로 예상되며 링크 구문 분석기에서 눈을 피할 수 있습니다. 이 기법은 \"BaseStriker\" 공격으로 알려져 있으며 일부 인기 있는 SEGs에 대해 작동하는 것으로 알려져 있습니다:\n\n[BaseStriker 공격 기법: Microsoft Office 365 항 취업 필터를 우회할 수 있는 기술](https://www.cyberdefensemagazine.com/basestriker-attack-technique-allow-to-bypass-microsoft-office-365-anti-phishing-filter/)\n\n이 기술이 작동하는 이유는 사실상 링크를 두 부분으로 나누기 때문입니다: 도메인은 HTML 헤더에 있고 URL의 나머지 부분은 본문의 앵커 태그에 있습니다. 앵커 태그의 href는 \"https://\"로 시작하지 않기 때문에 링크로 감지되지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n## 작은 우회 계획\n\nURL의 첫 부분, 콜론과 슬래시 앞에 있는 부분은 \"scheme\"이라고 알려져 있어요:\n\n```js\nURI = scheme \":\" [\"//\" authority] path [\"?\" query] [\"#\" fragment]\n```\n\n이미 언급한 바와 같이, URL을 감지하는 더 효과적인 방법 중 하나는 scheme인 것처럼 보이는 것을 찾는 것입니다 (예: \"http://\" 또는 \"https://\"), 그 뒤에 URL에서 허용되는 문자 시퀀스가 따르는 것입니다. 만약 scheme을 빼 놓는다면, 많은 링크 파서들은 우리의 URL을 감지할 수 없을 수도 있지만, 그래도 이것은 사람에게 URL처럼 보일 것입니다.\n\n<div class=\"content-ad\"></div>\n\naccounts.goooogle.com/login?id=34567\n\n이 링크를 브라우저에 그대로 복사하여 붙여넣으면 간단하게 사용할 수 있습니다. 또한, 몇 가지 합법적인 방법이 우리의 대상 사용자 시스템에서 프로그램을 열고 오류로 표시되는 URL 파서를 뚫고 지나갈 수 있습니다. 보통의 웹 링크만을 찾는 URL 파서가 다음 링크들을 식별하는데 문제를 겪을 수 있습니다:\n\nhttps://en.wikipedia.org/wiki/List_of_URI_schemes\n\n여기에서 몇 가지 피싱 링크로서 매우 유용한 것들이 포함되어 있을지도 몰라요 ;)\n\n<div class=\"content-ad\"></div>\n\n## QR 낚시\n\n이메일에 링크가 전혀 없는 경우는 어떻게 될까요? 이미지로 되어 있는 경우는 어떤가요? 전통적인 링크 대신 QR 코드를 사용하여 낚시를 자동화하는 SquarePhish와 같은 도구를 사용할 수 있습니다:\n\n아직 직접 시도해보지는 않았지만, 비슷한 기술을 사용한 친구들로부터 좋은 소식을 들었습니다. 이 공격을 직접 자동화해보고 싶다면, NodeJS에는 QR 생성을 위한 간단한 라이브러리가 있습니다:\n\n# 필터 우회\n\n<div class=\"content-ad\"></div>\n\n## 링크 숨김 기능 사용하지 마세요\n\n(잠깐만요. 제 의견을 말씀드릴게요...) 링크를 숨김 처리했는데, 블록당하는 일이 몇 번 있었는지 모르겠어요. 그런데 링크를 풀어보면 동일한 내용이 전달된다는 것을 알게 되었어요. 앵커 태그의 이 기능이 스팸 발송자들에 의해 오래 전부터 남용되어 왔기 때문인 것 같아요. 평범한 이메일 사용자들은 링크 숨김을 거의 사용하지 않으니, 링크 필터는 일반적인 링크보다 링크 숨김을 훨씬 더 위험하게 볼 수 있어요. 따라서 그냥 일반 링크를 사용하세요. 요즘에는 누구나 링크를 호버하고 실제 위치를 확인할 수 있다고 생각하기 때문에, 숨김 링크는 이제 사람을 속이는 데에도 좋지 않아요. 진부하지 마세요. 링크 숨김을 사용하지 마세요.\n\n## 분류된 도메인 사용하기\n\n많은 링크 필터러는 미분류된 도메인이나 악성으로 분류된 도메인, 최근에 등록된 도메인을 차단하거나 삭제합니다. 따라서 주로 분류가 완료된 도메인을 사용하는 것이 좋은 생각일 수 있어요. 이미 \"원 피쉬, 투 피쉬, 레드팀이 피쉬를 토하다\"에서 이에 대해 언급했기 때문에 좋은 도메인을 얻는 과정은 생략하겠어요. 그래도 여기서도 동일한 규칙이 적용된다는 것을 알아두세요.\n\n<div class=\"content-ad\"></div>\n\n## \"합법적인\" 도메인 사용하기\n\n만일 사기 링크를 유지하는 데 들이는 수고를 피하고 싶다면, 대체로 신뢰할 수 있는 도메인을 활용할 수 있습니다. 최근에 \"야생에서\" 본 예시 중 하나는 스패머가 sites.google.com 링크를 사용한 것이었습니다. 그들은 구글에 피싱 페이지를 호스팅했죠! 이 아이디어가 뛰어난 것으로 생각했습니다. 왜냐하면 대부분의 링크 필터가 Google을 허용할 것이라 기대했고, 대부분의 최종 사용자는 google.com에서 제공되는 모든 것이 신뢰할 만하다고 생각할 것이기 때문이었습니다. 이와 유사한 다른 예시로는 GitHub의 정적 페이지, S3 버킷이나 기타 일반적인 콘텐츠 전달 네트워크(CDN), 그리고 SharePoint 등에서 자신의 피싱 사이트를 호스팅할 수 있습니다. 사용자가 임의의 HTML 콘텐츠 페이지를 호스팅할 수 있는 \"합법적인\" 사이트가 많이 있습니다.\n\n## 임의의 리디렉션\n\n신뢰할 수 있는 도메인에 피싱 사이트를 호스트하는 것과 같은 방식으로 신뢰할 수 있는 도메인을 사용하여 피싱 사이트로 리디렉션을 할 수 있습니다. 이러한 전형적인 예시 중 하나는 TinyURL과 같은 링크 단축 서비스입니다. TinyURL은 SPAM으로 남용되었기 때문에 대부분의 보안 게이트웨이(SEG)가 TinyURL 링크를 차단할 것으로 예상되지만, TinyURL은 임의의 리디렉션의 유용성을 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n임의의 리디렉트 우회하기 위한 더 유용한 형식은 'window.location' 변경을 지정할 수 있게 해주는 크로스사이트 스크립팅(XSS) 취약점이 존재하는 URL 또는 HTTP GET 매개변수를 통해 페이지 리디렉트를 지정할 수 있는 URL입니다. 제 정찰 단계에서는 대상의 주요 웹사이트에서 이러한 종류의 취약점을 찾기 위해 몇 분 이상을 투자하는 것을 좋아합니다. 이러한 취약점들은 놀랍게도 흔하며, 웹 애플리케이션 페네트레이션 테스트 보고서에서 임의의 리디렉트는 낮은 위험으로 여겨질 수 있지만 피싱과 결합하면 매우 유용할 수 있습니다. 여러분의 링크는 대상 조직의 주요 웹사이트에 대한 URL을 가리킬 것입니다. 링크 필터나 심지어 사람도 그 위험을 알아차리기는 극히 힘듭니다. 경우에 따라 대상 조직이 SEG(Secure Email Gateway)에서 도메인을 가리키는 링크에 대한 명시적 허용 목록을 구성해 놓은 경우가 있을 수도 있습니다.\n\n## 첨부 파일에 대한 링크\n\n이메일의 링크도 이메일 첨부 파일을 가리킬 수 있다는 사실을 알고 계셨나요? 앵커 태그의 href에 URL 대신 첨부 파일의 콘텐츠 식별자(CID)를 지정할 수 있습니다(예: href=\"cid:mycontentidentifier@content.net\"). 링크 필터를 우회하는 데 이 요령을 사용한 한 가지 방법은 HTML 첨부 파일로 링크를 걸고, 사용자를 피싱 사이트로 리디렉트하는 난해한 자바스크립트를 사용하는 것입니다. 우리의 href가 URL처럼 보이지 않기 때문에 대부분의 SEG가 우리의 링크를 무해하게 생각할 것입니다. PDF, DOCX 등 일반적으로 허용되는 여러 다른 파일 유형으로 링크를 걸거나, 실제 피싱 링크가 포함된 후자의 파일을 링크할 수도 있습니다. 사용자에게 추가 지침을 제공하기 위해 선판 속에서 약간의 작업이 더 필요할 수도 있고, 문서를 여는 후 사용자가 그냥 링크를 클릭하리라는 희망만 가져도 되기도 합니다. 이 경우 SEG의 콘텐츠 필터가 검증될 가능성이 낮은 문서 내에 추가 지침을 추가하는 것이 가장 합리적이라고 생각합니다.\n\n## 전화하기\n\n<div class=\"content-ad\"></div>\n\n이 블로그는 사회 공학 전법을 우회하는 우리의 \"메시지 수신\" 제어를 마무리 짓습니다. 모두가 알 수 있는 가장 간단한 우회 중 하나를 언급하지 않고는 완벽하지 않을 것입니다:\n\n이메일을 사용하지 않기!\n\n대상에게 전화기를 들고 직접 대화를 나누면, 귀를 통해 그들의 두뇌에 직접 들어가는 모란, 즉 통과하지 않고 바로 들어오는 프리텍스트가 되는 것입니다.\n\n이와 같이 줌 통화, 팀 채팅, 링크드인 메시징 및 거의 모든 일반적인 비즈니스 의사 소통 채널들은 이메일보다 훨씬 적은 제어 대상이 될 것입니다. 이메일보다 전화통화를 선호하여 워크플로를 크게 단순화시키는 레드 팀원들을 몇 명 훈련해왔는데, 목표 환경에 접근하기 위해서는 몇 번의 어색한 통화만 하면 충분할 때가 많습니다.\n\n<div class=\"content-ad\"></div>\n\n보다 인터랙티브한 의사 소통 방식인 전화 통화 같은 것들은 목표물이 실시간으로 당신의 구실에 대해 어떻게 느끼는지 판단할 수 있도록 해줍니다. 몇 초 안에 상대방이 당신을 믿고 도와주려 한다는 것을 알 수도 있고, 아니면 상대방이 당신을 속인다고 생각하고 끊을 시간이 되었음을 알 수도 있습니다. 또한 전화 통화를 사용하여 목표물을 계속해서 이메일을 통해 연락하는 것으로 인식되는 정당성을 더할 수도 있습니다. 사용자에게 메시지를 전달하는 것이 전투의 반에 해당하며, 사회 공학 전화 통화는 강력한 지름길이 될 수 있습니다.\n\n# 요약하자면\n\n링크 필터를 우회해야 한다면 다음 중 하나를 선택할 수 있습니다:\n\n- 링크가 링크가 아닌 것처럼 보이도록 만들기\n- 링크가 \"정당한\" 링크로 보이도록 만들기\n\n<div class=\"content-ad\"></div>\n\n이메일에서 여전히 링크를 많이 사용해요. 그냥 \"진짜\" 링크와 섞이면 필터를 속일 수 있어요. 정말 급한 상황이라면 대상을 직접 전화해보세요. 더 개인적으로 느껴질지도 몰라요, 하지만 일을 빨리 처리할 수 있답니다.","ogImage":{"url":"/assets/img/2024-06-19-FeedingthePhishes_0.png"},"coverImage":"/assets/img/2024-06-19-FeedingthePhishes_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>사기 교실</h2>\n<p>당신은 목표로 하는 안전한 이메일 게이트웨이(SEG)를 우회하는 실질적인 핑계를 만들 수 있을 지도 모르겠어요; 그러나 링크가 너무 수상하게 보이거나, 즉 \"사기 같이\" 느껴진다면, 당신의 사기는 심지어 흔들리기도 전에 실패할 수 있어요. 그래서 저는 링크 필터를 자체적인 제어로 생각하는 편이에요. 우리는 이 링크 필터들이 어떻게 작동하는지 간단히 살펴보고, 그들을 우회할 수 있는 몇 가지 방법을 알아볼까요.</p>\n<h1>필터가 뭐길래? (WTF)</h1>\n<p>지난 몇 년 동안, 링크 자체를 기반으로 한 사기 탐지에 대한 관심이 늘어나는 것을 알아봤어요 - 또는 적어도, 매우 인기 있는 SEG 중 몇몇은 이메일에 링크의 존재에 매우 높은 가중치를 두는 것을 알았어요. 그렇게 많이 보아와서 SEG가 나를 차단할 때 이런 종류의 감지를 내 처음으로 해결해야 하는 단계 중 하나로 만들었어요. 단순히 이메일에서 모든 링크를 제거하고 메시지 내용이 통과되는지 확인해봅니다.</p>\n<div class=\"content-ad\"></div>\n<p>적어도 한 번에 SEG를 만난 적이 있는데, 어떠한 내용이든 상관없이 어떤 미인식된 도메인에 대한 링크가 포함된 이메일을 차단하는 SEG가 있었습니다. 이 경우에는 내 고객이 허용된 도메인 목록을 관리하고 SEG에게 나머지 모든 것을 차단하도록 지시한 것으로 알고 있습니다. 이는 극단적인 조치일 수 있지만, 매우 타당한 우려라고 생각합니다. 링크가 포함된 이메일은 링크가 없는 이메일보다 기본적으로 더 위험하므로, 대부분의 현대적인 SEG들은 링크를 포함하는 메시지의 SPAM 점수를 증가시키고 종종 링크 자체에 추가적인 검토를 적용할 것입니다.</p>\n<h1>링크 필터링 작동 방식 — 링크 찾기</h1>\n<p>이메일에서 링크를 필터링하는 SEG는 먼저 콘텐츠 내의 각 링크를 감지/구문 분석해야 합니다. 이를 위해 거의 모든 경험 많은 소프트웨어 엔지니어는 직접적으로 정규 표현식(“regex”로 줄여서 함)을 사용할 것입니다:</p>\n<p><img src=\"/assets/img/2024-06-19-FeedingthePhishes_0.png\" alt=\"FeedingthePhishes_0\"></p>\n<div class=\"content-ad\"></div>\n<p>어떤 다른 경험 많은 소프트웨어 엔지니어도 정규 표현식은 매우 강력하지만 실수하기 쉽다는 것을 빨리 상기시켜줄 것입니다:</p>\n<p><img src=\"/assets/img/2024-06-19-FeedingthePhishes_1.png\" alt=\"Regex Example\"></p>\n<p>예를 들어, 스택오버플로에서 링크를 구문 분석하기 위해 발견한 몇 가지 최고의 정규 표현식 필터 중 일부는 다음과 같습니다:</p>\n<p>(http|ftp|https)://([\\w_-]+(?:(?:.[\\w_-]+)+))([\\w.,@?^=%&#x26;:/<del>+#-]*[\\w@?^=%&#x26;/</del>+#-])</p>\n<div class=\"content-ad\"></div>\n<p>(?:(?:https?|ftp|file)://|<a href=\"http://www.%7Cftp.)(?:(%5B-A-Z0%E2%80%939+&#x26;@#/%25=\" rel=\"nofollow\" target=\"_blank\">www.|ftp.)(?:([-A-Z0–9+&#x26;@#/%=</a><del>_|$?!:,.]*)|[-A-Z0-9+&#x26;@#/%=</del><em>|$?!:,.])*(?:([-A-Z0-9+&#x26;@#/%=<del>_|$?!:,.]*)|[A-Z0-9+&#x26;@#/%=</del></em>|$])</p>\n<p>(?:(?:https?|ftp)://)?[\\w/-?=%.]+.[\\w/-&#x26;?=%.]+</p>\n<p>([\\w+]+://)?([\\w\\d-]+.)<em>[\\w-]+[.:]\\w+([/?=&#x26;#.]?[\\w-]+)</em>/?</p>\n<p>(?i)\\b((?:[a-z][\\w-]+:(?:/'1,3'|[a-z0–9%])|www\\d'0,3'[.]|[a-z0-9.-]+[.][a-z]'2,4'/)(?:[^\\s()<code>]+|\\(([^\\s()</code>]+|(([^\\s()<code>]+\\)))*\\))+(?:\\(([^\\s()</code>]+|(([^\\s()<code>]+\\)))*\\)|[^\\s`!()\\[\\]'';:’”.,</code>?«»“”‘’]))</p>\n<div class=\"content-ad\"></div>\n<p>위 내용 중 이해하기 어렵더라도 걱정하지 마세요. 나는 정규 표현식에 대해 꽤 익숙한 편이지만, 여기에 있는 옵션 중 어떤 것이 더 좋을지에 대한 의견조차 없습니다. 그러나 여기 예시들로부터 주목할 몇 가지 사항이 있습니다:</p>\n<ul>\n<li>\"정답\"은 없습니다; URL은 매우 복잡할 수 있습니다.</li>\n<li>대부분은 \"http\"로 시작하는 문자열을 찾고자 하는 것을 나타냅니다 (하지만 전부는 아닙니다).</li>\n</ul>\n<p>이것들은 링크 구문 분석 문제에 대한 가장 인기 있는 (똑똑한 사람들이라 생각해보세요) 대답 중 일부입니다. 또한 일부 소프트웨어 엔지니어들이 \"a\" HTML 태그를 포함하는 모든 앵커 태그를 찾거나 링크 시작을 나타내는 \"href=\"를 찾는 더 순진한 접근을 취할 수 있다고 상상할 수 있습니다. 소프트웨어 엔지니어가 선택한 어떤 솔루션이든, 그들의 파서가 잡아내지 못하는 유효한 URL이 적어도 약간은 존재하고 범주적 우회 가능성을 남겨둘 것입니다. \"http\"와 같은 일반적인 표시를 피하게 될 경우 또는 링크를 여러 부분으로 나누는 것으로 파서를 회피할 수도 있을 것입니다.</p>\n<p>부연 설명: 이 유명한 URL 파서 중 일부는 FTP를 고려하고 일부는 고려하지 않는 것을 보셨나요? 대부분의 브라우저가 FTP 공유에 연결할 수 있다는 것을 알고 계셨나요? 익명 FTP 링크를 통해 피싱 페이로드를 전달해 본 적이 있나요?</p>\n<div class=\"content-ad\"></div>\n<h1>링크 필터링이 작동하는 방식 - 링크 필터링</h1>\n<p>이메일에서 모든 링크를 분석한 후 SEG가 어떻게 합법적으로 보이는 링크와 그렇지 않은 링크를 결정해야 할까요? 요즘 대부분의 SEG는 각 링크에 대해 두 가지 주요 요소를 살펴봅니다:</p>\n<ul>\n<li>도메인의 평판</li>\n<li>링크의 \"모습\"</li>\n</ul>\n<p>도메인 평판을 확인하는 것은 꽤 간단합니다; 링크를 나누어 첫 번째 두 슬래시(\"/\")와 다음 슬래시(\"/\") 사이에 있는 내용을 확인한 다음 해당 도메인이나 서브도메인을 Virustotal이나 유사한 곳에서 찾아봅니다. 많은 SEG는 악성 도메인으로 식별된 경우 다른 보안 제품과 정보를 공유할 것이며 그 반대도 마찬가지입니다. 당신의 도메인이 악성으로 식별된 경우, SEG는 해당 이메일을 차단하거나 링크를 제거할 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>링크가 \"어떻게 보이는지\" 확인하는 데는 대부분의 SEG(이메일 보안 게이트웨이)들이 요즘 인공 지능 또는 머신 러닝(즉, AI/ML)을 사용하여 링크를 악의적인지 또는 선행된 것으로 분류합니다. 이러한 AI 모델은 악성 링크의 대량의 알려진 데이터로 훈련되어 SPAM 작성자들이 일반적으로 사용하는 주제와 패턴을 감지할 수 있습니다. 사이버 사기범으로서, 우리는 그 명언의 \"알려진 악의적인\" 부분에 집중하는 것이 중요하다고 생각합니다.</p>\n<p>한 연구자의 발표를 본 적이 있는데, 그들의 AI 모델이 훈련 데이터에서 악성 링크 중 98% 이상을 감지할 수 있다고 주장했습니다. 처음에는 매우 인상적인 숫자로 보입니다. 그러나 처음 보았을 때는 100%의 악성 훈련 세트를 사람들이 악의적으로 감지해야 했기 때문에, AI 모델은 \"링크의 외관\"만으로 사기 링크를 감지하는 데 사람의 능력의 98%만큼만 뛰어난 것이었습니다. 이론적으로 이러한 집합을 가지고 있다는 것이 가능한 경우, 알려지지 않은 악의적인 링크 집합에서는 훨씬 나쁠 것으로 상상됩니다. 우리의 링크가 그 알려지지 않은 악의적인 범주로 들어갈 수 있게 음모를 꾸리는 게 중요합니다.</p>\n<p>우리는 AI 모델과 맞서고 있지만, 이러한 모델이 인간이 선별한 데이터를 기반으로 훈련되므로 결론적으로는 이 작업에서 인간의 능력에 수준에 달할 뿐 아니라 뛰어넘을 수 없다는 것을 상기하는 것을 좋아합니다. 우리 링크가 인간에게 충분히 설득력 있게 보이게 만들면, AI가 우리에게 어떤 문제도 제공하지 않을 것입니다.</p>\n<h1>링크 필터 우회하기</h1>\n<div class=\"content-ad\"></div>\n<p>우리가 링크 필터가 작동하는 방식에 대해 알게 된 지금, 필터를 우회하는 데 사용할 수 있는 두 가지 주요 전략이 있습니다:</p>\n<ul>\n<li>링크를 형식화하여 링크 파싱 단계를 통과시킵니다</li>\n<li>링크를 더 \"합법적\"으로 보이게 만듭니다</li>\n</ul>\n<p>만약 파서가 우리의 링크를 링크로 등록하지 않는다면, 추가적인 검토를 할 수 없습니다. 우리가 우리의 링크 위치를 어떤 합법적인 링크처럼 보이게 만들 수 있다면, 파서를 우회하지 못하더라도 우리가 그래도 허용을 받을 수도 있습니다. 이러한 접근 방식은 상호 배타적이 아니며 기법을 혼합하는 것이 더 큰 성공을 거둘 수도 있다는 점에 유의하십시오.</p>\n<h1>파서 우회하기</h1>\n<div class=\"content-ad\"></div>\n<h2>앵커 태그 사용하지 마세요</h2>\n<p>일부 SEG들에 대한 가장 기본적인 파서 우회 방법 중 하나는 Outlook에서 하이퍼링크를 제거하여 링크 URL을 일반 텍스트로 남겨두는 것입니다. 보통 링크 URL은 HTML 앵커 태그(<code>a</code>)의 \"하이퍼텍스트 참조\" (href) 속성에 배치됩니다. 앞서 설명한대로, 링크를 구문 분석하는 한 가지 단순하지만 놀라울 정도로 흔한 해결책은 Python의 BeautifulSoup와 같은 HTML 파싱 라이브러리를 사용하는 것입니다. 예를 들면:</p>\n<pre><code class=\"hljs language-js\">soup = <span class=\"hljs-title class_\">BeautifulSoup</span>(email.<span class=\"hljs-property\">content</span>, <span class=\"hljs-string\">'html.parser'</span>)\nlinks = soup.<span class=\"hljs-title function_\">find_all</span>(<span class=\"hljs-string\">\"a\"</span>) # &#x3C;a> 태그 모두 찾기\n<span class=\"hljs-keyword\">for</span> link <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">links</span>:\n  <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"링크:\"</span>, link.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"href\"</span>), <span class=\"hljs-string\">\"텍스트:\"</span>, link.<span class=\"hljs-property\">string</span>)\n</code></pre>\n<p>이 접근 방식을 사용하여 링크를 구문 분석하는 SEG는 앵커 태그 바깥에 있는 URL을 보지 못할 것입니다. 클릭 가능한 링크가 아닌 URL은 최종 사용자에게 약간 이상할 수 있지만, 이 우회 방법이 작동할 때는 일반적으로 이런 절충이 가치 있다고 할 수 있습니다. 많은 경우에 메일 클라이언트들은 앵커 태그 안에 있지 않더라도 URL을 하이퍼링크로 구문 분석하고 표시할 것이기 때문에, 이 기술을 사용하는 것에는 대개 거의 또는 전혀 단점이 없습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>Base Tag 사용법 (a.k.a BaseStriker 공격)</h2>\n<p>일부 링크 필터를 우회하는 흥미로운 방법 중 하나는 \"base\"라는 잘 알려지지 않은 HTML 태그를 사용하는 것입니다. 이 태그를 사용하면 상대 참조를 사용하는 모든 링크에 대해 기본 도메인을 설정할 수 있습니다 (즉, href가 \"/something\"으로 시작하는 링크가 아니라 \"<a href=\"https://example.com/something%22%EA%B3%BC\" rel=\"nofollow\" target=\"_blank\">https://example.com/something\"과</a> 같이 직접 참조가 아닌 링크). 이 경우에는 \"<a href=\"https://example.com%22%EC%9D%B4\" rel=\"nofollow\" target=\"_blank\">https://example.com\"이</a> URL의 \"base\"로 간주됩니다. HTML 콘텐츠의 헤더에서 HTML base 태그를 사용하여 기본을 정의하면 메시지의 본문에서는 상대 참조만 사용할 수 있습니다. HTML 헤더에는 일반적으로 CSS나 XML 스키마와 같은 것들을 위한 URL이 포함되지만, 헤더에는 악의적인 내용이 포함되지 않을 것으로 예상되며 링크 구문 분석기에서 눈을 피할 수 있습니다. 이 기법은 \"BaseStriker\" 공격으로 알려져 있으며 일부 인기 있는 SEGs에 대해 작동하는 것으로 알려져 있습니다:</p>\n<p><a href=\"https://www.cyberdefensemagazine.com/basestriker-attack-technique-allow-to-bypass-microsoft-office-365-anti-phishing-filter/\" rel=\"nofollow\" target=\"_blank\">BaseStriker 공격 기법: Microsoft Office 365 항 취업 필터를 우회할 수 있는 기술</a></p>\n<p>이 기술이 작동하는 이유는 사실상 링크를 두 부분으로 나누기 때문입니다: 도메인은 HTML 헤더에 있고 URL의 나머지 부분은 본문의 앵커 태그에 있습니다. 앵커 태그의 href는 \"https://\"로 시작하지 않기 때문에 링크로 감지되지 않습니다.</p>\n<div class=\"content-ad\"></div>\n<h2>작은 우회 계획</h2>\n<p>URL의 첫 부분, 콜론과 슬래시 앞에 있는 부분은 \"scheme\"이라고 알려져 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">URI</span> = scheme <span class=\"hljs-string\">\":\"</span> [<span class=\"hljs-string\">\"//\"</span> authority] path [<span class=\"hljs-string\">\"?\"</span> query] [<span class=\"hljs-string\">\"#\"</span> fragment]\n</code></pre>\n<p>이미 언급한 바와 같이, URL을 감지하는 더 효과적인 방법 중 하나는 scheme인 것처럼 보이는 것을 찾는 것입니다 (예: \"http://\" 또는 \"https://\"), 그 뒤에 URL에서 허용되는 문자 시퀀스가 따르는 것입니다. 만약 scheme을 빼 놓는다면, 많은 링크 파서들은 우리의 URL을 감지할 수 없을 수도 있지만, 그래도 이것은 사람에게 URL처럼 보일 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>accounts.goooogle.com/login?id=34567</p>\n<p>이 링크를 브라우저에 그대로 복사하여 붙여넣으면 간단하게 사용할 수 있습니다. 또한, 몇 가지 합법적인 방법이 우리의 대상 사용자 시스템에서 프로그램을 열고 오류로 표시되는 URL 파서를 뚫고 지나갈 수 있습니다. 보통의 웹 링크만을 찾는 URL 파서가 다음 링크들을 식별하는데 문제를 겪을 수 있습니다:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_URI_schemes\" rel=\"nofollow\" target=\"_blank\">https://en.wikipedia.org/wiki/List_of_URI_schemes</a></p>\n<p>여기에서 몇 가지 피싱 링크로서 매우 유용한 것들이 포함되어 있을지도 몰라요 ;)</p>\n<div class=\"content-ad\"></div>\n<h2>QR 낚시</h2>\n<p>이메일에 링크가 전혀 없는 경우는 어떻게 될까요? 이미지로 되어 있는 경우는 어떤가요? 전통적인 링크 대신 QR 코드를 사용하여 낚시를 자동화하는 SquarePhish와 같은 도구를 사용할 수 있습니다:</p>\n<p>아직 직접 시도해보지는 않았지만, 비슷한 기술을 사용한 친구들로부터 좋은 소식을 들었습니다. 이 공격을 직접 자동화해보고 싶다면, NodeJS에는 QR 생성을 위한 간단한 라이브러리가 있습니다:</p>\n<h1>필터 우회</h1>\n<div class=\"content-ad\"></div>\n<h2>링크 숨김 기능 사용하지 마세요</h2>\n<p>(잠깐만요. 제 의견을 말씀드릴게요...) 링크를 숨김 처리했는데, 블록당하는 일이 몇 번 있었는지 모르겠어요. 그런데 링크를 풀어보면 동일한 내용이 전달된다는 것을 알게 되었어요. 앵커 태그의 이 기능이 스팸 발송자들에 의해 오래 전부터 남용되어 왔기 때문인 것 같아요. 평범한 이메일 사용자들은 링크 숨김을 거의 사용하지 않으니, 링크 필터는 일반적인 링크보다 링크 숨김을 훨씬 더 위험하게 볼 수 있어요. 따라서 그냥 일반 링크를 사용하세요. 요즘에는 누구나 링크를 호버하고 실제 위치를 확인할 수 있다고 생각하기 때문에, 숨김 링크는 이제 사람을 속이는 데에도 좋지 않아요. 진부하지 마세요. 링크 숨김을 사용하지 마세요.</p>\n<h2>분류된 도메인 사용하기</h2>\n<p>많은 링크 필터러는 미분류된 도메인이나 악성으로 분류된 도메인, 최근에 등록된 도메인을 차단하거나 삭제합니다. 따라서 주로 분류가 완료된 도메인을 사용하는 것이 좋은 생각일 수 있어요. 이미 \"원 피쉬, 투 피쉬, 레드팀이 피쉬를 토하다\"에서 이에 대해 언급했기 때문에 좋은 도메인을 얻는 과정은 생략하겠어요. 그래도 여기서도 동일한 규칙이 적용된다는 것을 알아두세요.</p>\n<div class=\"content-ad\"></div>\n<h2>\"합법적인\" 도메인 사용하기</h2>\n<p>만일 사기 링크를 유지하는 데 들이는 수고를 피하고 싶다면, 대체로 신뢰할 수 있는 도메인을 활용할 수 있습니다. 최근에 \"야생에서\" 본 예시 중 하나는 스패머가 sites.google.com 링크를 사용한 것이었습니다. 그들은 구글에 피싱 페이지를 호스팅했죠! 이 아이디어가 뛰어난 것으로 생각했습니다. 왜냐하면 대부분의 링크 필터가 Google을 허용할 것이라 기대했고, 대부분의 최종 사용자는 google.com에서 제공되는 모든 것이 신뢰할 만하다고 생각할 것이기 때문이었습니다. 이와 유사한 다른 예시로는 GitHub의 정적 페이지, S3 버킷이나 기타 일반적인 콘텐츠 전달 네트워크(CDN), 그리고 SharePoint 등에서 자신의 피싱 사이트를 호스팅할 수 있습니다. 사용자가 임의의 HTML 콘텐츠 페이지를 호스팅할 수 있는 \"합법적인\" 사이트가 많이 있습니다.</p>\n<h2>임의의 리디렉션</h2>\n<p>신뢰할 수 있는 도메인에 피싱 사이트를 호스트하는 것과 같은 방식으로 신뢰할 수 있는 도메인을 사용하여 피싱 사이트로 리디렉션을 할 수 있습니다. 이러한 전형적인 예시 중 하나는 TinyURL과 같은 링크 단축 서비스입니다. TinyURL은 SPAM으로 남용되었기 때문에 대부분의 보안 게이트웨이(SEG)가 TinyURL 링크를 차단할 것으로 예상되지만, TinyURL은 임의의 리디렉션의 유용성을 보여줍니다.</p>\n<div class=\"content-ad\"></div>\n<p>임의의 리디렉트 우회하기 위한 더 유용한 형식은 'window.location' 변경을 지정할 수 있게 해주는 크로스사이트 스크립팅(XSS) 취약점이 존재하는 URL 또는 HTTP GET 매개변수를 통해 페이지 리디렉트를 지정할 수 있는 URL입니다. 제 정찰 단계에서는 대상의 주요 웹사이트에서 이러한 종류의 취약점을 찾기 위해 몇 분 이상을 투자하는 것을 좋아합니다. 이러한 취약점들은 놀랍게도 흔하며, 웹 애플리케이션 페네트레이션 테스트 보고서에서 임의의 리디렉트는 낮은 위험으로 여겨질 수 있지만 피싱과 결합하면 매우 유용할 수 있습니다. 여러분의 링크는 대상 조직의 주요 웹사이트에 대한 URL을 가리킬 것입니다. 링크 필터나 심지어 사람도 그 위험을 알아차리기는 극히 힘듭니다. 경우에 따라 대상 조직이 SEG(Secure Email Gateway)에서 도메인을 가리키는 링크에 대한 명시적 허용 목록을 구성해 놓은 경우가 있을 수도 있습니다.</p>\n<h2>첨부 파일에 대한 링크</h2>\n<p>이메일의 링크도 이메일 첨부 파일을 가리킬 수 있다는 사실을 알고 계셨나요? 앵커 태그의 href에 URL 대신 첨부 파일의 콘텐츠 식별자(CID)를 지정할 수 있습니다(예: href=\"cid:<a href=\"mailto:mycontentidentifier@content.net\">mycontentidentifier@content.net</a>\"). 링크 필터를 우회하는 데 이 요령을 사용한 한 가지 방법은 HTML 첨부 파일로 링크를 걸고, 사용자를 피싱 사이트로 리디렉트하는 난해한 자바스크립트를 사용하는 것입니다. 우리의 href가 URL처럼 보이지 않기 때문에 대부분의 SEG가 우리의 링크를 무해하게 생각할 것입니다. PDF, DOCX 등 일반적으로 허용되는 여러 다른 파일 유형으로 링크를 걸거나, 실제 피싱 링크가 포함된 후자의 파일을 링크할 수도 있습니다. 사용자에게 추가 지침을 제공하기 위해 선판 속에서 약간의 작업이 더 필요할 수도 있고, 문서를 여는 후 사용자가 그냥 링크를 클릭하리라는 희망만 가져도 되기도 합니다. 이 경우 SEG의 콘텐츠 필터가 검증될 가능성이 낮은 문서 내에 추가 지침을 추가하는 것이 가장 합리적이라고 생각합니다.</p>\n<h2>전화하기</h2>\n<div class=\"content-ad\"></div>\n<p>이 블로그는 사회 공학 전법을 우회하는 우리의 \"메시지 수신\" 제어를 마무리 짓습니다. 모두가 알 수 있는 가장 간단한 우회 중 하나를 언급하지 않고는 완벽하지 않을 것입니다:</p>\n<p>이메일을 사용하지 않기!</p>\n<p>대상에게 전화기를 들고 직접 대화를 나누면, 귀를 통해 그들의 두뇌에 직접 들어가는 모란, 즉 통과하지 않고 바로 들어오는 프리텍스트가 되는 것입니다.</p>\n<p>이와 같이 줌 통화, 팀 채팅, 링크드인 메시징 및 거의 모든 일반적인 비즈니스 의사 소통 채널들은 이메일보다 훨씬 적은 제어 대상이 될 것입니다. 이메일보다 전화통화를 선호하여 워크플로를 크게 단순화시키는 레드 팀원들을 몇 명 훈련해왔는데, 목표 환경에 접근하기 위해서는 몇 번의 어색한 통화만 하면 충분할 때가 많습니다.</p>\n<div class=\"content-ad\"></div>\n<p>보다 인터랙티브한 의사 소통 방식인 전화 통화 같은 것들은 목표물이 실시간으로 당신의 구실에 대해 어떻게 느끼는지 판단할 수 있도록 해줍니다. 몇 초 안에 상대방이 당신을 믿고 도와주려 한다는 것을 알 수도 있고, 아니면 상대방이 당신을 속인다고 생각하고 끊을 시간이 되었음을 알 수도 있습니다. 또한 전화 통화를 사용하여 목표물을 계속해서 이메일을 통해 연락하는 것으로 인식되는 정당성을 더할 수도 있습니다. 사용자에게 메시지를 전달하는 것이 전투의 반에 해당하며, 사회 공학 전화 통화는 강력한 지름길이 될 수 있습니다.</p>\n<h1>요약하자면</h1>\n<p>링크 필터를 우회해야 한다면 다음 중 하나를 선택할 수 있습니다:</p>\n<ul>\n<li>링크가 링크가 아닌 것처럼 보이도록 만들기</li>\n<li>링크가 \"정당한\" 링크로 보이도록 만들기</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>이메일에서 여전히 링크를 많이 사용해요. 그냥 \"진짜\" 링크와 섞이면 필터를 속일 수 있어요. 정말 급한 상황이라면 대상을 직접 전화해보세요. 더 개인적으로 느껴질지도 몰라요, 하지만 일을 빨리 처리할 수 있답니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}