{"pageProps":{"post":{"title":"맥에 여러 개의 Python을 설치하는 방법","description":"","date":"2024-06-19 15:11","slug":"2024-06-19-HowtoinstallmultiplePythononyourMac","content":"\n\n![그림](/assets/img/2024-06-19-HowtoinstallmultiplePythononyourMac_0.png)  \n\n파이썬은 웹 개발, 데이터 분석, 기계 학습 등 다양한 애플리케이션에 사용되는 인기 있는 프로그래밍 언어입니다. 그러나 서로 다른 프로젝트와 애플리케이션이 서로 다른 버전의 파이썬을 필요로 할 수 있으며, 한 대의 컴퓨터에서 여러 버전을 관리하는 것은 도전적일 수 있습니다.\n\n다행히도 pyenv는 macOS에서 여러 버전의 파이썬을 쉽게 설치하고 관리할 수 있게 해주는 도구입니다. 이 문서에서는 macOS에 pyenv를 설치하고 사용하는 방법에 대해 안내하겠습니다.\n\n시작하기 전에 다음 사전 준비물이 있는지 확인해주세요:\n\n<div class=\"content-ad\"></div>\n\n- 최신 macOS 버전이 설치된 macOS 기기\n- 터미널 애플리케이션 (예: 터미널, iTerm)\n- macOS용 인기 있는 패키지 관리자인 Homebrew. Homebrew가 설치되지 않았다면 터미널에서 다음 명령을 실행하여 설치할 수 있습니다:\n\n### 단계 1: Homebrew 설치\n\nHomebrew는 macOS용 패키지 관리자로 시스템에 소프트웨어 패키지를 쉽게 설치하고 관리할 수 있게 해줍니다. Homebrew를 설치하려면 터미널을 열고 다음 명령을 실행하세요:\n\n```js\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n<div class=\"content-ad\"></div>\n\n설치를 완료하려면 지시에 따라 진행하세요.\n\n# 단계 2: pyenv 설치\n\npyenv은 여러 Python 버전을 쉽게 설치하고 전환할 수 있게 해주는 Python 버전 관리자입니다. pyenv을 설치하려면 터미널에서 다음 명령어를 실행하세요:\n\n```js\nbrew install pyenv\n\n또는\n\nbrew install pyenv-virtualenv\n```\n\n<div class=\"content-ad\"></div>\n\n이제 시스템에 pyenv와 그 종속 항목을 설치하겠습니다.\n\n# 단계 3: Python 버전 설치\n\n이제 pyenv가 설치되었으므로 Python의 여러 버전을 설치할 수 있습니다. 사용 가능한 Python 버전 목록을 확인하려면 다음 명령을 실행하세요:\n\n```js\npyenv install --list\n```\n\n<div class=\"content-ad\"></div>\n\npyenv를 사용하여 설치할 수 있는 모든 파이썬 버전의 목록을 보여드릴게요. 특정 버전을 설치하려면 다음 명령을 실행하세요:\n\n```js\npyenv install <version>\n```\n\n예를 들어, Python 3.9.10을 설치하려면 다음 명령을 실행하세요:\n\n```js\npyenv install 3.9.10\n```\n\n<div class=\"content-ad\"></div>\n\n필요한만큼 Python 버전을 설치할 수 있어요.\n\n# 단계 4: 전역 Python 버전 설정하기\n\n기본적으로 시스템 Python 버전이 python 명령을 실행할 때 사용됩니다. 다른 Python 버전을 사용하려면 pyenv를 사용하여 전역 버전을 설정할 수 있어요. 특정 버전으로 전역 Python 버전을 설정하려면 다음 명령을 실행하세요:\n\n```js\npyenv global <version>\n```\n\n<div class=\"content-ad\"></div>\n\n예를 들어 전역 Python 버전을 Python 3.9.10으로 설정하려면 다음 명령을 실행하십시오:\n\n\npyenv global 3.9.10\n\n\n이렇게하면 Python 3.9.10이 시스템의 기본 Python 버전으로 설정됩니다.\n\n# 단계 5: 가상 환경 생성\n\n<div class=\"content-ad\"></div>\n\nPython 프로젝트를 서로 격리된 상태로 유지하려면 가상 환경을 사용하는 것이 좋습니다. 가상 환경은 시스템 Python 또는 다른 프로젝트에 영향을 미치지 않고 특정 프로젝트를 위해 패키지와 종속성을 설치할 수 있는 자체 포함된 Python 환경입니다.\n\n새로운 가상 환경을 생성하려면 다음 명령을 실행하세요:\n\n```js\npyenv virtualenv <버전> <환경_이름>\n```\n\n예를 들어, Python 3.9.10을 위해 myenv라는 이름의 가상 환경을 만들려면 다음 명령을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\npyenv virtualenv 3.9.10 myenv\n```\n\n이 명령어를 실행하면 새 가상 환경이 ~/.pyenv/versions/`version`/envs/`env_name`에 생성됩니다.\n\n# 단계 6: 가상 환경 활성화\n\n가상 환경을 활성화하려면 다음 명령을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\npyenv activate <env_name>\n```\n\n예를 들어, myenv 가상 환경을 활성화하려면 다음 명령을 실행하세요:\n\n```js\npyenv activate myenv\n```\n\n이렇게 하면 가상 환경이 활성화되고 터미널 세션에 대한 기본 Python 환경이 됩니다.","ogImage":{"url":"/assets/img/2024-06-19-HowtoinstallmultiplePythononyourMac_0.png"},"coverImage":"/assets/img/2024-06-19-HowtoinstallmultiplePythononyourMac_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-HowtoinstallmultiplePythononyourMac_0.png\" alt=\"그림\"></p>\n<p>파이썬은 웹 개발, 데이터 분석, 기계 학습 등 다양한 애플리케이션에 사용되는 인기 있는 프로그래밍 언어입니다. 그러나 서로 다른 프로젝트와 애플리케이션이 서로 다른 버전의 파이썬을 필요로 할 수 있으며, 한 대의 컴퓨터에서 여러 버전을 관리하는 것은 도전적일 수 있습니다.</p>\n<p>다행히도 pyenv는 macOS에서 여러 버전의 파이썬을 쉽게 설치하고 관리할 수 있게 해주는 도구입니다. 이 문서에서는 macOS에 pyenv를 설치하고 사용하는 방법에 대해 안내하겠습니다.</p>\n<p>시작하기 전에 다음 사전 준비물이 있는지 확인해주세요:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>최신 macOS 버전이 설치된 macOS 기기</li>\n<li>터미널 애플리케이션 (예: 터미널, iTerm)</li>\n<li>macOS용 인기 있는 패키지 관리자인 Homebrew. Homebrew가 설치되지 않았다면 터미널에서 다음 명령을 실행하여 설치할 수 있습니다:</li>\n</ul>\n<h3>단계 1: Homebrew 설치</h3>\n<p>Homebrew는 macOS용 패키지 관리자로 시스템에 소프트웨어 패키지를 쉽게 설치하고 관리할 수 있게 해줍니다. Homebrew를 설치하려면 터미널을 열고 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">/bin/bash -c <span class=\"hljs-string\">\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>설치를 완료하려면 지시에 따라 진행하세요.</p>\n<h1>단계 2: pyenv 설치</h1>\n<p>pyenv은 여러 Python 버전을 쉽게 설치하고 전환할 수 있게 해주는 Python 버전 관리자입니다. pyenv을 설치하려면 터미널에서 다음 명령어를 실행하세요:</p>\n<pre><code class=\"hljs language-js\">brew install pyenv\n\n또는\n\nbrew install pyenv-virtualenv\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 시스템에 pyenv와 그 종속 항목을 설치하겠습니다.</p>\n<h1>단계 3: Python 버전 설치</h1>\n<p>이제 pyenv가 설치되었으므로 Python의 여러 버전을 설치할 수 있습니다. 사용 가능한 Python 버전 목록을 확인하려면 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">pyenv install --list\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>pyenv를 사용하여 설치할 수 있는 모든 파이썬 버전의 목록을 보여드릴게요. 특정 버전을 설치하려면 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">pyenv install &#x3C;version>\n</code></pre>\n<p>예를 들어, Python 3.9.10을 설치하려면 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">pyenv install <span class=\"hljs-number\">3.9</span><span class=\"hljs-number\">.10</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>필요한만큼 Python 버전을 설치할 수 있어요.</p>\n<h1>단계 4: 전역 Python 버전 설정하기</h1>\n<p>기본적으로 시스템 Python 버전이 python 명령을 실행할 때 사용됩니다. 다른 Python 버전을 사용하려면 pyenv를 사용하여 전역 버전을 설정할 수 있어요. 특정 버전으로 전역 Python 버전을 설정하려면 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">pyenv <span class=\"hljs-variable language_\">global</span> &#x3C;version>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>예를 들어 전역 Python 버전을 Python 3.9.10으로 설정하려면 다음 명령을 실행하십시오:</p>\n<p>pyenv global 3.9.10</p>\n<p>이렇게하면 Python 3.9.10이 시스템의 기본 Python 버전으로 설정됩니다.</p>\n<h1>단계 5: 가상 환경 생성</h1>\n<div class=\"content-ad\"></div>\n<p>Python 프로젝트를 서로 격리된 상태로 유지하려면 가상 환경을 사용하는 것이 좋습니다. 가상 환경은 시스템 Python 또는 다른 프로젝트에 영향을 미치지 않고 특정 프로젝트를 위해 패키지와 종속성을 설치할 수 있는 자체 포함된 Python 환경입니다.</p>\n<p>새로운 가상 환경을 생성하려면 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">pyenv virtualenv &#x3C;버전> &#x3C;환경_이름>\n</code></pre>\n<p>예를 들어, Python 3.9.10을 위해 myenv라는 이름의 가상 환경을 만들려면 다음 명령을 실행하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">pyenv virtualenv <span class=\"hljs-number\">3.9</span><span class=\"hljs-number\">.10</span> myenv\n</code></pre>\n<p>이 명령어를 실행하면 새 가상 환경이 ~/.pyenv/versions/<code>version</code>/envs/<code>env_name</code>에 생성됩니다.</p>\n<h1>단계 6: 가상 환경 활성화</h1>\n<p>가상 환경을 활성화하려면 다음 명령을 실행하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">pyenv activate &#x3C;env_name>\n</code></pre>\n<p>예를 들어, myenv 가상 환경을 활성화하려면 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">pyenv activate myenv\n</code></pre>\n<p>이렇게 하면 가상 환경이 활성화되고 터미널 세션에 대한 기본 Python 환경이 됩니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}