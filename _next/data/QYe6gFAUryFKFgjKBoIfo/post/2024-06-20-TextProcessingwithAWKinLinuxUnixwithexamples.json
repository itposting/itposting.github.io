{"pageProps":{"post":{"title":"리눅스 Unix에서 예제를 활용한 AWK를 이용한 텍스트 처리","description":"","date":"2024-06-20 14:11","slug":"2024-06-20-TextProcessingwithAWKinLinuxUnixwithexamples","content":"\n\n\n![Image](/assets/img/2024-06-20-TextProcessingwithAWKinLinuxUnixwithexamples_0.png)\n\nawk은 패턴 스캔 및 처리를 위한 강력한 프로그래밍 언어이자 명령 줄 유틸리티입니다. 주로 텍스트 처리에 사용되며 데이터 추출 및 보고 도구로 사용됩니다. 본 안내서는 awk의 기본 개념을 이해하는 데 도움을 주고 Linux/Unix 환경에서 효과적으로 사용하는 방법을 보여줄 것입니다.\n\n# awk 소개\n\nawk은 창안자 Alfred Aho, Peter Weinberger, Brian Kernighan의 이름에서 따왔습니다. 사용자가 지정한 패턴과 작업을 적용하여 텍스트를 한 줄씩 처리합니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 기본 구문\n\nawk의 기본 구문은 다음과 같습니다:\n\n\nawk '패턴 { 동작 }' 파일\n\n\n- 패턴: 일치시킬 조건을 지정합니다.\n- 동작: 패턴이 일치할 때 무엇을 할지 지정합니다.\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경할 수도 있어요.\n\n```js\necho \"text\" | awk 'pattern { action }'\n```\n\n# 주요 사용 사례 및 예시\n\ndata.txt라는 파일을 고려해보세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nJohn Doe 30 180\nJane Smith 25 165\nAlice Johnson 35 170\nBob Brown 28 175\nCharlie White 32 160\n```\n\n<img src=\"/assets/img/2024-06-20-TextProcessingwithAWKinLinuxUnixwithexamples_1.png\" />\n\n## 1. Printing Specific Columns separated by space\n\nTo print the first names (1st field) and ages (3rd field) separated by space:\n\n<div class=\"content-ad\"></div>\n\n```js\nawk '{ print $1, $3 }' data.txt\n\n\n----- 출력 결과 -----\n\nJohn 30\nJane 25\nAlice 35\nBob 28\nCharlie 32\n```\n\n## 2. 특정 문자로 구분된 특정 열 출력\n\n이름(첫 번째 열)과 나이(세 번째 열)을 세미콜론으로 구분하여 출력하는 방법:\n\n```js\nawk '{ print $1 \";\" $3 }' data.txt\n\n\n----- 출력 결과 -----\n\nJohn;30\nJane;25\nAlice;35\nBob;28\nCharlie;32\n```\n\n<div class=\"content-ad\"></div>\n\n## 3. 조건에 따라 행 필터링하기\n\n네 번째 열이 169보다 큰 경우 모든 행 출력합니다.\n\n```js\nawk '$4 > 169' data.txt\n\n\n----- 결과 -----\n\nJohn Doe 30 180\nAlice Johnson 35 170\nBob Brown 28 175\n```\n\n## 4. 특정 단어를 포함하는 행 출력\n\n<div class=\"content-ad\"></div>\n\n\"John\"이라는 단어를 포함하는 줄을 출력합니다.\n\n```js\nawk '/John/' data.txt\n\n\n----- 출력결과 -----\n\nJohn Doe 30 180\nAlice Johnson 35 170\n```\n\n로그 파일을 처리하고 \"Error\" 또는 \"Warning\"과 같은 키워드를 포함하는 줄을 검색할 때 유용하게 사용할 수 있습니다.\n\n## 5. 열을 합산하기\n\n<div class=\"content-ad\"></div>\n\n각 줄의 3번째와 4번째 열의 합계를 출력합니다.\n\n```js\nawk '{ print $3 + $4 }' data.txt\n\n\n----- 결과 -----\n\n210\n190\n205\n203\n192\n```\n\n- 다른 방법 (변수 사용)\n\n```js\nawk '{ sum=$3+$4 ; print sum }' data.txt\n```\n\n<div class=\"content-ad\"></div>\n\n## 6. 합계 값\n\n세 번째 열의 값을 합산하고 총합을 출력합니다.\n\n```js\nawk '{ sum+=$3 } END { print sum }' data.txt\n\n\n----- 출력 결과 -----\n\n150\n```\n\n## 7. 평균 계산\n\n<div class=\"content-ad\"></div>\n\n평균 연령을 계산하려면 (세 번째 필드):\n\n```js\nawk '{ sum += $3; count++ } END { print sum / count }' data.txt\n\n\n## 8. 라인 번호 출력\n\n각 라인에 라인 번호를 추가하고 출력합니다.\n\n<div class=\"content-ad\"></div>\n\nawk '{print NR, $0}' data.txt\n\n----- 출력 -----\n\n1 John Doe 30 180\n2 Jane Smith 25 165\n3 Alice Johnson 35 170\n4 Bob Brown 28 175\n5 Charlie White 32 160\n\n## 9. 필드 수 출력\n\n각 줄의 필드 수를 출력합니다.\n\nawk '{ print \"Number of fields:\", NF }' data.txt\n\n----- 출력 -----\n\nNumber of fields: 4\nNumber of fields: 4\nNumber of fields: 4\nNumber of fields: 4\nNumber of fields: 4\n\n<div class=\"content-ad\"></div>\n\n## 10. 첫 번째 및 마지막 필드 인쇄\n\nawk '{ print $1, $NF }' data.txt\n\n\n----- 출력 -----\n\nJohn 180\nJane 165\nAlice 170\nBob 175\nCharlie 160\n\n## 11. 대문자로 필드 인쇄\n\n첫 번째 필드를 대문자로 출력\n\n<div class=\"content-ad\"></div>\n\nawk '{ print toupper($1) }' data.txt\n\n\n### 결과\n\nJOHN\nJANE\nALICE\nBOB\nCHARLIE\n\n## 12. 필드로부터 하위 문자열 추출\n\n2번째 필드에서 하위 문자열 추출: 1번째 문자부터 3번째 문자까지\n\nawk '{print substr($2,1,3)}' data.txt\n\n\n### 결과\n\nDoe\nSmi\nJoh\nBro\nWhi\n\n<div class=\"content-ad\"></div>\n\n## 13. 각 줄의 필드 길이 출력\n\n각 줄의 2번째 필드의 길이를 출력합니다.\n\nawk '{ print length($2) }' data.txt\n\n\n----- 출력 결과 -----\n\n3\n5\n7\n5\n5\n\n## 14. 사용자 정의 함수\n\n<div class=\"content-ad\"></div>\n\n보다 복잡한 작업을 위해 awk 스크립트 내에서 함수를 정의할 수 있어요:\n\nawk '\nfunction square(x) { return x * x }\n{ print $3, \" --> square :\" , square($3) }\n' data.txt\n\n\n----- 출력 -----\n\n30  --> square : 900\n25  --> square : 625\n35  --> square : 1225\n28  --> square : 784\n32  --> square : 1024\n\n# 결론\n\nawk는 여러 가지 방식으로 텍스트 파일을 조작하고 분석하는 데 도움이 되는 다재다능한 도구입니다. 데이터 추출, 계산 수행, 또는 텍스트 변환 등이 목적이라면 awk가 작업을 간소화하는 강력한 기능 세트를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\nawk 명령어를 실험해보세요! 이를 통해 Linux/Unix에서 더 효율적인 텍스트 처리를 위한 워크플로에 효과적으로 통합할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-20-TextProcessingwithAWKinLinuxUnixwithexamples_0.png"},"coverImage":"/assets/img/2024-06-20-TextProcessingwithAWKinLinuxUnixwithexamples_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-20-TextProcessingwithAWKinLinuxUnixwithexamples_0.png\" alt=\"Image\"></p>\n<p>awk은 패턴 스캔 및 처리를 위한 강력한 프로그래밍 언어이자 명령 줄 유틸리티입니다. 주로 텍스트 처리에 사용되며 데이터 추출 및 보고 도구로 사용됩니다. 본 안내서는 awk의 기본 개념을 이해하는 데 도움을 주고 Linux/Unix 환경에서 효과적으로 사용하는 방법을 보여줄 것입니다.</p>\n<h1>awk 소개</h1>\n<p>awk은 창안자 Alfred Aho, Peter Weinberger, Brian Kernighan의 이름에서 따왔습니다. 사용자가 지정한 패턴과 작업을 적용하여 텍스트를 한 줄씩 처리합니다.</p>\n<div class=\"content-ad\"></div>\n<h1>기본 구문</h1>\n<p>awk의 기본 구문은 다음과 같습니다:</p>\n<p>awk '패턴 { 동작 }' 파일</p>\n<ul>\n<li>패턴: 일치시킬 조건을 지정합니다.</li>\n<li>동작: 패턴이 일치할 때 무엇을 할지 지정합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>테이블 태그를 Markdown 형식으로 변경할 수도 있어요.</p>\n<pre><code class=\"hljs language-js\">echo <span class=\"hljs-string\">\"text\"</span> | awk <span class=\"hljs-string\">'pattern { action }'</span>\n</code></pre>\n<h1>주요 사용 사례 및 예시</h1>\n<p>data.txt라는 파일을 고려해보세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">John</span> <span class=\"hljs-title class_\">Doe</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">180</span>\n<span class=\"hljs-title class_\">Jane</span> <span class=\"hljs-title class_\">Smith</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">165</span>\n<span class=\"hljs-title class_\">Alice</span> <span class=\"hljs-title class_\">Johnson</span> <span class=\"hljs-number\">35</span> <span class=\"hljs-number\">170</span>\n<span class=\"hljs-title class_\">Bob</span> <span class=\"hljs-title class_\">Brown</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">175</span>\n<span class=\"hljs-title class_\">Charlie</span> <span class=\"hljs-title class_\">White</span> <span class=\"hljs-number\">32</span> <span class=\"hljs-number\">160</span>\n</code></pre>\n<img src=\"/assets/img/2024-06-20-TextProcessingwithAWKinLinuxUnixwithexamples_1.png\">\n<h2>1. Printing Specific Columns separated by space</h2>\n<p>To print the first names (1st field) and ages (3rd field) separated by space:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">awk <span class=\"hljs-string\">'{ print $1, $3 }'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n----- 출력 결과 -----\n\n<span class=\"hljs-title class_\">John</span> <span class=\"hljs-number\">30</span>\n<span class=\"hljs-title class_\">Jane</span> <span class=\"hljs-number\">25</span>\n<span class=\"hljs-title class_\">Alice</span> <span class=\"hljs-number\">35</span>\n<span class=\"hljs-title class_\">Bob</span> <span class=\"hljs-number\">28</span>\n<span class=\"hljs-title class_\">Charlie</span> <span class=\"hljs-number\">32</span>\n</code></pre>\n<h2>2. 특정 문자로 구분된 특정 열 출력</h2>\n<p>이름(첫 번째 열)과 나이(세 번째 열)을 세미콜론으로 구분하여 출력하는 방법:</p>\n<pre><code class=\"hljs language-js\">awk <span class=\"hljs-string\">'{ print $1 \";\" $3 }'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n----- 출력 결과 -----\n\n<span class=\"hljs-title class_\">John</span>;<span class=\"hljs-number\">30</span>\n<span class=\"hljs-title class_\">Jane</span>;<span class=\"hljs-number\">25</span>\n<span class=\"hljs-title class_\">Alice</span>;<span class=\"hljs-number\">35</span>\n<span class=\"hljs-title class_\">Bob</span>;<span class=\"hljs-number\">28</span>\n<span class=\"hljs-title class_\">Charlie</span>;<span class=\"hljs-number\">32</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>3. 조건에 따라 행 필터링하기</h2>\n<p>네 번째 열이 169보다 큰 경우 모든 행 출력합니다.</p>\n<pre><code class=\"hljs language-js\">awk <span class=\"hljs-string\">'$4 > 169'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n----- 결과 -----\n\n<span class=\"hljs-title class_\">John</span> <span class=\"hljs-title class_\">Doe</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">180</span>\n<span class=\"hljs-title class_\">Alice</span> <span class=\"hljs-title class_\">Johnson</span> <span class=\"hljs-number\">35</span> <span class=\"hljs-number\">170</span>\n<span class=\"hljs-title class_\">Bob</span> <span class=\"hljs-title class_\">Brown</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">175</span>\n</code></pre>\n<h2>4. 특정 단어를 포함하는 행 출력</h2>\n<div class=\"content-ad\"></div>\n<p>\"John\"이라는 단어를 포함하는 줄을 출력합니다.</p>\n<pre><code class=\"hljs language-js\">awk <span class=\"hljs-string\">'/John/'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n----- 출력결과 -----\n\n<span class=\"hljs-title class_\">John</span> <span class=\"hljs-title class_\">Doe</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">180</span>\n<span class=\"hljs-title class_\">Alice</span> <span class=\"hljs-title class_\">Johnson</span> <span class=\"hljs-number\">35</span> <span class=\"hljs-number\">170</span>\n</code></pre>\n<p>로그 파일을 처리하고 \"Error\" 또는 \"Warning\"과 같은 키워드를 포함하는 줄을 검색할 때 유용하게 사용할 수 있습니다.</p>\n<h2>5. 열을 합산하기</h2>\n<div class=\"content-ad\"></div>\n<p>각 줄의 3번째와 4번째 열의 합계를 출력합니다.</p>\n<pre><code class=\"hljs language-js\">awk <span class=\"hljs-string\">'{ print $3 + $4 }'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n----- 결과 -----\n\n<span class=\"hljs-number\">210</span>\n<span class=\"hljs-number\">190</span>\n<span class=\"hljs-number\">205</span>\n<span class=\"hljs-number\">203</span>\n<span class=\"hljs-number\">192</span>\n</code></pre>\n<ul>\n<li>다른 방법 (변수 사용)</li>\n</ul>\n<pre><code class=\"hljs language-js\">awk <span class=\"hljs-string\">'{ sum=$3+$4 ; print sum }'</span> data.<span class=\"hljs-property\">txt</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>6. 합계 값</h2>\n<p>세 번째 열의 값을 합산하고 총합을 출력합니다.</p>\n<pre><code class=\"hljs language-js\">awk <span class=\"hljs-string\">'{ sum+=$3 } END { print sum }'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n----- 출력 결과 -----\n\n<span class=\"hljs-number\">150</span>\n</code></pre>\n<h2>7. 평균 계산</h2>\n<div class=\"content-ad\"></div>\n<p>평균 연령을 계산하려면 (세 번째 필드):</p>\n<pre><code class=\"hljs language-js\">awk <span class=\"hljs-string\">'{ sum += $3; count++ } END { print sum / count }'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n## <span class=\"hljs-number\">8.</span> 라인 번호 출력\n\n각 라인에 라인 번호를 추가하고 출력합니다.\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\nawk <span class=\"hljs-string\">'{print NR, $0}'</span> data.<span class=\"hljs-property\">txt</span>\n\n----- 출력 -----\n\n<span class=\"hljs-number\">1</span> <span class=\"hljs-title class_\">John</span> <span class=\"hljs-title class_\">Doe</span> <span class=\"hljs-number\">30</span> <span class=\"hljs-number\">180</span>\n<span class=\"hljs-number\">2</span> <span class=\"hljs-title class_\">Jane</span> <span class=\"hljs-title class_\">Smith</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-number\">165</span>\n<span class=\"hljs-number\">3</span> <span class=\"hljs-title class_\">Alice</span> <span class=\"hljs-title class_\">Johnson</span> <span class=\"hljs-number\">35</span> <span class=\"hljs-number\">170</span>\n<span class=\"hljs-number\">4</span> <span class=\"hljs-title class_\">Bob</span> <span class=\"hljs-title class_\">Brown</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-number\">175</span>\n<span class=\"hljs-number\">5</span> <span class=\"hljs-title class_\">Charlie</span> <span class=\"hljs-title class_\">White</span> <span class=\"hljs-number\">32</span> <span class=\"hljs-number\">160</span>\n\n## <span class=\"hljs-number\">9.</span> 필드 수 출력\n\n각 줄의 필드 수를 출력합니다.\n\nawk <span class=\"hljs-string\">'{ print \"Number of fields:\", NF }'</span> data.<span class=\"hljs-property\">txt</span>\n\n----- 출력 -----\n\n<span class=\"hljs-title class_\">Number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-attr\">fields</span>: <span class=\"hljs-number\">4</span>\n<span class=\"hljs-title class_\">Number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-attr\">fields</span>: <span class=\"hljs-number\">4</span>\n<span class=\"hljs-title class_\">Number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-attr\">fields</span>: <span class=\"hljs-number\">4</span>\n<span class=\"hljs-title class_\">Number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-attr\">fields</span>: <span class=\"hljs-number\">4</span>\n<span class=\"hljs-title class_\">Number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-attr\">fields</span>: <span class=\"hljs-number\">4</span>\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\n## <span class=\"hljs-number\">10.</span> 첫 번째 및 마지막 필드 인쇄\n\nawk <span class=\"hljs-string\">'{ print $1, $NF }'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n----- 출력 -----\n\n<span class=\"hljs-title class_\">John</span> <span class=\"hljs-number\">180</span>\n<span class=\"hljs-title class_\">Jane</span> <span class=\"hljs-number\">165</span>\n<span class=\"hljs-title class_\">Alice</span> <span class=\"hljs-number\">170</span>\n<span class=\"hljs-title class_\">Bob</span> <span class=\"hljs-number\">175</span>\n<span class=\"hljs-title class_\">Charlie</span> <span class=\"hljs-number\">160</span>\n\n## <span class=\"hljs-number\">11.</span> 대문자로 필드 인쇄\n\n첫 번째 필드를 대문자로 출력\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\nawk <span class=\"hljs-string\">'{ print toupper($1) }'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n### 결과\n\n<span class=\"hljs-variable constant_\">JOHN</span>\n<span class=\"hljs-variable constant_\">JANE</span>\n<span class=\"hljs-variable constant_\">ALICE</span>\n<span class=\"hljs-variable constant_\">BOB</span>\n<span class=\"hljs-variable constant_\">CHARLIE</span>\n\n## <span class=\"hljs-number\">12.</span> 필드로부터 하위 문자열 추출\n\n<span class=\"hljs-number\">2</span>번째 필드에서 하위 문자열 추출: <span class=\"hljs-number\">1</span>번째 문자부터 <span class=\"hljs-number\">3</span>번째 문자까지\n\nawk <span class=\"hljs-string\">'{print substr($2,1,3)}'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n### 결과\n\n<span class=\"hljs-title class_\">Doe</span>\n<span class=\"hljs-title class_\">Smi</span>\n<span class=\"hljs-title class_\">Joh</span>\n<span class=\"hljs-title class_\">Bro</span>\n<span class=\"hljs-title class_\">Whi</span>\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\n## <span class=\"hljs-number\">13.</span> 각 줄의 필드 길이 출력\n\n각 줄의 <span class=\"hljs-number\">2</span>번째 필드의 길이를 출력합니다.\n\nawk <span class=\"hljs-string\">'{ print length($2) }'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n----- 출력 결과 -----\n\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">7</span>\n<span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">5</span>\n\n## <span class=\"hljs-number\">14.</span> 사용자 정의 함수\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\n보다 복잡한 작업을 위해 awk 스크립트 내에서 함수를 정의할 수 있어요:\n\nawk <span class=\"hljs-string\">'\nfunction square(x) { return x * x }\n{ print $3, \" --> square :\" , square($3) }\n'</span> data.<span class=\"hljs-property\">txt</span>\n\n\n----- 출력 -----\n\n<span class=\"hljs-number\">30</span>  --> square : <span class=\"hljs-number\">900</span>\n<span class=\"hljs-number\">25</span>  --> square : <span class=\"hljs-number\">625</span>\n<span class=\"hljs-number\">35</span>  --> square : <span class=\"hljs-number\">1225</span>\n<span class=\"hljs-number\">28</span>  --> square : <span class=\"hljs-number\">784</span>\n<span class=\"hljs-number\">32</span>  --> square : <span class=\"hljs-number\">1024</span>\n\n# 결론\n\nawk는 여러 가지 방식으로 텍스트 파일을 조작하고 분석하는 데 도움이 되는 다재다능한 도구입니다. 데이터 추출, 계산 수행, 또는 텍스트 변환 등이 목적이라면 awk가 작업을 간소화하는 강력한 기능 세트를 제공합니다.\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\nawk 명령어를 실험해보세요! 이를 통해 <span class=\"hljs-title class_\">Linux</span>/<span class=\"hljs-title class_\">Unix</span>에서 더 효율적인 텍스트 처리를 위한 워크플로에 효과적으로 통합할 수 있습니다.\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}