{"pageProps":{"post":{"title":"리눅스 도구 Sed 40 기본 명령어 입문","description":"","date":"2024-06-27 18:59","slug":"2024-06-27-LinuxToolsSed40CommandsIntro","content":"\n\n이 노트 세트에서는 다양한 Sed 명령에 대해 논의를 시작하겠습니다. 그 명령들이 많기 때문에 명령에 대한 논의를 몇 개의 다른 게시물로 나눌 것입니다. 이 게시물에는 다음 내용이 포함됩니다:\n\n- Sed 명령 구문\n- Sed 스크립트 및 실행 방법\n- 명령 대상 지정, 구분자 및 그룹화\n\n명령 구문\n\n모든 다른 프로그래밍 언어와 마찬가지로 Sed에는 구문이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n설명서에 따르면 Sed 명령의 구문은 다음과 같습니다:\n\n[주소]X[명령 옵션]\n\nX는 한 글자 명령입니다. 모든 Sed 명령은 한 글자로만 구성됩니다.\n\n[주소]는 명령 또는 명령 그룹 앞에 나오는 선택적 조건입니다. [주소]는 숫자, 정규 표현식 또는 이전에 설명한 둘 중 하나의 범위일 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n[command options]은 명령어 X를 제어하는 옵션입니다.\n\nSed 스크립트\n\n저에게 Sed 스크립트는 단순히 프로그래머가 설정한 순서대로 실행되는 하나 이상의 Sed 명령어 목록입니다. Sed는 호출될 때 하나 이상의 스크립트를 실행할 수 있습니다.\n\nSed 스크립트는 명령줄에 직접 제공하거나 하나 이상의 파일에 포함하여 Sed에 제공할 수 있습니다. 명령줄에서는 여러 스크립트를 -e 스크립트 또는 --expression=스크립트 명령줄 옵션으로 구분합니다. Sed는 -f 스크립트 | --file=스크립트 명령줄 옵션을 사용하여 파일에서 스크립트를 읽을 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n한 행에 여러 명령을 사용하려면 스크립트 내에서 ; 문자를 사용하여 구분합니다. 스크립트가 파일에 저장된 경우 \\n도 명령 구분자로 작동합니다.\n\n간단한 예제 몇 가지를 보여드리겠습니다:\n\n```js\n$ ## A string\n$ declare s=\"L1\\nL2\\nL3\\n\"\n$ ## Here Sed executes multiple Sed commands.  A\n$ ## single script is entered on the command line.\n$ ## Since only 1 script is present, there isn't\n$ ## a need for the -e option.\n$ ## The script prints each line of the string\n$ ## 2 times.  The commands are separated\n$ ## with a ';' character.\n$ printf \"${s}\" | sed -n \"/L1/p; /L2/p; /L3/p\"\nL1\nL2\nL3\n$ ## You can also enter 1 or more commands \n$ ## as separate scripts using the -e option\n$ printf \"${s}\" | sed -n -e \"/L1/p\" -e \"/L2/p; /L3/p\"\nL1\nL2\nL3 \n```\n\nSed 스크립트가 들어 있는 파일도 만들 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\n# 이것은 demo.sed라는 파일에 저장된 Sed 스크립트입니다.\n# # 부호는 주석의 시작을 나타냅니다.\n# 여기에 명령어가 있습니다.\n/L1/p\n/L2/p\n/L3/p\n# demo.sed의 끝\n```\n\n다음과 같이 명령 줄에서 호출할 수 있습니다.\n\n```js\n$ printf \"${s}\" | sed -nEf demo.sed\nL1\nL2\nL3\n```\n\n실행 가능한 Sed 스크립트 실행하기\n\n\n<div class=\"content-ad\"></div>\n\n표 태그를 Markdown 형식으로 변경할 수 있어요.\n\n```js\n#!/bin/sed -nEf\n##################\n# Sed 스크립트 파일: demo.sed\n# -n - 자동 출력 비활성화\n# -E - 확장 정규 표현식 사용 가능\n# -f - \n/L1/p\n/L2/p; /L3/p\n/L3/ { s/(.*)/\\1\\nThat's All Folks!!!/; p}\n### demo.sed 끝\n```\n\n아래와 같이 파일 내에 저장된 Sed 스크립트를 작성하고 실행할 수 있어요:\n\n```js\n$ ## 실행 가능하도록 변경\n$ chmod 755 ./demo.sed\n$ ## 문자열 선언\n$ declare s=\"L1\\nL2\\nL3\\n\"\n$ ## 실행\n$ printf \"${s}\" | ./demo.sed\nL1\nL2\nL3\nThat's All Folks!!!!\n$ ## 파일에 텍스트 저장\n$ printf \"${s}\" > ./f1.txt\n$ ## 이후 처리 가능\n$ cat ./f1.txt | ./demo.sed\nL1\nL2\nL3\nThat's All Folks!!!!\n$ ## 또는\n$ ./demo.sed ./f1.txt\nL1\nL2\nL3\nThat's All Folks!!!!\n$ ## 정말 그게 다에요\n```\n\n<div class=\"content-ad\"></div>\n\n조건문과 주소 지정\n\n만약 [주소]가 없다면, 명령 또는 명령 그룹이 무조건 실행됩니다. 만약 [주소]가 존재한다면, 해당 조건이 명령을 실행하기 위해 충족되어야 합니다. 조건은 숫자 주소나 정규 표현식으로 구성됩니다. 범위 및 기타 표현식도 포함될 수 있으며, 다른 곳에서 논의된 내용일 수 있습니다. 가끔 여기저기 \"not\"을 사용하기도 합니다.\n\n명령 그룹화\n\n다음 명명 방식을 사용하여 명령을 그룹화할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n**address** ' **address1** X1; **address2** X2; ... **addressn** Xn '\n\n들어 가 있는 ''문자는 그룹을 구분하고, [address]는 전체 그룹을 선택합니다. 그룹은 다음과 같이 중첩될 수도 있습니다:\n\n**address_outer**' **address_inner**' **addr1**X1; **addr2**X2 '; **addr3**X3 '\n\n이렇게 함으로써 if-elseif-else 유형의 구조가 포함된 Sed 스크립트를 작성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n유용한 명령줄 옵션과 별명\n\n```js\n$ ## -n|--silent|--quite - 자동 인쇄 비활성화\n$ ## -E|-r|--regexp-extended - 확장 정규 표현식 활성화\n$ ## 일반적으로 다음과 같은 별명을 사용합니다\n$ alias sed='sed -E'\n$ alias sedn='sed -E -n'\n```\n\n다음 자료의 예제를 이해하는 데 충분한 정보입니다.","ogImage":{"url":"/assets/img/2024-06-27-LinuxToolsSed40CommandsIntro_0.png"},"coverImage":"/assets/img/2024-06-27-LinuxToolsSed40CommandsIntro_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 노트 세트에서는 다양한 Sed 명령에 대해 논의를 시작하겠습니다. 그 명령들이 많기 때문에 명령에 대한 논의를 몇 개의 다른 게시물로 나눌 것입니다. 이 게시물에는 다음 내용이 포함됩니다:</p>\n<ul>\n<li>Sed 명령 구문</li>\n<li>Sed 스크립트 및 실행 방법</li>\n<li>명령 대상 지정, 구분자 및 그룹화</li>\n</ul>\n<p>명령 구문</p>\n<p>모든 다른 프로그래밍 언어와 마찬가지로 Sed에는 구문이 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>설명서에 따르면 Sed 명령의 구문은 다음과 같습니다:</p>\n<p>[주소]X[명령 옵션]</p>\n<p>X는 한 글자 명령입니다. 모든 Sed 명령은 한 글자로만 구성됩니다.</p>\n<p>[주소]는 명령 또는 명령 그룹 앞에 나오는 선택적 조건입니다. [주소]는 숫자, 정규 표현식 또는 이전에 설명한 둘 중 하나의 범위일 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>[command options]은 명령어 X를 제어하는 옵션입니다.</p>\n<p>Sed 스크립트</p>\n<p>저에게 Sed 스크립트는 단순히 프로그래머가 설정한 순서대로 실행되는 하나 이상의 Sed 명령어 목록입니다. Sed는 호출될 때 하나 이상의 스크립트를 실행할 수 있습니다.</p>\n<p>Sed 스크립트는 명령줄에 직접 제공하거나 하나 이상의 파일에 포함하여 Sed에 제공할 수 있습니다. 명령줄에서는 여러 스크립트를 -e 스크립트 또는 --expression=스크립트 명령줄 옵션으로 구분합니다. Sed는 -f 스크립트 | --file=스크립트 명령줄 옵션을 사용하여 파일에서 스크립트를 읽을 수도 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>한 행에 여러 명령을 사용하려면 스크립트 내에서 ; 문자를 사용하여 구분합니다. 스크립트가 파일에 저장된 경우 \\n도 명령 구분자로 작동합니다.</p>\n<p>간단한 예제 몇 가지를 보여드리겠습니다:</p>\n<pre><code class=\"hljs language-js\">$ ## A string\n$ declare s=<span class=\"hljs-string\">\"L1\\nL2\\nL3\\n\"</span>\n$ ## <span class=\"hljs-title class_\">Here</span> <span class=\"hljs-title class_\">Sed</span> executes multiple <span class=\"hljs-title class_\">Sed</span> commands.  A\n$ ## single script is entered on the command line.\n$ ## <span class=\"hljs-title class_\">Since</span> only <span class=\"hljs-number\">1</span> script is present, there isn<span class=\"hljs-string\">'t\n$ ## a need for the -e option.\n$ ## The script prints each line of the string\n$ ## 2 times.  The commands are separated\n$ ## with a '</span>;<span class=\"hljs-string\">' character.\n$ printf \"${s}\" | sed -n \"/L1/p; /L2/p; /L3/p\"\nL1\nL2\nL3\n$ ## You can also enter 1 or more commands \n$ ## as separate scripts using the -e option\n$ printf \"${s}\" | sed -n -e \"/L1/p\" -e \"/L2/p; /L3/p\"\nL1\nL2\nL3 \n</span></code></pre>\n<p>Sed 스크립트가 들어 있는 파일도 만들 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># 이것은 demo.<span class=\"hljs-property\">sed</span>라는 파일에 저장된 <span class=\"hljs-title class_\">Sed</span> 스크립트입니다.\n# # 부호는 주석의 시작을 나타냅니다.\n# 여기에 명령어가 있습니다.\n/<span class=\"hljs-variable constant_\">L1</span>/p\n/<span class=\"hljs-variable constant_\">L2</span>/p\n/<span class=\"hljs-variable constant_\">L3</span>/p\n# demo.<span class=\"hljs-property\">sed</span>의 끝\n</code></pre>\n<p>다음과 같이 명령 줄에서 호출할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">$ printf <span class=\"hljs-string\">\"${s}\"</span> | sed -nEf demo.<span class=\"hljs-property\">sed</span>\n<span class=\"hljs-variable constant_\">L1</span>\n<span class=\"hljs-variable constant_\">L2</span>\n<span class=\"hljs-variable constant_\">L3</span>\n</code></pre>\n<p>실행 가능한 Sed 스크립트 실행하기</p>\n<div class=\"content-ad\"></div>\n<p>표 태그를 Markdown 형식으로 변경할 수 있어요.</p>\n<pre><code class=\"hljs language-js\">#!<span class=\"hljs-regexp\">/bin/</span>sed -nEf\n##################\n# <span class=\"hljs-title class_\">Sed</span> 스크립트 파일: demo.<span class=\"hljs-property\">sed</span>\n# -n - 자동 출력 비활성화\n# -E - 확장 정규 표현식 사용 가능\n# -f - \n<span class=\"hljs-regexp\">/L1/</span>p\n/<span class=\"hljs-variable constant_\">L2</span>/p; <span class=\"hljs-regexp\">/L3/</span>p\n/<span class=\"hljs-variable constant_\">L3</span>/ { s/(.*)/\\<span class=\"hljs-number\">1</span>\\nThat<span class=\"hljs-string\">'s All Folks!!!/; p}\n### demo.sed 끝\n</span></code></pre>\n<p>아래와 같이 파일 내에 저장된 Sed 스크립트를 작성하고 실행할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">$ ## 실행 가능하도록 변경\n$ chmod <span class=\"hljs-number\">755</span> ./demo.<span class=\"hljs-property\">sed</span>\n$ ## 문자열 선언\n$ declare s=<span class=\"hljs-string\">\"L1\\nL2\\nL3\\n\"</span>\n$ ## 실행\n$ printf <span class=\"hljs-string\">\"${s}\"</span> | ./demo.<span class=\"hljs-property\">sed</span>\n<span class=\"hljs-variable constant_\">L1</span>\n<span class=\"hljs-variable constant_\">L2</span>\n<span class=\"hljs-variable constant_\">L3</span>\n<span class=\"hljs-title class_\">That</span><span class=\"hljs-string\">'s All Folks!!!!\n$ ## 파일에 텍스트 저장\n$ printf \"${s}\" > ./f1.txt\n$ ## 이후 처리 가능\n$ cat ./f1.txt | ./demo.sed\nL1\nL2\nL3\nThat'</span>s <span class=\"hljs-title class_\">All</span> <span class=\"hljs-title class_\">Folks</span>!!!!\n$ ## 또는\n$ ./demo.<span class=\"hljs-property\">sed</span> ./f1.<span class=\"hljs-property\">txt</span>\n<span class=\"hljs-variable constant_\">L1</span>\n<span class=\"hljs-variable constant_\">L2</span>\n<span class=\"hljs-variable constant_\">L3</span>\n<span class=\"hljs-title class_\">That</span><span class=\"hljs-string\">'s All Folks!!!!\n$ ## 정말 그게 다에요\n</span></code></pre>\n<div class=\"content-ad\"></div>\n<p>조건문과 주소 지정</p>\n<p>만약 [주소]가 없다면, 명령 또는 명령 그룹이 무조건 실행됩니다. 만약 [주소]가 존재한다면, 해당 조건이 명령을 실행하기 위해 충족되어야 합니다. 조건은 숫자 주소나 정규 표현식으로 구성됩니다. 범위 및 기타 표현식도 포함될 수 있으며, 다른 곳에서 논의된 내용일 수 있습니다. 가끔 여기저기 \"not\"을 사용하기도 합니다.</p>\n<p>명령 그룹화</p>\n<p>다음 명명 방식을 사용하여 명령을 그룹화할 수 있습니다:</p>\n<div class=\"content-ad\"></div>\n<p><strong>address</strong> ' <strong>address1</strong> X1; <strong>address2</strong> X2; ... <strong>addressn</strong> Xn '</p>\n<p>들어 가 있는 ''문자는 그룹을 구분하고, [address]는 전체 그룹을 선택합니다. 그룹은 다음과 같이 중첩될 수도 있습니다:</p>\n<p><strong>address_outer</strong>' <strong>address_inner</strong>' <strong>addr1</strong>X1; <strong>addr2</strong>X2 '; <strong>addr3</strong>X3 '</p>\n<p>이렇게 함으로써 if-elseif-else 유형의 구조가 포함된 Sed 스크립트를 작성할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>유용한 명령줄 옵션과 별명</p>\n<pre><code class=\"hljs language-js\">$ ## -n|--silent|--quite - 자동 인쇄 비활성화\n$ ## -E|-r|--regexp-extended - 확장 정규 표현식 활성화\n$ ## 일반적으로 다음과 같은 별명을 사용합니다\n$ alias sed=<span class=\"hljs-string\">'sed -E'</span>\n$ alias sedn=<span class=\"hljs-string\">'sed -E -n'</span>\n</code></pre>\n<p>다음 자료의 예제를 이해하는 데 충분한 정보입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}