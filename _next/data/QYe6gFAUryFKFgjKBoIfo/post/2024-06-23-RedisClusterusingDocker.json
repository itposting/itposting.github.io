{"pageProps":{"post":{"title":"Docker로 Redis 클러스터 설정하는 방법","description":"","date":"2024-06-23 15:44","slug":"2024-06-23-RedisClusterusingDocker","content":"\n\n\n![이미지](/assets/img/2024-06-23-RedisClusterusingDocker_0.png)\n\n우리는 특히 윈도우에서 도커를 사용하여 Redis 클러스터를 만드는 방법에 대해 이야기할 것입니다.\n\n6개 노드(3개 마스터 + 3개 레플리카)로 Redis 클러스터를 생성할 것이며, Redis가 어떤 노드가 마스터인지 레플리카인지를 결정할 것입니다.\n\n자세한 내용에 대해 파고들기 전에 몇 가지 제약사항을 알아야 합니다;\n\n\n<div class=\"content-ad\"></div>\n\n- Redis Cluster 및 Docker\n\n2. Docker 호스트 네트워크 드라이버\n\nWindows에서 이러한 제한 사항을 고려할 때, 모든 노드 앞에 TCP 프록시를 설정하여 클러스터를 구성할 수 있습니다. 노드로의 모든 통신은 TCP 프록시를 통해 이루어질 것입니다. 이 예시에서는 HAProxy를 선택했습니다.\n\n이제 설정으로 넘어갈 수 있습니다. 3개의 파일이 준비되어 있습니다;\n\n<div class=\"content-ad\"></div>\n\n- docker-compose.yaml\n- redis.sh\n- haproxy.cfg\n\n이 파일들을 가지고 명령어를 사용하여 모든 클러스터, 프록시 및 UI를 실행할 수 있어요;\n\n```js\ndocker compose up\n```\n\n# docker-compose.yaml\n\n<div class=\"content-ad\"></div>\n\n```js\n서비스 : \n  redis-node-1 : \n    이미지 : redis:7.2.3\n    명령 : [\"/tmp/redis.sh\", \"10.11.12.13\", \"7001\"]\n    볼륨 : \n      - ./redis.sh:/tmp/redis.sh\n  redis-node-2 : \n    이미지 : redis:7.2.3\n    명령 : [\"/tmp/redis.sh\", \"10.11.12.13\", \"7002\"]\n    볼륨 : \n      - ./redis.sh:/tmp/redis.sh\n  redis-node-3 : \n    이미지 : redis:7.2.3\n    명령 : [\"/tmp/redis.sh\", \"10.11.12.13\", \"7003\"]\n    볼륨 : \n      - ./redis.sh:/tmp/redis.sh\n  redis-node-4 : \n    이미지 : redis:7.2.3\n    명령 : [\"/tmp/redis.sh\", \"10.11.12.13\", \"7004\"]\n    볼륨 : \n      - ./redis.sh:/tmp/redis.sh\n  redis-node-5 : \n    이미지 : redis:7.2.3\n    명령 : [\"/tmp/redis.sh\", \"10.11.12.13\", \"7005\"]\n    볼륨 : \n      - ./redis.sh:/tmp/redis.sh\n  redis-node-6 : \n    이미지 : redis:7.2.3\n    명령 : [\"/tmp/redis.sh\", \"10.11.12.13\", \"7006\"]\n    볼륨 : \n      - ./redis.sh:/tmp/redis.sh\n  redis-cluster-creator : \n    이미지 : redis:7.2.3\n    명령 : redis-cli -a 'SUPER_SECRET_PASSWORD' --cluster create 10.11.12.13:7001 10.11.12.13:7002 10.11.12.13:7003 10.11.12.13:7004 10.11.12.13:7005 10.11.12.13:7006 --cluster-replicas 1 --cluster-yes\n    depends_on : \n      - redis-node-1\n      - redis-node-2\n      - redis-node-3\n      - redis-node-4\n      - redis-node-5\n      - redis-node-6\n      - redis-proxy\n  redis-proxy : \n    이미지 : haproxytech/haproxy-alpine:2.4\n    볼륨 : \n      - ./haproxy:/usr/local/etc/haproxy:ro\n    포트 : \n      - 8404:8404\n      - 7001-7006:9001-9006\n      - 7101-7106:9101-9106\n    depends_on : \n      - redis-node-1\n      - redis-node-2\n      - redis-node-3\n      - redis-node-4\n      - redis-node-5\n      - redis-node-6\n  redis-insight : \n    container_name : redis-insight\n    이미지 : redislabs/redisinsight:1.14.0\n    포트 : \n      - 8001:8001\n    depends_on : \n      - redis-proxy\n```\n\n다음을 참고하세요:\n- 6개의 서버 노드\n- 1개의 클러스터 생성 노드. 이 컨테이너의 상태는 클러스터 생성 후에 \"중지\"되어야 합니다. (원한다면 어떤 컨테이너로 들어가서 클러스터 명령을 실행할 수 있습니다.)\n- TCP 프록시\n- UI (Redis Insight)\n\n10.11.12.13은 로컬 머신의 IP입니다 (사실상 TCP 프록시의 IP). 이를 변경해주세요 (예를 들어 PC 이름으로 변경할 수 있습니다).\n\n<div class=\"content-ad\"></div>\n\n# redis.sh\n\n각 노드마다 별도의 redis.conf 파일을 만드는 대신, 주어진 매개변수에 따라 redis.conf 파일을 생성하는 sh 파일을 만들었습니다. 이 파일을 사용하여 서버를 시작합니다. 이는 데모에 더 유연합니다.\n\n```js\nANNOUNCE_IP=$1\nANNOUNCE_PORT=$(expr $2)\nANNOUNCE_BUS_PORT=$(expr $ANNOUNCE_PORT + 100)\n\nCONF_FILE=\"/tmp/redis.conf\"\n\n# redis.conf 파일 생성\necho \"port 6379\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\nappendonly yes\nloglevel debug\nrequirepass SUPER_SECRET_PASSWORD\nmasterauth SUPER_SECRET_PASSWORD\nprotected-mode no\ncluster-announce-ip $ANNOUNCE_IP\ncluster-announce-port $ANNOUNCE_PORT\ncluster-announce-bus-port $ANNOUNCE_BUS_PORT\n\" >> $CONF_FILE\n\n# 서버 시작\nredis-server $CONF_FILE\n```\n\n각 Redis 서버는 포트 6379에서 실행되지만 클러스터 알림 IP 및 포트는 다릅니다.\n\n<div class=\"content-ad\"></div>\n\n# haproxy.cfg\n\n```js\nglobal\n  stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners\n  log stdout format raw local0 info\n\ndefaults\n  mode tcp\n  timeout client 600s\n  timeout connect 5s\n  timeout server 600s\n  timeout http-request 10s\n  log global\n\nfrontend stats\n  mode http\n  bind *:8404\n  stats enable\n  stats uri /stats\n  stats refresh 10s\n  stats admin if LOCALHOST\n\n# frontend\nfrontend redisfe\n  bind :9001-9006\n  bind :9101-9106\n  use_backend redisbe1 if { dst_port 9001 }\n  use_backend redisbe2 if { dst_port 9002 }\n  use_backend redisbe3 if { dst_port 9003 }\n  use_backend redisbe4 if { dst_port 9004 }\n  use_backend redisbe5 if { dst_port 9005 }\n  use_backend redisbe6 if { dst_port 9006 }\n  use_backend redisbusbe1 if { dst_port 9101 }\n  use_backend redisbusbe2 if { dst_port 9102 }\n  use_backend redisbusbe3 if { dst_port 9103 }\n  use_backend redisbusbe4 if { dst_port 9104 }\n  use_backend redisbusbe5 if { dst_port 9105 }\n  use_backend redisbusbe6 if { dst_port 9106 }\n\n# Server 1\nbackend redisbe1\n  server be1 redis-node-1:6379 check\n\nbackend redisbusbe1\n  server busbe1 redis-node-1:16379 check\n\n# Server 2\nbackend redisbe2\n  server be2 redis-node-2:6379 check\n\nbackend redisbusbe2\n  server busbe2 redis-node-2:16379 check\n\n# Server 3\nbackend redisbe3\n  server be3 redis-node-3:6379 check\n\nbackend redisbusbe3\n  server busbe3 redis-node-3:16379 check\n\n# Server 4\nbackend redisbe4\n  server be4 redis-node-4:6379 check\n\nbackend redisbusbe4\n  server busbe4 redis-node-4:16379 check\n\n# Server 5\nbackend redisbe5\n  server be5 redis-node-5:6379 check\n\nbackend redisbusbe5\n  server busbe5 redis-node-5:16379 check\n\n# Server 6\nbackend redisbe6\n  server be6 redis-node-6:6379 check\n\nbackend redisbusbe6\n  server busbe6 redis-node-6:16379 check\n```\n\nHAProxy는 클라이언트 접근을 위해 9001-9006 포트를 수신하며(클라이언트-서버 간), 서버 간 접근을 위해 9101-9106 포트를 수신합니다. HAProxy 통계 정보는 http://localhost:8404/stats에서 확인할 수 있습니다.\n\n접근 순서:\n\n<div class=\"content-ad\"></div>\n\n- client =` haproxy-container:700x =` haproxy:900x =` redis-node-x:6379\n- redis-node-* =` haproxy-container:710x =` haproxy:910x =` redis-node-x:16379\n\n# Redis Insight\n\n레디스 인사이트는 레디스를 위한 정말 좋은 UI입니다. 이 설정에서 http://localhost:8001/에서 액세스할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-23-RedisClusterusingDocker_0.png"},"coverImage":"/assets/img/2024-06-23-RedisClusterusingDocker_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-RedisClusterusingDocker_0.png\" alt=\"이미지\"></p>\n<p>우리는 특히 윈도우에서 도커를 사용하여 Redis 클러스터를 만드는 방법에 대해 이야기할 것입니다.</p>\n<p>6개 노드(3개 마스터 + 3개 레플리카)로 Redis 클러스터를 생성할 것이며, Redis가 어떤 노드가 마스터인지 레플리카인지를 결정할 것입니다.</p>\n<p>자세한 내용에 대해 파고들기 전에 몇 가지 제약사항을 알아야 합니다;</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>Redis Cluster 및 Docker</li>\n</ul>\n<ol start=\"2\">\n<li>Docker 호스트 네트워크 드라이버</li>\n</ol>\n<p>Windows에서 이러한 제한 사항을 고려할 때, 모든 노드 앞에 TCP 프록시를 설정하여 클러스터를 구성할 수 있습니다. 노드로의 모든 통신은 TCP 프록시를 통해 이루어질 것입니다. 이 예시에서는 HAProxy를 선택했습니다.</p>\n<p>이제 설정으로 넘어갈 수 있습니다. 3개의 파일이 준비되어 있습니다;</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>docker-compose.yaml</li>\n<li>redis.sh</li>\n<li>haproxy.cfg</li>\n</ul>\n<p>이 파일들을 가지고 명령어를 사용하여 모든 클러스터, 프록시 및 UI를 실행할 수 있어요;</p>\n<pre><code class=\"hljs language-js\">docker compose up\n</code></pre>\n<h1>docker-compose.yaml</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">서비스 : \n  redis-node-<span class=\"hljs-number\">1</span> : \n    이미지 : <span class=\"hljs-attr\">redis</span>:<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.3</span>\n    명령 : [<span class=\"hljs-string\">\"/tmp/redis.sh\"</span>, <span class=\"hljs-string\">\"10.11.12.13\"</span>, <span class=\"hljs-string\">\"7001\"</span>]\n    볼륨 : \n      - ./redis.<span class=\"hljs-property\">sh</span>:<span class=\"hljs-regexp\">/tmp/</span>redis.<span class=\"hljs-property\">sh</span>\n  redis-node-<span class=\"hljs-number\">2</span> : \n    이미지 : <span class=\"hljs-attr\">redis</span>:<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.3</span>\n    명령 : [<span class=\"hljs-string\">\"/tmp/redis.sh\"</span>, <span class=\"hljs-string\">\"10.11.12.13\"</span>, <span class=\"hljs-string\">\"7002\"</span>]\n    볼륨 : \n      - ./redis.<span class=\"hljs-property\">sh</span>:<span class=\"hljs-regexp\">/tmp/</span>redis.<span class=\"hljs-property\">sh</span>\n  redis-node-<span class=\"hljs-number\">3</span> : \n    이미지 : <span class=\"hljs-attr\">redis</span>:<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.3</span>\n    명령 : [<span class=\"hljs-string\">\"/tmp/redis.sh\"</span>, <span class=\"hljs-string\">\"10.11.12.13\"</span>, <span class=\"hljs-string\">\"7003\"</span>]\n    볼륨 : \n      - ./redis.<span class=\"hljs-property\">sh</span>:<span class=\"hljs-regexp\">/tmp/</span>redis.<span class=\"hljs-property\">sh</span>\n  redis-node-<span class=\"hljs-number\">4</span> : \n    이미지 : <span class=\"hljs-attr\">redis</span>:<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.3</span>\n    명령 : [<span class=\"hljs-string\">\"/tmp/redis.sh\"</span>, <span class=\"hljs-string\">\"10.11.12.13\"</span>, <span class=\"hljs-string\">\"7004\"</span>]\n    볼륨 : \n      - ./redis.<span class=\"hljs-property\">sh</span>:<span class=\"hljs-regexp\">/tmp/</span>redis.<span class=\"hljs-property\">sh</span>\n  redis-node-<span class=\"hljs-number\">5</span> : \n    이미지 : <span class=\"hljs-attr\">redis</span>:<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.3</span>\n    명령 : [<span class=\"hljs-string\">\"/tmp/redis.sh\"</span>, <span class=\"hljs-string\">\"10.11.12.13\"</span>, <span class=\"hljs-string\">\"7005\"</span>]\n    볼륨 : \n      - ./redis.<span class=\"hljs-property\">sh</span>:<span class=\"hljs-regexp\">/tmp/</span>redis.<span class=\"hljs-property\">sh</span>\n  redis-node-<span class=\"hljs-number\">6</span> : \n    이미지 : <span class=\"hljs-attr\">redis</span>:<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.3</span>\n    명령 : [<span class=\"hljs-string\">\"/tmp/redis.sh\"</span>, <span class=\"hljs-string\">\"10.11.12.13\"</span>, <span class=\"hljs-string\">\"7006\"</span>]\n    볼륨 : \n      - ./redis.<span class=\"hljs-property\">sh</span>:<span class=\"hljs-regexp\">/tmp/</span>redis.<span class=\"hljs-property\">sh</span>\n  redis-cluster-creator : \n    이미지 : <span class=\"hljs-attr\">redis</span>:<span class=\"hljs-number\">7.2</span><span class=\"hljs-number\">.3</span>\n    명령 : redis-cli -a <span class=\"hljs-string\">'SUPER_SECRET_PASSWORD'</span> --cluster create <span class=\"hljs-number\">10.11</span><span class=\"hljs-number\">.12</span><span class=\"hljs-number\">.13</span>:<span class=\"hljs-number\">7001</span> <span class=\"hljs-number\">10.11</span><span class=\"hljs-number\">.12</span><span class=\"hljs-number\">.13</span>:<span class=\"hljs-number\">7002</span> <span class=\"hljs-number\">10.11</span><span class=\"hljs-number\">.12</span><span class=\"hljs-number\">.13</span>:<span class=\"hljs-number\">7003</span> <span class=\"hljs-number\">10.11</span><span class=\"hljs-number\">.12</span><span class=\"hljs-number\">.13</span>:<span class=\"hljs-number\">7004</span> <span class=\"hljs-number\">10.11</span><span class=\"hljs-number\">.12</span><span class=\"hljs-number\">.13</span>:<span class=\"hljs-number\">7005</span> <span class=\"hljs-number\">10.11</span><span class=\"hljs-number\">.12</span><span class=\"hljs-number\">.13</span>:<span class=\"hljs-number\">7006</span> --cluster-replicas <span class=\"hljs-number\">1</span> --cluster-yes\n    depends_on : \n      - redis-node-<span class=\"hljs-number\">1</span>\n      - redis-node-<span class=\"hljs-number\">2</span>\n      - redis-node-<span class=\"hljs-number\">3</span>\n      - redis-node-<span class=\"hljs-number\">4</span>\n      - redis-node-<span class=\"hljs-number\">5</span>\n      - redis-node-<span class=\"hljs-number\">6</span>\n      - redis-proxy\n  redis-proxy : \n    이미지 : haproxytech/haproxy-<span class=\"hljs-attr\">alpine</span>:<span class=\"hljs-number\">2.4</span>\n    볼륨 : \n      - ./<span class=\"hljs-attr\">haproxy</span>:<span class=\"hljs-regexp\">/usr/</span>local/etc/<span class=\"hljs-attr\">haproxy</span>:ro\n    포트 : \n      - <span class=\"hljs-number\">8404</span>:<span class=\"hljs-number\">8404</span>\n      - <span class=\"hljs-number\">7001</span>-<span class=\"hljs-number\">7006</span>:<span class=\"hljs-number\">9001</span>-<span class=\"hljs-number\">9006</span>\n      - <span class=\"hljs-number\">7101</span>-<span class=\"hljs-number\">7106</span>:<span class=\"hljs-number\">9101</span>-<span class=\"hljs-number\">9106</span>\n    depends_on : \n      - redis-node-<span class=\"hljs-number\">1</span>\n      - redis-node-<span class=\"hljs-number\">2</span>\n      - redis-node-<span class=\"hljs-number\">3</span>\n      - redis-node-<span class=\"hljs-number\">4</span>\n      - redis-node-<span class=\"hljs-number\">5</span>\n      - redis-node-<span class=\"hljs-number\">6</span>\n  redis-insight : \n    container_name : redis-insight\n    이미지 : redislabs/<span class=\"hljs-attr\">redisinsight</span>:<span class=\"hljs-number\">1.14</span><span class=\"hljs-number\">.0</span>\n    포트 : \n      - <span class=\"hljs-number\">8001</span>:<span class=\"hljs-number\">8001</span>\n    depends_on : \n      - redis-proxy\n</code></pre>\n<p>다음을 참고하세요:</p>\n<ul>\n<li>6개의 서버 노드</li>\n<li>1개의 클러스터 생성 노드. 이 컨테이너의 상태는 클러스터 생성 후에 \"중지\"되어야 합니다. (원한다면 어떤 컨테이너로 들어가서 클러스터 명령을 실행할 수 있습니다.)</li>\n<li>TCP 프록시</li>\n<li>UI (Redis Insight)</li>\n</ul>\n<p>10.11.12.13은 로컬 머신의 IP입니다 (사실상 TCP 프록시의 IP). 이를 변경해주세요 (예를 들어 PC 이름으로 변경할 수 있습니다).</p>\n<div class=\"content-ad\"></div>\n<h1>redis.sh</h1>\n<p>각 노드마다 별도의 redis.conf 파일을 만드는 대신, 주어진 매개변수에 따라 redis.conf 파일을 생성하는 sh 파일을 만들었습니다. 이 파일을 사용하여 서버를 시작합니다. 이는 데모에 더 유연합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">ANNOUNCE_IP</span>=$1\n<span class=\"hljs-variable constant_\">ANNOUNCE_PORT</span>=$(expr $2)\n<span class=\"hljs-variable constant_\">ANNOUNCE_BUS_PORT</span>=$(expr $ANNOUNCE_PORT + <span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-variable constant_\">CONF_FILE</span>=<span class=\"hljs-string\">\"/tmp/redis.conf\"</span>\n\n# redis.<span class=\"hljs-property\">conf</span> 파일 생성\necho <span class=\"hljs-string\">\"port 6379\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\nappendonly yes\nloglevel debug\nrequirepass SUPER_SECRET_PASSWORD\nmasterauth SUPER_SECRET_PASSWORD\nprotected-mode no\ncluster-announce-ip $ANNOUNCE_IP\ncluster-announce-port $ANNOUNCE_PORT\ncluster-announce-bus-port $ANNOUNCE_BUS_PORT\n\"</span> >> $CONF_FILE\n\n# 서버 시작\nredis-server $CONF_FILE\n</code></pre>\n<p>각 Redis 서버는 포트 6379에서 실행되지만 클러스터 알림 IP 및 포트는 다릅니다.</p>\n<div class=\"content-ad\"></div>\n<h1>haproxy.cfg</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">global</span>\n  stats socket /<span class=\"hljs-keyword\">var</span>/run/api.<span class=\"hljs-property\">sock</span> user haproxy group haproxy mode <span class=\"hljs-number\">660</span> level admin expose-fd listeners\n  log stdout format raw local0 info\n\ndefaults\n  mode tcp\n  timeout client 600s\n  timeout connect 5s\n  timeout server 600s\n  timeout http-request 10s\n  log <span class=\"hljs-variable language_\">global</span>\n\nfrontend stats\n  mode http\n  bind *:<span class=\"hljs-number\">8404</span>\n  stats enable\n  stats uri /stats\n  stats refresh 10s\n  stats admin <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable constant_\">LOCALHOST</span>\n\n# frontend\nfrontend redisfe\n  bind :<span class=\"hljs-number\">9001</span>-<span class=\"hljs-number\">9006</span>\n  bind :<span class=\"hljs-number\">9101</span>-<span class=\"hljs-number\">9106</span>\n  use_backend redisbe1 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9001</span> }\n  use_backend redisbe2 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9002</span> }\n  use_backend redisbe3 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9003</span> }\n  use_backend redisbe4 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9004</span> }\n  use_backend redisbe5 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9005</span> }\n  use_backend redisbe6 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9006</span> }\n  use_backend redisbusbe1 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9101</span> }\n  use_backend redisbusbe2 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9102</span> }\n  use_backend redisbusbe3 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9103</span> }\n  use_backend redisbusbe4 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9104</span> }\n  use_backend redisbusbe5 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9105</span> }\n  use_backend redisbusbe6 <span class=\"hljs-keyword\">if</span> { dst_port <span class=\"hljs-number\">9106</span> }\n\n# <span class=\"hljs-title class_\">Server</span> <span class=\"hljs-number\">1</span>\nbackend redisbe1\n  server be1 redis-node-<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">6379</span> check\n\nbackend redisbusbe1\n  server busbe1 redis-node-<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">16379</span> check\n\n# <span class=\"hljs-title class_\">Server</span> <span class=\"hljs-number\">2</span>\nbackend redisbe2\n  server be2 redis-node-<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">6379</span> check\n\nbackend redisbusbe2\n  server busbe2 redis-node-<span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">16379</span> check\n\n# <span class=\"hljs-title class_\">Server</span> <span class=\"hljs-number\">3</span>\nbackend redisbe3\n  server be3 redis-node-<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">6379</span> check\n\nbackend redisbusbe3\n  server busbe3 redis-node-<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">16379</span> check\n\n# <span class=\"hljs-title class_\">Server</span> <span class=\"hljs-number\">4</span>\nbackend redisbe4\n  server be4 redis-node-<span class=\"hljs-number\">4</span>:<span class=\"hljs-number\">6379</span> check\n\nbackend redisbusbe4\n  server busbe4 redis-node-<span class=\"hljs-number\">4</span>:<span class=\"hljs-number\">16379</span> check\n\n# <span class=\"hljs-title class_\">Server</span> <span class=\"hljs-number\">5</span>\nbackend redisbe5\n  server be5 redis-node-<span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">6379</span> check\n\nbackend redisbusbe5\n  server busbe5 redis-node-<span class=\"hljs-number\">5</span>:<span class=\"hljs-number\">16379</span> check\n\n# <span class=\"hljs-title class_\">Server</span> <span class=\"hljs-number\">6</span>\nbackend redisbe6\n  server be6 redis-node-<span class=\"hljs-number\">6</span>:<span class=\"hljs-number\">6379</span> check\n\nbackend redisbusbe6\n  server busbe6 redis-node-<span class=\"hljs-number\">6</span>:<span class=\"hljs-number\">16379</span> check\n</code></pre>\n<p>HAProxy는 클라이언트 접근을 위해 9001-9006 포트를 수신하며(클라이언트-서버 간), 서버 간 접근을 위해 9101-9106 포트를 수신합니다. HAProxy 통계 정보는 <a href=\"http://localhost:8404/stats%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:8404/stats에서</a> 확인할 수 있습니다.</p>\n<p>접근 순서:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>client =<code> haproxy-container:700x =</code> haproxy:900x =` redis-node-x:6379</li>\n<li>redis-node-* =<code> haproxy-container:710x =</code> haproxy:910x =` redis-node-x:16379</li>\n</ul>\n<h1>Redis Insight</h1>\n<p>레디스 인사이트는 레디스를 위한 정말 좋은 UI입니다. 이 설정에서 <a href=\"http://localhost:8001/%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:8001/에서</a> 액세스할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}