{"pageProps":{"post":{"title":"ROS 2 Humble Hawksbill에서 TurtleBot3 시뮬레이션 설정하기","description":"","date":"2024-06-20 17:55","slug":"2024-06-20-SettingUpTurtleBot3SimulationinROS2HumbleHawksbill","content":"\n\n# 요구 사항 -\n\na. Ubuntu 22.04 (Jammy Jellyfish)\n\nb. ROS 2 Humble Hawksbill\n\n# 1. ROS 2 환경 변수 설정\n\n<div class=\"content-ad\"></div>\n\nROS 2 설정 파일을 소스로 가져오면 ROS 2를 실행하는 데 필요한 여러 환경 변수가 설정됩니다.\n\nROS 2 명령에 액세스하려면 모든 터미널에 다음 명령을 입력하여 ROS2 Humble 환경을 소스화하세요:\n\n```js\nsource /opt/ros/humble/setup.bash\n```\n\n새 쉘을 열 때마다 설정 파일을 소스로 가져오지 않으려면 셸 시작 스크립트에 해당 명령을 추가할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```shell\necho \"source /opt/ros/humble/setup.bash\" >> ~/.bashrc\n```\n\n이 명령어를 .bashrc 파일에 추가한 후에는 해당 파일을 소스하세요:\n\n```shell\nsource ~/.bashrc\n```\n\n# 2. Gazebo 시뮬레이터 설치하기\n\n<div class=\"content-ad\"></div>\n\n쉘 스크립트에서 다음 명령을 입력하여 Gazebo11과 관련된 ROS 2 메타 패키지를 설치해보세요:\n\n```js\nsudo apt install gazebo11\nsudo apt install ros-humble-gazebo-ros-pkgs\n```\n\n# 3. ROS 2 의존 패키지 설치\n\n3.1. Cartographer\n\n<div class=\"content-ad\"></div>\n\n카토그래퍼는 여러 플랫폼과 센서 구성에서 2D 및 3D 실시간 동시 위치추적 및 매핑(SLAM)을 제공하는 시스템입니다.\n\nROS 2 Cartographer 패키지를 설치하려면 셸에서 다음 명령을 입력하세요:\n\n```js\nsudo apt install ros-humble-cartographer \nsudo apt install ros-humble-cartographer-ros\n```\n\n3.2. ROS 2를 위한 네비게이션 스택\n\n<div class=\"content-ad\"></div>\n\nROS 2 내비게이션 스택은 로봇이 시작 위치에서 목표 위치로 이동하는 데 도움을 주는 패키지 세트입니다.\n\nROS 2 내비게이션 스택 패키지를 설치하려면 셸에 다음 명령을 입력하세요:\n\n```js\nsudo apt install ros-humble-navigation2\nsudo apt install ros-humble-nav2-bringup\n```\n\n# 4. ROS2 Workspace 생성\n\n<div class=\"content-ad\"></div>\n\n작업 공간은 모든 ROS 2 패키지를 포함하는 디렉토리 세트입니다.\n\n다음 명령어를 입력하여 새 작업 공간 디렉토리를 생성하세요:\n\n```js\nmkdir -p ~/turtlebot3_ws/src\n```\n\n# 5. Turtlebot3 패키지 설치\n\n<div class=\"content-ad\"></div>\n\n5.1. 워크스페이스의 src 디렉토리 안으로 이동해주세요:\n\n```js\ncd ~/turtlebot3_ws/src\n```\n\n5.2. Turtlebot3 패키지를 클론해주세요:\n\n```js\ngit clone https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git -b humble-devel\n\ngit clone https://github.com/ROBOTIS-GIT/turtlebot3.git -b humble-devel\n\ngit clone https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git -b humble-devel\n\ngit clone https://github.com/ROBOTIS-GIT/DynamixelSDK.git -b humble-devel\n```\n\n<div class=\"content-ad\"></div>\n\n# 6. 패키지 빌드하기\n\n작업 공간의 루트(turtlebot3_ws)에서 다음 명령을 사용하여 colcon을 이용해 ROS 2 패키지를 빌드하세요.\n\n```js\ncd ~/turtlebot3_ws\n\ncolcon build \n```\n\nturtlebot3_ws 작업 공간을 소스하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n~/turtlebot3_ws/install/setup.bash\n```\n\n## 7. 터틀봇3 가제보 시뮬레이션 실행하기\n\n작업 공간 (turtlebot3_ws) 안으로 이동한 후, 다음 명령을 실행하여 작업 공간을 소스하는 명령을 실행하세요.\n\n```js\n~/turtlebot3_ws/install/setup.bash\n```\n\n<div class=\"content-ad\"></div>\n\nTurtleBot3에는 버거, 와플, 와플_파이 세 가지 모델이 있습니다. 따라서 사용하기 전에 어떤 모델을 사용할지 설정해야 합니다.\n\n우분투에서 이를 수행하려면 export 명령어를 사용하여 사용할 모델을 지정합니다.\n\n다음과 같이 명령어를 셸에 입력하여 TURTLEBOT3_MODEL을 버거로 .bashrc 파일에 추가합니다. 그 후 .bashrc 파일을 재로드하세요:\n\n```js\necho 'export TURTLEBOT3_MODEL=burger' >> ~/.bashrc\nsource ~/.bashrc\n```\n\n<div class=\"content-ad\"></div>\n\n## 7.1. Gazebo에서 Turtlebot3 시뮬레이션 월드 실행하기\n\n새 셸 창을 열고 turtlebot3 워크스페이스를 소스로 설정하세요:\n\n```js\nsource ~/turtlebot3_ws/install/setup.bash\n```\n\n다음 명령을 입력하여 Turtlebot3 로봇을 TurtleBot3 World에서 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nros2 launch turtlebot3_gazebo empty_world.launch.py\n```\n\n다른 시뮬레이션 런치 파일을 실행하여 시뮬레이션 월드를 변경할 수 있어요:\n\n## TurtleBot3 World:\n\n```js\nros2 launch turtlebot3_gazebo turtlebot3_world.launch.py\n```\n\n<div class=\"content-ad\"></div>\n\n## TurtleBot3 집:\n\n```js\nros2 launch turtlebot3_gazebo turtlebot3_house.launch.py\n```\n\n## 7.2. Turtlebot3 텔레오퍼레이션 노드 실행하기\n\n새로운 쉘 창을 열고 turtlebot3 workspace에 소스를 입력하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nsource ~/turtlebot3_ws/install/setup.bash\n```\n\n이 명령어를 사용하여 키보드로 TurtleBot3를 텔레오퍼레이션하려면 다음 명령어로 텔레오퍼레이션 노드를 실행하십시오:\n\n```js\nros2 run turtlebot3_teleop teleop_keyboard\n```","ogImage":{"url":"/assets/img/2024-06-20-SettingUpTurtleBot3SimulationinROS2HumbleHawksbill_0.png"},"coverImage":"/assets/img/2024-06-20-SettingUpTurtleBot3SimulationinROS2HumbleHawksbill_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>요구 사항 -</h1>\n<p>a. Ubuntu 22.04 (Jammy Jellyfish)</p>\n<p>b. ROS 2 Humble Hawksbill</p>\n<h1>1. ROS 2 환경 변수 설정</h1>\n<div class=\"content-ad\"></div>\n<p>ROS 2 설정 파일을 소스로 가져오면 ROS 2를 실행하는 데 필요한 여러 환경 변수가 설정됩니다.</p>\n<p>ROS 2 명령에 액세스하려면 모든 터미널에 다음 명령을 입력하여 ROS2 Humble 환경을 소스화하세요:</p>\n<pre><code class=\"hljs language-js\">source /opt/ros/humble/setup.<span class=\"hljs-property\">bash</span>\n</code></pre>\n<p>새 쉘을 열 때마다 설정 파일을 소스로 가져오지 않으려면 셸 시작 스크립트에 해당 명령을 추가할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-shell\">echo \"source /opt/ros/humble/setup.bash\" >> ~/.bashrc\n</code></pre>\n<p>이 명령어를 .bashrc 파일에 추가한 후에는 해당 파일을 소스하세요:</p>\n<pre><code class=\"hljs language-shell\">source ~/.bashrc\n</code></pre>\n<h1>2. Gazebo 시뮬레이터 설치하기</h1>\n<div class=\"content-ad\"></div>\n<p>쉘 스크립트에서 다음 명령을 입력하여 Gazebo11과 관련된 ROS 2 메타 패키지를 설치해보세요:</p>\n<pre><code class=\"hljs language-js\">sudo apt install gazebo11\nsudo apt install ros-humble-gazebo-ros-pkgs\n</code></pre>\n<h1>3. ROS 2 의존 패키지 설치</h1>\n<p>3.1. Cartographer</p>\n<div class=\"content-ad\"></div>\n<p>카토그래퍼는 여러 플랫폼과 센서 구성에서 2D 및 3D 실시간 동시 위치추적 및 매핑(SLAM)을 제공하는 시스템입니다.</p>\n<p>ROS 2 Cartographer 패키지를 설치하려면 셸에서 다음 명령을 입력하세요:</p>\n<pre><code class=\"hljs language-js\">sudo apt install ros-humble-cartographer \nsudo apt install ros-humble-cartographer-ros\n</code></pre>\n<p>3.2. ROS 2를 위한 네비게이션 스택</p>\n<div class=\"content-ad\"></div>\n<p>ROS 2 내비게이션 스택은 로봇이 시작 위치에서 목표 위치로 이동하는 데 도움을 주는 패키지 세트입니다.</p>\n<p>ROS 2 내비게이션 스택 패키지를 설치하려면 셸에 다음 명령을 입력하세요:</p>\n<pre><code class=\"hljs language-js\">sudo apt install ros-humble-navigation2\nsudo apt install ros-humble-nav2-bringup\n</code></pre>\n<h1>4. ROS2 Workspace 생성</h1>\n<div class=\"content-ad\"></div>\n<p>작업 공간은 모든 ROS 2 패키지를 포함하는 디렉토리 세트입니다.</p>\n<p>다음 명령어를 입력하여 새 작업 공간 디렉토리를 생성하세요:</p>\n<pre><code class=\"hljs language-js\">mkdir -p ~<span class=\"hljs-regexp\">/turtlebot3_ws/</span>src\n</code></pre>\n<h1>5. Turtlebot3 패키지 설치</h1>\n<div class=\"content-ad\"></div>\n<p>5.1. 워크스페이스의 src 디렉토리 안으로 이동해주세요:</p>\n<pre><code class=\"hljs language-js\">cd ~<span class=\"hljs-regexp\">/turtlebot3_ws/</span>src\n</code></pre>\n<p>5.2. Turtlebot3 패키지를 클론해주세요:</p>\n<pre><code class=\"hljs language-js\">git clone <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/ROBOTIS-GIT/turtlebot3_simulations.git -b humble-devel</span>\n\ngit clone <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/ROBOTIS-GIT/turtlebot3.git -b humble-devel</span>\n\ngit clone <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/ROBOTIS-GIT/turtlebot3_msgs.git -b humble-devel</span>\n\ngit clone <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/ROBOTIS-GIT/DynamixelSDK.git -b humble-devel</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>6. 패키지 빌드하기</h1>\n<p>작업 공간의 루트(turtlebot3_ws)에서 다음 명령을 사용하여 colcon을 이용해 ROS 2 패키지를 빌드하세요.</p>\n<pre><code class=\"hljs language-js\">cd ~/turtlebot3_ws\n\ncolcon build \n</code></pre>\n<p>turtlebot3_ws 작업 공간을 소스하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">~<span class=\"hljs-regexp\">/turtlebot3_ws/i</span>nstall/setup.<span class=\"hljs-property\">bash</span>\n</code></pre>\n<h2>7. 터틀봇3 가제보 시뮬레이션 실행하기</h2>\n<p>작업 공간 (turtlebot3_ws) 안으로 이동한 후, 다음 명령을 실행하여 작업 공간을 소스하는 명령을 실행하세요.</p>\n<pre><code class=\"hljs language-js\">~<span class=\"hljs-regexp\">/turtlebot3_ws/i</span>nstall/setup.<span class=\"hljs-property\">bash</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>TurtleBot3에는 버거, 와플, 와플_파이 세 가지 모델이 있습니다. 따라서 사용하기 전에 어떤 모델을 사용할지 설정해야 합니다.</p>\n<p>우분투에서 이를 수행하려면 export 명령어를 사용하여 사용할 모델을 지정합니다.</p>\n<p>다음과 같이 명령어를 셸에 입력하여 TURTLEBOT3_MODEL을 버거로 .bashrc 파일에 추가합니다. 그 후 .bashrc 파일을 재로드하세요:</p>\n<pre><code class=\"hljs language-js\">echo <span class=\"hljs-string\">'export TURTLEBOT3_MODEL=burger'</span> >> ~/.<span class=\"hljs-property\">bashrc</span>\nsource ~/.<span class=\"hljs-property\">bashrc</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>7.1. Gazebo에서 Turtlebot3 시뮬레이션 월드 실행하기</h2>\n<p>새 셸 창을 열고 turtlebot3 워크스페이스를 소스로 설정하세요:</p>\n<pre><code class=\"hljs language-js\">source ~<span class=\"hljs-regexp\">/turtlebot3_ws/i</span>nstall/setup.<span class=\"hljs-property\">bash</span>\n</code></pre>\n<p>다음 명령을 입력하여 Turtlebot3 로봇을 TurtleBot3 World에서 실행하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">ros2 launch turtlebot3_gazebo empty_world.<span class=\"hljs-property\">launch</span>.<span class=\"hljs-property\">py</span>\n</code></pre>\n<p>다른 시뮬레이션 런치 파일을 실행하여 시뮬레이션 월드를 변경할 수 있어요:</p>\n<h2>TurtleBot3 World:</h2>\n<pre><code class=\"hljs language-js\">ros2 launch turtlebot3_gazebo turtlebot3_world.<span class=\"hljs-property\">launch</span>.<span class=\"hljs-property\">py</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>TurtleBot3 집:</h2>\n<pre><code class=\"hljs language-js\">ros2 launch turtlebot3_gazebo turtlebot3_house.<span class=\"hljs-property\">launch</span>.<span class=\"hljs-property\">py</span>\n</code></pre>\n<h2>7.2. Turtlebot3 텔레오퍼레이션 노드 실행하기</h2>\n<p>새로운 쉘 창을 열고 turtlebot3 workspace에 소스를 입력하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">source ~<span class=\"hljs-regexp\">/turtlebot3_ws/i</span>nstall/setup.<span class=\"hljs-property\">bash</span>\n</code></pre>\n<p>이 명령어를 사용하여 키보드로 TurtleBot3를 텔레오퍼레이션하려면 다음 명령어로 텔레오퍼레이션 노드를 실행하십시오:</p>\n<pre><code class=\"hljs language-js\">ros2 run turtlebot3_teleop teleop_keyboard\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}