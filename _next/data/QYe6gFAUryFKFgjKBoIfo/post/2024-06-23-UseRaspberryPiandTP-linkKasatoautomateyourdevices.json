{"pageProps":{"post":{"title":"Raspberry Pi와 TP-link Kasa로 기기 자동화하는 방법","description":"","date":"2024-06-23 17:10","slug":"2024-06-23-UseRaspberryPiandTP-linkKasatoautomateyourdevices","content":"\n\n**판매 프로모션 아님**\n\n2022년이 왔고, 요즘에는 많은 스마트 홈 기기와 생태계가 있어요. TP-link의 Kasa 시스템은 오래전부터 있었는데, 파이썬 SDK가 있어서 제가 좋아해요. 또한, 에너지 모니터링이 가능한 스마트 플러그를 만든다는 점이 꽤 독창적이죠. Kasa 제품군을 라즈베리 파이(또는 다른 Linux/Windows 서버)와 결합하면 가능성이 무한해져요. 아래는 할 수 있는 일들입니다.\n\n- [이 블로그 게시물에 표시됨] \"펄스 모드\"와 같이 복잡한 일정으로 장치를 실행할 수 있어요. 예를 들어, 특정 시간대에 매 15분마다 켜고 꺼지는 수도 펌프와 같은 장치를 실행할 수 있어요. 이 설정은 Kasa 스마트 콘센트에 꽂힌 Taco Hot-link 수도 펌프에 대해 구성되어 있어요.\n\n![RaspberryPi와TP-linkKas를사용하여장치를자동화하는2024년6월23일의이미지](/assets/img/2024-06-23-UseRaspberryPiandTP-linkKasatoautomateyourdevices_0.png)\n\n<div class=\"content-ad\"></div>\n\n- [이 블로그 포스트에서 보여짐] 크론을 통해 모든 일정 장치 제어하기. Kasa 앱은 멋지지만, 현재 각 장치당 31개의 일정 제한이 있습니다. 그리고 어떤 GUI 인터페이스든 복잡한 일정을 설정하려면 많은 \"클릭/터치\"가 필요합니다.\n- [곧 블로그 포스트에서 곧] 외부 이벤트에 기반하여 장치 제어하기. 예를 들어 오늘 주식 시장이나 암호화폐의 상황, 날씨, 또는 트윗 감정에 따라 led 색상을 조절합니다.\n\n만약 이러한 자동화가 흥미롭게 들리면 계속 읽어보세요. 처음 두 가지는 크론 잡을 통해 할 예정입니다. 세 번째는 웹사이트나 API를 주기적으로 확인하고, 그 후 장치를 적절하게 제어하기 위해 프로그램을 작성해야 합니다. 이 시나리오는 곧 미래의 블로그 포스트에서 다룰 것입니다.\n\n- python-kasa 설치하기:\n\nPython-kasa는 TP-link Kasa에서 사용하는 API를 감싸는 Python 래퍼입니다. 2022년 기준으로 활발하게 개발 중인 프로젝트로, 여기에서 확인하고 기여할 수 있습니다: https://github.com/python-kasa/python-kasa.\n\n<div class=\"content-ad\"></div>\n\n아래 명령어를 실행하여 설치할 수 있어요.\n\n```js\npip3 install python-kasa\n```\n\n명령이 완료되면 새 터미널 세션을 시작하거나 기존 세션을 로그아웃하고 다시 로그인한 후 kasa 명령을 실행하세요. 잘 된다면 kasa 명령을 실행하여 네트워크에 있는 장치들을 발견할 수 있을 거예요 (주의: 가끔 발견 오류가 발생할 수 있지만 대부분 무시해도 괜찮아요). \n\n명령어 which kasa를 실행하면 파이썬 프로그램이 설치된 위치를 보여줄 거예요. 예를 들어, 제 경우에는 /home/pi/.local/bin/kasa에 설치되어 있었는데, 이미 PATH 변수에 포함되어 있어요.\n\n<div class=\"content-ad\"></div>\n\n이제 장치 별칭을 사용하여 상태를 확실히 볼 수 있도록 좀 더 구체적인 명령어를 실행하세요. 아래 명령어에서 제 장치 이름은 \"워터 펌프\"이며, 이를 적절히 대체해주세요.\n\n```js\nkasa --type plug --alias \"워터 펌프\"\n```\n\n다른 옵션을 보려면 kasa --help 명령어를 실행하세요. 예를 들어 전구의 색상을 조정하려면 다음과 같은 명령어를 실행할 수 있습니다 (자세한 내용은 다음 블로그 포스트에서 확인할 수 있습니다).\n\n```js\nkasa --type bulb --alias \"컬러 램프\" hsv 118 100 73\n```\n\n<div class=\"content-ad\"></div>\n\n2. 컨트롤러 스크립트 작성하기:\n\n이제 장치를 켜거나 끌 수 있는 간단한 스크립트를 작성해야 합니다. 아래 스크립트를 사용할 수 있습니다. 이 파일을 저장하고 아래와 같이 적절한 권한을 부여해주세요.\n\n```js\n# 파일 작성\necho <<EOF>kasa-pump.sh\n#!/bin/bash\nif [[ ! -z $1 ]]; then\n  operation=$1\nelse\n  operation=state\nfi\nexport PATH=/home/pi/.local/bin:$PATH\nkasa --type plug --alias \"water pump\" ${operation}\nEOF\n# 권한 조정\nsudo cp kasa-pump.sh /usr/local/bin/kasa-pump.sh\nsudo chown pi:pi /usr/local/bin/kasa-pump.sh\nsudo chmod +x /usr/local/bin/kasa-pump.sh\n```\n\n아래와 같은 명령어로 스크립트를 테스트해보세요. 장치가 켜지거나 꺼지는 것을 확인할 수 있어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n\nkasa-pump.sh를 켭니다\nkasa-pump.sh를 끕니다\n\n\n3. 크론 작업을 작성하세요:\n\n크론 작업은 OG Linux의 하나이며 이에 대한 많은 자습서가 있습니다. 펄스 모드인 5분 켜기, 10분 끄기로 크론을 설정하는 방법에 대한 코드 스니펫을 여기에 제공하겠습니다.\n\n\n# 크론 일정을 작성/업데이트하려면 이 명령을 사용하세요\ncrontab -e\n# 펄스 모드 펌프.\n*/15 5,6,7,10,11,12,13,16,17,20,21,22 * * * /usr/local/bin/kasa-pump.sh on\n5,20,35,50 5,6,7,10,11,12,13,16,17,20,21,22 * * * /usr/local/bin/kasa-pump.sh off\n\n\n<div class=\"content-ad\"></div>\n\n위의 표현은 선택된 주간 시간 동안 매 15분마다 kasa-pump.sh 명령을 실행합니다.\n\n*/15 5,6,7,10,11,12,13,16,17,20,21,22 * * * /usr/local/bin/kasa-pump.sh on\n\n아래의 표현은 매 시간 5, 20, 35 및 50분에 kasa-pump.sh off 명령을 실행합니다.\n\n5,20,35,50 5,6,7,10,11,12,13,16,17,20,21,22 * * * /usr/local/bin/kasa-pump.sh off\n\n<div class=\"content-ad\"></div>\n\n물론, 전 완전히 사용자 정의된 일정을 선택할 것으로 예상합니다. Cron을 사용하면 Kasa App으로 할 수 있는 것보다 더 세밀하게 일정을 조정할 수 있어요.\n\n이젠 남은 일은 cron 작업이 성공적으로 실행되고 있는지 확인하는 것뿐이에요. 아래 명령어를 사용하여 cron에서 출력을 확인해주세요.\n\n```js\n# Cron 서비스가 제대로 실행 중인지 확인하기\nsudo systemctl status cron.service\n# cat /var/mail/pi | grep -i pump\n```\n\n마무리\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! 이 게시물에서는 Raspberry Pi에서 cron 작업을 사용하여 \"펌프\"라는 장치를 자동화하는 방법을 살펴보았어요. 기기가 많아지면 이 방법으로 일정을 설정하는 것이 \"App\"보다 쉽습니다. \"touches/clicks\"을 많이 할 필요가 없죠.\n\n다음 블로그 게시물에서는 외부 이벤트에 따라 색상을 조정하는 것과 같은 더 흥미로운 것을 살펴볼 거에요.","ogImage":{"url":"/assets/img/2024-06-23-UseRaspberryPiandTP-linkKasatoautomateyourdevices_0.png"},"coverImage":"/assets/img/2024-06-23-UseRaspberryPiandTP-linkKasatoautomateyourdevices_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><strong>판매 프로모션 아님</strong></p>\n<p>2022년이 왔고, 요즘에는 많은 스마트 홈 기기와 생태계가 있어요. TP-link의 Kasa 시스템은 오래전부터 있었는데, 파이썬 SDK가 있어서 제가 좋아해요. 또한, 에너지 모니터링이 가능한 스마트 플러그를 만든다는 점이 꽤 독창적이죠. Kasa 제품군을 라즈베리 파이(또는 다른 Linux/Windows 서버)와 결합하면 가능성이 무한해져요. 아래는 할 수 있는 일들입니다.</p>\n<ul>\n<li>[이 블로그 게시물에 표시됨] \"펄스 모드\"와 같이 복잡한 일정으로 장치를 실행할 수 있어요. 예를 들어, 특정 시간대에 매 15분마다 켜고 꺼지는 수도 펌프와 같은 장치를 실행할 수 있어요. 이 설정은 Kasa 스마트 콘센트에 꽂힌 Taco Hot-link 수도 펌프에 대해 구성되어 있어요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-UseRaspberryPiandTP-linkKasatoautomateyourdevices_0.png\" alt=\"RaspberryPi와TP-linkKas를사용하여장치를자동화하는2024년6월23일의이미지\"></p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>[이 블로그 포스트에서 보여짐] 크론을 통해 모든 일정 장치 제어하기. Kasa 앱은 멋지지만, 현재 각 장치당 31개의 일정 제한이 있습니다. 그리고 어떤 GUI 인터페이스든 복잡한 일정을 설정하려면 많은 \"클릭/터치\"가 필요합니다.</li>\n<li>[곧 블로그 포스트에서 곧] 외부 이벤트에 기반하여 장치 제어하기. 예를 들어 오늘 주식 시장이나 암호화폐의 상황, 날씨, 또는 트윗 감정에 따라 led 색상을 조절합니다.</li>\n</ul>\n<p>만약 이러한 자동화가 흥미롭게 들리면 계속 읽어보세요. 처음 두 가지는 크론 잡을 통해 할 예정입니다. 세 번째는 웹사이트나 API를 주기적으로 확인하고, 그 후 장치를 적절하게 제어하기 위해 프로그램을 작성해야 합니다. 이 시나리오는 곧 미래의 블로그 포스트에서 다룰 것입니다.</p>\n<ul>\n<li>python-kasa 설치하기:</li>\n</ul>\n<p>Python-kasa는 TP-link Kasa에서 사용하는 API를 감싸는 Python 래퍼입니다. 2022년 기준으로 활발하게 개발 중인 프로젝트로, 여기에서 확인하고 기여할 수 있습니다: <a href=\"https://github.com/python-kasa/python-kasa\" rel=\"nofollow\" target=\"_blank\">https://github.com/python-kasa/python-kasa</a>.</p>\n<div class=\"content-ad\"></div>\n<p>아래 명령어를 실행하여 설치할 수 있어요.</p>\n<pre><code class=\"hljs language-js\">pip3 install python-kasa\n</code></pre>\n<p>명령이 완료되면 새 터미널 세션을 시작하거나 기존 세션을 로그아웃하고 다시 로그인한 후 kasa 명령을 실행하세요. 잘 된다면 kasa 명령을 실행하여 네트워크에 있는 장치들을 발견할 수 있을 거예요 (주의: 가끔 발견 오류가 발생할 수 있지만 대부분 무시해도 괜찮아요).</p>\n<p>명령어 which kasa를 실행하면 파이썬 프로그램이 설치된 위치를 보여줄 거예요. 예를 들어, 제 경우에는 /home/pi/.local/bin/kasa에 설치되어 있었는데, 이미 PATH 변수에 포함되어 있어요.</p>\n<div class=\"content-ad\"></div>\n<p>이제 장치 별칭을 사용하여 상태를 확실히 볼 수 있도록 좀 더 구체적인 명령어를 실행하세요. 아래 명령어에서 제 장치 이름은 \"워터 펌프\"이며, 이를 적절히 대체해주세요.</p>\n<pre><code class=\"hljs language-js\">kasa --type plug --alias <span class=\"hljs-string\">\"워터 펌프\"</span>\n</code></pre>\n<p>다른 옵션을 보려면 kasa --help 명령어를 실행하세요. 예를 들어 전구의 색상을 조정하려면 다음과 같은 명령어를 실행할 수 있습니다 (자세한 내용은 다음 블로그 포스트에서 확인할 수 있습니다).</p>\n<pre><code class=\"hljs language-js\">kasa --type bulb --alias <span class=\"hljs-string\">\"컬러 램프\"</span> hsv <span class=\"hljs-number\">118</span> <span class=\"hljs-number\">100</span> <span class=\"hljs-number\">73</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>컨트롤러 스크립트 작성하기:</li>\n</ol>\n<p>이제 장치를 켜거나 끌 수 있는 간단한 스크립트를 작성해야 합니다. 아래 스크립트를 사용할 수 있습니다. 이 파일을 저장하고 아래와 같이 적절한 권한을 부여해주세요.</p>\n<pre><code class=\"hljs language-js\"># 파일 작성\necho &#x3C;&#x3C;<span class=\"hljs-variable constant_\">EOF</span>>kasa-pump.<span class=\"hljs-property\">sh</span>\n#!<span class=\"hljs-regexp\">/bin/</span>bash\n<span class=\"hljs-keyword\">if</span> [[ ! -z $1 ]]; then\n  operation=$1\n<span class=\"hljs-keyword\">else</span>\n  operation=state\nfi\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-variable constant_\">PATH</span>=<span class=\"hljs-regexp\">/home/</span>pi/.<span class=\"hljs-property\">local</span>/<span class=\"hljs-attr\">bin</span>:$PATH\nkasa --type plug --alias <span class=\"hljs-string\">\"water pump\"</span> ${operation}\n<span class=\"hljs-variable constant_\">EOF</span>\n# 권한 조정\nsudo cp kasa-pump.<span class=\"hljs-property\">sh</span> /usr/local/bin/kasa-pump.<span class=\"hljs-property\">sh</span>\nsudo chown <span class=\"hljs-attr\">pi</span>:pi /usr/local/bin/kasa-pump.<span class=\"hljs-property\">sh</span>\nsudo chmod +x /usr/local/bin/kasa-pump.<span class=\"hljs-property\">sh</span>\n</code></pre>\n<p>아래와 같은 명령어로 스크립트를 테스트해보세요. 장치가 켜지거나 꺼지는 것을 확인할 수 있어야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>kasa-pump.sh를 켭니다\nkasa-pump.sh를 끕니다</p>\n<ol start=\"3\">\n<li>크론 작업을 작성하세요:</li>\n</ol>\n<p>크론 작업은 OG Linux의 하나이며 이에 대한 많은 자습서가 있습니다. 펄스 모드인 5분 켜기, 10분 끄기로 크론을 설정하는 방법에 대한 코드 스니펫을 여기에 제공하겠습니다.</p>\n<h1>크론 일정을 작성/업데이트하려면 이 명령을 사용하세요</h1>\n<p>crontab -e</p>\n<h1>펄스 모드 펌프.</h1>\n<p>*/15 5,6,7,10,11,12,13,16,17,20,21,22 * * * /usr/local/bin/kasa-pump.sh on\n5,20,35,50 5,6,7,10,11,12,13,16,17,20,21,22 * * * /usr/local/bin/kasa-pump.sh off</p>\n<div class=\"content-ad\"></div>\n<p>위의 표현은 선택된 주간 시간 동안 매 15분마다 kasa-pump.sh 명령을 실행합니다.</p>\n<p>*/15 5,6,7,10,11,12,13,16,17,20,21,22 * * * /usr/local/bin/kasa-pump.sh on</p>\n<p>아래의 표현은 매 시간 5, 20, 35 및 50분에 kasa-pump.sh off 명령을 실행합니다.</p>\n<p>5,20,35,50 5,6,7,10,11,12,13,16,17,20,21,22 * * * /usr/local/bin/kasa-pump.sh off</p>\n<div class=\"content-ad\"></div>\n<p>물론, 전 완전히 사용자 정의된 일정을 선택할 것으로 예상합니다. Cron을 사용하면 Kasa App으로 할 수 있는 것보다 더 세밀하게 일정을 조정할 수 있어요.</p>\n<p>이젠 남은 일은 cron 작업이 성공적으로 실행되고 있는지 확인하는 것뿐이에요. 아래 명령어를 사용하여 cron에서 출력을 확인해주세요.</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Cron</span> 서비스가 제대로 실행 중인지 확인하기\nsudo systemctl status cron.<span class=\"hljs-property\">service</span>\n# cat /<span class=\"hljs-keyword\">var</span>/mail/pi | grep -i pump\n</code></pre>\n<p>마무리</p>\n<div class=\"content-ad\"></div>\n<p>안녕하세요! 이 게시물에서는 Raspberry Pi에서 cron 작업을 사용하여 \"펌프\"라는 장치를 자동화하는 방법을 살펴보았어요. 기기가 많아지면 이 방법으로 일정을 설정하는 것이 \"App\"보다 쉽습니다. \"touches/clicks\"을 많이 할 필요가 없죠.</p>\n<p>다음 블로그 게시물에서는 외부 이벤트에 따라 색상을 조정하는 것과 같은 더 흥미로운 것을 살펴볼 거에요.</p>\n</body>\n</html>\n"},"__N_SSG":true}