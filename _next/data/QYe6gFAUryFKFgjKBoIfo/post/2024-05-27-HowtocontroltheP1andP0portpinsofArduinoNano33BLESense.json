{"pageProps":{"post":{"title":"아두이노 나노 33 BLE Sense의 P1 및 P0 포트 핀을 제어하는 방법","description":"","date":"2024-05-27 13:42","slug":"2024-05-27-HowtocontroltheP1andP0portpinsofArduinoNano33BLESense","content":"\n안녕하세요! 이 간단한 안내서에 오신 것을 환영합니다. 바로 시작해 봅시다. 기존의 아두이노 보드인 UNO, 나노 등은 핀 번호매기기를 기준으로 배치되어 있습니다. 디지털 및 아날로그 핀을 쉽게 다룰 수 있으며 아두이노 스케치에서 GPIO 핀을 쉽게 다룰 수 있어요. 매핑(mapping)이나 핀 가용성에 대해 걱정할 필요가 없습니다.\n\n아두이노 나노 33 BLE Sense가 등장하면서 함께 공부해야할 것이 몇 가지 있습니다. 첫째, 이 보드는 마이크로컨트롤러 nrf52840을 사용하며 다양한 핀(약 48핀)을 가지고 있습니다. 우리는 이 중에서 아두이노 나노 33 BLE Sense가 지원하는 핀들을 제어할 수 있습니다. 둘째, 이 보드에는 Port 0 및 Port 1과 같이 두 가지 포트 핀이 있습니다. 마지막으로, 이 보드를 프로그래밍하는 두 가지 방법이 있습니다: 전통적인 아두이노 방법 또는 Real-Time Operating System (RTOS)을 사용하는 방법입니다. 이 방법이 더 나은 방법이며 권장되는 방법입니다.\n\n이제 아래 다이어그램을 살펴보세요.\n\n<div class=\"content-ad\"></div>\n\n\n![Arduino Nano 33 BLE Sense Pinout](/assets/img/2024-05-27-HowtocontroltheP1andP0portpinsofArduinoNano33BLESense_1.png)\n\nThis information was sourced from the board’s pinout: [Pinout-NANOsense_latest.pdf](https://content.arduino.cc/assets/Pinout-NANOsense_latest.pdf)\n\nOne interesting aspect you'll notice is the pins labeled with D and A, such as D1, D2, and so on. These labels map the original nRF52840 pins to an Arduino-like naming convention. Essentially, this allows us to write Arduino code and refer to the pins using these D and A designations, following the traditional Arduino approach. For instance, if we want to make an LED connected to D6 blink, we can use the following code:\n\n```js\nint led = 6;\n\nvoid setup(){\n  pinMode(led, OUTPUT);\n}\n\nvoid loop(){\n  digitalWrite(led, HIGH);\n  delay(1000);\n  digitalWrite(led, LOW);\n  delay(1000);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n위 대화는 기본적으로 일을 처리하는 간단한 방법이긴 하지만, Nano 33 BLE Sense 보드에는 권장되지 않습니다. 따라서 RTOS의 방식을 따라야 합니다. 현재 발생한 문제는 mbed.h 헤더 파일을 통해 RTOS를 사용하여 보드를 프로그래밍할 때 Arduino 핀 번호를 사용할 수 없다는 것입니다. 그렇다면 핀 번호를 어떻게 얻을까요? 위에서 언급한 도표로 돌아가 보겠습니다. P0.13 형태의 0번 포트 핀과 P1.02 형태의 1번 포트 핀을 사용할 것입니다.\n\n## 핀 번호를 어떻게 얻을까요?\n\n예를 들어 P1.14 핀 (D6)을 사용하려면 32를 1 (P1 부분)로 곱하고 14 (.14 부분)를 더해야 합니다.\n\n다시 말씀드리면:\n\n<div class=\"content-ad\"></div>\n\nP1.14 = 32 \\* 1 + 14 = 46 = p46;\n\nP0.13 = 32\\*0 + 13 = 13 = p13;\n\n선행하는 \"p\" 즉 p46와 같은 것을 추가해야 합니다. mbed.h RTOS 라이브러리를 사용하여 LED를 튜닝하는 예제를 살펴보겠습니다:\n\n```js\n#include \"mbed.h\"\n\n// D6 - P1.14\n//D13 - P0.13 = 32 * 0 + 13 = 13 = p13\n// 32 * 1 + 14 = 32 + 14 = 46 = p46\n\nstatic const PinName led = p46 //계산 결과를 확인하세요, D6 핀과 동일한 것입니다\n\nstatic mbed::DigitalOut myLed(led);\n\nvoid setup() {\n\n}\n\nvoid loop() {\nmyLed = 1;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n그게 다에요. 올바른 계산만 하면 Nano 33 BLE Sense 보드의 모든 GPIO 핀을 제어할 수 있어요.\n\n더 배우고 데모를 보려면 이 TinyML 튜토리얼 시리즈의 영상을 확인해보세요: [https://youtu.be/VDJx7d4BaVg](https://youtu.be/VDJx7d4BaVg)\n","ogImage":{"url":"/assets/img/2024-05-27-HowtocontroltheP1andP0portpinsofArduinoNano33BLESense_0.png"},"coverImage":"/assets/img/2024-05-27-HowtocontroltheP1andP0portpinsofArduinoNano33BLESense_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요! 이 간단한 안내서에 오신 것을 환영합니다. 바로 시작해 봅시다. 기존의 아두이노 보드인 UNO, 나노 등은 핀 번호매기기를 기준으로 배치되어 있습니다. 디지털 및 아날로그 핀을 쉽게 다룰 수 있으며 아두이노 스케치에서 GPIO 핀을 쉽게 다룰 수 있어요. 매핑(mapping)이나 핀 가용성에 대해 걱정할 필요가 없습니다.</p>\n<p>아두이노 나노 33 BLE Sense가 등장하면서 함께 공부해야할 것이 몇 가지 있습니다. 첫째, 이 보드는 마이크로컨트롤러 nrf52840을 사용하며 다양한 핀(약 48핀)을 가지고 있습니다. 우리는 이 중에서 아두이노 나노 33 BLE Sense가 지원하는 핀들을 제어할 수 있습니다. 둘째, 이 보드에는 Port 0 및 Port 1과 같이 두 가지 포트 핀이 있습니다. 마지막으로, 이 보드를 프로그래밍하는 두 가지 방법이 있습니다: 전통적인 아두이노 방법 또는 Real-Time Operating System (RTOS)을 사용하는 방법입니다. 이 방법이 더 나은 방법이며 권장되는 방법입니다.</p>\n<p>이제 아래 다이어그램을 살펴보세요.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-05-27-HowtocontroltheP1andP0portpinsofArduinoNano33BLESense_1.png\" alt=\"Arduino Nano 33 BLE Sense Pinout\"></p>\n<p>This information was sourced from the board’s pinout: <a href=\"https://content.arduino.cc/assets/Pinout-NANOsense_latest.pdf\" rel=\"nofollow\" target=\"_blank\">Pinout-NANOsense_latest.pdf</a></p>\n<p>One interesting aspect you'll notice is the pins labeled with D and A, such as D1, D2, and so on. These labels map the original nRF52840 pins to an Arduino-like naming convention. Essentially, this allows us to write Arduino code and refer to the pins using these D and A designations, following the traditional Arduino approach. For instance, if we want to make an LED connected to D6 blink, we can use the following code:</p>\n<pre><code class=\"hljs language-js\">int led = <span class=\"hljs-number\">6</span>;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>){\n  <span class=\"hljs-title function_\">pinMode</span>(led, <span class=\"hljs-variable constant_\">OUTPUT</span>);\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>){\n  <span class=\"hljs-title function_\">digitalWrite</span>(led, <span class=\"hljs-variable constant_\">HIGH</span>);\n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>);\n  <span class=\"hljs-title function_\">digitalWrite</span>(led, <span class=\"hljs-variable constant_\">LOW</span>);\n  <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>);\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>위 대화는 기본적으로 일을 처리하는 간단한 방법이긴 하지만, Nano 33 BLE Sense 보드에는 권장되지 않습니다. 따라서 RTOS의 방식을 따라야 합니다. 현재 발생한 문제는 mbed.h 헤더 파일을 통해 RTOS를 사용하여 보드를 프로그래밍할 때 Arduino 핀 번호를 사용할 수 없다는 것입니다. 그렇다면 핀 번호를 어떻게 얻을까요? 위에서 언급한 도표로 돌아가 보겠습니다. P0.13 형태의 0번 포트 핀과 P1.02 형태의 1번 포트 핀을 사용할 것입니다.</p>\n<h2>핀 번호를 어떻게 얻을까요?</h2>\n<p>예를 들어 P1.14 핀 (D6)을 사용하려면 32를 1 (P1 부분)로 곱하고 14 (.14 부분)를 더해야 합니다.</p>\n<p>다시 말씀드리면:</p>\n<div class=\"content-ad\"></div>\n<p>P1.14 = 32 * 1 + 14 = 46 = p46;</p>\n<p>P0.13 = 32*0 + 13 = 13 = p13;</p>\n<p>선행하는 \"p\" 즉 p46와 같은 것을 추가해야 합니다. mbed.h RTOS 라이브러리를 사용하여 LED를 튜닝하는 예제를 살펴보겠습니다:</p>\n<pre><code class=\"hljs language-js\">#include <span class=\"hljs-string\">\"mbed.h\"</span>\n\n<span class=\"hljs-comment\">// D6 - P1.14</span>\n<span class=\"hljs-comment\">//D13 - P0.13 = 32 * 0 + 13 = 13 = p13</span>\n<span class=\"hljs-comment\">// 32 * 1 + 14 = 32 + 14 = 46 = p46</span>\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PinName</span> led = p46 <span class=\"hljs-comment\">//계산 결과를 확인하세요, D6 핀과 동일한 것입니다</span>\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">mbed</span>::<span class=\"hljs-title class_\">DigitalOut</span> <span class=\"hljs-title function_\">myLed</span>(led);\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) {\n\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>) {\nmyLed = <span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>그게 다에요. 올바른 계산만 하면 Nano 33 BLE Sense 보드의 모든 GPIO 핀을 제어할 수 있어요.</p>\n<p>더 배우고 데모를 보려면 이 TinyML 튜토리얼 시리즈의 영상을 확인해보세요: <a href=\"https://youtu.be/VDJx7d4BaVg\" rel=\"nofollow\" target=\"_blank\">https://youtu.be/VDJx7d4BaVg</a></p>\n</body>\n</html>\n"},"__N_SSG":true}