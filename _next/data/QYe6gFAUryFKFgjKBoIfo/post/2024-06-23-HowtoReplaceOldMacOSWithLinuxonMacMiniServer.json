{"pageProps":{"post":{"title":"맥 미니 서버에 오래된 MacOS를 리눅스로 교체하는 방법 ","description":"","date":"2024-06-23 15:41","slug":"2024-06-23-HowtoReplaceOldMacOSWithLinuxonMacMiniServer","content":"\n\n\n![macos-linux-replacement](/assets/img/2024-06-23-HowtoReplaceOldMacOSWithLinuxonMacMiniServer_0.png)\n\n오래된 맥 미니에 우분투를 설치하는 것을 고려해야 하는 몇 가지 이유가 있습니다:\n\n- 성능 향상: 우분투는 오래된 하드웨어에서 효율적으로 작동하는 가벼운 운영 체제입니다. 오래된 맥 미니에 우분투를 설치하면 기기에 새 숨을 불어넣고 전체적인 성능을 향상시킬 수 있습니다.\n- 오픈 소스 소프트웨어: 우분투는 다양한 무료 오픈 소스 소프트웨어를 보유한 오픈 소스 운영 체제입니다. 이는 비싼 프로프리터리 소프트웨어 비용을 피하고 싶은 사용자에게 훌륭한 옵션이 될 수 있습니다.\n- 보안: 우분투는 강력한 보안 기능으로 알려져 있어 데이터를 보호하고 시스템을 바이러스 및 기타 위협으로부터 안전하게 유지할 수 있습니다.\n- 사용자 정의: 우분투는 매우 사용자 정의가 가능하여 시스템을 조정하고 조절할 수 있습니다. 사용자의 요구에 맞게 운영 체제를 맞춤 설정하고 싶은 사용자에게 훌륭한 선택이 될 수 있습니다.\n- 커뮤니티 지원: 우분투에는 사용자 및 개발자로 이루어진 큰 활발한 커뮤니티가 있어 시스템에 문제가 발생할 경우 지원과 가이던스를 제공할 수 있습니다.\n\n어린 시절의 맥 미니에 우분투를 설치하는 것은 기기의 수명을 연장하고 더 많은 이점을 얻을 수 있는 좋은 방법일 수 있습니다. 그러나 맥 미니에 우분투를 설치하는 것은 복잡할 수 있으며 몇 가지 기술적인 단계가 필요할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 설치 단계\n\n아래는 오래된 맥 미니에 우분투를 설치하는 일반적인 단계입니다:\n\n- 우분투를 포함한 부팅 가능한 USB 드라이브를 만듭니다: 우분투 ISO 파일은 공식 웹사이트에서 다운로드할 수 있으며 다음 명령어를 사용하여 부팅 가능한 USB 드라이브를 만들 수 있습니다.\n\n```js\ndiskutil list  # 볼륨 확인\n# 플래시 드라이브를 삽입하세요\ndiskutil list   # 새로운 장치 확인, 예: /dev/disk2\ndiskutil unmountDisk /dev/diskN\nsudo dd if=ubuntu-22.04.2-live-server-amd64.iso of=/dev/rdiskN bs=1m\ndiskutil eject /dev/diskN\n```\n\n<div class=\"content-ad\"></div>\n\n2. USB 드라이브에서 부팅하기: USB 드라이브를 맥 미니에 연결하고 시스템을 다시 시작하세요. 시스템이 다시 시작될 때 옵션 키를 눌러 부팅 메뉴로 진입하고 USB 드라이브를 부팅 장치로 선택하세요.\n\n3. Ubuntu 설치 프로그램 시작하기: USB 드라이브에서 부팅한 후 Ubuntu 설치 프로그램이 표시됩니다. 언어, 시간대 및 키보드 레이아웃을 선택하라는 화면 안내에 따라 진행하세요.\n\n4. 화면 안내에 따라 진행하기: Ubuntu 설치 프로그램이 설치 과정을 안내할 것이며, 완료하는 데 시간이 소요될 수 있습니다.\n\n5. 시스템을 다시 시작하기: 설치가 완료되면 시스템을 다시 시작하라는 메시지가 나타납니다. 다시 시작한 후 맥 미니가 Ubuntu로 부팅되어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 선택 사항\n\n## 두 번째 하드 드라이브 추가하기\n\n먼저 Ubuntu에 SSH로 연결하세요. Ubuntu에서 다음 명령을 사용하여 IP 주소를 확인할 수 있습니다:\n\n```js\nip r\n  default via 10.0.1.1 dev enp4s0f0 proto dhcp src 10.0.1.75 metric 100\n  10.0.1.0/24 dev enp4s0f0 proto kernel scope link src 10.0.1.75 metric 100\n  10.0.1.1 dev enp4s0f0 proto dhcp scope link src 10.0.1.75 metric 100\n```\n\n<div class=\"content-ad\"></div>\n\n이제 원격으로 Ubuntu로 SSH를 사용할 수 있습니다:\n\n\nssh <user_name>@10.0.1.75\n\n\n현재 볼륨 그룹 이름을 확인하세요:\n\n\nsudo -s\nvgs\n  VG        #PV #LV #SN Attr   VSize    VFree\n  ubuntu-vg   1   1   0 wz--n- <462.71g <362.71g\n\n\n<div class=\"content-ad\"></div>\n\n첫 번째 열인 \"VG\" 아래를 보세요. 만약 Ubuntu 설치 프로그램이 만들었다면, 이름은 \"-vg\"와 같을 것입니다.\n\n모든 메타데이터를 제거하세요. 전체 디스크를 완전히 삭제할 것이므로 주의하세요.\n\n```js\nwipefs --all --backup /dev/sdb\n  /dev/sdb: 8 bytes were erased at offset 0x00000200 (gpt): 45 46 49 20 50 41 52 54\n  /dev/sdb: 8 bytes were erased at offset 0x7470c05e00 (gpt): 45 46 49 20 50 41 52 54\n  /dev/sdb: 2 bytes were erased at offset 0x000001fe (PMBR): 55 aa\n  /dev/sdb: calling ioctl to re-read partition table: Success\n```\n\n두 번째 드라이브를 물리적 볼륨으로 표시하고, 볼륨 그룹에 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\npvcreate /dev/sdb\n  물리 볼륨 \"/dev/sdb\"가 성공적으로 생성되었습니다.\nvgextend ubuntu-vg /dev/sdb\n  볼륨 그룹 \"ubuntu-vg\"가 성공적으로 확장되었습니다.\n```\n\npvs를 사용하여 두 개의 물리 볼륨을 확인해보세요.\n\n```js\npvs\n  PV         VG        Fmt  Attr PSize    PFree\n  /dev/sda3  ubuntu-vg lvm2 a--  <462.71g <362.71g\n  /dev/sdb   ubuntu-vg lvm2 a--  <465.76g <465.76g\n```\n\n새로운 논리 볼륨을 생성하고 /data 아래에 마운트하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nlvcreate --size 300G --stripes 2 --stripesize 4096 --name data ubuntu-vg\n  Logical volume \"data\" 가 생성되었습니다.\nmkfs.ext4 -m 0 /dev/ubuntu-vg/data\n  mke2fs 1.46.5 (2021년 12월 30일)\n  78643200개의 4k 블록과 19660800개의 아이노드로 파일시스템을 생성하는 중\n  파일시스템 UUID: cd2f1059-a3d9-4eb2-9fde-0d2d9cb5af98\n  슈퍼블록 백업은 다음 블록에 저장됨:\n   32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,\n   4096000, 7962624, 11239424, 20480000, 23887872, 71663616\n\n  그룹 테이블 할당: 완료\n  아이노드 테이블 작성: 완료\n  저널 생성 (262144 블록): 완료\n  슈퍼블록 및 파일시스템 회계 정보 작성: 완료\n\nmkdir /data\n```\n\n`/etc/fstab` 파일에 다음 라인을 추가하세요\n\n```js\ncat /etc/fstab\n...\n/dev/ubuntu-vg/data  /data  ext4    noatime         0       2\n```\n\n그리고 `/data`를 마운트하십시오.\n\n<div class=\"content-ad\"></div>\n\n```js\n마운트 /data\ndf -h\n  파일시스템                        크기  사용 중 사용 가능 사용% 마운트된 위치\n  tmpfs                             770M  1.5M  768M      1% /run\n  /dev/mapper/ubuntu--vg-ubuntu--lv  98G  7.1G   86G      8% /\n  tmpfs                             3.8G     0  3.8G     0% /dev/shm\n  tmpfs                             5.0M     0  5.0M     0% /run/lock\n  /dev/sda2                         2.0G  131M  1.7G      8% /boot\n  /dev/sda1                         1.1G  6.1M  1.1G      1% /boot/efi\n  tmpfs                             770M  4.0K  770M      1% /run/user/1000\n  /dev/mapper/ubuntu--vg-data       295G   28K  295G      1% /data\n```\n\n작업을 확인하여 각 논리 볼륨이 어떤 물리 볼륨을 사용하는지 확인하십시오:\n\n```js\nlvs -a -o name,lv_size,devices\n  LV        LSize   Devices\n  data      300.00g /dev/sda3(25600),/dev/sdb(0)\n  ubuntu-lv 100.00g /dev/sda3(0)\n```\n\n# 결론\n\n\n<div class=\"content-ad\"></div>\n\n이전 Mac Mini 서버를 버리지 마세요. 보시다시피 Linux 서버(Ubuntu를 사용하는 경우)로 변환하는 것이 어렵지 않습니다. 꽤 좋은 하드웨어를 갖추고 있으며, 공간을 적게 차지하며 전기를 적게 소비하며 조용합니다.","ogImage":{"url":"/assets/img/2024-06-23-HowtoReplaceOldMacOSWithLinuxonMacMiniServer_0.png"},"coverImage":"/assets/img/2024-06-23-HowtoReplaceOldMacOSWithLinuxonMacMiniServer_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-HowtoReplaceOldMacOSWithLinuxonMacMiniServer_0.png\" alt=\"macos-linux-replacement\"></p>\n<p>오래된 맥 미니에 우분투를 설치하는 것을 고려해야 하는 몇 가지 이유가 있습니다:</p>\n<ul>\n<li>성능 향상: 우분투는 오래된 하드웨어에서 효율적으로 작동하는 가벼운 운영 체제입니다. 오래된 맥 미니에 우분투를 설치하면 기기에 새 숨을 불어넣고 전체적인 성능을 향상시킬 수 있습니다.</li>\n<li>오픈 소스 소프트웨어: 우분투는 다양한 무료 오픈 소스 소프트웨어를 보유한 오픈 소스 운영 체제입니다. 이는 비싼 프로프리터리 소프트웨어 비용을 피하고 싶은 사용자에게 훌륭한 옵션이 될 수 있습니다.</li>\n<li>보안: 우분투는 강력한 보안 기능으로 알려져 있어 데이터를 보호하고 시스템을 바이러스 및 기타 위협으로부터 안전하게 유지할 수 있습니다.</li>\n<li>사용자 정의: 우분투는 매우 사용자 정의가 가능하여 시스템을 조정하고 조절할 수 있습니다. 사용자의 요구에 맞게 운영 체제를 맞춤 설정하고 싶은 사용자에게 훌륭한 선택이 될 수 있습니다.</li>\n<li>커뮤니티 지원: 우분투에는 사용자 및 개발자로 이루어진 큰 활발한 커뮤니티가 있어 시스템에 문제가 발생할 경우 지원과 가이던스를 제공할 수 있습니다.</li>\n</ul>\n<p>어린 시절의 맥 미니에 우분투를 설치하는 것은 기기의 수명을 연장하고 더 많은 이점을 얻을 수 있는 좋은 방법일 수 있습니다. 그러나 맥 미니에 우분투를 설치하는 것은 복잡할 수 있으며 몇 가지 기술적인 단계가 필요할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<h1>설치 단계</h1>\n<p>아래는 오래된 맥 미니에 우분투를 설치하는 일반적인 단계입니다:</p>\n<ul>\n<li>우분투를 포함한 부팅 가능한 USB 드라이브를 만듭니다: 우분투 ISO 파일은 공식 웹사이트에서 다운로드할 수 있으며 다음 명령어를 사용하여 부팅 가능한 USB 드라이브를 만들 수 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">diskutil list  # 볼륨 확인\n# 플래시 드라이브를 삽입하세요\ndiskutil list   # 새로운 장치 확인, 예: <span class=\"hljs-regexp\">/dev/</span>disk2\ndiskutil unmountDisk /dev/diskN\nsudo dd <span class=\"hljs-keyword\">if</span>=ubuntu-<span class=\"hljs-number\">22.04</span><span class=\"hljs-number\">.2</span>-live-server-amd64.<span class=\"hljs-property\">iso</span> <span class=\"hljs-keyword\">of</span>=<span class=\"hljs-regexp\">/dev/</span>rdiskN bs=1m\ndiskutil eject /dev/diskN\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>\n<p>USB 드라이브에서 부팅하기: USB 드라이브를 맥 미니에 연결하고 시스템을 다시 시작하세요. 시스템이 다시 시작될 때 옵션 키를 눌러 부팅 메뉴로 진입하고 USB 드라이브를 부팅 장치로 선택하세요.</p>\n</li>\n<li>\n<p>Ubuntu 설치 프로그램 시작하기: USB 드라이브에서 부팅한 후 Ubuntu 설치 프로그램이 표시됩니다. 언어, 시간대 및 키보드 레이아웃을 선택하라는 화면 안내에 따라 진행하세요.</p>\n</li>\n<li>\n<p>화면 안내에 따라 진행하기: Ubuntu 설치 프로그램이 설치 과정을 안내할 것이며, 완료하는 데 시간이 소요될 수 있습니다.</p>\n</li>\n<li>\n<p>시스템을 다시 시작하기: 설치가 완료되면 시스템을 다시 시작하라는 메시지가 나타납니다. 다시 시작한 후 맥 미니가 Ubuntu로 부팅되어야 합니다.</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<h1>선택 사항</h1>\n<h2>두 번째 하드 드라이브 추가하기</h2>\n<p>먼저 Ubuntu에 SSH로 연결하세요. Ubuntu에서 다음 명령을 사용하여 IP 주소를 확인할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">ip r\n  <span class=\"hljs-keyword\">default</span> via <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.1</span> dev enp4s0f0 proto dhcp src <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.75</span> metric <span class=\"hljs-number\">100</span>\n  <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.0</span>/<span class=\"hljs-number\">24</span> dev enp4s0f0 proto kernel scope link src <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.75</span> metric <span class=\"hljs-number\">100</span>\n  <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.1</span> dev enp4s0f0 proto dhcp scope link src <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.75</span> metric <span class=\"hljs-number\">100</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>이제 원격으로 Ubuntu로 SSH를 사용할 수 있습니다:</p>\n<p>ssh &#x3C;user_name>@10.0.1.75</p>\n<p>현재 볼륨 그룹 이름을 확인하세요:</p>\n<p>sudo -s\nvgs\nVG        #PV #LV #SN Attr   VSize    VFree\nubuntu-vg   1   1   0 wz--n- &#x3C;462.71g &#x3C;362.71g</p>\n<div class=\"content-ad\"></div>\n<p>첫 번째 열인 \"VG\" 아래를 보세요. 만약 Ubuntu 설치 프로그램이 만들었다면, 이름은 \"-vg\"와 같을 것입니다.</p>\n<p>모든 메타데이터를 제거하세요. 전체 디스크를 완전히 삭제할 것이므로 주의하세요.</p>\n<pre><code class=\"hljs language-js\">wipefs --all --backup /dev/sdb\n  /dev/<span class=\"hljs-attr\">sdb</span>: <span class=\"hljs-number\">8</span> bytes were erased at offset <span class=\"hljs-number\">0x00000200</span> (gpt): <span class=\"hljs-number\">45</span> <span class=\"hljs-number\">46</span> <span class=\"hljs-number\">49</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">41</span> <span class=\"hljs-number\">52</span> <span class=\"hljs-number\">54</span>\n  /dev/<span class=\"hljs-attr\">sdb</span>: <span class=\"hljs-number\">8</span> bytes were erased at offset <span class=\"hljs-number\">0x7470c05e00</span> (gpt): <span class=\"hljs-number\">45</span> <span class=\"hljs-number\">46</span> <span class=\"hljs-number\">49</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-number\">50</span> <span class=\"hljs-number\">41</span> <span class=\"hljs-number\">52</span> <span class=\"hljs-number\">54</span>\n  /dev/<span class=\"hljs-attr\">sdb</span>: <span class=\"hljs-number\">2</span> bytes were erased at offset <span class=\"hljs-number\">0x000001fe</span> (<span class=\"hljs-variable constant_\">PMBR</span>): <span class=\"hljs-number\">55</span> aa\n  /dev/<span class=\"hljs-attr\">sdb</span>: calling ioctl to re-read partition <span class=\"hljs-attr\">table</span>: <span class=\"hljs-title class_\">Success</span>\n</code></pre>\n<p>두 번째 드라이브를 물리적 볼륨으로 표시하고, 볼륨 그룹에 추가하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">pvcreate /dev/sdb\n  물리 볼륨 <span class=\"hljs-string\">\"/dev/sdb\"</span>가 성공적으로 생성되었습니다.\nvgextend ubuntu-vg /dev/sdb\n  볼륨 그룹 <span class=\"hljs-string\">\"ubuntu-vg\"</span>가 성공적으로 확장되었습니다.\n</code></pre>\n<p>pvs를 사용하여 두 개의 물리 볼륨을 확인해보세요.</p>\n<pre><code class=\"hljs language-js\">pvs\n  <span class=\"hljs-variable constant_\">PV</span>         <span class=\"hljs-variable constant_\">VG</span>        <span class=\"hljs-title class_\">Fmt</span>  <span class=\"hljs-title class_\">Attr</span> <span class=\"hljs-title class_\">PSize</span>    <span class=\"hljs-title class_\">PFree</span>\n  /dev/sda3  ubuntu-vg lvm2 a--  &#x3C;462.71g &#x3C;362.71g\n  /dev/sdb   ubuntu-vg lvm2 a--  &#x3C;465.76g &#x3C;465.76g\n</code></pre>\n<p>새로운 논리 볼륨을 생성하고 /data 아래에 마운트하세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">lvcreate --size 300G --stripes <span class=\"hljs-number\">2</span> --stripesize <span class=\"hljs-number\">4096</span> --name data ubuntu-vg\n  <span class=\"hljs-title class_\">Logical</span> volume <span class=\"hljs-string\">\"data\"</span> 가 생성되었습니다.\nmkfs.<span class=\"hljs-property\">ext4</span> -m <span class=\"hljs-number\">0</span> /dev/ubuntu-vg/data\n  mke2fs <span class=\"hljs-number\">1.46</span><span class=\"hljs-number\">.5</span> (<span class=\"hljs-number\">2021</span>년 <span class=\"hljs-number\">12</span>월 <span class=\"hljs-number\">30</span>일)\n  <span class=\"hljs-number\">78643200</span>개의 4k 블록과 <span class=\"hljs-number\">19660800</span>개의 아이노드로 파일시스템을 생성하는 중\n  파일시스템 <span class=\"hljs-attr\">UUID</span>: cd2f1059-a3d9-4eb2-9fde-0d2d9cb5af98\n  슈퍼블록 백업은 다음 블록에 저장됨:\n   <span class=\"hljs-number\">32768</span>, <span class=\"hljs-number\">98304</span>, <span class=\"hljs-number\">163840</span>, <span class=\"hljs-number\">229376</span>, <span class=\"hljs-number\">294912</span>, <span class=\"hljs-number\">819200</span>, <span class=\"hljs-number\">884736</span>, <span class=\"hljs-number\">1605632</span>, <span class=\"hljs-number\">2654208</span>,\n   <span class=\"hljs-number\">4096000</span>, <span class=\"hljs-number\">7962624</span>, <span class=\"hljs-number\">11239424</span>, <span class=\"hljs-number\">20480000</span>, <span class=\"hljs-number\">23887872</span>, <span class=\"hljs-number\">71663616</span>\n\n  그룹 테이블 할당: 완료\n  아이노드 테이블 작성: 완료\n  저널 생성 (<span class=\"hljs-number\">262144</span> 블록): 완료\n  슈퍼블록 및 파일시스템 회계 정보 작성: 완료\n\nmkdir /data\n</code></pre>\n<p><code>/etc/fstab</code> 파일에 다음 라인을 추가하세요</p>\n<pre><code class=\"hljs language-js\">cat /etc/fstab\n...\n/dev/ubuntu-vg/data  /data  ext4    noatime         <span class=\"hljs-number\">0</span>       <span class=\"hljs-number\">2</span>\n</code></pre>\n<p>그리고 <code>/data</code>를 마운트하십시오.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">마운트 /data\ndf -h\n  파일시스템                        크기  사용 중 사용 가능 사용% 마운트된 위치\n  tmpfs                             770M  <span class=\"hljs-number\">1.</span>5M  768M      <span class=\"hljs-number\">1</span>% /run\n  /dev/mapper/ubuntu--vg-ubuntu--lv  98G  <span class=\"hljs-number\">7.</span>1G   86G      <span class=\"hljs-number\">8</span>% /\n  tmpfs                             <span class=\"hljs-number\">3.</span>8G     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">3.</span>8G     <span class=\"hljs-number\">0</span>% <span class=\"hljs-regexp\">/dev/</span>shm\n  tmpfs                             <span class=\"hljs-number\">5.</span>0M     <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">5.</span>0M     <span class=\"hljs-number\">0</span>% <span class=\"hljs-regexp\">/run/</span>lock\n  /dev/sda2                         <span class=\"hljs-number\">2.</span>0G  131M  <span class=\"hljs-number\">1.</span>7G      <span class=\"hljs-number\">8</span>% /boot\n  /dev/sda1                         <span class=\"hljs-number\">1.</span>1G  <span class=\"hljs-number\">6.</span>1M  <span class=\"hljs-number\">1.</span>1G      <span class=\"hljs-number\">1</span>% <span class=\"hljs-regexp\">/boot/</span>efi\n  tmpfs                             770M  <span class=\"hljs-number\">4.</span>0K  770M      <span class=\"hljs-number\">1</span>% <span class=\"hljs-regexp\">/run/u</span>ser/<span class=\"hljs-number\">1000</span>\n  /dev/mapper/ubuntu--vg-data       295G   28K  295G      <span class=\"hljs-number\">1</span>% /data\n</code></pre>\n<p>작업을 확인하여 각 논리 볼륨이 어떤 물리 볼륨을 사용하는지 확인하십시오:</p>\n<pre><code class=\"hljs language-js\">lvs -a -o name,lv_size,devices\n  <span class=\"hljs-variable constant_\">LV</span>        <span class=\"hljs-title class_\">LSize</span>   <span class=\"hljs-title class_\">Devices</span>\n  data      <span class=\"hljs-number\">300.</span>00g /dev/<span class=\"hljs-title function_\">sda3</span>(<span class=\"hljs-number\">25600</span>),<span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-title function_\">sdb</span>(<span class=\"hljs-number\">0</span>)\n  ubuntu-lv <span class=\"hljs-number\">100.</span>00g /dev/<span class=\"hljs-title function_\">sda3</span>(<span class=\"hljs-number\">0</span>)\n</code></pre>\n<h1>결론</h1>\n<div class=\"content-ad\"></div>\n<p>이전 Mac Mini 서버를 버리지 마세요. 보시다시피 Linux 서버(Ubuntu를 사용하는 경우)로 변환하는 것이 어렵지 않습니다. 꽤 좋은 하드웨어를 갖추고 있으며, 공간을 적게 차지하며 전기를 적게 소비하며 조용합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}