{"pageProps":{"post":{"title":"파이썬과 Streamlit으로 멀티페이지 금융 대시보드 만들기 처음부터 끝까지 완성하기","description":"","date":"2024-06-22 17:01","slug":"2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch","content":"\n\n<img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_0.png\" />\n\n개인화된 작업 공간을 상상해보세요. 여기서는 상품, ETF, 과소평가된 주식, 그리고 변동성 있는 암호화폐 시장을 각각 별도의 탭에서 동시에 모니터링할 수 있습니다. 이러한 설정은 데이터를 손쉽게 접근할 수 있는 것 이상을 제공합니다. 표준 도구들이 제공하는 유연성 부족으로 자주 허용되지 않는 방식으로 이 데이터를 통합하고 상호작용할 수 있게됩니다. 여러분의 대시보드를 구축함으로써, 관련성 있는 지표를 강조함으로써 유연성을 얻을 수 있고, 사용자 정의 필터를 적용하고, 심지어 시장 변동에 실시간으로 반응하는 고급 분석 도구를 통합할 수 있습니다.\n\n투자 결정에 중요한 고유한 지표들을 간과할 수 있는 범용 인터페이스에 의존할 필요가 없습니다. 여러분의 대시보드를 생성함으로써, 데이터 분석 과정을 통제하고 시장에 대한 더 깊은 이해를 기르는 전략적인 과정이 됩니다. 이제 이 혁신적인 도구를 만드는 것을 시작해봅시다.\n\n데이터 작업에 파이썬보다 더 나은 것이 무엇인가요? 그리고 데이터를 분석하는 데 가장 사용자 친화적인 방법이 무엇인가요? 우리는 파이썬에 대해 더 많은 이해가 있고, Streamlit을 소개할게요. 이 Streamlit은 데이터 분석을 위한 대화형 웹 애플리케이션을 빠르고 쉽게 구축할 수 있는 강력한 오픈 소스 파이썬 라이브러리입니다.\n\n<div class=\"content-ad\"></div>\n\n모든 난이도의 개발자를 대상으로 설계된 Streamlit은 데이터 스크립트를 공유 가능한 웹 앱으로 쉽게 변환할 수 있도록 도와줍니다.\n\n# Streamlit을 특별하게 만드는 요소는 무엇인가요?\n\n1. 사용 용이성: Streamlit의 매력은 그 간단함에 있습니다. 직관적인 Python 코드로 앱을 작성하므로 HTML, CSS 또는 JavaScript와 같은 복잡한 웹 기술을 알 필요가 없습니다. 이 사용자 친화적인 방식은 웹 프로그래밍 경험이 부족한 데이터 과학자와 분석가들에게 앱 개발의 가능성을 열어줍니다.\n\n2. 빠른 프로토타이핑: Streamlit을 사용하면 코드를 수정하면 해당 변경 사항이 앱 인터페이스에 자동으로 업데이트되어 이터레이션 과정이 매우 신속해집니다. 이 기능을 이용하면 앱을 동적으로 조정하고 실시간으로 결과를 확인할 수 있어 빠른 프로토타이핑과 실험에 매우 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n3. 다양한 내장 위젯: Streamlit에는 슬라이더, 체크박스, 드롭다운과 같은 다양한 내장 위젯이 포함되어 있어 데이터와 상호 작용하기가 매우 쉽습니다. 이러한 요소들은 코드를 최소한으로 사용하여 추가할 수 있어 사용자가 표시된 데이터나 수행 중인 계산을 조작할 수 있게 해줍니다.\n\n4. 데이터 시각화 지원: Streamlit은 Matplotlib, Seaborn, Plotly와 같은 주요 Python 데이터 시각화 라이브러리와 완벽하게 통합되어 있습니다. 이 통합을 통해 차트, 지도 및 그래프를 쉽게 앱에 통합하여 데이터를 더욱 매력적이고 정보를 제공하는 방식으로 시각화할 수 있습니다.\n\n자, 그럼 더 이상의 말이 필요 없죠. 이를 만들어 봅시다. 먼저, 필요한 것을 이해해봅시다: 사용자로서, 주요 재정 데이터를 한 곳에 표시하고 4가지 관심 영역(Crypto, ETF, 주식, 상품) 간에 쉽게 탐색할 수 있기를 원합니다. 아래는 이 모든 세그먼트에 대한 요구 사항입니다.\n\n- Cryptos: 시가 총액을 기준으로 상위 500개의 가상 화폐에 대한 실시간 가격 및 이전 종가, 시장 변동 폭, 7일 변동 사항을 표시합니다.\n- ETFs: 펀드의 성과 지표: 현재 가격, 52주 최고 및 최저가, 연 별 ETF 수익률(%), 배당 수익률 및 ETF의 실제 옵션에 대한 정보입니다.\n- Stocks: 주식의 현재 가격을 수집하고 주요 지표인 주가수익(P/E) 비율, 주당순이익(EPS)을 함께 제시합니다. 그것을 기반으로 설정한 임계값과 함께, 주식의 공정 가치를 계산하여 현재 주식 가치와 공정 주식 가치 간의 차이를 보여줍니다(차이가 충분히 크다면, 아마도 가격이 저평가된 주식일 것입니다).\n- Commodities: 현재 시장 가격, 과거 추이 (그래프), 판매 단위를 표시합니다(주식과는 다르게 각 상품에는 다른 측정 단위가 있으며, 이전 종가로부터의 가격 변동).\n\n<div class=\"content-ad\"></div>\n\n\"알았다고 했잖아!\", 버니 맥의 캐릭터가 \"오션스 13”에서 강조했던 것처럼. 코드 작업을 시작해봐요.\n\n새로운 파이썬 프로젝트를 만들고 중요한 몇 가지 파일을 포함해보세요: ETF 목록과 코드로 분석할 주식 목록이 필요할 거에요. 두 파일 모두 준비해 놨어요 (그동안 가지고 있었고, 관심이 있는 분들께 DM을 통해 공유할 수 있어요).\n\n# Streamlit 환경 설정하기\n\nStreamlit과 데이터 처리 및 시각화를 위해 pandas와 matplotlib/plotly와 같은 필요한 라이브러리를 설치해보세요.\n\n<div class=\"content-ad\"></div>\n\n\n```js\npip install streamlit pandas matplotlib plotly\n```\n\n메인 스크립트(streamlit_app.py)를 만들고 각 대시보드 패널을 위한 개별 스크립트를 작성하세요. 앱을 구성하기 위해 Streamlit의 레이아웃 기능을 활용해주세요:\n\n- 주요 네비게이션: st.sidebar.radio 또는 st.sidebar.selectbox를 사용하여 다른 금융 세그먼트 간에 탐색할 수 있게 사이드바를 활용하세요.\n- 대시보드 콘텐츠: 암호화폐, ETF, 주식 및 상품 모듈에 있는 각 페이지 함수(app())에서 데이터를 표시하는 데 필요한 표, 차트 및 상호 작용 위젯을 설정해주세요.\n\n우리의 streamlit_app.py 파일은 프로젝트의 루트 폴더에 있어야 합니다. 또한 대시보드 페이지가 있는 pages 폴더가 필요합니다 (각 대시보드마다 한 페이지씩).\n\n\n<div class=\"content-ad\"></div>\n\n\n## 내 Streamlit 어플리케이션 폴더 구조:\n- **pages/**: 대시보드의 여러 페이지를 위한 디렉토리\n    - **__init__.py**: 'pages'를 파이썬 패키지로 만듦\n    - **commodities.py**: 상품 대시보드 모듈\n    - **cryptos.py**: 암호화폐 대시보드 모듈\n    - **etfs_value.py**: ETF 대시보드 모듈\n    - **underpriced_stocks.py**: 저평가 주식 대시보드 모듈\n- **stramlit_app.py**: 주 Streamlit 어플리케이션 파일\n\n\n주 Streamlit 어플리케이션 코드부터 시작해봅시다. (특정 대시보드 페이지에 대한 중요 부분은 이미 이전 게시물 몇 개에서 살펴봤습니다.)\n\n```python\nimport streamlit as st\nfrom pages import commodities, cryptos, etfs_value, underpriced_stocks\n\n# 페이지 딕셔너리\npages = {\n    \"상품\": commodities,\n    \"암호화폐\": cryptos,\n    \"ETFs 가치\": etfs_value,\n    \"저평가 주식\": underpriced_stocks\n}\n\nst.sidebar.title('Navigation')\nchoice = st.sidebar.radio(\"페이지 선택:\", list(pages.keys()))\n\npage = pages[choice]\npage.app()  # 각 모듈이 페이지를 실행하기 위한 app 함수를 갖고 있다고 가정\n```\n\n앱 구조를 보면 매우 간단합니다. 필요한 대시보드 페이지와 Streamlit 라이브러리를 import하고, 페이지 딕셔너리를 작성하고, 사이드바 제목을 설정하고, 선택 메커니즘을 구현합니다. 이를 통해 사용자가 앱의 다른 섹션으로 이동할 수 있도록 합니다. 마지막으로 page.app() 메서드를 호출하여 사용자의 선택에 따라 적절한 페이지를 동적으로 로드합니다. 이 방법은 각 페이지 모듈 내의 특정 기능과 연결되어 대시보드를 렌더링하는 데 사용됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n작은 이정표를 달성했어요: 더 큰 목표를 향해 나아가요.\n대시보드 페이지 만들기\n\npages/commodities.py\n\n```js\nimport streamlit as st\nimport yfinance as yf\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 상품, 측정 단위 및 이름 정의\ncommodities_info = {\n    \"CL=F\": {\"unit\": \"배럴\", \"name\": \"원유 (WTI)\"},\n    \"BZ=F\": {\"unit\": \"배럴\", \"name\": \"브렌트 원유\"},\n    \"NG=F\": {\"unit\": \"mmBtu\", \"name\": \"천연가스\"},\n    \"HO=F\": {\"unit\": \"갤런\", \"name\": \"난방유\"},\n    // (중략)\n}\n\n@st.cache  # 데이터 캐싱을 통해 과도한 API 호출을 방지합니다\ndef fetch_commodity_data(tickers, period=\"6d\", interval=\"1d\"):\n    try:\n        data = yf.download(tickers, period=period, interval=interval)\n        return data\n    except Exception as e:\n        st.error(f\"상품 데이터 검색에 실패했습니다: {str(e)}\")\n        return pd.DataFrame()  # 실패 시 빈 DataFrame 반환\n\ndef app():\n    st.title(\"상품 대시보드\")\n\n    // (중략)\n\nif __name__ == \"__main__\":\n    app()\r\n```\n\n이 Streamlit 앱은 선택한 기간 동안 상품 가격과 변동을 보여주는 대시보드를 표시하는 데 사용됩니다. 사용자들은 특정 상품, 시간대 및 데이터 세부 사항을 기반으로 사용자 정의로 표시를 조정할 수 있습니다. 특정 라이브러리를 가져온 후, commodities_info라는 딕셔너리를 만들었습니다. 이 딕셔너리는 관심 상품을 정의하며, 해당 시장 티커 심볼, 측정 단위 및 이름을 포함합니다. 이 딕셔너리는 특정 상품을 티커 심볼로 참조하면서 사용자 친화적인 이름과 단위를 표시하는 데 앱 전반에서 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n다음 부분은 매우 중요합니다: @st.cache 데코레이터를 사용하여 함수 호출 결과를 캐싱하는 중요한 임무를 수행하고 있습니다. 이를 통해 입력을 기반으로 함수 호출 결과를 캐싱함으로써 yfinance에 대한 API 호출 수를 줄여 대역폭을 절약할 뿐만 아니라 첫 로드 후 사용자 상호작용 속도도 높일 수 있습니다.\n\n- tickers: 상품 기호 목록.\n- period: 데이터를 가져올 시간 기간을 지정하는 문자열 (기본값은 \"6d\" 또는 6일). 대시보드에서 사용자가 더 많은 내용을 볼 수 있도록 변경할 수 있습니다.\n- interval: 데이터 포인트의 정밀도 (기본값은 \"1d\" 또는 매일). 대시보드에서도 사용자 정의가 가능합니다.\n\n## 앱 기능\n\n이 함수는 주요 응용 프로그램 인터페이스를 정의합니다:\n\n<div class=\"content-ad\"></div>\n\n- st.title(\"상품 대시보드\"): 대시보드의 제목을 설정합니다.\n- 사이드바 입력란을 통해 사용자는 데이터의 기간과 간격을 선택하고 어떤 상품을 표시할지 선택할 수 있습니다.\n\n## 데이터 로드 및 표시\n\n상품이 선택된 경우, 앱은 fetch_commodity_data 함수를 사용하여 데이터를 검색합니다. 성공적인 데이터 검색은 최신 및 이전 종가를 사용하여 변동률을 계산하는 데이터 처리를 트리거합니다. 이 데이터는 그런 다음 데이터 프레임에 표시됩니다. 그 후에는 시각적인 그래픽을 위한 플로팅 함수를 정의하고 있습니다 (이 대시보드에서 그래프와 플롯만 사용 가능합니다. 다른 대시보드의 경우 주식/ETF/암호화폐의 수가 100보다 많아 시스템에 불필요한 부하가 될 수 있습니다).\n\n## 실행 시작점\n\n<div class=\"content-ad\"></div>\n\n```js\nif __name__ == \"__main()\":\n    app()\n```\n\n이 줄은 스크립트가 직접 실행되었는지 확인한 후 streamlit 애플리케이션을 시작하는 app() 함수를 호출합니다.\n\n축하드립니다! 네가 만든 대시보드 페이지 중 첫 번째를 성공적으로 만들었어요!\n\n![이미지](/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_1.png)\n\n<div class=\"content-ad\"></div>\n\n앗, 분할 취소를 요청해주셨군요. 물론이죠, 질문이 있으시면 언제든지 물어보세요! 😉\n\n<div class=\"content-ad\"></div>\n\nMarkdown 형식으로 표를 나타냅니다.\n\n파일 pages/underpriced_stocks.py\n\n```js\nimport streamlit as st\nimport yfinance as yf\nimport pandas as pd\nimport requests\n\n# API 액세스를 위한 상수\nAPI_KEY = 'Your API Key'\nBASE_URL = 'https://financialmodelingprep.com/api/v3'\n\n@st.cache_resource\ndef fetch_sp500_tickers():\n    \"\"\"\n    API를 사용하여 현재 S&P 500 소속 티커를 가져옵니다.\n    \"\"\"\n    url = f\"{BASE_URL}/sp500_constituent?apikey={API_KEY}\"\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            data = response.json()\n            tickers = [item['symbol'] for item in data]\n            return tickers\n        else:\n            st.error(f\"티커를 가져오지 못했습니다: HTTP 상태 코드 {response.status_code}\")\n            return []\n    except Exception as e:\n        st.error(f\"요청 실패: {e}\")\n        return []\n\n@st.cache\ndef fetch_stock_data(tickers):\n    \"\"\"\n    주어진 티커에 대한 주식 데이터를 가져와 주식이 저평가되었는지 계산합니다.\n    \"\"\"\n    data = []\n    for symbol in tickers:\n        stock = yf.Ticker(symbol)\n        try:\n            info = stock.info\n            if 'currentPrice' in info and 'trailingEps' in info:\n                current_price = info['currentPrice']\n                eps = info['trailingEps']\n                pe_ratio = info.get('trailingPE', float('inf'))  # 사용 가능한 경우 trailing P/E 사용\n\n                # 목표 P/E 비율 가정\n                target_pe = 15\n                fair_value = eps * target_pe\n\n                underpriced = current_price < fair_value\n                price_gap = ((fair_value - current_price) / current_price) * 100 if current_price else 0\n\n                data.append({\n                    'Symbol': symbol,\n                    'Current Price': current_price,\n                    'EPS': eps,\n                    'Fair Market Value': fair_value,\n                    'Underpriced': '네' if underpriced else '아니요',\n                    'Price Gap (%)': round(price_gap, 2)\n                })\n        except Exception as e:\n            print(f\"{symbol}에 대한 데이터를 가져오지 못했습니다: {e}\")\n\n    return pd.DataFrame(data)\n\ndef app():\n    \"\"\"\n    S&P 500 주식 및 저평가 상태를 표시하는 Streamlit 앱입니다.\n    \"\"\"\n    st.title(\"S&P 500 주식 분석\")\n\n    tickers = fetch_sp500_tickers()\n\n    if tickers:\n        st.write(\"S&P 500 회사의 티커가 로드되었습니다.\")\n        df = fetch_stock_data(tickers)\n        if not df.empty:\n            st.dataframe(df)\n        else:\n            st.write(\"제공된 티커에 대한 데이터를 찾을 수 없습니다.\")\n    else:\n        st.write(\"주식 티커를 로드할 수 없습니다. API 설정 및 네트워크 연결을 확인해주세요.\")\n\nif __name__ == \"__main__\":\n    app()\n\n```\n\n암호화폐처럼 동일한 방식으로: 필요한 라이브러리 가져오기, financialmodelingprep 라이브러리에서 SP500 티커 가져오기 및 yfinance에서 데이터 가져오기: 각 주식별로 데이터를 가져오는 동안 limitation에 도달하는 것을 피하기 위해 이 두 작업을 서로 다른 소스 사이에 분리했습니다. financialmodelingprep의 최소 결제 요금제(매월 19.99 미국 달러)에는 분당 300회의 호출 제한이 있으므로 우리가 주식을 하나씩 가져올 때 쉽게 이 제한에 도달할 것입니다.\n\n<div class=\"content-ad\"></div>\n\nyfinance에서 무엇을 얻고 있습니까? 적절한 기준을 설정하고 특정 주식이 성장 잠재력이 있는지 고려하는 데 도움이 되는 여러 가지 지표 목록을 얻고 있습니다.\n현재 가격: 주식의 최신 거래 가격입니다.\nEPS (주당 수익): 회사가 주당 주식에 대해 벌어들이는 돈을 나타냅니다.\n목표 P/E 비율: 이는 많은 가치 투자자들을 위한 전형적인 기준인 15로 설정됩니다. 여기서는 해당 주식의 이익에 기초하여 합리적인 가격으로 간주될 수 있는 것을 예상하기 위해 사용됩니다. 목표 P/E 15는 성장과 가치 속성을 균형 있게 고려할 수 있는 중도 기준으로 선택되었습니다. 브로드 산업 범위에 역사적으로 적용되었던 산업에 대해 사용된 보수적인 수치로, 오버밸류된 시장에서 상대적 가치 평가가 낮은 주식을 식별하는 데 도움을 줄 수 있습니다.\n공정시장가치 계산: EPS * 목표 P/E로 계산됩니다. 이는 주식이 목표 P/E 비율인 15로 가치 평가되었다면 해당 주식의 공정 가치를 나타냅니다. 낮은 P/E는 주식이 수익에 비해 저평가되었을 수 있다는 것을 시사할 수 있습니다.\n저평가 여부 확인: 만일 현재 시장 가격이 계산된 공정시장가치보다 낮다면 해당 주식이 저평가되었다고 간주됩니다.\n가격 격차(%): 공정시장가치와 현재 가격 사이의 백분율 차이를 보여주며, 주식 가격이 추정된 공정 가치에 도달하기 위해 얼마나 증가해야 하는지를 나타냅니다.\n\n![Financial Dashboard](/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_3.png)\n\n우리는 4개 중 3개를 얻었습니다: 마지막은 ETF 분석 대시보드입니다.\n\n파일: pages/etfs_value.py\n\n<div class=\"content-ad\"></div>\n\n```python\nimport streamlit as st\nimport yfinance as yf\nimport pandas as pd\n\nst.set_page_config(layout=\"wide\")\n\n@st.cache_resource(ttl=300, show_spinner=True)\ndef fetch_options_data(symbol):\n    \"\"\" Yahoo Finance에서 ETF 심볼의 옵션 데이터를 가져옵니다. \"\"\"\n    etf = yf.Ticker(symbol)\n    try:\n        expiration_dates = etf.options\n        options_info = []\n        for expiration_date in expiration_dates:\n            options_chain = etf.option_chain(expiration_date)\n            puts = options_chain.puts\n            calls = options_chain.calls\n            options_info.append({\n                '만기일': expiration_date,\n                '풋 옵션 개수': len(puts),\n                '콜 옵션 개수': len(calls)\n            })\n        return options_info\n    except Exception as e:\n        st.error(f\"{symbol}에 대한 옵션 데이터를 가져올 수 없습니다: {e}\")\n        return []\n\ndef format_assets(assets):\n    \"\"\" 큰 숫자를 읽기 쉬운 형식으로 변환합니다. \"\"\"\n    if assets >= 1e9:\n        return f\"{assets / 1e9:.2f}B\"\n    elif assets >= 1e6:\n        return f\"{assets / 1e6:.2f}M\"\n    return str(assets)\n\n@st.cache_data(show_spinner=True)\ndef fetch_data(symbol):\n    \"\"\" Yahoo Finance에서 ETF에 대한 금융 데이터 및 메트릭을 가져옵니다. \"\"\"\n    etf = yf.Ticker(symbol)\n    info = etf.info\n    options_info = fetch_options_data(symbol)\n    return {\n        '이름': info.get('longName', 'N/A'),\n        '최신 가격': f\"${info.get('previousClose', 'N/A')}\",\n        '52주 최고가': f\"${info.get('fiftyTwoWeekHigh', 'N/A')}\",\n        '52주 최저가': f\"${info.get('fiftyTwoWeekLow', 'N/A')}\",\n        '1년 수익률': f\"{info.get('ytdReturn', 'N/A') * 100:.2f}%\" if info.get('ytdReturn') is not None else \"N/A\",\n        '3년 수익률': f\"{info.get('threeYearAverageReturn', 'N/A') * 100:.2f}%\" if info.get('threeYearAverageReturn') is not None else \"N/A\",\n        '5년 수익률': f\"{info.get('fiveYearAverageReturn', 'N/A') * 100:.2f}%\" if info.get('fiveYearAverageReturn') is not None else \"N/A\",\n        '총 자산': format_assets(info.get('totalAssets', 'N/A')),\n        '배당 수익률': f\"{info.get('yield', 'N/A') * 100:.2f}%\" if info.get('yield') is not None else \"N/A\",\n        '평균 거래량': info.get('averageVolume', 'N/A'),\n        '옵션 상세정보': \"; \".join([f\"만기일: {opt['만기일']}, 풋: {opt['풋 옵션 개수']}, 콜: {opt['콜 옵션 개수']}\" for opt in options_info]),\n    }\n\ndef app():\n    \"\"\" ETF 분석을 표시하는 Streamlit 애플리케이션의 진입점입니다. \"\"\"\n    st.title(\"ETF 분석\")\n    refresh_button = st.button(\"데이터 새로고침\")\n\n    if refresh_button:\n        st.experimental_rerun()\n\n    file_path = \"etfs.txt\"\n    try:\n        with open(file_path, 'r') as file:\n            symbols = [line.strip().upper() for line in file.readlines()]\n            data = [fetch_data(symbol) for symbol in symbols]\n            df = pd.DataFrame(data)\n            st.table(df)\n    except FileNotFoundError:\n        st.error(\"ETF 심볼 파일을 찾을 수 없습니다. 현재 디렉토리에 'etfs.txt' 파일이 있는지 확인해 주세요.\")\n\nif __name__ == \"__main__\":\n    app()\r\n```\n\n<div class=\"content-ad\"></div>\n\n데이터를 가져와서 서식을 지정한 후 Streamlit의 st.table() 함수를 사용하여 각 ETF의 주요 지표를 명확하고 조직적으로 보여줍니다. 이 테이블에는 최신 가격, 올해의 최고가와 최저가, 수익률, 총 자산, 배당 수익률 및 자세한 옵션 데이터와 같은 세부 정보가 포함되어 있습니다.\n\n![이미지](/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_4.png)\n\n![이미지](/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_5.png)\n\nETF의 사용 가능한 옵션 수가 다르기 때문에 테이블의 높이와 가시성에 영향을 줍니다. 그래서 이 대시보드의 스크린샷을 2개 두었습니다.\n\n<div class=\"content-ad\"></div>\n\n그래요, 우리 최종 대시보드가 준비되었어요. 터미널을 열고 마법의 열쇠를 입력해볼까요? \"알라딘의 비밀 금고 여는 방법\"이 아니라 이런 모습을 하겠죠.\n\n```js\nstreamlit run streamlit_app.py\n```\n\n그리고, 와! 대시보드가 실행 중이에요.\n\n당신의 IDE 터미널에서 대시보드에 액세스하는 URL을 확인할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_6.png)\n\n로컬 URL 링크를 클릭하세요. 기본 브라우저에서 페이지를 열고 성취 결과를 확인할 수 있을 겁니다.\n\n![이미지](/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_7.png)\n\n테이블에 대해 \"csv로 다운로드\", 검색 및 전체화면 옵션이 제공되었는지 확인하세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_8.png\" />\n\n요약하자면 — 우리는 큰 한걸음을 내디디었어요: 어떤 데이터 표시 소스의 UI 한계에 국한되어 사용자일 뿐이었던 것으로부터, 이제 우리는 직접 대시보드를 개발할 수 있게 되었어요: 신뢰할 만한 정보 소스를 찾아내고, 원하는 형태로 정보를 제공받을 수 있도록 결정하고, 그에 맞게 조작할 수 있게 되었죠. 너무 복잡하지 않죠, 아마도 자기 계발과 금융 교육 여정에서 다음 목표에 도달하기 위한 단계에 또 다른 발걸음인 것 같아요. 코딩에 행운을 빕니다!\n\n# 쉽게 말해보면 🚀\n\nIn Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 떠나시기 전에:\n\n<div class=\"content-ad\"></div>\n\n- 글쓴이를 클립하고 팔로우 해주세요! 👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed\n- PlainEnglish.io 에서 더 많은 콘텐츠를 확인하세요!","ogImage":{"url":"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_0.png"},"coverImage":"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_0.png","tag":["Tech"],"readingTime":15},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_0.png\">\n<p>개인화된 작업 공간을 상상해보세요. 여기서는 상품, ETF, 과소평가된 주식, 그리고 변동성 있는 암호화폐 시장을 각각 별도의 탭에서 동시에 모니터링할 수 있습니다. 이러한 설정은 데이터를 손쉽게 접근할 수 있는 것 이상을 제공합니다. 표준 도구들이 제공하는 유연성 부족으로 자주 허용되지 않는 방식으로 이 데이터를 통합하고 상호작용할 수 있게됩니다. 여러분의 대시보드를 구축함으로써, 관련성 있는 지표를 강조함으로써 유연성을 얻을 수 있고, 사용자 정의 필터를 적용하고, 심지어 시장 변동에 실시간으로 반응하는 고급 분석 도구를 통합할 수 있습니다.</p>\n<p>투자 결정에 중요한 고유한 지표들을 간과할 수 있는 범용 인터페이스에 의존할 필요가 없습니다. 여러분의 대시보드를 생성함으로써, 데이터 분석 과정을 통제하고 시장에 대한 더 깊은 이해를 기르는 전략적인 과정이 됩니다. 이제 이 혁신적인 도구를 만드는 것을 시작해봅시다.</p>\n<p>데이터 작업에 파이썬보다 더 나은 것이 무엇인가요? 그리고 데이터를 분석하는 데 가장 사용자 친화적인 방법이 무엇인가요? 우리는 파이썬에 대해 더 많은 이해가 있고, Streamlit을 소개할게요. 이 Streamlit은 데이터 분석을 위한 대화형 웹 애플리케이션을 빠르고 쉽게 구축할 수 있는 강력한 오픈 소스 파이썬 라이브러리입니다.</p>\n<div class=\"content-ad\"></div>\n<p>모든 난이도의 개발자를 대상으로 설계된 Streamlit은 데이터 스크립트를 공유 가능한 웹 앱으로 쉽게 변환할 수 있도록 도와줍니다.</p>\n<h1>Streamlit을 특별하게 만드는 요소는 무엇인가요?</h1>\n<ol>\n<li>\n<p>사용 용이성: Streamlit의 매력은 그 간단함에 있습니다. 직관적인 Python 코드로 앱을 작성하므로 HTML, CSS 또는 JavaScript와 같은 복잡한 웹 기술을 알 필요가 없습니다. 이 사용자 친화적인 방식은 웹 프로그래밍 경험이 부족한 데이터 과학자와 분석가들에게 앱 개발의 가능성을 열어줍니다.</p>\n</li>\n<li>\n<p>빠른 프로토타이핑: Streamlit을 사용하면 코드를 수정하면 해당 변경 사항이 앱 인터페이스에 자동으로 업데이트되어 이터레이션 과정이 매우 신속해집니다. 이 기능을 이용하면 앱을 동적으로 조정하고 실시간으로 결과를 확인할 수 있어 빠른 프로토타이핑과 실험에 매우 유용합니다.</p>\n</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ol start=\"3\">\n<li>\n<p>다양한 내장 위젯: Streamlit에는 슬라이더, 체크박스, 드롭다운과 같은 다양한 내장 위젯이 포함되어 있어 데이터와 상호 작용하기가 매우 쉽습니다. 이러한 요소들은 코드를 최소한으로 사용하여 추가할 수 있어 사용자가 표시된 데이터나 수행 중인 계산을 조작할 수 있게 해줍니다.</p>\n</li>\n<li>\n<p>데이터 시각화 지원: Streamlit은 Matplotlib, Seaborn, Plotly와 같은 주요 Python 데이터 시각화 라이브러리와 완벽하게 통합되어 있습니다. 이 통합을 통해 차트, 지도 및 그래프를 쉽게 앱에 통합하여 데이터를 더욱 매력적이고 정보를 제공하는 방식으로 시각화할 수 있습니다.</p>\n</li>\n</ol>\n<p>자, 그럼 더 이상의 말이 필요 없죠. 이를 만들어 봅시다. 먼저, 필요한 것을 이해해봅시다: 사용자로서, 주요 재정 데이터를 한 곳에 표시하고 4가지 관심 영역(Crypto, ETF, 주식, 상품) 간에 쉽게 탐색할 수 있기를 원합니다. 아래는 이 모든 세그먼트에 대한 요구 사항입니다.</p>\n<ul>\n<li>Cryptos: 시가 총액을 기준으로 상위 500개의 가상 화폐에 대한 실시간 가격 및 이전 종가, 시장 변동 폭, 7일 변동 사항을 표시합니다.</li>\n<li>ETFs: 펀드의 성과 지표: 현재 가격, 52주 최고 및 최저가, 연 별 ETF 수익률(%), 배당 수익률 및 ETF의 실제 옵션에 대한 정보입니다.</li>\n<li>Stocks: 주식의 현재 가격을 수집하고 주요 지표인 주가수익(P/E) 비율, 주당순이익(EPS)을 함께 제시합니다. 그것을 기반으로 설정한 임계값과 함께, 주식의 공정 가치를 계산하여 현재 주식 가치와 공정 주식 가치 간의 차이를 보여줍니다(차이가 충분히 크다면, 아마도 가격이 저평가된 주식일 것입니다).</li>\n<li>Commodities: 현재 시장 가격, 과거 추이 (그래프), 판매 단위를 표시합니다(주식과는 다르게 각 상품에는 다른 측정 단위가 있으며, 이전 종가로부터의 가격 변동).</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>\"알았다고 했잖아!\", 버니 맥의 캐릭터가 \"오션스 13”에서 강조했던 것처럼. 코드 작업을 시작해봐요.</p>\n<p>새로운 파이썬 프로젝트를 만들고 중요한 몇 가지 파일을 포함해보세요: ETF 목록과 코드로 분석할 주식 목록이 필요할 거에요. 두 파일 모두 준비해 놨어요 (그동안 가지고 있었고, 관심이 있는 분들께 DM을 통해 공유할 수 있어요).</p>\n<h1>Streamlit 환경 설정하기</h1>\n<p>Streamlit과 데이터 처리 및 시각화를 위해 pandas와 matplotlib/plotly와 같은 필요한 라이브러리를 설치해보세요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">pip install streamlit pandas matplotlib plotly\n</code></pre>\n<p>메인 스크립트(streamlit_app.py)를 만들고 각 대시보드 패널을 위한 개별 스크립트를 작성하세요. 앱을 구성하기 위해 Streamlit의 레이아웃 기능을 활용해주세요:</p>\n<ul>\n<li>주요 네비게이션: st.sidebar.radio 또는 st.sidebar.selectbox를 사용하여 다른 금융 세그먼트 간에 탐색할 수 있게 사이드바를 활용하세요.</li>\n<li>대시보드 콘텐츠: 암호화폐, ETF, 주식 및 상품 모듈에 있는 각 페이지 함수(app())에서 데이터를 표시하는 데 필요한 표, 차트 및 상호 작용 위젯을 설정해주세요.</li>\n</ul>\n<p>우리의 streamlit_app.py 파일은 프로젝트의 루트 폴더에 있어야 합니다. 또한 대시보드 페이지가 있는 pages 폴더가 필요합니다 (각 대시보드마다 한 페이지씩).</p>\n<div class=\"content-ad\"></div>\n<h2>내 Streamlit 어플리케이션 폴더 구조:</h2>\n<ul>\n<li><strong>pages/</strong>: 대시보드의 여러 페이지를 위한 디렉토리\n<ul>\n<li><strong><strong>init</strong>.py</strong>: 'pages'를 파이썬 패키지로 만듦</li>\n<li><strong>commodities.py</strong>: 상품 대시보드 모듈</li>\n<li><strong>cryptos.py</strong>: 암호화폐 대시보드 모듈</li>\n<li><strong>etfs_value.py</strong>: ETF 대시보드 모듈</li>\n<li><strong>underpriced_stocks.py</strong>: 저평가 주식 대시보드 모듈</li>\n</ul>\n</li>\n<li><strong>stramlit_app.py</strong>: 주 Streamlit 어플리케이션 파일</li>\n</ul>\n<p>주 Streamlit 어플리케이션 코드부터 시작해봅시다. (특정 대시보드 페이지에 대한 중요 부분은 이미 이전 게시물 몇 개에서 살펴봤습니다.)</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> streamlit <span class=\"hljs-keyword\">as</span> st\n<span class=\"hljs-keyword\">from</span> pages <span class=\"hljs-keyword\">import</span> commodities, cryptos, etfs_value, underpriced_stocks\n\n<span class=\"hljs-comment\"># 페이지 딕셔너리</span>\npages = {\n    <span class=\"hljs-string\">\"상품\"</span>: commodities,\n    <span class=\"hljs-string\">\"암호화폐\"</span>: cryptos,\n    <span class=\"hljs-string\">\"ETFs 가치\"</span>: etfs_value,\n    <span class=\"hljs-string\">\"저평가 주식\"</span>: underpriced_stocks\n}\n\nst.sidebar.title(<span class=\"hljs-string\">'Navigation'</span>)\nchoice = st.sidebar.radio(<span class=\"hljs-string\">\"페이지 선택:\"</span>, <span class=\"hljs-built_in\">list</span>(pages.keys()))\n\npage = pages[choice]\npage.app()  <span class=\"hljs-comment\"># 각 모듈이 페이지를 실행하기 위한 app 함수를 갖고 있다고 가정</span>\n</code></pre>\n<p>앱 구조를 보면 매우 간단합니다. 필요한 대시보드 페이지와 Streamlit 라이브러리를 import하고, 페이지 딕셔너리를 작성하고, 사이드바 제목을 설정하고, 선택 메커니즘을 구현합니다. 이를 통해 사용자가 앱의 다른 섹션으로 이동할 수 있도록 합니다. 마지막으로 page.app() 메서드를 호출하여 사용자의 선택에 따라 적절한 페이지를 동적으로 로드합니다. 이 방법은 각 페이지 모듈 내의 특정 기능과 연결되어 대시보드를 렌더링하는 데 사용됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>작은 이정표를 달성했어요: 더 큰 목표를 향해 나아가요.\n대시보드 페이지 만들기</p>\n<p>pages/commodities.py</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> streamlit <span class=\"hljs-keyword\">as</span> st\n<span class=\"hljs-keyword\">import</span> yfinance <span class=\"hljs-keyword\">as</span> yf\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> matplotlib.<span class=\"hljs-property\">pyplot</span> <span class=\"hljs-keyword\">as</span> plt\n\n# 상품, 측정 단위 및 이름 정의\ncommodities_info = {\n    <span class=\"hljs-string\">\"CL=F\"</span>: {<span class=\"hljs-string\">\"unit\"</span>: <span class=\"hljs-string\">\"배럴\"</span>, <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"원유 (WTI)\"</span>},\n    <span class=\"hljs-string\">\"BZ=F\"</span>: {<span class=\"hljs-string\">\"unit\"</span>: <span class=\"hljs-string\">\"배럴\"</span>, <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"브렌트 원유\"</span>},\n    <span class=\"hljs-string\">\"NG=F\"</span>: {<span class=\"hljs-string\">\"unit\"</span>: <span class=\"hljs-string\">\"mmBtu\"</span>, <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"천연가스\"</span>},\n    <span class=\"hljs-string\">\"HO=F\"</span>: {<span class=\"hljs-string\">\"unit\"</span>: <span class=\"hljs-string\">\"갤런\"</span>, <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"난방유\"</span>},\n    <span class=\"hljs-comment\">// (중략)</span>\n}\n\n@st.<span class=\"hljs-property\">cache</span>  # 데이터 캐싱을 통해 과도한 <span class=\"hljs-variable constant_\">API</span> 호출을 방지합니다\ndef <span class=\"hljs-title function_\">fetch_commodity_data</span>(tickers, period=<span class=\"hljs-string\">\"6d\"</span>, interval=<span class=\"hljs-string\">\"1d\"</span>):\n    <span class=\"hljs-attr\">try</span>:\n        data = yf.<span class=\"hljs-title function_\">download</span>(tickers, period=period, interval=interval)\n        <span class=\"hljs-keyword\">return</span> data\n    except <span class=\"hljs-title class_\">Exception</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n        st.<span class=\"hljs-title function_\">error</span>(f<span class=\"hljs-string\">\"상품 데이터 검색에 실패했습니다: {str(e)}\"</span>)\n        <span class=\"hljs-keyword\">return</span> pd.<span class=\"hljs-title class_\">DataFrame</span>()  # 실패 시 빈 <span class=\"hljs-title class_\">DataFrame</span> 반환\n\ndef <span class=\"hljs-title function_\">app</span>():\n    st.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">\"상품 대시보드\"</span>)\n\n    <span class=\"hljs-comment\">// (중략)</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-title function_\">app</span>()\n</code></pre>\n<p>이 Streamlit 앱은 선택한 기간 동안 상품 가격과 변동을 보여주는 대시보드를 표시하는 데 사용됩니다. 사용자들은 특정 상품, 시간대 및 데이터 세부 사항을 기반으로 사용자 정의로 표시를 조정할 수 있습니다. 특정 라이브러리를 가져온 후, commodities_info라는 딕셔너리를 만들었습니다. 이 딕셔너리는 관심 상품을 정의하며, 해당 시장 티커 심볼, 측정 단위 및 이름을 포함합니다. 이 딕셔너리는 특정 상품을 티커 심볼로 참조하면서 사용자 친화적인 이름과 단위를 표시하는 데 앱 전반에서 사용됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>다음 부분은 매우 중요합니다: @st.cache 데코레이터를 사용하여 함수 호출 결과를 캐싱하는 중요한 임무를 수행하고 있습니다. 이를 통해 입력을 기반으로 함수 호출 결과를 캐싱함으로써 yfinance에 대한 API 호출 수를 줄여 대역폭을 절약할 뿐만 아니라 첫 로드 후 사용자 상호작용 속도도 높일 수 있습니다.</p>\n<ul>\n<li>tickers: 상품 기호 목록.</li>\n<li>period: 데이터를 가져올 시간 기간을 지정하는 문자열 (기본값은 \"6d\" 또는 6일). 대시보드에서 사용자가 더 많은 내용을 볼 수 있도록 변경할 수 있습니다.</li>\n<li>interval: 데이터 포인트의 정밀도 (기본값은 \"1d\" 또는 매일). 대시보드에서도 사용자 정의가 가능합니다.</li>\n</ul>\n<h2>앱 기능</h2>\n<p>이 함수는 주요 응용 프로그램 인터페이스를 정의합니다:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>st.title(\"상품 대시보드\"): 대시보드의 제목을 설정합니다.</li>\n<li>사이드바 입력란을 통해 사용자는 데이터의 기간과 간격을 선택하고 어떤 상품을 표시할지 선택할 수 있습니다.</li>\n</ul>\n<h2>데이터 로드 및 표시</h2>\n<p>상품이 선택된 경우, 앱은 fetch_commodity_data 함수를 사용하여 데이터를 검색합니다. 성공적인 데이터 검색은 최신 및 이전 종가를 사용하여 변동률을 계산하는 데이터 처리를 트리거합니다. 이 데이터는 그런 다음 데이터 프레임에 표시됩니다. 그 후에는 시각적인 그래픽을 위한 플로팅 함수를 정의하고 있습니다 (이 대시보드에서 그래프와 플롯만 사용 가능합니다. 다른 대시보드의 경우 주식/ETF/암호화폐의 수가 100보다 많아 시스템에 불필요한 부하가 될 수 있습니다).</p>\n<h2>실행 시작점</h2>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main()\"</span>:\n    <span class=\"hljs-title function_\">app</span>()\n</code></pre>\n<p>이 줄은 스크립트가 직접 실행되었는지 확인한 후 streamlit 애플리케이션을 시작하는 app() 함수를 호출합니다.</p>\n<p>축하드립니다! 네가 만든 대시보드 페이지 중 첫 번째를 성공적으로 만들었어요!</p>\n<p><img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_1.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>앗, 분할 취소를 요청해주셨군요. 물론이죠, 질문이 있으시면 언제든지 물어보세요! 😉</p>\n<div class=\"content-ad\"></div>\n<p>Markdown 형식으로 표를 나타냅니다.</p>\n<p>파일 pages/underpriced_stocks.py</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> streamlit <span class=\"hljs-keyword\">as</span> st\n<span class=\"hljs-keyword\">import</span> yfinance <span class=\"hljs-keyword\">as</span> yf\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> requests\n\n# <span class=\"hljs-variable constant_\">API</span> 액세스를 위한 상수\n<span class=\"hljs-variable constant_\">API_KEY</span> = <span class=\"hljs-string\">'Your API Key'</span>\n<span class=\"hljs-variable constant_\">BASE_URL</span> = <span class=\"hljs-string\">'https://financialmodelingprep.com/api/v3'</span>\n\n@st.<span class=\"hljs-property\">cache_resource</span>\ndef <span class=\"hljs-title function_\">fetch_sp500_tickers</span>():\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    API를 사용하여 현재 S&#x26;P 500 소속 티커를 가져옵니다.\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    url = f<span class=\"hljs-string\">\"{BASE_URL}/sp500_constituent?apikey={API_KEY}\"</span>\n    <span class=\"hljs-attr\">try</span>:\n        response = requests.<span class=\"hljs-title function_\">get</span>(url)\n        <span class=\"hljs-keyword\">if</span> response.<span class=\"hljs-property\">status_code</span> == <span class=\"hljs-number\">200</span>:\n            data = response.<span class=\"hljs-title function_\">json</span>()\n            tickers = [item[<span class=\"hljs-string\">'symbol'</span>] <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data]\n            <span class=\"hljs-keyword\">return</span> tickers\n        <span class=\"hljs-attr\">else</span>:\n            st.<span class=\"hljs-title function_\">error</span>(f<span class=\"hljs-string\">\"티커를 가져오지 못했습니다: HTTP 상태 코드 {response.status_code}\"</span>)\n            <span class=\"hljs-keyword\">return</span> []\n    except <span class=\"hljs-title class_\">Exception</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n        st.<span class=\"hljs-title function_\">error</span>(f<span class=\"hljs-string\">\"요청 실패: {e}\"</span>)\n        <span class=\"hljs-keyword\">return</span> []\n\n@st.<span class=\"hljs-property\">cache</span>\ndef <span class=\"hljs-title function_\">fetch_stock_data</span>(tickers):\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    주어진 티커에 대한 주식 데이터를 가져와 주식이 저평가되었는지 계산합니다.\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    data = []\n    <span class=\"hljs-keyword\">for</span> symbol <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">tickers</span>:\n        stock = yf.<span class=\"hljs-title class_\">Ticker</span>(symbol)\n        <span class=\"hljs-attr\">try</span>:\n            info = stock.<span class=\"hljs-property\">info</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">'currentPrice'</span> <span class=\"hljs-keyword\">in</span> info and <span class=\"hljs-string\">'trailingEps'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">info</span>:\n                current_price = info[<span class=\"hljs-string\">'currentPrice'</span>]\n                eps = info[<span class=\"hljs-string\">'trailingEps'</span>]\n                pe_ratio = info.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'trailingPE'</span>, <span class=\"hljs-title function_\">float</span>(<span class=\"hljs-string\">'inf'</span>))  # 사용 가능한 경우 trailing P/E 사용\n\n                # 목표 P/E 비율 가정\n                target_pe = <span class=\"hljs-number\">15</span>\n                fair_value = eps * target_pe\n\n                underpriced = current_price &#x3C; fair_value\n                price_gap = ((fair_value - current_price) / current_price) * <span class=\"hljs-number\">100</span> <span class=\"hljs-keyword\">if</span> current_price <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n\n                data.<span class=\"hljs-title function_\">append</span>({\n                    <span class=\"hljs-string\">'Symbol'</span>: symbol,\n                    <span class=\"hljs-string\">'Current Price'</span>: current_price,\n                    <span class=\"hljs-string\">'EPS'</span>: eps,\n                    <span class=\"hljs-string\">'Fair Market Value'</span>: fair_value,\n                    <span class=\"hljs-string\">'Underpriced'</span>: <span class=\"hljs-string\">'네'</span> <span class=\"hljs-keyword\">if</span> underpriced <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'아니요'</span>,\n                    <span class=\"hljs-string\">'Price Gap (%)'</span>: <span class=\"hljs-title function_\">round</span>(price_gap, <span class=\"hljs-number\">2</span>)\n                })\n        except <span class=\"hljs-title class_\">Exception</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n            <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{symbol}에 대한 데이터를 가져오지 못했습니다: {e}\"</span>)\n\n    <span class=\"hljs-keyword\">return</span> pd.<span class=\"hljs-title class_\">DataFrame</span>(data)\n\ndef <span class=\"hljs-title function_\">app</span>():\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    S&#x26;P 500 주식 및 저평가 상태를 표시하는 Streamlit 앱입니다.\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    st.<span class=\"hljs-title function_\">title</span>(<span class=\"hljs-string\">\"S&#x26;P 500 주식 분석\"</span>)\n\n    tickers = <span class=\"hljs-title function_\">fetch_sp500_tickers</span>()\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">tickers</span>:\n        st.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">\"S&#x26;P 500 회사의 티커가 로드되었습니다.\"</span>)\n        df = <span class=\"hljs-title function_\">fetch_stock_data</span>(tickers)\n        <span class=\"hljs-keyword\">if</span> not df.<span class=\"hljs-property\">empty</span>:\n            st.<span class=\"hljs-title function_\">dataframe</span>(df)\n        <span class=\"hljs-attr\">else</span>:\n            st.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">\"제공된 티커에 대한 데이터를 찾을 수 없습니다.\"</span>)\n    <span class=\"hljs-attr\">else</span>:\n        st.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">\"주식 티커를 로드할 수 없습니다. API 설정 및 네트워크 연결을 확인해주세요.\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-title function_\">app</span>()\n\n</code></pre>\n<p>암호화폐처럼 동일한 방식으로: 필요한 라이브러리 가져오기, financialmodelingprep 라이브러리에서 SP500 티커 가져오기 및 yfinance에서 데이터 가져오기: 각 주식별로 데이터를 가져오는 동안 limitation에 도달하는 것을 피하기 위해 이 두 작업을 서로 다른 소스 사이에 분리했습니다. financialmodelingprep의 최소 결제 요금제(매월 19.99 미국 달러)에는 분당 300회의 호출 제한이 있으므로 우리가 주식을 하나씩 가져올 때 쉽게 이 제한에 도달할 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>yfinance에서 무엇을 얻고 있습니까? 적절한 기준을 설정하고 특정 주식이 성장 잠재력이 있는지 고려하는 데 도움이 되는 여러 가지 지표 목록을 얻고 있습니다.\n현재 가격: 주식의 최신 거래 가격입니다.\nEPS (주당 수익): 회사가 주당 주식에 대해 벌어들이는 돈을 나타냅니다.\n목표 P/E 비율: 이는 많은 가치 투자자들을 위한 전형적인 기준인 15로 설정됩니다. 여기서는 해당 주식의 이익에 기초하여 합리적인 가격으로 간주될 수 있는 것을 예상하기 위해 사용됩니다. 목표 P/E 15는 성장과 가치 속성을 균형 있게 고려할 수 있는 중도 기준으로 선택되었습니다. 브로드 산업 범위에 역사적으로 적용되었던 산업에 대해 사용된 보수적인 수치로, 오버밸류된 시장에서 상대적 가치 평가가 낮은 주식을 식별하는 데 도움을 줄 수 있습니다.\n공정시장가치 계산: EPS * 목표 P/E로 계산됩니다. 이는 주식이 목표 P/E 비율인 15로 가치 평가되었다면 해당 주식의 공정 가치를 나타냅니다. 낮은 P/E는 주식이 수익에 비해 저평가되었을 수 있다는 것을 시사할 수 있습니다.\n저평가 여부 확인: 만일 현재 시장 가격이 계산된 공정시장가치보다 낮다면 해당 주식이 저평가되었다고 간주됩니다.\n가격 격차(%): 공정시장가치와 현재 가격 사이의 백분율 차이를 보여주며, 주식 가격이 추정된 공정 가치에 도달하기 위해 얼마나 증가해야 하는지를 나타냅니다.</p>\n<p><img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_3.png\" alt=\"Financial Dashboard\"></p>\n<p>우리는 4개 중 3개를 얻었습니다: 마지막은 ETF 분석 대시보드입니다.</p>\n<p>파일: pages/etfs_value.py</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> streamlit <span class=\"hljs-keyword\">as</span> st\n<span class=\"hljs-keyword\">import</span> yfinance <span class=\"hljs-keyword\">as</span> yf\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\nst.set_page_config(layout=<span class=\"hljs-string\">\"wide\"</span>)\n\n<span class=\"hljs-meta\">@st.cache_resource(<span class=\"hljs-params\">ttl=<span class=\"hljs-number\">300</span>, show_spinner=<span class=\"hljs-literal\">True</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fetch_options_data</span>(<span class=\"hljs-params\">symbol</span>):\n    <span class=\"hljs-string\">\"\"\" Yahoo Finance에서 ETF 심볼의 옵션 데이터를 가져옵니다. \"\"\"</span>\n    etf = yf.Ticker(symbol)\n    <span class=\"hljs-keyword\">try</span>:\n        expiration_dates = etf.options\n        options_info = []\n        <span class=\"hljs-keyword\">for</span> expiration_date <span class=\"hljs-keyword\">in</span> expiration_dates:\n            options_chain = etf.option_chain(expiration_date)\n            puts = options_chain.puts\n            calls = options_chain.calls\n            options_info.append({\n                <span class=\"hljs-string\">'만기일'</span>: expiration_date,\n                <span class=\"hljs-string\">'풋 옵션 개수'</span>: <span class=\"hljs-built_in\">len</span>(puts),\n                <span class=\"hljs-string\">'콜 옵션 개수'</span>: <span class=\"hljs-built_in\">len</span>(calls)\n            })\n        <span class=\"hljs-keyword\">return</span> options_info\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        st.error(<span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{symbol}</span>에 대한 옵션 데이터를 가져올 수 없습니다: <span class=\"hljs-subst\">{e}</span>\"</span>)\n        <span class=\"hljs-keyword\">return</span> []\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">format_assets</span>(<span class=\"hljs-params\">assets</span>):\n    <span class=\"hljs-string\">\"\"\" 큰 숫자를 읽기 쉬운 형식으로 변환합니다. \"\"\"</span>\n    <span class=\"hljs-keyword\">if</span> assets >= <span class=\"hljs-number\">1e9</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{assets / <span class=\"hljs-number\">1e9</span>:<span class=\"hljs-number\">.2</span>f}</span>B\"</span>\n    <span class=\"hljs-keyword\">elif</span> assets >= <span class=\"hljs-number\">1e6</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{assets / <span class=\"hljs-number\">1e6</span>:<span class=\"hljs-number\">.2</span>f}</span>M\"</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(assets)\n\n<span class=\"hljs-meta\">@st.cache_data(<span class=\"hljs-params\">show_spinner=<span class=\"hljs-literal\">True</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fetch_data</span>(<span class=\"hljs-params\">symbol</span>):\n    <span class=\"hljs-string\">\"\"\" Yahoo Finance에서 ETF에 대한 금융 데이터 및 메트릭을 가져옵니다. \"\"\"</span>\n    etf = yf.Ticker(symbol)\n    info = etf.info\n    options_info = fetch_options_data(symbol)\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-string\">'이름'</span>: info.get(<span class=\"hljs-string\">'longName'</span>, <span class=\"hljs-string\">'N/A'</span>),\n        <span class=\"hljs-string\">'최신 가격'</span>: <span class=\"hljs-string\">f\"$<span class=\"hljs-subst\">{info.get(<span class=\"hljs-string\">'previousClose'</span>, <span class=\"hljs-string\">'N/A'</span>)}</span>\"</span>,\n        <span class=\"hljs-string\">'52주 최고가'</span>: <span class=\"hljs-string\">f\"$<span class=\"hljs-subst\">{info.get(<span class=\"hljs-string\">'fiftyTwoWeekHigh'</span>, <span class=\"hljs-string\">'N/A'</span>)}</span>\"</span>,\n        <span class=\"hljs-string\">'52주 최저가'</span>: <span class=\"hljs-string\">f\"$<span class=\"hljs-subst\">{info.get(<span class=\"hljs-string\">'fiftyTwoWeekLow'</span>, <span class=\"hljs-string\">'N/A'</span>)}</span>\"</span>,\n        <span class=\"hljs-string\">'1년 수익률'</span>: <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{info.get(<span class=\"hljs-string\">'ytdReturn'</span>, <span class=\"hljs-string\">'N/A'</span>) * <span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">.2</span>f}</span>%\"</span> <span class=\"hljs-keyword\">if</span> info.get(<span class=\"hljs-string\">'ytdReturn'</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"N/A\"</span>,\n        <span class=\"hljs-string\">'3년 수익률'</span>: <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{info.get(<span class=\"hljs-string\">'threeYearAverageReturn'</span>, <span class=\"hljs-string\">'N/A'</span>) * <span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">.2</span>f}</span>%\"</span> <span class=\"hljs-keyword\">if</span> info.get(<span class=\"hljs-string\">'threeYearAverageReturn'</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"N/A\"</span>,\n        <span class=\"hljs-string\">'5년 수익률'</span>: <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{info.get(<span class=\"hljs-string\">'fiveYearAverageReturn'</span>, <span class=\"hljs-string\">'N/A'</span>) * <span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">.2</span>f}</span>%\"</span> <span class=\"hljs-keyword\">if</span> info.get(<span class=\"hljs-string\">'fiveYearAverageReturn'</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"N/A\"</span>,\n        <span class=\"hljs-string\">'총 자산'</span>: format_assets(info.get(<span class=\"hljs-string\">'totalAssets'</span>, <span class=\"hljs-string\">'N/A'</span>)),\n        <span class=\"hljs-string\">'배당 수익률'</span>: <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{info.get(<span class=\"hljs-string\">'yield'</span>, <span class=\"hljs-string\">'N/A'</span>) * <span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">.2</span>f}</span>%\"</span> <span class=\"hljs-keyword\">if</span> info.get(<span class=\"hljs-string\">'yield'</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"N/A\"</span>,\n        <span class=\"hljs-string\">'평균 거래량'</span>: info.get(<span class=\"hljs-string\">'averageVolume'</span>, <span class=\"hljs-string\">'N/A'</span>),\n        <span class=\"hljs-string\">'옵션 상세정보'</span>: <span class=\"hljs-string\">\"; \"</span>.join([<span class=\"hljs-string\">f\"만기일: <span class=\"hljs-subst\">{opt[<span class=\"hljs-string\">'만기일'</span>]}</span>, 풋: <span class=\"hljs-subst\">{opt[<span class=\"hljs-string\">'풋 옵션 개수'</span>]}</span>, 콜: <span class=\"hljs-subst\">{opt[<span class=\"hljs-string\">'콜 옵션 개수'</span>]}</span>\"</span> <span class=\"hljs-keyword\">for</span> opt <span class=\"hljs-keyword\">in</span> options_info]),\n    }\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">app</span>():\n    <span class=\"hljs-string\">\"\"\" ETF 분석을 표시하는 Streamlit 애플리케이션의 진입점입니다. \"\"\"</span>\n    st.title(<span class=\"hljs-string\">\"ETF 분석\"</span>)\n    refresh_button = st.button(<span class=\"hljs-string\">\"데이터 새로고침\"</span>)\n\n    <span class=\"hljs-keyword\">if</span> refresh_button:\n        st.experimental_rerun()\n\n    file_path = <span class=\"hljs-string\">\"etfs.txt\"</span>\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file_path, <span class=\"hljs-string\">'r'</span>) <span class=\"hljs-keyword\">as</span> file:\n            symbols = [line.strip().upper() <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> file.readlines()]\n            data = [fetch_data(symbol) <span class=\"hljs-keyword\">for</span> symbol <span class=\"hljs-keyword\">in</span> symbols]\n            df = pd.DataFrame(data)\n            st.table(df)\n    <span class=\"hljs-keyword\">except</span> FileNotFoundError:\n        st.error(<span class=\"hljs-string\">\"ETF 심볼 파일을 찾을 수 없습니다. 현재 디렉토리에 'etfs.txt' 파일이 있는지 확인해 주세요.\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    app()\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>데이터를 가져와서 서식을 지정한 후 Streamlit의 st.table() 함수를 사용하여 각 ETF의 주요 지표를 명확하고 조직적으로 보여줍니다. 이 테이블에는 최신 가격, 올해의 최고가와 최저가, 수익률, 총 자산, 배당 수익률 및 자세한 옵션 데이터와 같은 세부 정보가 포함되어 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_4.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_5.png\" alt=\"이미지\"></p>\n<p>ETF의 사용 가능한 옵션 수가 다르기 때문에 테이블의 높이와 가시성에 영향을 줍니다. 그래서 이 대시보드의 스크린샷을 2개 두었습니다.</p>\n<div class=\"content-ad\"></div>\n<p>그래요, 우리 최종 대시보드가 준비되었어요. 터미널을 열고 마법의 열쇠를 입력해볼까요? \"알라딘의 비밀 금고 여는 방법\"이 아니라 이런 모습을 하겠죠.</p>\n<pre><code class=\"hljs language-js\">streamlit run streamlit_app.<span class=\"hljs-property\">py</span>\n</code></pre>\n<p>그리고, 와! 대시보드가 실행 중이에요.</p>\n<p>당신의 IDE 터미널에서 대시보드에 액세스하는 URL을 확인할 수 있어요.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_6.png\" alt=\"이미지\"></p>\n<p>로컬 URL 링크를 클릭하세요. 기본 브라우저에서 페이지를 열고 성취 결과를 확인할 수 있을 겁니다.</p>\n<p><img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_7.png\" alt=\"이미지\"></p>\n<p>테이블에 대해 \"csv로 다운로드\", 검색 및 전체화면 옵션이 제공되었는지 확인하세요.</p>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-22-Multi-pagefinancialdashboardwithPythonandStreamlitBuilditfromscratch_8.png\">\n<p>요약하자면 — 우리는 큰 한걸음을 내디디었어요: 어떤 데이터 표시 소스의 UI 한계에 국한되어 사용자일 뿐이었던 것으로부터, 이제 우리는 직접 대시보드를 개발할 수 있게 되었어요: 신뢰할 만한 정보 소스를 찾아내고, 원하는 형태로 정보를 제공받을 수 있도록 결정하고, 그에 맞게 조작할 수 있게 되었죠. 너무 복잡하지 않죠, 아마도 자기 계발과 금융 교육 여정에서 다음 목표에 도달하기 위한 단계에 또 다른 발걸음인 것 같아요. 코딩에 행운을 빕니다!</p>\n<h1>쉽게 말해보면 🚀</h1>\n<p>In Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 떠나시기 전에:</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>글쓴이를 클립하고 팔로우 해주세요! 👏️️</li>\n<li>팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터</li>\n<li>다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed</li>\n<li>PlainEnglish.io 에서 더 많은 콘텐츠를 확인하세요!</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}