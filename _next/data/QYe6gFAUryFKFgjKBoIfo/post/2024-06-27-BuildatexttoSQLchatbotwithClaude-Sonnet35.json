{"pageProps":{"post":{"title":"Claude-Sonnet 35로 텍스트를 SQL로 변환하는 챗봇 만드는 방법","description":"","date":"2024-06-27 18:48","slug":"2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35","content":"\n\n## Claude Sonnet 3.5을 사용한 텍스트-SQL 및 GPT 모델과의 벤치마킹\n\n![image](/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_0.png)\n\nAnthropic은 최신 주력 모델인 Claude 3.5를 공개했습니다. 이 광범위한 응용 분야에 이상적인 이 첨단 모델은 인간과 유사한 응답을 이해하고 생성하는 데 뛰어납니다. 이 게시물에서는 Claude 3.5와 Vanna AI를 사용하여 데이터베이스와 상호 작용하기 위한 텍스트-SQL 파이프라인을 구축하는 방법을 시연하겠습니다.\n\n마지막으로, Claude의 SQL 작업 성능을 OpenAI 모델과 비교한 결과를 보여드렸습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_1.png)\n\n![image](/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_2.png)\n\n# 시작하기\n\n```js\nfrom vanna.vannadb.vannadb_vector import VannaDB_VectorStore\nfrom vanna.base import VannaBase\nfrom vanna.anthropic.anthropic_chat import Anthropic_Chat\n\n\nclass MyVanna(VannaDB_VectorStore, Anthropic_Chat):\n    def __init__(self, config=None):\n        MY_VANNA_MODEL =  # https://vanna.ai/account/profile에서 가져온 모델 이름\n        VannaDB_VectorStore.__init__(self, vanna_model=MY_VANNA_MODEL, vanna_api_key= # Vanna_API 키를 여기에 입력, config=config)\n        Anthropic_Chat.__init__(self, config=config)\n\napi_key = # 여기에 API 키를 입력해 주세요\n# 모델을 원하는 Anthropic 모델로 변경할 수 있습니다\n# Sonnet와 Haiku를 사용할 수 있지만, 이 포스트에서는 Opus를 사용합니다\nmodel = \"claude-3.5-sonnet-20240620\"\nconfig = {'api_key':api_key, 'model':model}\n\n# 설정을 MyVanna 객체에 전달합니다\nvn = MyVanna(config=config)\r\n``` \n\n\n<div class=\"content-ad\"></div>\n\n# 데이터베이스 연결하기\n\nVanna에는 이러한 8개의 데이터베이스에 대한 내장 커넥터가 있습니다 (추가 몇 줄의 코드로 다른 데이터베이스에 연결할 수도 있습니다):\n\n- Postgres SQL\n- Oracle\n- DuckDB\n- MySQL\n- SQLite\n- Big Query\n- Snowflake\n- Microsoft SQL\n\n문서를 확인하면 특정 데이터베이스에 연결하는 방법을 이해할 수 있습니다. 이 게시물의 목적을 위해, 저는 DuckDB StackOverFlow 데이터베이스에 연결할 것입니다. 데이터베이스는 여기에서 찾을 수 있습니다!\n\n<div class=\"content-ad\"></div>\n\n```js\n# DuckDB 데이터베이스에 연결하는 방법입니다\nvn.connect_to_duckdb(url='motherduck:[<데이터베이스_이름>]?motherduck_token=<토큰>&saas_mode=true')\n```\n\n# 교육\n\n<img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_3.png\" />\n\n# 플랜(정보 스키마)에 대한 교육\n\n\n<div class=\"content-ad\"></div>\n\n```js\n# 데이터베이스에 따라 정보 스키마 조회 쿼리를 조정해야 할 수도 있습니다. 이것은 좋은 시작점입니다.\ndf_information_schema = vn.run_sql(\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS\")\n```\n\n```js\n# 이 코드는 정보 스키마를 작은 조각으로 나누어서 LLM이 참조할 수 있도록 합니다.\nplan = vn.get_training_plan_generic(df_information_schema)\nplan\n```\n\n```js\n# Plan이 마음에 드시면 이 부분을 주석 해제하고 실행하여 학습시키세요.\nvn.train(plan=plan)\n```\n\n# DDL 학습하기\n\n<div class=\"content-ad\"></div>\n\n```js\n# DuckDB에서 describe 문을 사용하여 모든 테이블의 DDL을 가져올 수 있어요\nvn.train(ddl=\"DESCRIBE SELECT * FROM Stackoverflow.users;\")\n```\n\n# SQL 문장에 대한 학습\n\n```js\n# SQL 문장에 대한 학습 예시 입니다.\nvn.train(\nquestion=\"뱃지 수가 가장 많은 상위 10명의 사용자는 누구인가요?\"\n,sql=\"\"\"SELECT UserId, COUNT(*) AS badge_count\nFROM stackoverflow.main.badges\nGROUP BY UserId\nORDER BY badge_count DESC\nLIMIT 10\n\"\"\")\n# 또 다른 예시\nvn.train(\nquestion=\"가장 많은 답변을 낸 사용자와 가장 작은 질문을 낸 사용자 간의 총 답변 차이는 무엇인가요?\", \n,sql=\"SELECT MAX(answer_count) - MIN(answer_count) AS difference\nFROM (\n    SELECT OwnerUserId, COUNT(*) AS answer_count\n    FROM stackoverflow.main.posts\n    WHERE PostTypeId = 2\n    GROUP BY OwnerUserId\n) AS answer_counts;\n\")\n```\n\n# 문서에 대한 학습\n\n<div class=\"content-ad\"></div>\n\n```js\n# vn.train(documentation=\"We call the user with the highest answers in a year the Grand master\")을 사용하여 맥락 정보를 제공할 수 있습니다.\n```\n\nvn.get_training_data()를 사용하여 훈련 데이터를 확인할 수 있습니다.\n\n```js\n# vn.ask는 다음 함수들을 순차적으로 실행하는데, 각각을 개별적으로 실행할 수 있습니다\n# 1. vn.generate_ql\n# 2. vn.run_sql\n# 3. vn.generate_plotly_code\n# 4. vn.get_plotly_figure\n```\n\n```js\n# 훈련 후 Vanna에게 질문할 수 있는 방법\nvn.ask('가장 많은 배지를 보유한 상위 10명의 사용자를 찾아주세요?')\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_4.png\" />\n\n# Flask 앱 사용하기\n\nVanna에는 내장된 UI Flask 앱이 포함되어 있습니다. 이는 주피터 노트북이나 Python 스크립트 내에서 실행할 수 있습니다.\n\n```js\nfrom vanna.flask import VannaFlaskApp\napp = VannaFlaskApp(vn)\napp.run()\n```\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_5.png)\n\n# 벤치마크\n\n클로드 소넷 3.5와 GPT 4o를 비교해보았습니다. 우리가 준비한 벤치마크를 사용하여 비교해보았습니다. (스키마 전용은 Vanna가 데이터 정의 언어(DDL)에만 훈련되었음을 나타내며, 스키마 및 참조 SQL은 SQL 질문 쌍에 대해 훈련되었음을 나타냅니다.)\n\n## 스키마 전용\n\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_6.png\" />\n\nClaude sonnet 3.5 performs rather poorly compared with other LLMs when only trained on schema information. Which is odd.\n\n## Schema-and-reference-SQL\n\n<img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_7.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n상당히 놀라운 사실인데, 레퍼런스 SQL과 SQL 질문 쌍을 사용하여 훈련시킨 Claude-3.5가 모든 다른 LLM들보다 우수한 성능을 보이고 있습니다.\n\n# 평균\n\n![이미지](/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_8.png)\n\n따라서, 두 점수의 평균을 내면, Claude-Sonnet 3.5는 GPT-4o와 비슷한 범위의 성능을 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n읽어 주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_0.png"},"coverImage":"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>Claude Sonnet 3.5을 사용한 텍스트-SQL 및 GPT 모델과의 벤치마킹</h2>\n<p><img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_0.png\" alt=\"image\"></p>\n<p>Anthropic은 최신 주력 모델인 Claude 3.5를 공개했습니다. 이 광범위한 응용 분야에 이상적인 이 첨단 모델은 인간과 유사한 응답을 이해하고 생성하는 데 뛰어납니다. 이 게시물에서는 Claude 3.5와 Vanna AI를 사용하여 데이터베이스와 상호 작용하기 위한 텍스트-SQL 파이프라인을 구축하는 방법을 시연하겠습니다.</p>\n<p>마지막으로, Claude의 SQL 작업 성능을 OpenAI 모델과 비교한 결과를 보여드렸습니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_1.png\" alt=\"image\"></p>\n<p><img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_2.png\" alt=\"image\"></p>\n<h1>시작하기</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> vanna.<span class=\"hljs-property\">vannadb</span>.<span class=\"hljs-property\">vannadb_vector</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">VannaDB</span>_VectorStore\n<span class=\"hljs-keyword\">from</span> vanna.<span class=\"hljs-property\">base</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">VannaBase</span>\n<span class=\"hljs-keyword\">from</span> vanna.<span class=\"hljs-property\">anthropic</span>.<span class=\"hljs-property\">anthropic_chat</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Anthropic</span>_Chat\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyVanna</span>(<span class=\"hljs-title class_\">VannaDB</span>_VectorStore, <span class=\"hljs-title class_\">Anthropic</span>_Chat):\n    def <span class=\"hljs-title function_\">__init__</span>(self, config=<span class=\"hljs-title class_\">None</span>):\n        <span class=\"hljs-variable constant_\">MY_VANNA_MODEL</span> =  # <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//vanna.ai/account/profile에서 가져온 모델 이름</span>\n        <span class=\"hljs-title class_\">VannaDB</span>_VectorStore.<span class=\"hljs-title function_\">__init__</span>(self, vanna_model=<span class=\"hljs-variable constant_\">MY_VANNA_MODEL</span>, vanna_api_key= # <span class=\"hljs-title class_\">Vanna</span>_API 키를 여기에 입력, config=config)\n        <span class=\"hljs-title class_\">Anthropic</span>_Chat.<span class=\"hljs-title function_\">__init__</span>(self, config=config)\n\napi_key = # 여기에 <span class=\"hljs-variable constant_\">API</span> 키를 입력해 주세요\n# 모델을 원하는 <span class=\"hljs-title class_\">Anthropic</span> 모델로 변경할 수 있습니다\n# <span class=\"hljs-title class_\">Sonnet</span>와 <span class=\"hljs-title class_\">Haiku</span>를 사용할 수 있지만, 이 포스트에서는 <span class=\"hljs-title class_\">Opus</span>를 사용합니다\nmodel = <span class=\"hljs-string\">\"claude-3.5-sonnet-20240620\"</span>\nconfig = {<span class=\"hljs-string\">'api_key'</span>:api_key, <span class=\"hljs-string\">'model'</span>:model}\n\n# 설정을 <span class=\"hljs-title class_\">MyVanna</span> 객체에 전달합니다\nvn = <span class=\"hljs-title class_\">MyVanna</span>(config=config)\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>데이터베이스 연결하기</h1>\n<p>Vanna에는 이러한 8개의 데이터베이스에 대한 내장 커넥터가 있습니다 (추가 몇 줄의 코드로 다른 데이터베이스에 연결할 수도 있습니다):</p>\n<ul>\n<li>Postgres SQL</li>\n<li>Oracle</li>\n<li>DuckDB</li>\n<li>MySQL</li>\n<li>SQLite</li>\n<li>Big Query</li>\n<li>Snowflake</li>\n<li>Microsoft SQL</li>\n</ul>\n<p>문서를 확인하면 특정 데이터베이스에 연결하는 방법을 이해할 수 있습니다. 이 게시물의 목적을 위해, 저는 DuckDB StackOverFlow 데이터베이스에 연결할 것입니다. 데이터베이스는 여기에서 찾을 수 있습니다!</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">DuckDB</span> 데이터베이스에 연결하는 방법입니다\nvn.<span class=\"hljs-title function_\">connect_to_duckdb</span>(url=<span class=\"hljs-string\">'motherduck:[&#x3C;데이터베이스_이름>]?motherduck_token=&#x3C;토큰>&#x26;saas_mode=true'</span>)\n</code></pre>\n<h1>교육</h1>\n<img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_3.png\">\n<h1>플랜(정보 스키마)에 대한 교육</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># 데이터베이스에 따라 정보 스키마 조회 쿼리를 조정해야 할 수도 있습니다. 이것은 좋은 시작점입니다.\ndf_information_schema = vn.<span class=\"hljs-title function_\">run_sql</span>(<span class=\"hljs-string\">\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS\"</span>)\n</code></pre>\n<pre><code class=\"hljs language-js\"># 이 코드는 정보 스키마를 작은 조각으로 나누어서 <span class=\"hljs-variable constant_\">LLM</span>이 참조할 수 있도록 합니다.\nplan = vn.<span class=\"hljs-title function_\">get_training_plan_generic</span>(df_information_schema)\nplan\n</code></pre>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Plan</span>이 마음에 드시면 이 부분을 주석 해제하고 실행하여 학습시키세요.\nvn.<span class=\"hljs-title function_\">train</span>(plan=plan)\n</code></pre>\n<h1>DDL 학습하기</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">DuckDB</span>에서 describe 문을 사용하여 모든 테이블의 <span class=\"hljs-variable constant_\">DDL</span>을 가져올 수 있어요\nvn.<span class=\"hljs-title function_\">train</span>(ddl=<span class=\"hljs-string\">\"DESCRIBE SELECT * FROM Stackoverflow.users;\"</span>)\n</code></pre>\n<h1>SQL 문장에 대한 학습</h1>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-variable constant_\">SQL</span> 문장에 대한 학습 예시 입니다.\nvn.<span class=\"hljs-title function_\">train</span>(\nquestion=<span class=\"hljs-string\">\"뱃지 수가 가장 많은 상위 10명의 사용자는 누구인가요?\"</span>\n,sql=<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"SELECT UserId, COUNT(*) AS badge_count\nFROM stackoverflow.main.badges\nGROUP BY UserId\nORDER BY badge_count DESC\nLIMIT 10\n\"</span><span class=\"hljs-string\">\"\"</span>)\n# 또 다른 예시\nvn.<span class=\"hljs-title function_\">train</span>(\nquestion=<span class=\"hljs-string\">\"가장 많은 답변을 낸 사용자와 가장 작은 질문을 낸 사용자 간의 총 답변 차이는 무엇인가요?\"</span>, \n,sql=<span class=\"hljs-string\">\"SELECT MAX(answer_count) - MIN(answer_count) AS difference\nFROM (\n    SELECT OwnerUserId, COUNT(*) AS answer_count\n    FROM stackoverflow.main.posts\n    WHERE PostTypeId = 2\n    GROUP BY OwnerUserId\n) AS answer_counts;\n\"</span>)\n</code></pre>\n<h1>문서에 대한 학습</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># vn.<span class=\"hljs-title function_\">train</span>(documentation=<span class=\"hljs-string\">\"We call the user with the highest answers in a year the Grand master\"</span>)을 사용하여 맥락 정보를 제공할 수 있습니다.\n</code></pre>\n<p>vn.get_training_data()를 사용하여 훈련 데이터를 확인할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"># vn.<span class=\"hljs-property\">ask</span>는 다음 함수들을 순차적으로 실행하는데, 각각을 개별적으로 실행할 수 있습니다\n# <span class=\"hljs-number\">1.</span> vn.<span class=\"hljs-property\">generate_ql</span>\n# <span class=\"hljs-number\">2.</span> vn.<span class=\"hljs-property\">run_sql</span>\n# <span class=\"hljs-number\">3.</span> vn.<span class=\"hljs-property\">generate_plotly_code</span>\n# <span class=\"hljs-number\">4.</span> vn.<span class=\"hljs-property\">get_plotly_figure</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"># 훈련 후 <span class=\"hljs-title class_\">Vanna</span>에게 질문할 수 있는 방법\nvn.<span class=\"hljs-title function_\">ask</span>(<span class=\"hljs-string\">'가장 많은 배지를 보유한 상위 10명의 사용자를 찾아주세요?'</span>)\n</code></pre>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_4.png\">\n<h1>Flask 앱 사용하기</h1>\n<p>Vanna에는 내장된 UI Flask 앱이 포함되어 있습니다. 이는 주피터 노트북이나 Python 스크립트 내에서 실행할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> vanna.<span class=\"hljs-property\">flask</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">VannaFlaskApp</span>\napp = <span class=\"hljs-title class_\">VannaFlaskApp</span>(vn)\napp.<span class=\"hljs-title function_\">run</span>()\n</code></pre>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_5.png\" alt=\"image\"></p>\n<h1>벤치마크</h1>\n<p>클로드 소넷 3.5와 GPT 4o를 비교해보았습니다. 우리가 준비한 벤치마크를 사용하여 비교해보았습니다. (스키마 전용은 Vanna가 데이터 정의 언어(DDL)에만 훈련되었음을 나타내며, 스키마 및 참조 SQL은 SQL 질문 쌍에 대해 훈련되었음을 나타냅니다.)</p>\n<h2>스키마 전용</h2>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_6.png\">\n<p>Claude sonnet 3.5 performs rather poorly compared with other LLMs when only trained on schema information. Which is odd.</p>\n<h2>Schema-and-reference-SQL</h2>\n<img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_7.png\">\n<div class=\"content-ad\"></div>\n<p>상당히 놀라운 사실인데, 레퍼런스 SQL과 SQL 질문 쌍을 사용하여 훈련시킨 Claude-3.5가 모든 다른 LLM들보다 우수한 성능을 보이고 있습니다.</p>\n<h1>평균</h1>\n<p><img src=\"/assets/img/2024-06-27-BuildatexttoSQLchatbotwithClaude-Sonnet35_8.png\" alt=\"이미지\"></p>\n<p>따라서, 두 점수의 평균을 내면, Claude-Sonnet 3.5는 GPT-4o와 비슷한 범위의 성능을 보여줍니다.</p>\n<div class=\"content-ad\"></div>\n<p>읽어 주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}