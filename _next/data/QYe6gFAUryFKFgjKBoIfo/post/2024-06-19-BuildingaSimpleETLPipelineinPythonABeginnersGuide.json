{"pageProps":{"post":{"title":"파이썬으로 간단한 ETL 파이프라인 구축하기 초보자를 위한 안내","description":"","date":"2024-06-19 16:10","slug":"2024-06-19-BuildingaSimpleETLPipelineinPythonABeginnersGuide","content":"\n\n소개:\n\nETL (추출, 변환, 로드)은 데이터 엔지니어링에서 필수적인 프로세스로, 다양한 소스에서 데이터를 수집, 변환 및 저장하는 기능을 제공합니다. 이 안내서에서는 Python을 사용하여 날씨 데이터를 API에서 추출, 변환하고 CSV 파일에 저장하는 간단한 ETL 파이프라인을 구축하는 방법을 안내해 드리겠습니다.\n\n설치:\n\n시작하려면 Python 3.8 이상 버전 및 몇 가지 라이브러리가 설치되어 있어야 합니다. 터미널을 열고 다음 명령을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\npip install requests pandas\n```\n\n**단계 1: 날씨 데이터 추출 기능용 액세스 키 얻기**\n\n날씨 데이터를 가져오기 위해 OpenWeatherMap API를 사용할 것입니다. 먼저 API 키를 얻어야 합니다.\n\n1. API 키 등록하세요:\n\n\n<div class=\"content-ad\"></div>\n\n- OpenWeatherMap 웹사이트로 이동해 주세요.\n- 무료 계정을 등록하고 API 키를 획득해 주세요.\n\n**2. API 문서:**\n\n- 현재 날씨 데이터 섹션으로 이동해 주세요.\n- \"Current Weather Data\"를 클릭한 다음 \"API 문서\"를 클릭해 주세요.\n- 요청하는 방법을 이해하기 위해 \"도시 이름으로 내장된 API 요청\"으로 스크롤해 주세요.\n\n**단계 2: 함수 추출**\n\n<div class=\"content-ad\"></div>\n\n이제 API 키가 있으니, API에서 날씨 데이터를 가져오는 추출 함수를 작성해 봅시다.\n\n```js\n# 중요한 라이브러리들\n\nimport requests\nimport pandas as pd\n```\n\n```js\ndef fetch_weather_data(city: str, api_key: str):\n    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric'\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\n# 예시 사용법\napi_key = '당신의_openweathermap_api_키'\ncity = '런던'\nweather_data = fetch_weather_data(city, api_key)\nprint(weather_data)\n```\n\nfetch_weather_data 함수는 도시 이름과 API 키를 사용하여 API 요청 URL을 작성하고, API로 GET 요청을 보내 성공적인 요청이면 JSON 형식의 응답 데이터를 반환합니다.\n\n<div class=\"content-ad\"></div>\n\n### 단계 3: 변환 함수\n\n이제 데이터를 보다 구조화된 형식으로 변환할 것입니다:\n\n```js\ndef transform_weather_data(data: dict):\n    if not data:\n        return None\n\n    weather_info = {\n        'city': data['name'],\n        'temperature': data['main']['temp'],\n        'humidity': data['main']['humidity'],\n        'weather': data['weather'][0]['description'],\n        'wind_speed': data['wind']['speed'],\n        'wind_deg': data['wind']['deg']\n    }\n    return weather_info\n\n# 예제 사용법\ntransformed_data = transform_weather_data(weather_data)\nprint(transformed_data)\r\n```\n\n### 단계 4: 모든 단계를 결합하는 함수\n\n<div class=\"content-ad\"></div>\n\n마지막으로, 변환된 데이터를 CSV 파일로 로드하겠습니다:\n\n```js\ndef load_data_to_csv(data: dict, file_path: str):\n    df = pd.DataFrame([data])\n    df.to_csv(file_path, index=False)\n\n# 사용 예시\noutput_file = 'weather_data.csv'\nload_data_to_csv(transformed_data, output_file)\nprint(f'{output_file}에 데이터 저장 완료')\n```\n\n모든 단계를 통합한 완전한 스크립트입니다:\n\n<div class=\"content-ad\"></div>\n\n```python\ndef fetch_weather_data(city: str, api_key: str):\n    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric'\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\ndef transform_weather_data(data: dict):\n    if not data:\n        return None\n\n    weather_info = {\n        'city': data['name'],\n        'temperature': data['main']['temp'],\n        'humidity': data['main']['humidity'],\n        'weather': data['weather'][0]['description'],\n        'wind_speed': data['wind']['speed'],\n        'wind_deg': data['wind']['deg']\n    }\n    return weather_info\n\ndef load_data_to_csv(data: dict, file_path: str):\n    df = pd.DataFrame([data])\n    df.to_csv(file_path, index=False)\n\ndef main():\n    api_key = 'your_openweathermap_api_key'\n    city = 'London'\n    weather_data = fetch_weather_data(city, api_key)\n    if weather_data:\n        transformed_data = transform_weather_data(weather_data)\n        output_file = 'weather_data.csv'\n        load_data_to_csv(transformed_data, output_file)\n        print(f'Data saved to {output_file}')\n    else:\n        print('Failed to fetch data')\n\nif __name__ == '__main__':\n    main()\n```\n\n**결론**\n\n이번 튜토리얼에서는 Python으로 간단한 ETL(추출, 변환, 적재) 파이프라인을 만들었습니다. API에서 데이터를 가져와 변환한 뒤 CSV 파일로 저장했습니다. 이 기본 프로젝트를 통해 데이터 엔지니어링 및 분석에서 중요한 ETL 프로세스를 이해할 수 있습니다.\n\n**추가 자료**\n\n\n<div class=\"content-ad\"></div>\n\n- OpenWeatherMap API","ogImage":{"url":"/assets/img/2024-06-19-BuildingaSimpleETLPipelineinPythonABeginnersGuide_0.png"},"coverImage":"/assets/img/2024-06-19-BuildingaSimpleETLPipelineinPythonABeginnersGuide_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>소개:</p>\n<p>ETL (추출, 변환, 로드)은 데이터 엔지니어링에서 필수적인 프로세스로, 다양한 소스에서 데이터를 수집, 변환 및 저장하는 기능을 제공합니다. 이 안내서에서는 Python을 사용하여 날씨 데이터를 API에서 추출, 변환하고 CSV 파일에 저장하는 간단한 ETL 파이프라인을 구축하는 방법을 안내해 드리겠습니다.</p>\n<p>설치:</p>\n<p>시작하려면 Python 3.8 이상 버전 및 몇 가지 라이브러리가 설치되어 있어야 합니다. 터미널을 열고 다음 명령을 실행하세요:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">pip install requests pandas\n</code></pre>\n<p><strong>단계 1: 날씨 데이터 추출 기능용 액세스 키 얻기</strong></p>\n<p>날씨 데이터를 가져오기 위해 OpenWeatherMap API를 사용할 것입니다. 먼저 API 키를 얻어야 합니다.</p>\n<ol>\n<li>API 키 등록하세요:</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ul>\n<li>OpenWeatherMap 웹사이트로 이동해 주세요.</li>\n<li>무료 계정을 등록하고 API 키를 획득해 주세요.</li>\n</ul>\n<p><strong>2. API 문서:</strong></p>\n<ul>\n<li>현재 날씨 데이터 섹션으로 이동해 주세요.</li>\n<li>\"Current Weather Data\"를 클릭한 다음 \"API 문서\"를 클릭해 주세요.</li>\n<li>요청하는 방법을 이해하기 위해 \"도시 이름으로 내장된 API 요청\"으로 스크롤해 주세요.</li>\n</ul>\n<p><strong>단계 2: 함수 추출</strong></p>\n<div class=\"content-ad\"></div>\n<p>이제 API 키가 있으니, API에서 날씨 데이터를 가져오는 추출 함수를 작성해 봅시다.</p>\n<pre><code class=\"hljs language-js\"># 중요한 라이브러리들\n\n<span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n</code></pre>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">fetch_weather_data</span>(<span class=\"hljs-attr\">city</span>: str, <span class=\"hljs-attr\">api_key</span>: str):\n    url = f<span class=\"hljs-string\">'http://api.openweathermap.org/data/2.5/weather?q={city}&#x26;appid={api_key}&#x26;units=metric'</span>\n    response = requests.<span class=\"hljs-title function_\">get</span>(url)\n    <span class=\"hljs-keyword\">if</span> response.<span class=\"hljs-property\">status_code</span> == <span class=\"hljs-number\">200</span>:\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-title function_\">json</span>()\n    <span class=\"hljs-attr\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">None</span>\n\n# 예시 사용법\napi_key = <span class=\"hljs-string\">'당신의_openweathermap_api_키'</span>\ncity = <span class=\"hljs-string\">'런던'</span>\nweather_data = <span class=\"hljs-title function_\">fetch_weather_data</span>(city, api_key)\n<span class=\"hljs-title function_\">print</span>(weather_data)\n</code></pre>\n<p>fetch_weather_data 함수는 도시 이름과 API 키를 사용하여 API 요청 URL을 작성하고, API로 GET 요청을 보내 성공적인 요청이면 JSON 형식의 응답 데이터를 반환합니다.</p>\n<div class=\"content-ad\"></div>\n<h3>단계 3: 변환 함수</h3>\n<p>이제 데이터를 보다 구조화된 형식으로 변환할 것입니다:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">transform_weather_data</span>(<span class=\"hljs-attr\">data</span>: dict):\n    <span class=\"hljs-keyword\">if</span> not <span class=\"hljs-attr\">data</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">None</span>\n\n    weather_info = {\n        <span class=\"hljs-string\">'city'</span>: data[<span class=\"hljs-string\">'name'</span>],\n        <span class=\"hljs-string\">'temperature'</span>: data[<span class=\"hljs-string\">'main'</span>][<span class=\"hljs-string\">'temp'</span>],\n        <span class=\"hljs-string\">'humidity'</span>: data[<span class=\"hljs-string\">'main'</span>][<span class=\"hljs-string\">'humidity'</span>],\n        <span class=\"hljs-string\">'weather'</span>: data[<span class=\"hljs-string\">'weather'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'description'</span>],\n        <span class=\"hljs-string\">'wind_speed'</span>: data[<span class=\"hljs-string\">'wind'</span>][<span class=\"hljs-string\">'speed'</span>],\n        <span class=\"hljs-string\">'wind_deg'</span>: data[<span class=\"hljs-string\">'wind'</span>][<span class=\"hljs-string\">'deg'</span>]\n    }\n    <span class=\"hljs-keyword\">return</span> weather_info\n\n# 예제 사용법\ntransformed_data = <span class=\"hljs-title function_\">transform_weather_data</span>(weather_data)\n<span class=\"hljs-title function_\">print</span>(transformed_data)\n</code></pre>\n<h3>단계 4: 모든 단계를 결합하는 함수</h3>\n<div class=\"content-ad\"></div>\n<p>마지막으로, 변환된 데이터를 CSV 파일로 로드하겠습니다:</p>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">load_data_to_csv</span>(<span class=\"hljs-attr\">data</span>: dict, <span class=\"hljs-attr\">file_path</span>: str):\n    df = pd.<span class=\"hljs-title class_\">DataFrame</span>([data])\n    df.<span class=\"hljs-title function_\">to_csv</span>(file_path, index=<span class=\"hljs-title class_\">False</span>)\n\n# 사용 예시\noutput_file = <span class=\"hljs-string\">'weather_data.csv'</span>\n<span class=\"hljs-title function_\">load_data_to_csv</span>(transformed_data, output_file)\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">'{output_file}에 데이터 저장 완료'</span>)\n</code></pre>\n<p>모든 단계를 통합한 완전한 스크립트입니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fetch_weather_data</span>(<span class=\"hljs-params\">city: <span class=\"hljs-built_in\">str</span>, api_key: <span class=\"hljs-built_in\">str</span></span>):\n    url = <span class=\"hljs-string\">f'http://api.openweathermap.org/data/2.5/weather?q=<span class=\"hljs-subst\">{city}</span>&#x26;appid=<span class=\"hljs-subst\">{api_key}</span>&#x26;units=metric'</span>\n    response = requests.get(url)\n    <span class=\"hljs-keyword\">if</span> response.status_code == <span class=\"hljs-number\">200</span>:\n        <span class=\"hljs-keyword\">return</span> response.json()\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">transform_weather_data</span>(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">dict</span></span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> data:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    weather_info = {\n        <span class=\"hljs-string\">'city'</span>: data[<span class=\"hljs-string\">'name'</span>],\n        <span class=\"hljs-string\">'temperature'</span>: data[<span class=\"hljs-string\">'main'</span>][<span class=\"hljs-string\">'temp'</span>],\n        <span class=\"hljs-string\">'humidity'</span>: data[<span class=\"hljs-string\">'main'</span>][<span class=\"hljs-string\">'humidity'</span>],\n        <span class=\"hljs-string\">'weather'</span>: data[<span class=\"hljs-string\">'weather'</span>][<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">'description'</span>],\n        <span class=\"hljs-string\">'wind_speed'</span>: data[<span class=\"hljs-string\">'wind'</span>][<span class=\"hljs-string\">'speed'</span>],\n        <span class=\"hljs-string\">'wind_deg'</span>: data[<span class=\"hljs-string\">'wind'</span>][<span class=\"hljs-string\">'deg'</span>]\n    }\n    <span class=\"hljs-keyword\">return</span> weather_info\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">load_data_to_csv</span>(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">dict</span>, file_path: <span class=\"hljs-built_in\">str</span></span>):\n    df = pd.DataFrame([data])\n    df.to_csv(file_path, index=<span class=\"hljs-literal\">False</span>)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    api_key = <span class=\"hljs-string\">'your_openweathermap_api_key'</span>\n    city = <span class=\"hljs-string\">'London'</span>\n    weather_data = fetch_weather_data(city, api_key)\n    <span class=\"hljs-keyword\">if</span> weather_data:\n        transformed_data = transform_weather_data(weather_data)\n        output_file = <span class=\"hljs-string\">'weather_data.csv'</span>\n        load_data_to_csv(transformed_data, output_file)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f'Data saved to <span class=\"hljs-subst\">{output_file}</span>'</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Failed to fetch data'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    main()\n</code></pre>\n<p><strong>결론</strong></p>\n<p>이번 튜토리얼에서는 Python으로 간단한 ETL(추출, 변환, 적재) 파이프라인을 만들었습니다. API에서 데이터를 가져와 변환한 뒤 CSV 파일로 저장했습니다. 이 기본 프로젝트를 통해 데이터 엔지니어링 및 분석에서 중요한 ETL 프로세스를 이해할 수 있습니다.</p>\n<p><strong>추가 자료</strong></p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>OpenWeatherMap API</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}