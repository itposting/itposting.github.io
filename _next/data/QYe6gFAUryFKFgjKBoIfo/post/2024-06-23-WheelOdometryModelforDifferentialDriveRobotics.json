{"pageProps":{"post":{"title":"차동 구동 로봇을 위한 Wheel Odometry 모델 분석","description":"","date":"2024-06-23 18:35","slug":"2024-06-23-WheelOdometryModelforDifferentialDriveRobotics","content":"\n\n휠 오도메트리란 바퀴의 움직임과 위치를 추정하는 것을 의미합니다. 이는 회전 엔코더(즉, 바퀴의 모터에 부착되어 회전을 측정하는 센서)를 사용하여 이루어집니다. 바퀴로봇이나 자율 주행 차량의 위치 추정에 유용한 기술입니다.\n\n이 글에서는 바퀴 오도메트리 모델에 대해 깊이 다루어 보겠습니다.\n\n# 시나리오 정의\n\n바퀴로봇 기술의 세계는 복잡하고 광활합니다. 마찬가지로, 회전 엔코더 센서에는 다양한 옵션이 있습니다. 따라서 휠 오도메트리 모델을 만들기 전에 우리가 모델링할 시나리오를 정의해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n이 기사에서는 두 개의 바퀴로 이루어진 로봇에 초점을 맞출 것입니다. 우리의 모델에서 로봇의 모양과 실루엣은 중요하지 않습니다. 로봇을 공간에서 한 점으로 취급할 것이기 때문에 이렇게 간단히 모델링할 수 있습니다. 다이어그램에서 우리는 로봇을 간단히 사각형으로 표현할 것입니다. 우리의 로봇에 강제할 유일한 물리적 제약은 두 바퀴가 평행하다는 것입니다. 두 바퀴 사이에 동일한 거리에 위치한 기준점을 정의할 것입니다. 이는 모델의 동력을 간단하게 만들어 줄 것입니다. 또한, 시각화를 위해 로봇의 전방 방향은 삼각형 모양으로 나타낼 것입니다. 따라서, 우리 다이어그램에서 로봇은 다음과 같이 보일 것입니다:\n\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_0.png\" />\n\n이 기사에서는 차동 구동 로봇에 초점을 맞출 것입니다. 차동 구동이란 각각의 바퀴가 독립된 모터를 가지고 있고 서로 독립적으로 작동할 수 있다는 것을 의미합니다. 차동 구동 로봇에서 각 바퀴를 제어하는 모터는 별도로 있으며 각 모터는 서로 다른 속도와 방향(즉, 전진 또는 후진)으로 바퀴를 회전시킬 수 있습니다. 두 바퀴의 속도에 따라 다른 로봇 동작을 볼 수 있습니다. 두 바퀴 모터가 동일한 속도로 동일한 방향으로 움직이면, 로봇은 해당 방향으로 직진할 것입니다 (예: 두 모터가 동일한 속도로 전진 회전 중이면, 로봇은 직진 경로로 전진할 것입니다). 한쪽 바퀴 모터의 속도가 더 빠르면 로봇은 더 빠른 모터 쪽의 반대 방향으로 회전할 것입니다 (예: 오른쪽 모터가 왼쪽 보다 더 빠르게 후진 회전 중이면, 로봇은 후진하고 왼쪽으로 회전할 것입니다).\n\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n로봇이 앞으로도 뒤로도 움직일 수 있고, 좌우 방향은 로봇의 방향에 따라 반전될 수 있으므로 로봇의 방향 움직임을 논의하는 것이 혼란스러울 수 있습니다. 이 잠재적인 혼동을 해소하기 위해 우리는 컴퍼스가 참 북쪽을 가지고 있는 것처럼, 방향을 절대적인 용어로 정의할 것입니다. 이 글에서는 로봇과의 방향을 상대로 설명할 때 고정된 기준 프레임으로 설정해, 로봇의 전방이 항상 앞쪽을 가리키도록 합니다. 이렇게 설정하면 로봇의 방향에 상관없이 앞, 뒤, 좌, 우가 항상 로봇의 전면을 기준으로 동일하게 유지됩니다. 위 다이어그램에서 보듯, 로봇의 방향이 어디를 향하고 있건, 방향은 항상 전방이 향하고 있는 곳을 기준으로 조정됩니다.\n\n우리 오도메트리 모델의 데이터/측정은 로터리 엔코더에서 나옵니다. 일반적으로 로터리 엔코더는 모터에 부착되어 회전에 대한 데이터를 수집합니다. 이 상황에서는 왼쪽 바퀴의 모터에 부착된 하나와 오른쪽 바퀴의 모터에 부착된 다른 하나, 즉 두 개의 로터리 엔코더가 있습니다. 그리고 이러한 로터리 엔코더의 속성을 이용해 각 바퀴가 이동한 거리 등의 정보를 결정할 수 있습니다. 로터리 엔코더가 어떻게 작동하는지 보여주기 위해 예제에 중점을 둘 것입니다.\n\n이 글에서 중점을 둘 로터리 엔코더는 증분식 광학 엔코더입니다. 증분식 광학 엔코더는 발광 다이오드(LED), 슬릿이 있는 디스크, 그리고 포토 센서가 있는 회로를 활용하는 엔코더로, 디스크는 LED와 포토 센서가 있는 회로를 슬릿으로 분리합니다. 모터가 회전할 때, 디스크는 LED에서 빛을 슬릿을 통해 포토 센서로 보내는 방식으로 회전하며, 이는 회로의 전압을 변화시킵니다. 전압이 변하는 횟수는 슬릿을 통과한 횟수에 해당하며, 이는 회전 각도에 대한 정보를 제공합니다 (각 슬릿은 일정량의 회전에 대응됩니다). 이는 각 측정마다 이전 시간 단계에서 얼마나 회전했는지를 알게 해주는 증분식 엔코더가 될 것인데, 이는 절대식 엔코더와 대조적입니다. 절대식 엔코더는 각 측정마다 모터의 정확한 방향이 결정됩니다.\n\n![다이어그램](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_2.png)\n\n<div class=\"content-ad\"></div>\n\n회전 데이터와 함께 엔코더의 정보, 예를 들어 반지름이나 둘레와 같은 정보를 함께 사용하여 바퀴가 이동한 거리를 추정할 수 있습니다. 각 홈은 회전 각도를 나타내며, 특정 시간 간격 사이의 회전량을 알 수 있도록 통과한 홈의 수를 알면 됩니다. 광학 엔코더의 경우, 모든 홈이 동일한 간격으로 배치되어 있으므로, 통과한 홈의 수를 단일 홈이 나타내는 회전량으로 곱하면 시간 간격 사이의 총 회전 각도를 얻을 수 있습니다. 회전 각도를 결정한 후에는 엔코더의 둘레와 곱하여 바퀴가 이동한 거리를 구할 수 있습니다.\n\n저희의 측정 모델은 사용하는 엔코더에 의존하지 않습니다. 사실, 거리를 결정할 수 있다면 어떤 유형의 엔코더도 작동할 것입니다. 점진적 광학 엔코더의 경우, 엔코더 (즉, 그 차원)의 특성과 함께 수집된 회전 데이터를 사용하여 엔코더 측정치를 거리로 변환할 수 있습니다. 저희는 이 문서에 직관적인 성질을 갖고 있는 점진적 광학 엔코더를 선택했습니다. 그러나 다른 유형의 엔코더에서 거리를 추출할 수도 있지만, 절차가 다를 수 있고, 이러한 엔코더는 이 문서의 측정 모델에 적합할 것입니다.\n\n요약하면, 이 문서의 바퀴 측정 모델은 두 바퀴가 평행하게 배치되고 로봇이 두 바퀴 중간에 위치한 단일 참조점으로 나타내는 차동 구동 로봇을 위한 것입니다. 로봇을 점으로 취급하고 로봇의 물리적 특성을 무시하며 로봇의 전방 방향과 관련하여 방향을 정의할 것입니다. 엔코더의 경우, 각 시간 간격마다 바퀴가 이동한 거리를 추출할 수 있다면 어떤 것이든 작동할 것입니다. 엔코더의 직관을 구축하기 위해 임의적으로 점진적 광학 엔코더를 살펴봤습니다.\n\n# 바퀴 측정 모델\n\n<div class=\"content-ad\"></div>\n\n저희 오도메트리 모델의 목표는 로봇의 위치와 방향을 추정하는 것입니다. 이를 달성하기 위해 회전 엔코더에서 얻는 데이터, 로봇의 치수, 그리고 기하학을 활용할 것입니다. 이전에 설명한대로, 엔코더는 각 바퀴가 각 시간 단계에서 이동한 거리에 대한 정보를 제공할 것입니다. 로봇의 치수를 사용할 때, 로봇을 한 점으로 표현하기 때문에 많이 필요하지 않습니다. 필요한 유일한 치수는 좌우 바퀴로부터 점까지의 거리입니다. 두 바퀴 사이의 거리를 절반으로 나누어 점이 두 바퀴로부터 동일한 거리에 위치하도록 하였으므로, 하나의 숫자만 추적하면 됩니다.\n\n이제 이러한 아이디어를 추적하기 위해 몇 가지 변수를 정의해 봅시다:\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_3.png)\n\n첫 두 변수는 특정 시간 단계에서 각 바퀴가 이동한 거리를 대응합니다. 이 정보는 회전 엔코더에서 얻을 것입니다. 세 번째 변수는 두 바퀴 사이의 거리를 측정하고, 점이 두 바퀴로부터 동일한 거리에 위치하므로 해당 거리를 반으로 나누어 파생될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_4](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_4.png)\n\n로봇의 운동 모델을 정의해 봅시다. 로봇의 운동은 항상 어느 호를 따라 이동한다고 가정합니다. 수학적으로, 이것은 어떤 반지름의 원 위를 이동하는 것을 의미합니다.\n\n![2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_5](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_5.png)\n\n원 위의 곡선으로 운동을 모델링하는 동기는 거리와 방향 각도를 해결하기 위해 다양한 기하학적 속성을 사용할 수 있기 때문입니다.\n\n\n<div class=\"content-ad\"></div>\n\n위 다이어그램에서 모델은 왼쪽으로 전진하는 모습을 보여줍니다. 그럼 직진, 오른쪽, 그리고 후진은 어떨까요? 다행히도, 우리 모델은 여전히 유효합니다 - 그 이유를 살펴봅시다.\n\n우리 모델에서 직진은 매우 작은 각도와/또는 매우 큰 반지름을 가진 곡선에 해당할 것입니다. 각도가 더 작아지거나 반지름이 증가함에 따라 곡선의 곡률이 감소하고 곡선은 더 평평해집니다. 매우 작은 각도와/또는 큰 반지름에서는 그 곡선이 직선처럼 보일 것입니다. 따라서 이 모델로 직진 운동을 포괄할 수 있습니다.\n\n오른쪽 운동의 경우, 위 다이어그램을 수평으로 뒤집어 모델링할 수 있다는 점에 주목해보세요. 이는 대칭성을 보여줍니다 - 실제로, 뒤집힌 버전을 유도한다면, 왼쪽 바퀴에 관련된 변수/값이 오른쪽 바퀴에 관련된 변수/값으로 뒤바뀌지만 동일한 방정식을 얻을 것입니다. 결과적으로, 모델에서의 방향성 추정값은 부호가 뒤바뀔 것이지만 (즉, 양수에서 음수로, 음수에서 양수로), 거리 추정값은 동일하게 유지될 것입니다. 각도는 양 방향으로 정의되며 부호 뒤집파와 유사한 대칭성을 나타내므로 실제로 이 모델로 오른쪽 운동을 포괄할 수 있습니다.\n\n후진 운동을 포함하는 논의는 비슷한 형태입니다. 후진 운동은 단순히 음의 방향으로 이동하는 거리입니다. 따라서 우리는 음의 거리값을 통해 후진 운동을 포괄할 수 있을 것입니다.\n\n<div class=\"content-ad\"></div>\n\n지금 이렇게 곡선/호를 사용하여 로봇 움직임을 포착하는 것이 합리적임을 확인했으니, 이제 모델 뒤에 있는 기하학을 살펴봅시다. \n\n첫 번째 기하학적 개념은 각도에 대한 단위입니다. 각도는 일반적으로 도(degrees) 또는 래디언(radians)으로 측정됩니다. 도의 경우, 원을 360개의 동일한 부분으로 나누고 각 잘린 부분의 각도가 1도의 크기입니다. 래디언의 경우, 호의 길이로 정의되며, 단위 원(반지름이 1인 원)의 곡선에 대한 호의 길이와 각도를 관계짓는다 - 바로 호의 길이에 해당하는 각도를 나타내는 1 래디안입니다.\n\n래디언과 각도 간 변환하는 공식과 표가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_6.png)\n\n삼각함수 및 기하학 속성 정의에는 각도의 단위로 라디안과 도를 모두 사용할 수 있습니다. 이 글에서는 라디안과 도를 모두 활용할 것입니다. 각도의 기본 단위는 라디안이며, 다르게 명시되지 않는 한 항상 라디안이 사용됩니다.\n\n이제 각도의 단위에 대한 우리의 맥락을 알게 되었으므로, 휠 오도메트리 모델에서 핵심 공식 중 하나는 호의 길이 공식(라디안 사용)일 것입니다:\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_7.png)\n\n\n<div class=\"content-ad\"></div>\n\n\n![Image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_8.png)\n\nThe last few geometric ideas we’ll state are:\n\n- The sum of all angles on a straight line is 180°\n\n![Image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_9.png)\n\n\n<div class=\"content-ad\"></div>\n\n- 삼각형의 모든 각의 합은 180°입니다\n\n![Triangle](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_10.png)\n\n- 원에 대한 접선은 원과 접촉점에서 수직이며(즉, 90° 각도), 접선과 현의 각도는 현이 만드는 호의 각도의 절반입니다\n\n![Circle](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_11.png)\n\n<div class=\"content-ad\"></div>\n\n지금은 우리의 오도메트리 모델을 알려진 변수와 관심 변수로 주석 달기를 시작해 봅시다. 혼잡을 피하기 위해 현재 시간 아래 첨자를 삭제하고 오도메트리 모델의 핵심 관계를 찾아가는 동안 작업해 보겠습니다. 나중에는 흐름 분석에 중요해지는 변수들로 알아봅시다.\n\n![이미지1](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_12.png)\n\n![이미지2](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_13.png)\n\n첫 세 가지 변수는 직접 측정할 수 있습니다(첫 두 변수는 엔코더를 사용하고 세 번째 변수는 자를 이용할 수 있습니다). 마지막 세 변수는 직접 측정할 수 없지만, 대신 이러한 변수들을 측정 가능한 양과 관련시키기 위해 기하학을 사용해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n먼저 호 길이 공식을 사용하여 시작해 보겠습니다. 왼쪽 바퀴, 오른쪽 바퀴 및 참조점의 경로는 호입니다. 이들은 모두 같은 각도를 공유하며, 각각의 반지름은 참조점을 포함하는 곡선의 반지름과 참조점과 바퀴 사이의 거리와 관련하여 표현할 수 있습니다.\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_14.png)\n\n이제 소거법을 사용하여 방정식 체계를 풀어 회전 각도의 변화를 해결해 봅시다.\n\n- 곱셈 분배\n\n<div class=\"content-ad\"></div>\n\n<table>\n<tr>\n<td><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_15.png\" /></td>\n</tr>\n</table>\n\n- 좌측 바퀴 거리 방정식의 양쪽을 음수로 곱하기\n\n<table>\n<tr>\n<td><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_16.png\" /></td>\n</tr>\n</table>\n\n- 변수 소거와 대수학\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_17.png\" />\n\n그래서, 우리는 측정 가능한 양에 대한 회전 각도의 변화를 해결할 수 있었고 다음의 관계를 얻었습니다:\n\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_18.png\" />\n\n이제 방정식을 재배열하고 우리가 알고 있는 것을 대입하여 참조점을 포함하는 곡선의 반지름을 구해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n- 참조점을 포함하는 곡선의 반지름이 한 쪽에 있는 방정식을 재배열하세요\n\n![그림](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_19.png)\n\n- 우리는 방정식을 뒤집어서 원하는 해를 풀고자 하는 관심 대상의 양이 자연스럽게 읽히도록 오른쪽에 오도록 할 것입니다\n\n![그림](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_20.png)\n\n<div class=\"content-ad\"></div>\n\n곡선의 반지름을 측정 가능한 양의 관점에서 구했습니다. 이제 참조점이 이동한 거리로 넘어가봅시다. 우리가 한 결과를 대입하고 간단히 정리하기만 하면 됩니다.\n\n![이미지](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_21.png)\n\n측정 가능한 양의 관점에서 모든 변수를 구했습니다. 로봇의 위치와 방향에 관심을 가지고 있으므로, 주요 변수는 참조점이 이동한 거리와 회전 각도의 변화일 것입니다. 참조점이 이동한 거리는 위치를 알려주고, 회전 각도의 변화는 방향을 알려줍니다. 참조점을 포함하는 곡선의 반지름은 유도에 유용하지만 더 이상 필요하지 않습니다. 그래서 지금까지 우리 모델에서 중요한 결과는 다음과 같습니다:\n\n![이미지](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_22.png)\n\n<div class=\"content-ad\"></div>\n\n지금까지의 결과를 통해 한 시간 단계에서 다음 시간 단계로의 거리 및 방향 변화를 결정할 수 있습니다. 결과는 시간 간의 상대적인 운동을 설명합니다.\n\n그러나 로봇의 방향이나 새로운 방향을 알고 싶다면 해당 정보가 누락되어 있습니다. 우리는 이동한 거리를 알고 있지만 방향은 알지 못 합니다. 우리는 방향 각도가 얼마나 바뀌었는지 알고 있지만 새로운 방향 각도는 알 수 없습니다. 이는 우리 오도메트리 모델의 다음 부분을 동기부여할 것입니다.\n\n이동 거리의 방향을 결정하려고 시작해봅시다. 우리 모델을 단순화하기 위해 참조점이 이동한 거리를 곡선이 아닌 선으로 표현할 것입니다.\n\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_23.png\" />\n\n<div class=\"content-ad\"></div>\n\n일반적으로 휠 엔코더를 사용한 휠 오도미터에서 데이터 샘플링이 매우 높기 때문에 이러한 단순화를 할 수 있습니다. 이는 엔코더가 데이터를 매우 자주 수집할 수 있어 측정 간의 시간 창이 매우 작다는 것을 의미합니다. 시간 창이 매우 작기 때문에 각 시간 단계에서 캡처된 운동량도 매우 작을 것입니다. 모델링할 때 이는 호의 곡률이 매우 작아져 직선과 유사하다는 것을 의미합니다. 따라서 거리를 이제 직선으로 나타내는 것은 안전한 가정이며 단순화입니다.\n\n이 거리가 이동하는 각도에 관심이 있습니다.\n\n![image 1](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_24.png)\n\n![image 2](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_25.png)\n\n<div class=\"content-ad\"></div>\n\n이 각도는 삼각형의 속성, 즉 삼각형의 각이 180°가 되고, 원에 대한 접선의 성질, 즉 선분과 원이 직교하기 때문에 접하는 지점에서 각이 90°가 된다는 것을 활용하여 구할 수 있어요. 참고: 로봇 몸체를 제거하여 혼란을 줄였어요.\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_26.png)\n\n방정식을 세우고 문제를 해결할 수 있어요. 참고: 이 각도는 도입니다(일반 대중이 각도를 더 익숙하게 다루기 때문에), 하지만 라디안으로 문제를 해결할 수도 있었어요 - 정답이 달라지지는 않았을 거예요.\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_27.png)\n\n<div class=\"content-ad\"></div>\n\n좋아요 — 이제 거리의 각도를 이전에 해결한 변수로 풀었어요.\n\n이제 새로운 로봇의 방향을 풀기 위해 주목해봐요.\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_28.png)\n\n이전과 마찬가지로 기하학 원리를 사용해서 새로운 방향의 각도를 풀어볼거에요. 이것이 바로 우리 다이어그램이에요 (로봇 본문은 제거해서 혼란을 줄였어요):\n\n<div class=\"content-ad\"></div>\n\nMarkdown 형식으로 테이블 태그를 변경하십시오.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_31.png)\n\n이제 직선 위의 각도들은 180°가 되어야 한다는 사실을 이용하여 문제를 해결할 수 있습니다.\n\n![이미지](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_32.png)\n\n따라서, 우리의 현재 오도메트리 모델은 다음과 같이 보입니다 (덜 중요하거나 중간 변수들을 걸러냄):\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_33.png)\n\n로봇이 얼마나 멀리 이동했는지, 이동한 각도, 회전 각도의 변화 및 서로 다른 시간 단계 간의 방향 각도를 알게 되었습니다.\n\n# 휠 오도메트리 절대 운동\n\n이전 섹션의 결과를 토대로 상대 운동(즉, 한 시간 단계에서 다음으로 이동하는 것)을 추정할 수 있습니다. 그러나 절대 운동을 설명하는 오도메트리 모델을 확장할 수 있습니다. 절대 운동에서는 로봇이 탐색하는 환경을 좌표 평면 시스템(일반적으로 x 및 y 방향으로)으로 정의할 것입니다. 이 좌표 시스템에서 로봇의 운동은 로봇의 절대 위치를 나타내는 좌표에 의해 포착될 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n방위에 대해 정의할 수 있는 것은 x-축에서의 각도입니다. 로봇이 양의 x-축 방향을 향할 때, 방위 각도는 0°입니다. 로봇이 돌아서 제1 사분면 어딘가를 향할 때 방위 각도는 0°에서 90°까지입니다. 로봇이 제2 사분면 어딘가를 향할 때 방위 각도는 90°에서 180°까지입니다. 로봇이 제3 사분면 어딘가를 향할 때 방위 각도는 180°에서 270°까지입니다. 그리고 로봇이 제4 사분면 어딘가를 향할 때 방위 각도는 270°에서 360°까지입니다. 이는 주변에 도(도 및 라디안을 가지고 있고 중앙에 사분면 레이블이 있는)을 가진 그래픽을 통해 시각화할 수 있습니다:\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_34.png)\n\n상대적 방향과의 주요 차이점은 절대 방위가 항상 동일한 기준 프레임, 즉 고정된 좌표 평면의 양의 x-축에서의 각도에서 오는 것이라는 것입니다. 반면에 상대적 방향은 관점 / 기준 프레임에 따라 달라질 수 있습니다.\n\n지금까지 저희의 오도메트리 모델은 초기 위치가 왼쪽을 향하도록 그려져 있었습니다. 이는 현재까지 저희의 오도메트리 모델에서 로봇이 항상 제로 라디안의 절대 방위로 시작했다는 의미입니다(기존 방향을 고려할 필요가 없었습니다).\n\n<div class=\"content-ad\"></div>\n\n로봇이 다른 방향에서 시작할 때 어떻게 되는지 궁금하셨군요? 상대 운동에 대한 모든 작업은 그대로 유지되지만, 초기 방향을 고려하여 완전한 위치와 방향을 올바르게 계산할 수 있도록 조정해야 합니다.\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_35.png)\n\n왜 초기 방향이 변경되더라도 모든 상대 운동이 여전히 유지되는지 궁금할 수 있습니다. 그 이유는 관점 때문입니다. 위 예시를 들어보겠습니다. 이미 존재하는 좌표계를 회전시켜 초기 방향을 제로 라디안(즉, x축이 로봇의 현재 방향과 평행하도록)으로 만들면 어떻게 될까요? 이전에 논의한 상대 운동에 대한 모든 작업을 적용할 수 있을 것입니다. 좌표계를 회전시키는 것은 기본적으로 아무것도 변경하지 않습니다. 단지 관점을 바꿔서 볼 뿐입니다.\n\n사실, 절대 운동 모델을 얻는 한 가지 전략은 회전하고 다시 원래 좌표계로 변환하는 등 각각의 새로운 좌표계를 계속 생성하는 것입니다. 이러한 좌표 변환 방법은 좌표계를 회전시키는 (회전) 행렬을 사용하여 더 복잡하며 고급 기술입니다.\n\n<div class=\"content-ad\"></div>\n\n그러나 이것은 기하학에 대한 멋진 관점을 제공합니다. 우리의 로봇은 일부 절대 방향으로 시작합니다. 로봇이 방향이 0 라디안이되도록 좌표계를 수정하기로 결정하면, 기존 좌표 평면을 절대 방향 각도만큼 회전해야 합니다. 이는 우리가 절대 방향을 양의 x축에서의 각도로 정의했기 때문입니다. 기본적으로 우리는 절대 방향 각도로 좌표 평면을 조정하고 있습니다. 전체 좌표 평면을 이동하는 대신, 아래에서 설명하는 대로 상대적 방향 계산에 이를 추가할 수 있습니다:\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_36.png)\n\n이 다이어그램에서 시간 t에서의 오도메트리 모델은 이전 시간 단계의 절대 방향 각도를 추가할 것입니다. 이전 시간 단계의 방향을 추가해도 기준점의 이동 거리나 회전 각도 변경에는 영향을 미치지 않습니다. 왜냐하면 이전에 유도한 공식이 방향 각도에 의존하지 않고 (이동한 바퀴 거리에만 의존하기 때문에)입니다. 변경되는 것은 로봇의 방향입니다. 시간 단계 간에 상대적인 것에서 좌표 평면 상의 절대 방향으로 변경됩니다. 따라서 어떤 시간 단계에서도 절대 방향 각도는 다음과 같이 정의될 수 있습니다:\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_37.png)\n\n<div class=\"content-ad\"></div>\n\n절대 운동을 다룰 때, 로봇이 각 시간 단계마다 좌표점을 가지게 됩니다. 좌표 위치가 업데이트되는 방법은 삼각함수의 특성을 사용하는 것인데, 즉 각의 코싸인이 이웃변을 가각변으로 나눈 값이고 사인이 이웃변을 빗변으로 나눈 값이라는 것입니다. 참조점이 이동한 거리를 빗변으로 하고 이전 시간 단계의 방향 각도 및 이동으로 인한 각도를 더하여 x와 y 방향으로 이동한 거리를 계산할 수 있습니다.\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_38.png)\n\n이전 시간 단계의 좌표에 x와 y 거리를 더함으로써 로봇의 새로운 좌표 위치를 결정할 수 있습니다. 이러한 방정식을 사용하여 역학을 설명할 수 있습니다:\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_39.png)\n\n<div class=\"content-ad\"></div>\n\n현재 시간의 위치는 이전 시간 단계의 위치와 각도에 따라 결정되며 현재 시간 단계에서 회전 각도의 변화에 기반합니다. 하나의 방정식에서 두 가지 다른 시간 단계의 양을 사용하는 것을 감안하면 차이를 명확히 하기 위해 다시 시간 첨자를 사용하는 것이 좋습니다.\n\n# 결론\n\n우리의 인코더는 각 바퀴가 이동한 거리를 수집하고, 바퀴와 참조점 사이의 거리를 측정할 수 있습니다. 호의 길이 공식을 사용하여, 시스템의 방정식을 얻었고, 우리는 거리 이동 및 시간 단계 사이의 회전 각도 변화(라디안)를 구하기 위해 이를 해결했습니다.\n\n![image](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_40.png)\n\n<div class=\"content-ad\"></div>\n\n우리는 휠 인코더로 데이터를 빈번하게 수집하기 때문에 우리의 이동 거리를 호선 대신 선으로 나타낼 수 있다는 것을 깨달았어요. 높은 데이터 수집 빈도로 인해 곡선이 더 직선처럼 동작하고 보이게 됩니다. 그런 다음, 각도의 기하학을 사용하여 우리는 움직임에 의해 발생하는 방향 각도(라디안 단위)와 최종적인 상대적 방향을 찾았어요.\n\n그 후에, 우리는 절대 위치 및 방향에 대한 모델을 확장했어요. 여기서 우리는 정의된 좌표 평면이 있는 절대 시스템에서 우리의 오도메트리 모델을 조정해야 해요. 절대 시스템에서는 이전 시간 단계의 절대 방향 각도를 고려하여 오도메트리 모델을 조정해야 해요. 그런 다음, 우리는 삼각함수 관계식을 사용하여 새로운 절대 방향 각도(라디안)와 좌표 위치를 결정할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n절대 운동에 대해, x 및 y 구성 요소로 이뤄진 좌표 위치와 절대 방향 각도(라디안 단위)가 있습니다. 절대 운동에 대한 오도메트리 모델을 정의하는 세 가지 방정식은 다음과 같습니다:\n\n![equation 1](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_43.png)\n\n또한 일반적으로 방정식을 벡터 형태로 표현하는 것이 일반적입니다:\n\n![equation 2](/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_44.png)\n\n<div class=\"content-ad\"></div>\n\n이 글에서 우리는 두 바퀴 차동 구동 로봇을 위한 오도메트리 모델을 개발했습니다. 이 모델을 사용하면 로터리 엔코더에서 수집한 데이터를 사용하여 위치와 방향을 추적할 수 있습니다. 로터리 엔코더는 매우 저렴하고 데이터 샘플링이 높기 때문에 휠 로보틱스에서 센서로 자주 사용됩니다. 그러나 엔코더를 사용하는 데 있어서의 한 가지 어려움은 잡음과 측정 오차입니다. 우리 모델을 계속 개발하려면 다음 단계로 우리의 측정 값과 함께 통계적 불확실성과 오차를 고려하는 것이 좋은 방향입니다.","ogImage":{"url":"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_0.png"},"coverImage":"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_0.png","tag":["Tech"],"readingTime":16},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>휠 오도메트리란 바퀴의 움직임과 위치를 추정하는 것을 의미합니다. 이는 회전 엔코더(즉, 바퀴의 모터에 부착되어 회전을 측정하는 센서)를 사용하여 이루어집니다. 바퀴로봇이나 자율 주행 차량의 위치 추정에 유용한 기술입니다.</p>\n<p>이 글에서는 바퀴 오도메트리 모델에 대해 깊이 다루어 보겠습니다.</p>\n<h1>시나리오 정의</h1>\n<p>바퀴로봇 기술의 세계는 복잡하고 광활합니다. 마찬가지로, 회전 엔코더 센서에는 다양한 옵션이 있습니다. 따라서 휠 오도메트리 모델을 만들기 전에 우리가 모델링할 시나리오를 정의해 봅시다.</p>\n<div class=\"content-ad\"></div>\n<p>이 기사에서는 두 개의 바퀴로 이루어진 로봇에 초점을 맞출 것입니다. 우리의 모델에서 로봇의 모양과 실루엣은 중요하지 않습니다. 로봇을 공간에서 한 점으로 취급할 것이기 때문에 이렇게 간단히 모델링할 수 있습니다. 다이어그램에서 우리는 로봇을 간단히 사각형으로 표현할 것입니다. 우리의 로봇에 강제할 유일한 물리적 제약은 두 바퀴가 평행하다는 것입니다. 두 바퀴 사이에 동일한 거리에 위치한 기준점을 정의할 것입니다. 이는 모델의 동력을 간단하게 만들어 줄 것입니다. 또한, 시각화를 위해 로봇의 전방 방향은 삼각형 모양으로 나타낼 것입니다. 따라서, 우리 다이어그램에서 로봇은 다음과 같이 보일 것입니다:</p>\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_0.png\">\n<p>이 기사에서는 차동 구동 로봇에 초점을 맞출 것입니다. 차동 구동이란 각각의 바퀴가 독립된 모터를 가지고 있고 서로 독립적으로 작동할 수 있다는 것을 의미합니다. 차동 구동 로봇에서 각 바퀴를 제어하는 모터는 별도로 있으며 각 모터는 서로 다른 속도와 방향(즉, 전진 또는 후진)으로 바퀴를 회전시킬 수 있습니다. 두 바퀴의 속도에 따라 다른 로봇 동작을 볼 수 있습니다. 두 바퀴 모터가 동일한 속도로 동일한 방향으로 움직이면, 로봇은 해당 방향으로 직진할 것입니다 (예: 두 모터가 동일한 속도로 전진 회전 중이면, 로봇은 직진 경로로 전진할 것입니다). 한쪽 바퀴 모터의 속도가 더 빠르면 로봇은 더 빠른 모터 쪽의 반대 방향으로 회전할 것입니다 (예: 오른쪽 모터가 왼쪽 보다 더 빠르게 후진 회전 중이면, 로봇은 후진하고 왼쪽으로 회전할 것입니다).</p>\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_1.png\">\n<div class=\"content-ad\"></div>\n<p>로봇이 앞으로도 뒤로도 움직일 수 있고, 좌우 방향은 로봇의 방향에 따라 반전될 수 있으므로 로봇의 방향 움직임을 논의하는 것이 혼란스러울 수 있습니다. 이 잠재적인 혼동을 해소하기 위해 우리는 컴퍼스가 참 북쪽을 가지고 있는 것처럼, 방향을 절대적인 용어로 정의할 것입니다. 이 글에서는 로봇과의 방향을 상대로 설명할 때 고정된 기준 프레임으로 설정해, 로봇의 전방이 항상 앞쪽을 가리키도록 합니다. 이렇게 설정하면 로봇의 방향에 상관없이 앞, 뒤, 좌, 우가 항상 로봇의 전면을 기준으로 동일하게 유지됩니다. 위 다이어그램에서 보듯, 로봇의 방향이 어디를 향하고 있건, 방향은 항상 전방이 향하고 있는 곳을 기준으로 조정됩니다.</p>\n<p>우리 오도메트리 모델의 데이터/측정은 로터리 엔코더에서 나옵니다. 일반적으로 로터리 엔코더는 모터에 부착되어 회전에 대한 데이터를 수집합니다. 이 상황에서는 왼쪽 바퀴의 모터에 부착된 하나와 오른쪽 바퀴의 모터에 부착된 다른 하나, 즉 두 개의 로터리 엔코더가 있습니다. 그리고 이러한 로터리 엔코더의 속성을 이용해 각 바퀴가 이동한 거리 등의 정보를 결정할 수 있습니다. 로터리 엔코더가 어떻게 작동하는지 보여주기 위해 예제에 중점을 둘 것입니다.</p>\n<p>이 글에서 중점을 둘 로터리 엔코더는 증분식 광학 엔코더입니다. 증분식 광학 엔코더는 발광 다이오드(LED), 슬릿이 있는 디스크, 그리고 포토 센서가 있는 회로를 활용하는 엔코더로, 디스크는 LED와 포토 센서가 있는 회로를 슬릿으로 분리합니다. 모터가 회전할 때, 디스크는 LED에서 빛을 슬릿을 통해 포토 센서로 보내는 방식으로 회전하며, 이는 회로의 전압을 변화시킵니다. 전압이 변하는 횟수는 슬릿을 통과한 횟수에 해당하며, 이는 회전 각도에 대한 정보를 제공합니다 (각 슬릿은 일정량의 회전에 대응됩니다). 이는 각 측정마다 이전 시간 단계에서 얼마나 회전했는지를 알게 해주는 증분식 엔코더가 될 것인데, 이는 절대식 엔코더와 대조적입니다. 절대식 엔코더는 각 측정마다 모터의 정확한 방향이 결정됩니다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_2.png\" alt=\"다이어그램\"></p>\n<div class=\"content-ad\"></div>\n<p>회전 데이터와 함께 엔코더의 정보, 예를 들어 반지름이나 둘레와 같은 정보를 함께 사용하여 바퀴가 이동한 거리를 추정할 수 있습니다. 각 홈은 회전 각도를 나타내며, 특정 시간 간격 사이의 회전량을 알 수 있도록 통과한 홈의 수를 알면 됩니다. 광학 엔코더의 경우, 모든 홈이 동일한 간격으로 배치되어 있으므로, 통과한 홈의 수를 단일 홈이 나타내는 회전량으로 곱하면 시간 간격 사이의 총 회전 각도를 얻을 수 있습니다. 회전 각도를 결정한 후에는 엔코더의 둘레와 곱하여 바퀴가 이동한 거리를 구할 수 있습니다.</p>\n<p>저희의 측정 모델은 사용하는 엔코더에 의존하지 않습니다. 사실, 거리를 결정할 수 있다면 어떤 유형의 엔코더도 작동할 것입니다. 점진적 광학 엔코더의 경우, 엔코더 (즉, 그 차원)의 특성과 함께 수집된 회전 데이터를 사용하여 엔코더 측정치를 거리로 변환할 수 있습니다. 저희는 이 문서에 직관적인 성질을 갖고 있는 점진적 광학 엔코더를 선택했습니다. 그러나 다른 유형의 엔코더에서 거리를 추출할 수도 있지만, 절차가 다를 수 있고, 이러한 엔코더는 이 문서의 측정 모델에 적합할 것입니다.</p>\n<p>요약하면, 이 문서의 바퀴 측정 모델은 두 바퀴가 평행하게 배치되고 로봇이 두 바퀴 중간에 위치한 단일 참조점으로 나타내는 차동 구동 로봇을 위한 것입니다. 로봇을 점으로 취급하고 로봇의 물리적 특성을 무시하며 로봇의 전방 방향과 관련하여 방향을 정의할 것입니다. 엔코더의 경우, 각 시간 간격마다 바퀴가 이동한 거리를 추출할 수 있다면 어떤 것이든 작동할 것입니다. 엔코더의 직관을 구축하기 위해 임의적으로 점진적 광학 엔코더를 살펴봤습니다.</p>\n<h1>바퀴 측정 모델</h1>\n<div class=\"content-ad\"></div>\n<p>저희 오도메트리 모델의 목표는 로봇의 위치와 방향을 추정하는 것입니다. 이를 달성하기 위해 회전 엔코더에서 얻는 데이터, 로봇의 치수, 그리고 기하학을 활용할 것입니다. 이전에 설명한대로, 엔코더는 각 바퀴가 각 시간 단계에서 이동한 거리에 대한 정보를 제공할 것입니다. 로봇의 치수를 사용할 때, 로봇을 한 점으로 표현하기 때문에 많이 필요하지 않습니다. 필요한 유일한 치수는 좌우 바퀴로부터 점까지의 거리입니다. 두 바퀴 사이의 거리를 절반으로 나누어 점이 두 바퀴로부터 동일한 거리에 위치하도록 하였으므로, 하나의 숫자만 추적하면 됩니다.</p>\n<p>이제 이러한 아이디어를 추적하기 위해 몇 가지 변수를 정의해 봅시다:</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_3.png\" alt=\"image\"></p>\n<p>첫 두 변수는 특정 시간 단계에서 각 바퀴가 이동한 거리를 대응합니다. 이 정보는 회전 엔코더에서 얻을 것입니다. 세 번째 변수는 두 바퀴 사이의 거리를 측정하고, 점이 두 바퀴로부터 동일한 거리에 위치하므로 해당 거리를 반으로 나누어 파생될 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_4.png\" alt=\"2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_4\"></p>\n<p>로봇의 운동 모델을 정의해 봅시다. 로봇의 운동은 항상 어느 호를 따라 이동한다고 가정합니다. 수학적으로, 이것은 어떤 반지름의 원 위를 이동하는 것을 의미합니다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_5.png\" alt=\"2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_5\"></p>\n<p>원 위의 곡선으로 운동을 모델링하는 동기는 거리와 방향 각도를 해결하기 위해 다양한 기하학적 속성을 사용할 수 있기 때문입니다.</p>\n<div class=\"content-ad\"></div>\n<p>위 다이어그램에서 모델은 왼쪽으로 전진하는 모습을 보여줍니다. 그럼 직진, 오른쪽, 그리고 후진은 어떨까요? 다행히도, 우리 모델은 여전히 유효합니다 - 그 이유를 살펴봅시다.</p>\n<p>우리 모델에서 직진은 매우 작은 각도와/또는 매우 큰 반지름을 가진 곡선에 해당할 것입니다. 각도가 더 작아지거나 반지름이 증가함에 따라 곡선의 곡률이 감소하고 곡선은 더 평평해집니다. 매우 작은 각도와/또는 큰 반지름에서는 그 곡선이 직선처럼 보일 것입니다. 따라서 이 모델로 직진 운동을 포괄할 수 있습니다.</p>\n<p>오른쪽 운동의 경우, 위 다이어그램을 수평으로 뒤집어 모델링할 수 있다는 점에 주목해보세요. 이는 대칭성을 보여줍니다 - 실제로, 뒤집힌 버전을 유도한다면, 왼쪽 바퀴에 관련된 변수/값이 오른쪽 바퀴에 관련된 변수/값으로 뒤바뀌지만 동일한 방정식을 얻을 것입니다. 결과적으로, 모델에서의 방향성 추정값은 부호가 뒤바뀔 것이지만 (즉, 양수에서 음수로, 음수에서 양수로), 거리 추정값은 동일하게 유지될 것입니다. 각도는 양 방향으로 정의되며 부호 뒤집파와 유사한 대칭성을 나타내므로 실제로 이 모델로 오른쪽 운동을 포괄할 수 있습니다.</p>\n<p>후진 운동을 포함하는 논의는 비슷한 형태입니다. 후진 운동은 단순히 음의 방향으로 이동하는 거리입니다. 따라서 우리는 음의 거리값을 통해 후진 운동을 포괄할 수 있을 것입니다.</p>\n<div class=\"content-ad\"></div>\n<p>지금 이렇게 곡선/호를 사용하여 로봇 움직임을 포착하는 것이 합리적임을 확인했으니, 이제 모델 뒤에 있는 기하학을 살펴봅시다.</p>\n<p>첫 번째 기하학적 개념은 각도에 대한 단위입니다. 각도는 일반적으로 도(degrees) 또는 래디언(radians)으로 측정됩니다. 도의 경우, 원을 360개의 동일한 부분으로 나누고 각 잘린 부분의 각도가 1도의 크기입니다. 래디언의 경우, 호의 길이로 정의되며, 단위 원(반지름이 1인 원)의 곡선에 대한 호의 길이와 각도를 관계짓는다 - 바로 호의 길이에 해당하는 각도를 나타내는 1 래디안입니다.</p>\n<p>래디언과 각도 간 변환하는 공식과 표가 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_6.png\" alt=\"image\"></p>\n<p>삼각함수 및 기하학 속성 정의에는 각도의 단위로 라디안과 도를 모두 사용할 수 있습니다. 이 글에서는 라디안과 도를 모두 활용할 것입니다. 각도의 기본 단위는 라디안이며, 다르게 명시되지 않는 한 항상 라디안이 사용됩니다.</p>\n<p>이제 각도의 단위에 대한 우리의 맥락을 알게 되었으므로, 휠 오도메트리 모델에서 핵심 공식 중 하나는 호의 길이 공식(라디안 사용)일 것입니다:</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_7.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_8.png\" alt=\"Image\"></p>\n<p>The last few geometric ideas we’ll state are:</p>\n<ul>\n<li>The sum of all angles on a straight line is 180°</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_9.png\" alt=\"Image\"></p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>삼각형의 모든 각의 합은 180°입니다</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_10.png\" alt=\"Triangle\"></p>\n<ul>\n<li>원에 대한 접선은 원과 접촉점에서 수직이며(즉, 90° 각도), 접선과 현의 각도는 현이 만드는 호의 각도의 절반입니다</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_11.png\" alt=\"Circle\"></p>\n<div class=\"content-ad\"></div>\n<p>지금은 우리의 오도메트리 모델을 알려진 변수와 관심 변수로 주석 달기를 시작해 봅시다. 혼잡을 피하기 위해 현재 시간 아래 첨자를 삭제하고 오도메트리 모델의 핵심 관계를 찾아가는 동안 작업해 보겠습니다. 나중에는 흐름 분석에 중요해지는 변수들로 알아봅시다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_12.png\" alt=\"이미지1\"></p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_13.png\" alt=\"이미지2\"></p>\n<p>첫 세 가지 변수는 직접 측정할 수 있습니다(첫 두 변수는 엔코더를 사용하고 세 번째 변수는 자를 이용할 수 있습니다). 마지막 세 변수는 직접 측정할 수 없지만, 대신 이러한 변수들을 측정 가능한 양과 관련시키기 위해 기하학을 사용해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<p>먼저 호 길이 공식을 사용하여 시작해 보겠습니다. 왼쪽 바퀴, 오른쪽 바퀴 및 참조점의 경로는 호입니다. 이들은 모두 같은 각도를 공유하며, 각각의 반지름은 참조점을 포함하는 곡선의 반지름과 참조점과 바퀴 사이의 거리와 관련하여 표현할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_14.png\" alt=\"image\"></p>\n<p>이제 소거법을 사용하여 방정식 체계를 풀어 회전 각도의 변화를 해결해 봅시다.</p>\n<ul>\n<li>곱셈 분배</li>\n</ul>\n<div class=\"content-ad\"></div>\n<table>\n<tbody><tr>\n<td><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_15.png\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>좌측 바퀴 거리 방정식의 양쪽을 음수로 곱하기</li>\n</ul>\n<table>\n<tbody><tr>\n<td><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_16.png\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>변수 소거와 대수학</li>\n</ul>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_17.png\">\n<p>그래서, 우리는 측정 가능한 양에 대한 회전 각도의 변화를 해결할 수 있었고 다음의 관계를 얻었습니다:</p>\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_18.png\">\n<p>이제 방정식을 재배열하고 우리가 알고 있는 것을 대입하여 참조점을 포함하는 곡선의 반지름을 구해 봅시다.</p>\n<div class=\"content-ad\"></div>\n<ul>\n<li>참조점을 포함하는 곡선의 반지름이 한 쪽에 있는 방정식을 재배열하세요</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_19.png\" alt=\"그림\"></p>\n<ul>\n<li>우리는 방정식을 뒤집어서 원하는 해를 풀고자 하는 관심 대상의 양이 자연스럽게 읽히도록 오른쪽에 오도록 할 것입니다</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_20.png\" alt=\"그림\"></p>\n<div class=\"content-ad\"></div>\n<p>곡선의 반지름을 측정 가능한 양의 관점에서 구했습니다. 이제 참조점이 이동한 거리로 넘어가봅시다. 우리가 한 결과를 대입하고 간단히 정리하기만 하면 됩니다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_21.png\" alt=\"이미지\"></p>\n<p>측정 가능한 양의 관점에서 모든 변수를 구했습니다. 로봇의 위치와 방향에 관심을 가지고 있으므로, 주요 변수는 참조점이 이동한 거리와 회전 각도의 변화일 것입니다. 참조점이 이동한 거리는 위치를 알려주고, 회전 각도의 변화는 방향을 알려줍니다. 참조점을 포함하는 곡선의 반지름은 유도에 유용하지만 더 이상 필요하지 않습니다. 그래서 지금까지 우리 모델에서 중요한 결과는 다음과 같습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_22.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>지금까지의 결과를 통해 한 시간 단계에서 다음 시간 단계로의 거리 및 방향 변화를 결정할 수 있습니다. 결과는 시간 간의 상대적인 운동을 설명합니다.</p>\n<p>그러나 로봇의 방향이나 새로운 방향을 알고 싶다면 해당 정보가 누락되어 있습니다. 우리는 이동한 거리를 알고 있지만 방향은 알지 못 합니다. 우리는 방향 각도가 얼마나 바뀌었는지 알고 있지만 새로운 방향 각도는 알 수 없습니다. 이는 우리 오도메트리 모델의 다음 부분을 동기부여할 것입니다.</p>\n<p>이동 거리의 방향을 결정하려고 시작해봅시다. 우리 모델을 단순화하기 위해 참조점이 이동한 거리를 곡선이 아닌 선으로 표현할 것입니다.</p>\n<img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_23.png\">\n<div class=\"content-ad\"></div>\n<p>일반적으로 휠 엔코더를 사용한 휠 오도미터에서 데이터 샘플링이 매우 높기 때문에 이러한 단순화를 할 수 있습니다. 이는 엔코더가 데이터를 매우 자주 수집할 수 있어 측정 간의 시간 창이 매우 작다는 것을 의미합니다. 시간 창이 매우 작기 때문에 각 시간 단계에서 캡처된 운동량도 매우 작을 것입니다. 모델링할 때 이는 호의 곡률이 매우 작아져 직선과 유사하다는 것을 의미합니다. 따라서 거리를 이제 직선으로 나타내는 것은 안전한 가정이며 단순화입니다.</p>\n<p>이 거리가 이동하는 각도에 관심이 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_24.png\" alt=\"image 1\"></p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_25.png\" alt=\"image 2\"></p>\n<div class=\"content-ad\"></div>\n<p>이 각도는 삼각형의 속성, 즉 삼각형의 각이 180°가 되고, 원에 대한 접선의 성질, 즉 선분과 원이 직교하기 때문에 접하는 지점에서 각이 90°가 된다는 것을 활용하여 구할 수 있어요. 참고: 로봇 몸체를 제거하여 혼란을 줄였어요.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_26.png\" alt=\"image\"></p>\n<p>방정식을 세우고 문제를 해결할 수 있어요. 참고: 이 각도는 도입니다(일반 대중이 각도를 더 익숙하게 다루기 때문에), 하지만 라디안으로 문제를 해결할 수도 있었어요 - 정답이 달라지지는 않았을 거예요.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_27.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>좋아요 — 이제 거리의 각도를 이전에 해결한 변수로 풀었어요.</p>\n<p>이제 새로운 로봇의 방향을 풀기 위해 주목해봐요.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_28.png\" alt=\"image\"></p>\n<p>이전과 마찬가지로 기하학 원리를 사용해서 새로운 방향의 각도를 풀어볼거에요. 이것이 바로 우리 다이어그램이에요 (로봇 본문은 제거해서 혼란을 줄였어요):</p>\n<div class=\"content-ad\"></div>\n<p>Markdown 형식으로 테이블 태그를 변경하십시오.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_31.png\" alt=\"이미지\"></p>\n<p>이제 직선 위의 각도들은 180°가 되어야 한다는 사실을 이용하여 문제를 해결할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_32.png\" alt=\"이미지\"></p>\n<p>따라서, 우리의 현재 오도메트리 모델은 다음과 같이 보입니다 (덜 중요하거나 중간 변수들을 걸러냄):</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_33.png\" alt=\"이미지\"></p>\n<p>로봇이 얼마나 멀리 이동했는지, 이동한 각도, 회전 각도의 변화 및 서로 다른 시간 단계 간의 방향 각도를 알게 되었습니다.</p>\n<h1>휠 오도메트리 절대 운동</h1>\n<p>이전 섹션의 결과를 토대로 상대 운동(즉, 한 시간 단계에서 다음으로 이동하는 것)을 추정할 수 있습니다. 그러나 절대 운동을 설명하는 오도메트리 모델을 확장할 수 있습니다. 절대 운동에서는 로봇이 탐색하는 환경을 좌표 평면 시스템(일반적으로 x 및 y 방향으로)으로 정의할 것입니다. 이 좌표 시스템에서 로봇의 운동은 로봇의 절대 위치를 나타내는 좌표에 의해 포착될 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>방위에 대해 정의할 수 있는 것은 x-축에서의 각도입니다. 로봇이 양의 x-축 방향을 향할 때, 방위 각도는 0°입니다. 로봇이 돌아서 제1 사분면 어딘가를 향할 때 방위 각도는 0°에서 90°까지입니다. 로봇이 제2 사분면 어딘가를 향할 때 방위 각도는 90°에서 180°까지입니다. 로봇이 제3 사분면 어딘가를 향할 때 방위 각도는 180°에서 270°까지입니다. 그리고 로봇이 제4 사분면 어딘가를 향할 때 방위 각도는 270°에서 360°까지입니다. 이는 주변에 도(도 및 라디안을 가지고 있고 중앙에 사분면 레이블이 있는)을 가진 그래픽을 통해 시각화할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_34.png\" alt=\"image\"></p>\n<p>상대적 방향과의 주요 차이점은 절대 방위가 항상 동일한 기준 프레임, 즉 고정된 좌표 평면의 양의 x-축에서의 각도에서 오는 것이라는 것입니다. 반면에 상대적 방향은 관점 / 기준 프레임에 따라 달라질 수 있습니다.</p>\n<p>지금까지 저희의 오도메트리 모델은 초기 위치가 왼쪽을 향하도록 그려져 있었습니다. 이는 현재까지 저희의 오도메트리 모델에서 로봇이 항상 제로 라디안의 절대 방위로 시작했다는 의미입니다(기존 방향을 고려할 필요가 없었습니다).</p>\n<div class=\"content-ad\"></div>\n<p>로봇이 다른 방향에서 시작할 때 어떻게 되는지 궁금하셨군요? 상대 운동에 대한 모든 작업은 그대로 유지되지만, 초기 방향을 고려하여 완전한 위치와 방향을 올바르게 계산할 수 있도록 조정해야 합니다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_35.png\" alt=\"image\"></p>\n<p>왜 초기 방향이 변경되더라도 모든 상대 운동이 여전히 유지되는지 궁금할 수 있습니다. 그 이유는 관점 때문입니다. 위 예시를 들어보겠습니다. 이미 존재하는 좌표계를 회전시켜 초기 방향을 제로 라디안(즉, x축이 로봇의 현재 방향과 평행하도록)으로 만들면 어떻게 될까요? 이전에 논의한 상대 운동에 대한 모든 작업을 적용할 수 있을 것입니다. 좌표계를 회전시키는 것은 기본적으로 아무것도 변경하지 않습니다. 단지 관점을 바꿔서 볼 뿐입니다.</p>\n<p>사실, 절대 운동 모델을 얻는 한 가지 전략은 회전하고 다시 원래 좌표계로 변환하는 등 각각의 새로운 좌표계를 계속 생성하는 것입니다. 이러한 좌표 변환 방법은 좌표계를 회전시키는 (회전) 행렬을 사용하여 더 복잡하며 고급 기술입니다.</p>\n<div class=\"content-ad\"></div>\n<p>그러나 이것은 기하학에 대한 멋진 관점을 제공합니다. 우리의 로봇은 일부 절대 방향으로 시작합니다. 로봇이 방향이 0 라디안이되도록 좌표계를 수정하기로 결정하면, 기존 좌표 평면을 절대 방향 각도만큼 회전해야 합니다. 이는 우리가 절대 방향을 양의 x축에서의 각도로 정의했기 때문입니다. 기본적으로 우리는 절대 방향 각도로 좌표 평면을 조정하고 있습니다. 전체 좌표 평면을 이동하는 대신, 아래에서 설명하는 대로 상대적 방향 계산에 이를 추가할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_36.png\" alt=\"image\"></p>\n<p>이 다이어그램에서 시간 t에서의 오도메트리 모델은 이전 시간 단계의 절대 방향 각도를 추가할 것입니다. 이전 시간 단계의 방향을 추가해도 기준점의 이동 거리나 회전 각도 변경에는 영향을 미치지 않습니다. 왜냐하면 이전에 유도한 공식이 방향 각도에 의존하지 않고 (이동한 바퀴 거리에만 의존하기 때문에)입니다. 변경되는 것은 로봇의 방향입니다. 시간 단계 간에 상대적인 것에서 좌표 평면 상의 절대 방향으로 변경됩니다. 따라서 어떤 시간 단계에서도 절대 방향 각도는 다음과 같이 정의될 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_37.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>절대 운동을 다룰 때, 로봇이 각 시간 단계마다 좌표점을 가지게 됩니다. 좌표 위치가 업데이트되는 방법은 삼각함수의 특성을 사용하는 것인데, 즉 각의 코싸인이 이웃변을 가각변으로 나눈 값이고 사인이 이웃변을 빗변으로 나눈 값이라는 것입니다. 참조점이 이동한 거리를 빗변으로 하고 이전 시간 단계의 방향 각도 및 이동으로 인한 각도를 더하여 x와 y 방향으로 이동한 거리를 계산할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_38.png\" alt=\"image\"></p>\n<p>이전 시간 단계의 좌표에 x와 y 거리를 더함으로써 로봇의 새로운 좌표 위치를 결정할 수 있습니다. 이러한 방정식을 사용하여 역학을 설명할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_39.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>현재 시간의 위치는 이전 시간 단계의 위치와 각도에 따라 결정되며 현재 시간 단계에서 회전 각도의 변화에 기반합니다. 하나의 방정식에서 두 가지 다른 시간 단계의 양을 사용하는 것을 감안하면 차이를 명확히 하기 위해 다시 시간 첨자를 사용하는 것이 좋습니다.</p>\n<h1>결론</h1>\n<p>우리의 인코더는 각 바퀴가 이동한 거리를 수집하고, 바퀴와 참조점 사이의 거리를 측정할 수 있습니다. 호의 길이 공식을 사용하여, 시스템의 방정식을 얻었고, 우리는 거리 이동 및 시간 단계 사이의 회전 각도 변화(라디안)를 구하기 위해 이를 해결했습니다.</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_40.png\" alt=\"image\"></p>\n<div class=\"content-ad\"></div>\n<p>우리는 휠 인코더로 데이터를 빈번하게 수집하기 때문에 우리의 이동 거리를 호선 대신 선으로 나타낼 수 있다는 것을 깨달았어요. 높은 데이터 수집 빈도로 인해 곡선이 더 직선처럼 동작하고 보이게 됩니다. 그런 다음, 각도의 기하학을 사용하여 우리는 움직임에 의해 발생하는 방향 각도(라디안 단위)와 최종적인 상대적 방향을 찾았어요.</p>\n<p>그 후에, 우리는 절대 위치 및 방향에 대한 모델을 확장했어요. 여기서 우리는 정의된 좌표 평면이 있는 절대 시스템에서 우리의 오도메트리 모델을 조정해야 해요. 절대 시스템에서는 이전 시간 단계의 절대 방향 각도를 고려하여 오도메트리 모델을 조정해야 해요. 그런 다음, 우리는 삼각함수 관계식을 사용하여 새로운 절대 방향 각도(라디안)와 좌표 위치를 결정할 수 있어요.</p>\n<div class=\"content-ad\"></div>\n<p>절대 운동에 대해, x 및 y 구성 요소로 이뤄진 좌표 위치와 절대 방향 각도(라디안 단위)가 있습니다. 절대 운동에 대한 오도메트리 모델을 정의하는 세 가지 방정식은 다음과 같습니다:</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_43.png\" alt=\"equation 1\"></p>\n<p>또한 일반적으로 방정식을 벡터 형태로 표현하는 것이 일반적입니다:</p>\n<p><img src=\"/assets/img/2024-06-23-WheelOdometryModelforDifferentialDriveRobotics_44.png\" alt=\"equation 2\"></p>\n<div class=\"content-ad\"></div>\n<p>이 글에서 우리는 두 바퀴 차동 구동 로봇을 위한 오도메트리 모델을 개발했습니다. 이 모델을 사용하면 로터리 엔코더에서 수집한 데이터를 사용하여 위치와 방향을 추적할 수 있습니다. 로터리 엔코더는 매우 저렴하고 데이터 샘플링이 높기 때문에 휠 로보틱스에서 센서로 자주 사용됩니다. 그러나 엔코더를 사용하는 데 있어서의 한 가지 어려움은 잡음과 측정 오차입니다. 우리 모델을 계속 개발하려면 다음 단계로 우리의 측정 값과 함께 통계적 불확실성과 오차를 고려하는 것이 좋은 방향입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}