{"pageProps":{"post":{"title":"AppDaemon 탐구 NovaPoshta 소포 추적으로 홈 자동화 향상시키는 방법","description":"","date":"2024-06-23 17:08","slug":"2024-06-23-ExploringAppDaemonEnhancingHomeAutomationwithNovaPoshtaParcelTracking","content":"\n\n<img src=\"/assets/img/2024-06-23-ExploringAppDaemonEnhancingHomeAutomationwithNovaPoshtaParcelTracking_0.png\" />\n\n만약 나처럼 Home Assistant 애호가라면, 더 스마트한 자동화를 위해 모든 것을 연결하려고 할 것입니다. 최근에 나는 AppDaemon을 탐험하고 Python에 몰두하고 있어요. AppDaemon의 멋진 점 중 하나는 Home Assistant와 서비스를 통합하는 사용자 정의 앱을 만들 수 있다는 것인데, 이는 공식 또는 HACS 통합이 없는 서비스도 포함됩니다.\n\nNovaPoshta(https://novaposhta.ua)는 우크라이나 최대의 우편 및 퀄리어 회사로, 나는 그들의 소포 추적 서비스를 Home Assistant에 통합하고 싶었어요. 등록된 사용자에게 무료 API를 제공하며, 자세한 소포 정보 및 기타 정보를 제공합니다.\n\n처음에는 기존의 사용자 정의 통합을 위해 GitHub를 검색했고 Dmitry Krasnoukhov의 사용자 정의 통합(https://github.com/krasnoukhov/homeassistant-nova-poshta)을 발견했어요. 그러나 정보를 다르게 표현하고 싶었습니다. AppDaemon과 실험 중이었기 때문에 직접 앱을 작성하기로 결정했어요.\n\n<div class=\"content-ad\"></div>\n\n먼저, 노바포셔(Nova Poshta)에 계정을 등록해야 합니다. 이미 서비스를 이용 중이라면 계정이 있을 가능성이 높습니다. https://new.novaposhta.ua/dashboard/ 에서 계정 페이지에 로그인하고 설정 섹션으로 이동하여 새 API 키를 생성하세요. 이 키는 AppDaemon에서 API 호출을 하는 데 중요합니다. 자세한 API 문서는 https://developers.novaposhta.ua/documentation 를 방문하세요.\n\n![이미지](/assets/img/2024-06-23-ExploringAppDaemonEnhancingHomeAutomationwithNovaPoshtaParcelTracking_1.png)\n\n![이미지](/assets/img/2024-06-23-ExploringAppDaemonEnhancingHomeAutomationwithNovaPoshtaParcelTracking_2.png)\n\n# MQTT 센서 구성:\n\n<div class=\"content-ad\"></div>\n\n제 세팅에서는 Home Assistant에 MQTT 센서를 만들었습니다. 이 센서는 제 전화번호와 관련된 소포 수를 상태로 표시하고 발신자, 배송 상태 등과 같은 소포 세부 정보를 속성으로 제공합니다. 아래는 MQTT 센서 구성의 일부입니다:\n\n```js\n  mqtt:\n    sensor:\n      - name: \"Novaposhta parcels Vijish\"\n        icon: mdi:truck-fast\n        state_topic: \"ha/state/novaposhta/parcels/vijish\"\n        value_template: \"{ value_json|length }\"\n        json_attributes_topic: \"ha/state/novaposhta/parcels/vijish\"\n```\n\nJSON 구조를 페이로드로 게시할 수 있는 MQTT 센서를 선택했습니다. MQTT 센서에서 속성 주제를 지정하면 Home Assistant가 자동으로 해당 속성을 속성으로 통합합니다. 아래는 제 MQTT 센서의 코드입니다.\n\n# AppDaemon 앱\n\n<div class=\"content-ad\"></div>\n\n그 다음은 AppDaemon 앱 자체를 살펴보겠습니다. 이전 글에서 언급했듯이, 저는 아직 파이썬에 상대적으로 새로운 사용자이며, ChatGPT가 아래 코드를 작성하고 최적화하는 데 큰 도움이 되었습니다.\n\n```js\nimport appdaemon.plugins.hass.hassapi as hass\nimport requests\nimport json\nfrom datetime import datetime, timedelta\n\nclass NovaPoshtaMQTTParcelTracker(hass.Hass):\n\n    def initialize(self):\n        # API 엔드포인트 및 API 키 설정 (안전하게 저장된 것이어야 합니다)\n        self.api_url = \"https://api.novaposhta.ua/v2.0/json/\"\n        self.api_key = self.args[\"api_key\"]  # AppDaemon 구성에서 가져옴\n\n        # MQTT 브로커 구성\n        self.mqtt_broker = self.args[\"mqtt_broker\"]\n        self.mqtt_port = self.args[\"mqtt_port\"]\n        self.mqtt_topic = self.args[\"mqtt_topic\"]\n\n        # 앱이 정기적으로 실행되도록 스케줄\n        self.run_every(self.fetch_parcel_details, \"now\", self.args.get(\"interval\", 3600))\n\n    # fetch_parcel_details(), handle_success(), get_readable_status(), handle_error(), publish_mqtt() 등 다른 메소드들은 코드의 다른 부분들을 처리합니다.\n    \n```\n\n- 입력 값은 새로운 앱이 선언된 AppDaemon의 apps.yaml 파일 안에서 인수로 구성됩니다.\n- API 토큰 및 MQTT 서버 주소는 Home Assistant 구성에서와 유사하게 secrets.yaml 파일에 안전하게 저장됩니다. 이 파일은 Appdaemon 추가 구성 디렉토리에 위치해야 합니다.\n- 데이터는 지난 30일 이내의 소포에 대해 검색되며, start_date = today - timedelta(days=30)를 수정하여 이를 조정할 수 있습니다.\n- 검색된 각 소포는 Parcel1, Parcel2 등으로 순차적으로 새로운 속성을 생성합니다.\n- 앱은 정기적으로 실행되며, 앱 구성 섹션에서 시간 간격을 설정할 수 있습니다. 기본적으로 지정되지 않은 경우 1시간마다 확인합니다.\n\nAppDaemon 앱을 시스템에 통합하려면 위의 코드를 apps.yaml 파일에 추가해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```yaml\nnovaposhta_parcel_tracker:\n  module: novaposhta_parcel_tracker\n  class: NovaPoshtaMQTTParcelTracker\n  api_key: !secret novaposhta_token\n  mqtt_broker: !secret mqtt_broker  # MQTT 브로커 주소로 교체하세요\n  mqtt_port: 1883  # 일반적으로 MQTT의 기본 포트\n  mqtt_topic: \"ha/state/novaposhta/parcels/vijish\"\n  interval: 600  # 매 10분마다 확인\n\n# 자동화:\n\n센서 데이터를 활용하여 자동화를 생성할 수 있습니다. 예를 들어, 집이나 직장 구역을 떠나고 송장이 도착했지만 아직 수취되지 않은 경우 알림을 설정할 수 있습니다.\n\n  automation:\n    - alias: \"Novaposhta 송장 알림\"\n      id: \"automation_notification_novaposhta_parcel_arrived\"\n      trigger:\n        - platform: zone\n          entity_id: person.vijish\n          zone: zone.home\n        - platform: zone\n          entity_id: person.vijish\n          zone: zone.work\n          event: leave\n      condition:\n        - condition: and\n          conditions:\n            - condition: template\n              value_template: >\n                { for key, value in states.sensor.novaposhta_parcels_vijish.attributes.items() }\n                  { if key.startswith('Parcel') and value.get('Status') == 'Parcel Arrived' }\n                    true\n                  { endif }\n                { endfor }              \n      mode: single\n      max_exceeded: silent\n      action:\n        - service: telegram_bot.send_message\n          data:\n            title: \"<b>Нова Пошта</b>\"\n            target: !secret tele_id_vm\n            message: >\n              다음 송장이 도착했습니다:\n              { for key, value in states.sensor.novaposhta_parcels_vijish.attributes.items() }\n                { if key.startswith('Parcel') and value.get('Status') == 'Parcel Arrived' }\n                  <b>{ key }:</b>\n                    발신인: { value.get('Sender') }\n                    송장: { value.get('Parcel') }  \n                    배달 주소: { value.get('Delivery address') }\n                { endif }\n              { endfor }\n            parse_mode: html\n\n<div class=\"content-ad\"></div>\n\n이것으로 모두 마무리되었어요. 이 글이 홈 어시스턴트의 AppDaemon 기능을 더욱 흥미롭게 탐구하는 데 도움이 되었기를 바랍니다. 비슷한 사용 사례에 대한 여러분의 생각과 코드 개선을 위한 제안을 정말로 감사히 받겠어요!\n\n즐거운 스마트 홈 만들기 되세요!","ogImage":{"url":"/assets/img/2024-06-23-ExploringAppDaemonEnhancingHomeAutomationwithNovaPoshtaParcelTracking_0.png"},"coverImage":"/assets/img/2024-06-23-ExploringAppDaemonEnhancingHomeAutomationwithNovaPoshtaParcelTracking_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-23-ExploringAppDaemonEnhancingHomeAutomationwithNovaPoshtaParcelTracking_0.png\">\n<p>만약 나처럼 Home Assistant 애호가라면, 더 스마트한 자동화를 위해 모든 것을 연결하려고 할 것입니다. 최근에 나는 AppDaemon을 탐험하고 Python에 몰두하고 있어요. AppDaemon의 멋진 점 중 하나는 Home Assistant와 서비스를 통합하는 사용자 정의 앱을 만들 수 있다는 것인데, 이는 공식 또는 HACS 통합이 없는 서비스도 포함됩니다.</p>\n<p>NovaPoshta(<a href=\"https://novaposhta.ua)%EB%8A%94\" rel=\"nofollow\" target=\"_blank\">https://novaposhta.ua)는</a> 우크라이나 최대의 우편 및 퀄리어 회사로, 나는 그들의 소포 추적 서비스를 Home Assistant에 통합하고 싶었어요. 등록된 사용자에게 무료 API를 제공하며, 자세한 소포 정보 및 기타 정보를 제공합니다.</p>\n<p>처음에는 기존의 사용자 정의 통합을 위해 GitHub를 검색했고 Dmitry Krasnoukhov의 사용자 정의 통합(<a href=\"https://github.com/krasnoukhov/homeassistant-nova-poshta)%EC%9D%84\" rel=\"nofollow\" target=\"_blank\">https://github.com/krasnoukhov/homeassistant-nova-poshta)을</a> 발견했어요. 그러나 정보를 다르게 표현하고 싶었습니다. AppDaemon과 실험 중이었기 때문에 직접 앱을 작성하기로 결정했어요.</p>\n<div class=\"content-ad\"></div>\n<p>먼저, 노바포셔(Nova Poshta)에 계정을 등록해야 합니다. 이미 서비스를 이용 중이라면 계정이 있을 가능성이 높습니다. <a href=\"https://new.novaposhta.ua/dashboard/\" rel=\"nofollow\" target=\"_blank\">https://new.novaposhta.ua/dashboard/</a> 에서 계정 페이지에 로그인하고 설정 섹션으로 이동하여 새 API 키를 생성하세요. 이 키는 AppDaemon에서 API 호출을 하는 데 중요합니다. 자세한 API 문서는 <a href=\"https://developers.novaposhta.ua/documentation\" rel=\"nofollow\" target=\"_blank\">https://developers.novaposhta.ua/documentation</a> 를 방문하세요.</p>\n<p><img src=\"/assets/img/2024-06-23-ExploringAppDaemonEnhancingHomeAutomationwithNovaPoshtaParcelTracking_1.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-06-23-ExploringAppDaemonEnhancingHomeAutomationwithNovaPoshtaParcelTracking_2.png\" alt=\"이미지\"></p>\n<h1>MQTT 센서 구성:</h1>\n<div class=\"content-ad\"></div>\n<p>제 세팅에서는 Home Assistant에 MQTT 센서를 만들었습니다. 이 센서는 제 전화번호와 관련된 소포 수를 상태로 표시하고 발신자, 배송 상태 등과 같은 소포 세부 정보를 속성으로 제공합니다. 아래는 MQTT 센서 구성의 일부입니다:</p>\n<pre><code class=\"hljs language-js\">  <span class=\"hljs-attr\">mqtt</span>:\n    <span class=\"hljs-attr\">sensor</span>:\n      - <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Novaposhta parcels Vijish\"</span>\n        <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-attr\">mdi</span>:truck-fast\n        <span class=\"hljs-attr\">state_topic</span>: <span class=\"hljs-string\">\"ha/state/novaposhta/parcels/vijish\"</span>\n        <span class=\"hljs-attr\">value_template</span>: <span class=\"hljs-string\">\"{ value_json|length }\"</span>\n        <span class=\"hljs-attr\">json_attributes_topic</span>: <span class=\"hljs-string\">\"ha/state/novaposhta/parcels/vijish\"</span>\n</code></pre>\n<p>JSON 구조를 페이로드로 게시할 수 있는 MQTT 센서를 선택했습니다. MQTT 센서에서 속성 주제를 지정하면 Home Assistant가 자동으로 해당 속성을 속성으로 통합합니다. 아래는 제 MQTT 센서의 코드입니다.</p>\n<h1>AppDaemon 앱</h1>\n<div class=\"content-ad\"></div>\n<p>그 다음은 AppDaemon 앱 자체를 살펴보겠습니다. 이전 글에서 언급했듯이, 저는 아직 파이썬에 상대적으로 새로운 사용자이며, ChatGPT가 아래 코드를 작성하고 최적화하는 데 큰 도움이 되었습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> appdaemon.<span class=\"hljs-property\">plugins</span>.<span class=\"hljs-property\">hass</span>.<span class=\"hljs-property\">hassapi</span> <span class=\"hljs-keyword\">as</span> hass\n<span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime, timedelta\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NovaPoshtaMQTTParcelTracker</span>(hass.<span class=\"hljs-property\">Hass</span>):\n\n    def <span class=\"hljs-title function_\">initialize</span>(self):\n        # <span class=\"hljs-variable constant_\">API</span> 엔드포인트 및 <span class=\"hljs-variable constant_\">API</span> 키 설정 (안전하게 저장된 것이어야 합니다)\n        self.<span class=\"hljs-property\">api_url</span> = <span class=\"hljs-string\">\"https://api.novaposhta.ua/v2.0/json/\"</span>\n        self.<span class=\"hljs-property\">api_key</span> = self.<span class=\"hljs-property\">args</span>[<span class=\"hljs-string\">\"api_key\"</span>]  # <span class=\"hljs-title class_\">AppDaemon</span> 구성에서 가져옴\n\n        # <span class=\"hljs-variable constant_\">MQTT</span> 브로커 구성\n        self.<span class=\"hljs-property\">mqtt_broker</span> = self.<span class=\"hljs-property\">args</span>[<span class=\"hljs-string\">\"mqtt_broker\"</span>]\n        self.<span class=\"hljs-property\">mqtt_port</span> = self.<span class=\"hljs-property\">args</span>[<span class=\"hljs-string\">\"mqtt_port\"</span>]\n        self.<span class=\"hljs-property\">mqtt_topic</span> = self.<span class=\"hljs-property\">args</span>[<span class=\"hljs-string\">\"mqtt_topic\"</span>]\n\n        # 앱이 정기적으로 실행되도록 스케줄\n        self.<span class=\"hljs-title function_\">run_every</span>(self.<span class=\"hljs-property\">fetch_parcel_details</span>, <span class=\"hljs-string\">\"now\"</span>, self.<span class=\"hljs-property\">args</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"interval\"</span>, <span class=\"hljs-number\">3600</span>))\n\n    # <span class=\"hljs-title function_\">fetch_parcel_details</span>(), <span class=\"hljs-title function_\">handle_success</span>(), <span class=\"hljs-title function_\">get_readable_status</span>(), <span class=\"hljs-title function_\">handle_error</span>(), <span class=\"hljs-title function_\">publish_mqtt</span>() 등 다른 메소드들은 코드의 다른 부분들을 처리합니다.\n    \n</code></pre>\n<ul>\n<li>입력 값은 새로운 앱이 선언된 AppDaemon의 apps.yaml 파일 안에서 인수로 구성됩니다.</li>\n<li>API 토큰 및 MQTT 서버 주소는 Home Assistant 구성에서와 유사하게 secrets.yaml 파일에 안전하게 저장됩니다. 이 파일은 Appdaemon 추가 구성 디렉토리에 위치해야 합니다.</li>\n<li>데이터는 지난 30일 이내의 소포에 대해 검색되며, start_date = today - timedelta(days=30)를 수정하여 이를 조정할 수 있습니다.</li>\n<li>검색된 각 소포는 Parcel1, Parcel2 등으로 순차적으로 새로운 속성을 생성합니다.</li>\n<li>앱은 정기적으로 실행되며, 앱 구성 섹션에서 시간 간격을 설정할 수 있습니다. 기본적으로 지정되지 않은 경우 1시간마다 확인합니다.</li>\n</ul>\n<p>AppDaemon 앱을 시스템에 통합하려면 위의 코드를 apps.yaml 파일에 추가해야 합니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">novaposhta_parcel_tracker:</span>\n  <span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">novaposhta_parcel_tracker</span>\n  <span class=\"hljs-attr\">class:</span> <span class=\"hljs-string\">NovaPoshtaMQTTParcelTracker</span>\n  <span class=\"hljs-attr\">api_key:</span> <span class=\"hljs-type\">!secret</span> <span class=\"hljs-string\">novaposhta_token</span>\n  <span class=\"hljs-attr\">mqtt_broker:</span> <span class=\"hljs-type\">!secret</span> <span class=\"hljs-string\">mqtt_broker</span>  <span class=\"hljs-comment\"># MQTT 브로커 주소로 교체하세요</span>\n  <span class=\"hljs-attr\">mqtt_port:</span> <span class=\"hljs-number\">1883</span>  <span class=\"hljs-comment\"># 일반적으로 MQTT의 기본 포트</span>\n  <span class=\"hljs-attr\">mqtt_topic:</span> <span class=\"hljs-string\">\"ha/state/novaposhta/parcels/vijish\"</span>\n  <span class=\"hljs-attr\">interval:</span> <span class=\"hljs-number\">600</span>  <span class=\"hljs-comment\"># 매 10분마다 확인</span>\n\n<span class=\"hljs-comment\"># 자동화:</span>\n\n<span class=\"hljs-string\">센서</span> <span class=\"hljs-string\">데이터를</span> <span class=\"hljs-string\">활용하여</span> <span class=\"hljs-string\">자동화를</span> <span class=\"hljs-string\">생성할</span> <span class=\"hljs-string\">수</span> <span class=\"hljs-string\">있습니다.</span> <span class=\"hljs-string\">예를</span> <span class=\"hljs-string\">들어,</span> <span class=\"hljs-string\">집이나</span> <span class=\"hljs-string\">직장</span> <span class=\"hljs-string\">구역을</span> <span class=\"hljs-string\">떠나고</span> <span class=\"hljs-string\">송장이</span> <span class=\"hljs-string\">도착했지만</span> <span class=\"hljs-string\">아직</span> <span class=\"hljs-string\">수취되지</span> <span class=\"hljs-string\">않은</span> <span class=\"hljs-string\">경우</span> <span class=\"hljs-string\">알림을</span> <span class=\"hljs-string\">설정할</span> <span class=\"hljs-string\">수</span> <span class=\"hljs-string\">있습니다.</span>\n\n  <span class=\"hljs-attr\">automation:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">alias:</span> <span class=\"hljs-string\">\"Novaposhta 송장 알림\"</span>\n      <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">\"automation_notification_novaposhta_parcel_arrived\"</span>\n      <span class=\"hljs-attr\">trigger:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">platform:</span> <span class=\"hljs-string\">zone</span>\n          <span class=\"hljs-attr\">entity_id:</span> <span class=\"hljs-string\">person.vijish</span>\n          <span class=\"hljs-attr\">zone:</span> <span class=\"hljs-string\">zone.home</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">platform:</span> <span class=\"hljs-string\">zone</span>\n          <span class=\"hljs-attr\">entity_id:</span> <span class=\"hljs-string\">person.vijish</span>\n          <span class=\"hljs-attr\">zone:</span> <span class=\"hljs-string\">zone.work</span>\n          <span class=\"hljs-attr\">event:</span> <span class=\"hljs-string\">leave</span>\n      <span class=\"hljs-attr\">condition:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">condition:</span> <span class=\"hljs-string\">and</span>\n          <span class=\"hljs-attr\">conditions:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">condition:</span> <span class=\"hljs-string\">template</span>\n              <span class=\"hljs-attr\">value_template:</span> <span class=\"hljs-string\">>\n                { for key, value in states.sensor.novaposhta_parcels_vijish.attributes.items() }\n                  { if key.startswith('Parcel') and value.get('Status') == 'Parcel Arrived' }\n                    true\n                  { endif }\n                { endfor }              \n</span>      <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">single</span>\n      <span class=\"hljs-attr\">max_exceeded:</span> <span class=\"hljs-string\">silent</span>\n      <span class=\"hljs-attr\">action:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">service:</span> <span class=\"hljs-string\">telegram_bot.send_message</span>\n          <span class=\"hljs-attr\">data:</span>\n            <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">\"&#x3C;b>Нова Пошта&#x3C;/b>\"</span>\n            <span class=\"hljs-attr\">target:</span> <span class=\"hljs-type\">!secret</span> <span class=\"hljs-string\">tele_id_vm</span>\n            <span class=\"hljs-attr\">message:</span> <span class=\"hljs-string\">>\n              다음 송장이 도착했습니다:\n              { for key, value in states.sensor.novaposhta_parcels_vijish.attributes.items() }\n                { if key.startswith('Parcel') and value.get('Status') == 'Parcel Arrived' }\n                  &#x3C;b>{ key }:&#x3C;/b>\n                    발신인: { value.get('Sender') }\n                    송장: { value.get('Parcel') }  \n                    배달 주소: { value.get('Delivery address') }\n                { endif }\n              { endfor }\n</span>            <span class=\"hljs-attr\">parse_mode:</span> <span class=\"hljs-string\">html</span>\n\n<span class=\"hljs-string\">&#x3C;div</span> <span class=\"hljs-string\">class=\"content-ad\">&#x3C;/div></span>\n\n<span class=\"hljs-string\">이것으로</span> <span class=\"hljs-string\">모두</span> <span class=\"hljs-string\">마무리되었어요.</span> <span class=\"hljs-string\">이</span> <span class=\"hljs-string\">글이</span> <span class=\"hljs-string\">홈</span> <span class=\"hljs-string\">어시스턴트의</span> <span class=\"hljs-string\">AppDaemon</span> <span class=\"hljs-string\">기능을</span> <span class=\"hljs-string\">더욱</span> <span class=\"hljs-string\">흥미롭게</span> <span class=\"hljs-string\">탐구하는</span> <span class=\"hljs-string\">데</span> <span class=\"hljs-string\">도움이</span> <span class=\"hljs-string\">되었기를</span> <span class=\"hljs-string\">바랍니다.</span> <span class=\"hljs-string\">비슷한</span> <span class=\"hljs-string\">사용</span> <span class=\"hljs-string\">사례에</span> <span class=\"hljs-string\">대한</span> <span class=\"hljs-string\">여러분의</span> <span class=\"hljs-string\">생각과</span> <span class=\"hljs-string\">코드</span> <span class=\"hljs-string\">개선을</span> <span class=\"hljs-string\">위한</span> <span class=\"hljs-string\">제안을</span> <span class=\"hljs-string\">정말로</span> <span class=\"hljs-string\">감사히</span> <span class=\"hljs-string\">받겠어요!</span>\n\n<span class=\"hljs-string\">즐거운</span> <span class=\"hljs-string\">스마트</span> <span class=\"hljs-string\">홈</span> <span class=\"hljs-string\">만들기</span> <span class=\"hljs-string\">되세요!</span>\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}