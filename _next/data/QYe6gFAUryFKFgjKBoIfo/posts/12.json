{"pageProps":{"posts":[{"title":"라즈베리 파이 피코 W 무료 시뮬레이터 사용 방법","description":"","date":"2024-06-23 18:16","slug":"2024-06-23-RaspberryPiPicoPicoWFreeSimulator","content":"\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_0.png\" />\n\n요즘, 라즈베리 파이 Pico 및 Pico W에서 코딩을 더 쉽게할 수 있는 유용한 도구를 발견했어요. wokwi.com에서 제공하는 무료 온라인 시뮬레이터인 Wokwi를 이용하면 물리 하드웨어가 필요하지 않은 채로 프로젝트를 쉽게 시뮬레이션할 수 있어요.\n\n이 시뮬레이터를 통해 코드를 작성하고 테스트할 뿐만 아니라 다양한 외부장치 추가, 인터넷 연결, 그리고 어느 정도 실제 환경을 모방하여 전체적인 리얼 라이프 설정을 시뮬레이션할 수 있어요. 이는 프로젝트를 실제 하드웨어에 배포하기 전 가상 환경에서 실험하고 디버깅하여 완벽하게 만들 수 있게 해줍니다. 때로는 시간과 자원을 절약할 수도 있어요. 초보자든 숙련된 개발자든, Wokwi는 라즈베리 파이 Pico와 Pico W 개발 경험을 향상시킬 수 있는 강력한 플랫폼을 제공해요.\n\n이 주제를 탐구하기 전, 우리의 지속적인 노력을 지원하고 여러분의 IoT 프로젝트를 향상시키기 위해 전용 플랫폼을 탐험해보라고 여러분을 초대해요:\n\n<div class=\"content-ad\"></div>\n\n- YouTube 채널을 구독해주세요: Shilleh의 YouTube 채널에서 최신 튜토리얼과 프로젝트 통찰력을 확인하고 업데이트 받아보세요.\n- 저희를 지원해주세요: 여러분의 지원은 소중합니다. Buy Me A Coffee에서 커피 한 잔 사주시면 품질 높은 콘텐츠 제작을 이어갈 수 있습니다.\n- 전문 IoT 서비스를 고용해보세요: IoT 프로젝트에 대한 맞춤 지원이 필요하시다면 UpWork에서 저를 고용해주세요.\n\nShillehTek 웹사이트 (특별 할인):\n\n[ShillehTek 웹사이트로 이동](https://shillehtek.com/collections/all)\n\nShillehTek 아마존 스토어:\n\n<div class=\"content-ad\"></div>\n\nShillehTek 아마존 스토어 — 미국\n\nShillehTek 아마존 스토어 — 캐나다\n\nShillehTek 아마존 스토어 — 일본\n\n# 단계 1: Wokwi에 접속하기\n\n<div class=\"content-ad\"></div>\n\n- Wokwi 방문: wokwi.com에 방문하여 무료 계정을 생성하세요. 이미 한 번도 방문한 적이 없다면 계정없이 시작할 수도 있습니다.\n- Simulator 살펴보기: 인터페이스를 익히세요. 새 프로젝트 생성, 템플릿 보기, 예제 탐색 옵션을 볼 수 있습니다. Pico만 선택해야 하는 것은 아니며 다른 컨트롤러도 선택할 수 있습니다.\n\n![그림](/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_1.png)\n\n# 단계 2: 프로젝트 만들기\n\n다양한 템플릿 프로젝트를 선택할 수 있습니다. 이 중 하나는 Pico SDK를 사용한 Blink LED 프로젝트입니다. C 언어를 위한 Pico SDK 설정은 초보자에게는 어려울 수 있지만 설정이 쉽게 가능한 환경에 액세스할 수 있다면, 시작하는 사람들에게 상당한 이점이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_2.png\" />\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_3.png\" />\n\n스크립트를 실행하면 오른쪽의 라즈베리 파이가 코드 지시에 따라 주기적으로 깜빡입니다.\n\n그런 다음 IDE에서 MicroPython으로 동일한 기능을 만들 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n1-) 다음 코드를 복사하여 붙여넣으세요:\n\n```js\n# Raspberry Pi Pico에서 LED를 깜박이게 하는 MicroPython 스크립트\n\nfrom machine import Pin\nimport time\n\n# 기본 LED 핀을 사용할 수 있는지 확인합니다.\ntry:\n    LED_PIN = Pin(Pin.PICO_DEFAULT_LED_PIN, Pin.OUT)\nexcept AttributeError:\n    # PICO_DEFAULT_LED_PIN이 정의되어 있지 않으면 Pico의 기본 LED 핀인 핀 25를 사용합니다.\n    LED_PIN = Pin(25, Pin.OUT)\n\n# LED를 깜박입니다.\nwhile True:\n    LED_PIN.value(1)  # LED 켜기\n    time.sleep(0.25)  # 250밀리초 동안 기다리기\n    LED_PIN.value(0)  # LED 끄기\n    time.sleep(0.25)  # 250밀리초 동안 기다리기\n```\n\n2-) 파일 이름을 .py 확장자로 변경해주세요\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n이제 동일한 결과를 확인하고 쉽게 코딩 언어를 전환할 수 있게 되었어요! 이것은 실제 Raspberry Pi Pico로는 쉽게 할 수 없는 일이죠.\n\n# 단계 3: 주변 기기 사용하기\n\n이 시뮬레이터의 멋진 점은 LED, 저항, 가속도계 등과 같은 다양한 일반 센서와 부품을 추가할 수 있다는 것이에요. 플러스 버튼을 사용하여 이러한 부품을 쉽게 추가하거나 이미 포함된 다른 프로젝트를 탐색할 수도 있어요.\n\n![Raspberry Pi Pico with Free Simulator](/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_5.png)\n\n<div class=\"content-ad\"></div>\n\n예를 들어, 간단한 프로젝트인 NeoPixel 링을 선택할 수 있습니다. 작동 방식은 다음을 참조해 보세요: [이 링크](https://wokwi.com/projects/314265138001609280)\n\n![image1](/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_6.png)\n\n![image2](/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_7.png)\n\n실행을 시작하면 색상이 변경되는 것을 확인할 수 있습니다. 이는 아직 장치를 가지고 있지 않거나 NeoPixels를 구매하고 싶지 않은 초보자들에게 좋은 기회입니다.\n\n<div class=\"content-ad\"></div>\n\n마지막으로, 또 다른 흥미로운 기능은 가속도계 입력 또는 일반적인 물리적 입력을 시뮬레이션하는 기능입니다. 가속도계는 데이터를 생성하기 위해 움직임이 필요하므로, 시뮬레이터는 수동으로 입력을 조절할 수 있는 슬라이딩 바를 제공합니다. 이 기능은 유용하지만, 실제 프로토 타입처럼 장치를 물리적으로 움직이지 못하는 제한점을 강조합니다. 아두이노와 MPU6050를 사용한 예제를 여기에서 볼 수 있습니다. 이 예제는 외부 코드를 가져오기도 하며, 시뮬레이터를 사용하여 모든 프로젝트에서 활용할 수 있는 기능입니다. 이 예제는 아두이노를 사용하지만, Pico 또는 Pico W로 동일한 기능을 달성할 수 있습니다. 코드가 실행되는 동안 MPU6050을 클릭하여 가속도 값을 조절하고 실제 생활 변화를 시뮬레이할 수 있습니다.\n\nhttps://wokwi.com/projects/305937156771152449c\n\n![image](/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_8.png)\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n마지막으로, 시뮬레이터는 가속도계, LED 등 다양한 센서와 구성 요소를 사용하기 편리하고 유연한 방법을 제공합니다. 외부 코드를 가져오고 센서 입력을 수동으로 시뮬레이션하는 기능은 소중한 학습 및 프로토타입 기회를 제공합니다. 그러나 정확한 물리적 움직임을 재현할 수 없는 등 제한 사항이 있습니다. 이러한 단점들을 감안해도, 이것은 초보자와 숙련된 개발자 모두에게 강력한 도구로 남아 있습니다.\n만약 이 정보가 유용하다고 생각된다면, 더 많은 자습서 및 통찰력을 위해 저의 Medium과 YouTube를 팔로우하세요!","ogImage":{"url":"/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_0.png"},"coverImage":"/assets/img/2024-06-23-RaspberryPiPicoPicoWFreeSimulator_0.png","tag":["Tech"],"readingTime":5},{"title":"라즈베리 파이로 LED 깜빡이기 초보자용 간단 가이드","description":"","date":"2024-06-23 18:14","slug":"2024-06-23-FoolproofBlinkaLedWithYourRaspberryPi","content":"\n\n## 스텝별 가이드\n\n라즈베리 파이를 설정한 후, 흥미로운 프로젝트에 착수할 수 없을 정도로 설레이고 있었어요. 그런데, 한 가지 큰 문제가 있었어요:\n\n이 작은 컴퓨터를 어떻게 상호 작용해야 할까요?\n\nIT 학생으로써, 시스템이 튜링 완전한지 여부를 감지하는 것과 같은 유용한 것들을 배웠어요. 하지만 라즈베리 파이를 제어하는 것? 그건 정말 너무 복잡해 보였어요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-FoolproofBlinkaLedWithYourRaspberryPi_0.png\" />\n\n의문을 해결하기 위해 나는 확실한 작업으로 시작하기로 결정했다: LED 깜박임.\n\n이 프로젝트는 초보자에게 좋은 과제인데, Pi의 핀 및 기본 프로그래밍에 익숙해지게되며, 시간이나 돈을 많이 소비하지 않는다. 모든 재료(PI 및 멀티미터 제외)는 약 10유로 정도 든다. 그리고 기술 수준(및 발생하는 버그에 따라)에 따라 최대 1시간 30분 정도 소요된다.\n\n# 요구 사항\n\n<div class=\"content-ad\"></div>\n\n- 라즈베리 파이 설정이 완료된 상태\n- 솔더가 필요 없는 브레드보드\n- 2개의 메스-퍼더 메일 점퍼 와이어\n- 1개의 LED\n- 작은 저항기 (330Ω 사용)\n- 멀티미터 (디버깅에 옵션)\n\n![이미지](/assets/img/2024-06-23-FoolproofBlinkaLedWithYourRaspberryPi_1.png)\n\n저는 라즈베리 파이 제로 W를 사용했지만, 이 튜토리얼은 GPIO 핀이 있는 모든 파이에 작동합니다. 파이 제로의 경우, 핀을 직접 납땜해야 합니다. 작업이 편리해지도록 다채로운 핀을 추천합니다.\n\n아직 라즈베리 파이를 설정하지 않았다면, 머릿속 작은 컴퓨터를 사용하는 방법에 대한 내 튜토리얼을 읽어보세요. 모니터로 시작하려면 공식 문서를 확인해보세요.\n\n<div class=\"content-ad\"></div>\n\n# 자극으로 바쁜 손들을 준비하고 회로를 설치하는 방법\n\n## Raspberry Pi의 GPIO 핀들:\n\n회로를 설명하기 전에, 먼저 Raspberry Pi의 중요한 부분인 GPIO 핀을 살펴보겠습니다.\n\n<img src=\"/assets/img/2024-06-23-FoolproofBlinkaLedWithYourRaspberryPi_2.png\" />\n\n<div class=\"content-ad\"></div>\n\nGPIO는 General-Purpose Input/Output의 약자입니다. 이 핀들을 사용하면 Raspberry Pi와 전기 구성 요소를 연결하여 소프트웨어를 통해 상호 작용할 수 있습니다. 그림에서 보듯이, 모든 40개의 핀은 특정한 역할을 합니다.\n\n우리의 회로를 위해 GND(0V)와 녹색, 파란색 또는 빨간색 GPIO 핀이 필요합니다. GPIO 핀은 전압을 켜고 끌 수 있도록 도와줍니다.\n\n## 회로:\n\n마지막으로, 회로를 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-23-FoolproofBlinkaLedWithYourRaspberryPi_3.png)\n\n우리는 LED를 GND에 연결하고 어떤 GPIO 핀에도 연결해야 합니다 (저는 GPIO 4를 사용했습니다).\n\n안전을 위해, GPIO 핀과 LED 사이에 저항을 연결해야 합니다. 너무 많은 전기는 좋은 경험이 아닙니다 — 특히 작은 LED에게는 특히 그렇습니다. 하지만 기억하세요: 저항이 강할수록 LED가 약하게 켜집니다.\n\n그렇지만, 330Ω로 저항을 선택하면 안전합니다. LED에 필요한 적절한 저항값을 계산하는 방법에 대해 더 알아보려면 다음 비디오를 확인해보세요:\n\n\n<div class=\"content-ad\"></div>\n\n잘 했어요, 회로는 여기까지입니다!\n\n# 파티 시작: 깜박이는 LED\n\nLED가 1초 간격으로 깜박이는 리듬을 만들어주는 것이 이번 스크립트의 작업입니다. 스크립팅에 매우 편리한 파이썬으로 프로그램을 선택했어요.\n\n우선, 라즈베리 파이에 연결하고 터미널을 엽니다. 코딩을 시작하기 전에 라즈베리 파이의 핀과 상호작용할 수 있게 해주는 라이브러리를 설치해요. 항상처럼, 패키지를 업데이트해주어요.\n\n<div class=\"content-ad\"></div>\n\n```js\n$ sudo apt update && sudo apt upgrade\n$ sudo apt install python-rpi.gpio python3-rpi.gpio\n```\n\n그런 다음 좋아하는 편집기로 빈 파일을 엽니다. 저는 ‘vim’을 선호합니다.\n\n```js\n$ vim partyLED.py\n```\n\n이제 실제 프로그램으로 넘어갑니다. GPIO 핀의 초기화 및 LED 구성으로 나뉘어집니다.\n\n<div class=\"content-ad\"></div>\n\n먼저 초기화를 살펴봅시다. 필요한 라이브러리를 스크립트에 가져온 후, GPIO 핀을 위한 변수를 만듭니다.\n\n다른 GPIO 핀을 연결했다면 4를 해당 GPIO 핀 번호로 바꿔주세요.\n\n더불어 GPIO 핀 대신 물리적 핀을 사용하도록 지정하고 전압을 제어하기 위해 GPIO 핀을 출력 핀으로 설정합니다.\n\n```js\nimport RPi.GPIO as GPIO         # 라즈베리파이 GPIO 라이브러리 가져오기\nfrom time import sleep          # sleep 함수 가져오기 \n\npinLED = 4                      # LED GPIO 핀 번호\n\nGPIO.setmode(GPIO.BCM)          # GPIO 핀 번호 사용\nGPIO.setwarnings(False)         # 경고 무시\nGPIO.setup(pinLED, GPIO.OUT)    # GPIO 핀을 출력 핀으로 설정\n```\n\n<div class=\"content-ad\"></div>\n\nLED가 실제로 깜박이도록 하려면 GPIO 핀을 HIGH(전압이 켜짐)으로 설정한 후 LOW(전압이 꺼짐)으로 설정하는 루프를 만듭니다. while 루프로 인해 우리의 프로그램은 콘솔을 통해 중지할 때까지 실행됩니다.\n\n```js\nwhile True:                          # 무한 루프\n    GPIO.output(pinLED, GPIO.HIGH)   # 켜기\n    print(LED 켜짐)                   # 상태를 콘솔에 출력\n    sleep(1)                         # 1초 동안 일시정지\n    GPIO.output(pinLED, GPIO.LOW)    # 끄기\n    print(LED 꺼짐)                  # 상태를 콘솔에 출력\n    sleep(1)                         # 1초 동안 일시정지\n```\n\n모두 함께 넣으면 프로그램은 다음과 같이 보입니다:\n\n```js\nimport RPi.GPIO as GPIO         # 라즈베리파이 GPIO 라이브러리 import\nfrom time import sleep          # sleep 함수 import\n\npinLED = 4                      # LED GPIO 핀\n\nGPIO.setmode(GPIO.BCM)          # GPIO 핀 번호 사용\nGPIO.setwarnings(False)         # 우리 경우 경고 무시\nGPIO.setup(pinLED, GPIO.OUT)    # GPIO 핀을 출력 핀으로 설정\n\nwhile True:                          # 무한 루프\n    GPIO.output(pinLED, GPIO.HIGH)   # 켜기\n    print(LED 켜짐)                   # 상태를 콘솔에 출력\n    sleep(1)                         # 1초 동안 일시정지\n    GPIO.output(pinLED, GPIO.LOW)    # 끄기\n    print(LED 꺼짐)                  # 상태를 콘솔에 출력\n    sleep(1)                         # 1초 동안 일시정지\n```\n\n<div class=\"content-ad\"></div>\n\n그리고 다 됐어요! 이 몇 줄이 모든 마법을 부릅니다.\n\n이제 파일을 저장하고 Pi에서 실행하세요:\n\n```js\n$ python partyLED.py\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:800/1*t3lO_bC7qHuqHf5sYxsXiA.gif\" />\n\n<div class=\"content-ad\"></div>\n\n프로그램을 중지하려면 터미널에서 CTRL+C를 눌러주세요.\n\n# 일반적인 문제\n\n- LED의 긴 다리(+)를 GPIO 핀에 연결하고 짧은 다리(-)를 GND에 연결해야 합니다. 전기는 한 방향으로만 흐릅니다.\n- 멀티미터가 있다면 각 전기 부품의 전압을 확인하고 LED와 저항기를 통해 전류가 흐르는지 확인할 수 있습니다.\n- 저항을 더 약한 것으로 바꿔보세요 (하지만 100Ω 미만은 사용하지 마세요). 전압이 너무 낮아지면 LED가 꺼집니다.\n\n만약 멀티미터가 없다면, LED가 제대로 작동하는지 확인하려면 플러스극을 GPIO 핀 대신 3.3V에 연결해보세요. 그러면 LED가 계속 켜질 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n요컨대: Pi로 시작하는 것은 예상했던 것보다 훨씬 쉽습니다. 작은 회로, 약간의 Python 프로그래밍 — 그게 다 필요한 것뿐이에요!\n\n전자 부품을 다뤄본 것이 즐거우셨다면, 회로에 더 많은 LED를 추가하거나 각기 다른 간격으로 깜박이게 하거나 작은 신호등을 만들어보세요. 이 과정은 Pi와 코딩을 더 익숙하게 만들어줄 거예요.\n\n또한, 처음에 잘 되지 않았다고 걱정하지 마세요. 믿으시든지 말든지 저는 저도 내 저항이 너무 강하다는 걸 알지 못해서 모든 것을 작동시키기 위해 1시간 이상이 걸렸어요(... 알겠어요). 고난을 겪는 것도 괜찮아요.\n\n<div class=\"content-ad\"></div>\n\n어쨌든, LED 깜박임을 마스터해서 기뻐요. 라즈베리 파이를 시작하는 방법을 알아내고 나니, 더 멋진 프로젝트에 더 흥분하고 있어요.\n\n그리고 당신도 그렇기를 바라요.\n\n더 멋진 프로젝트를 찾고 계신가요? 초보자를 위한 내 간단한 자동식 식물 관수 시스템 만들기 튜토리얼에서 배워보세요.","ogImage":{"url":"/assets/img/2024-06-23-FoolproofBlinkaLedWithYourRaspberryPi_0.png"},"coverImage":"/assets/img/2024-06-23-FoolproofBlinkaLedWithYourRaspberryPi_0.png","tag":["Tech"],"readingTime":6},{"title":"블루투스를 사용하여 헤드리스 라즈베리 파이에 연결하는 방법","description":"","date":"2024-06-23 18:13","slug":"2024-06-23-ConnecttoaheadlessRaspberryPiusingBluetooth","content":"\n\n<img src=\"/assets/img/2024-06-23-ConnecttoaheadlessRaspberryPiusingBluetooth_0.png\" />\n\n헤드리스 Raspberry Pi 기반 솔루션을 배포하는 데 있어서의 한 가지 어려움은 고객 네트워크에 라우터 액세스 없이 장치를 구성하는 것입니다. 종종 기계의 무선 설정을 변경해야 하지만 클라이언트 환경에서 설정을 변경할 수 있는 방법이 없습니다. 한 가지 솔루션은 장치에 Bluetooth 시리얼 포트를 구성하여 PC에서 실행 중인 Putty SSH 세션과 통신을 허용하는 것입니다. 연결이 설정되면 Bluetooth 검색을 끄어 다른 사람이 심지어 인식하지 못하도록 할 수 있습니다. 기계에서 액세스 포인트를 여는 것보다 안전하며 훨씬 간단합니다. 사실, 이 솔루션을 사용하려면 설치할 새 소프트웨어가 필요하지 않습니다. 대부분의 Bluetooth 기능을 포함하는 빌드와 함께 제공되는 소프트웨어의 구성만 필요합니다. 이를 Raspberry Pi 3+ 및 OrangePi Zero 3에서 시험했습니다. 한 가지 주의할 점은, 이 솔루션은 미래 릴리스에서 폐기될 예정이라는 RFCOMM 소프트웨어에 기반을 두고 있습니다. 다른 패키지를 사용한 (간단한) 대체 방법을 찾지 못했고, 제 개인적인 구성 도구에서만 사용하고 있기 때문에 미래의 구식화 위험을 감수할 의향이 있습니다. 웹에서 솔루션을 연구하는 동안 해결책에 대한 기술적인 기사를 많이 찾았지만 단계별 가이드는 찾지 못했습니다. 그래서 여기에 있습니다...\n\n- 개발이나 구성을 위해 일반적으로 수행하는 것처럼 Windows PC의 PuTTY를 사용하여 알려진 네트워크의 헤드리스 장치에 연결합니다.\n- RFCOMM 서비스를 위한 서비스 시작 파일을 추가합니다. 이는 /etc/systemd/system 디렉토리에 있어야하며 파일 이름은 rfcomm.service 여야합니다.\n\n```js\nsudo nano /etc/systemd/system/rfcomm.service\n```\n\n<div class=\"content-ad\"></div>\n\n아래 내용을 입력해주세요:\n\n\n[Unit]\nDescription=RFCOMM 서비스\nAfter=bluetooth.service\nRequires=bluetooth.service\n[Service]\nExecStart=/usr/bin/rfcomm watch hci0 1 getty rfcomm0 115200 xterm -a <로그인이름>\n[Install]\nWantedBy=multi-user.target\n\n\n`<로그인이름>` 자리에 기기에 로그인하려는 사용자 이름을 입력해주세요. 만약 자동 로그인을 원치 않는다면, `ExecStart` 줄의 `xterm` 이후에 있는 모든 내용을 제거해주세요.\n\n3. 다음 명령어를 사용하여 재부팅 시 실행되도록 이 서비스를 설치해주세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nsudo systemctl enable rfcomm\n```\n\n4. 다음과 같이 맨 위에 \"DisbablePlugins = pnat\" 문을 추가하여 파일 /etc/bluetooth/main.conf를 수정하십시오:\n\n```js\n[General]\nDisablePlugins = pnat\n```\n\n5. 사용하고 싶은 Bluetooth 이름을 가진 파일 /etc/machine-info를 추가하거나 수정하십시오.\n\n<div class=\"content-ad\"></div>\n\n```js\nPRETTY_HOSTNAME=<블루투스이름>\n```\n\n원하는 장치 이름으로 표시하고 싶다면 `블루투스이름`을 대체하세요.\n\n6. 블루투스 서비스 파일을 수정하세요.\n\n```js\nsudo nano /etc/systemd/system/bluetooth.target.wants/bluetooth.service\n```\n\n<div class=\"content-ad\"></div>\n\n다음 두 줄로 대체해주세요:\n\n```js\nExecStart=/usr/libexec/bluetooth/bluetoothd -C\nExecStartPost=/usr/bin/sdptool add SP\n```\n\n<div class=\"content-ad\"></div>\n\n7. 이제 구성이 완료되어 장치를 다시 부팅하여 서비스를 다시 시작하세요.\n\n8. 이제 PC와 Bluetooth 연결을 수동으로 설정할 수 있습니다. 이 작업은 한 번만 수행하면 됩니다. 기기가 근접할 때마다 연결이 다시 설정됩니다. 라즈베리 파이 장치에서 다음 명령을 입력하세요:\n\n```js\nsudo bluetoothctl\ndiscoverable on\nagent on\npairable on\nscan on\n```\n\n이제 아래와 같이 Bluetooth 장치 ID가 표시됩니다. 통신하는 기기의 16진수 값을 찾아 작동 중인지 확인하세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-ConnecttoaheadlessRaspberryPiusingBluetooth_1.png\" />\n\n9. 이제 Windows PC로 이동하여 \"Bluetooth 및 기타 장치 설정\"을 열어주세요. 그런 다음 \"Bluetooth 또는 기타 장치 추가\"를 선택한 후 \"Bluetooth\"를 선택합니다. 그러면 장치 목록이 표시됩니다. 해당 장치를 선택하면 페어링 키가 표시되고 확인 메시지가 나타납니다. PC에서 확인한 후 라즈베리 파이에서 두 가지 메시지에 \"예\"로 답하세요. 이 시점에서 두 장치가 페어링되었으며 이제 라즈베리 파이 창으로 돌아가서 다음과 같이 입력해주세요:\n\n```js\nDiscoverable off\nexit\n```\n\n10. 올바른 연결을 확인하려면 PC로 돌아가주세요. \"Bluetooth 및 기타 장치\" 창에서 아래로 스크롤하여 \"장치 및 프린터\"를 찾아 선택해주세요. 여기에 따라 \"Unspecified\" 항목 하위에 장치 목록이 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-23-ConnecttoaheadlessRaspberryPiusingBluetooth_2.png\" />\n\n이제 디바이스에 마우스 오른쪽 버튼을 클릭한 다음 \"속성\"을 선택하세요. 그런 다음 \"서비스\" 탭을 선택하세요. 다음과 같은 화면이 나타날 것입니다:\n\n<img src=\"/assets/img/2024-06-23-ConnecttoaheadlessRaspberryPiusingBluetooth_3.png\" />\n\n시리얼 포트 항목이 여러분의 디바이스에 연결해야 하는 포트입니다. 다음 단계에서 사용할 COM 포트 번호를 기록해주세요.\n\n\n<div class=\"content-ad\"></div>\n\n11. 이제 PC에서 새 PuTTY 창을 열고 표시된대로 연결 매개변수를 입력하세요. \"Serial\" 연결 유형을 선택하고 COM 포트 및 속도 값을 입력하세요.\n\n![이미지](/assets/img/2024-06-23-ConnecttoaheadlessRaspberryPiusingBluetooth_4.png)\n\n이제 \"열기\"를 선택하고 잠시 후에...\n\n![이미지](/assets/img/2024-06-23-ConnecttoaheadlessRaspberryPiusingBluetooth_5.png)\n\n<div class=\"content-ad\"></div>\n\n당신이 있네요!\n\n이제 raspi-config를 사용하여 다른 네트워크를 설정하거나 필요한 다른 구성 변경을 할 수 있습니다.\n\n여기까지 왔으니, 두 장치를 모두 전원을 끄고 다시 키고, 다시 구성하지 않고도 연결할 수 있는 능력을 테스트해보는 것이 좋습니다. 두 기기가 재부팅된 후 PC에서 \"Bluetooth 및 기타 장치\"로 이동하여 장치가 식별되고 시리얼 포트 서비스가 실행 중인지 확인하세요. 그렇다면 준비된 것입니다. 이제 두 장치를 Wifi 접속이 없는 위치로 옮기고 여전히 PuTTY와 Bluetooth를 통해 무선 장치와 통신할 수 있습니다.\n\n그게 다에요! 마지막으로 한 가지 덧붙이자면, 몇 년간 Medium에서 독자로 활동해 왔지만, 이번이 처음으로 글을 게시하는 시도입니다. 건성적인 피드백을 환영할게요.","ogImage":{"url":"/assets/img/2024-06-23-ConnecttoaheadlessRaspberryPiusingBluetooth_0.png"},"coverImage":"/assets/img/2024-06-23-ConnecttoaheadlessRaspberryPiusingBluetooth_0.png","tag":["Tech"],"readingTime":5},{"title":"라즈베리 파이 Cloudflare 터널 - DNS 라우팅을 사용해 내부 웹 서비스를 외부에 공개하는 방법","description":"","date":"2024-06-23 18:11","slug":"2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting","content":"\n\n클라우드플레어 터널을 사용하여 홈랩에 있는 서비스를 공용으로 노출할 수 있습니다. 이것은 포트 포워딩의 대안이 될 수 있습니다.\n\n![이미지](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_0.png)\n\n# 중요 사항!!\n\n자신이 하는 일의 결과와 위험을 알지 못한 채, 개인 서비스를 노출하는 것은 위험합니다!!\n\n<div class=\"content-ad\"></div>\n\n위 지침을 따를 때 주의하세요.\n\nCloudflare 터널은 구성된 DNS 또는 IP에 대해서만 트래픽을 라우팅하지만, 트래픽은 클라우드플레어 터널 구성에 따라 개인 네트워크 어디에서든 발생할 수 있습니다.\n\n보안을 높이기 위해 방화벽을 사용하여 클라우드플레어 터널이 설치된 Raspberry Pi의 네트워크를 격리했습니다.\n\n# 소개\n\n<div class=\"content-ad\"></div>\n\nHomeLab를 운영하는 주된 이유 중 하나는 자체 구축한 웹 서비스를 사설 네트워크에서 호스팅하는 것입니다. 이 웹 서비스를 구축하고 나면 많은 사용자들이 사용할 수 있도록 공용 네트워크에 노출되어야 합니다. (그것이 제 목표입니다.)\n\n과거에는 포트 포워딩이 사설 웹 서비스를 공개 네트워크에 노출하는 유일한 옵션이라고 생각했습니다.\n\n최근에 몇몇 영상과 기사를 보고 클라우드플레어 터널이 포트 포워딩 대안으로 사용될 수 있다는 것을 알게 되었습니다.\n\n# 클라우드플레어는 어떻게 작동하나요?\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_1.png)\n\n안녕하세요! 클라우드플레어 터널은 클라우드플레어가 제공하는 서비스로, 웹 서버나 다른 리소스와 같은 인프라를 클라우드플레어의 글로벌 네트워크에 안전하게 연결할 수 있게 해줍니다. 이런 방식으로 작동합니다:\n\n- 설치: 클라우드플레어 터널 클라이언트 소프트웨어를 웹 서버나 연결하고자 하는 장치에 설치합니다. 이 클라이언트 소프트웨어는 클라우드플레어 네트워크와 안전한 연결을 설정합니다.\n- 인증: 설치 후 클라이언트 소프트웨어는 API 토큰이나 다른 인증 방법을 사용하여 클라우드플레어와 인증을 수행합니다. 이를 통해 권한이 있는 클라이언트만 클라우드플레어와 연결을 설정할 수 있습니다.\n- 연결 설정: 클라이언트 소프트웨어는 클라우드플레어의 엣지 위치 중 하나로 안전하고 암호화된 터널을 설정합니다. 이 터널은 인프라와 클라우드플레어 네트워크 간의 개인 연결 역할을 합니다.\n- 라우팅: 터널이 설정되면 인프라로의 트래픽이 클라우드플레어 네트워크를 통해 라우팅됩니다. 클라우드플레어의 글로벌 네트워크는 콘텐츠 전달을 최적화하여 성능과 신뢰성을 향상시킵니다.\n- 보안: 터널은 인프라와 클라우드플레어 간의 모든 트래픽을 암호화하여 제3자에 의한 가로채기나 변조로부터 보호합니다. 추가로, 클라우드플레어 네트워크는 DDoS 보호 및 다른 보안 기능을 제공하여 인프라를 공격으로부터 안전하게 보호합니다.\n- 관리: 클라우드플레어 대시보드를 통해 터널을 관리하고 모니터링할 수 있습니다. 이는 터널 상태 모니터링, 라우팅 설정 구성, 로그 및 분석에 접근하는 것을 포함합니다.\n\n요약하면, 클라우드플레어 터널은 프라이빗 인프라를 클라우드플레어의 글로벌 네트워크에 안전하고 효율적으로 연결하는 방법을 제공하여 성능, 신뢰성 및 보안을 향상시킵니다. (물론 여러분의 기대에 따라 달라집니다!)\n\n<div class=\"content-ad\"></div>\n\n# DNS 라우트와 IP 라우트 비교\n\nCloudflare 터널은 DNS 라우트와 IP 라우트 두 가지 라우팅 옵션을 제공합니다. 아래는 두 가지의 비교입니다:\n\n## DNS 라우트 동작 방식\n\nDNS 라우팅을 사용하면 Cloudflare 터널 클라이언트가 호스트 이름을 Cloudflare에 등록하고 해당 호스트 이름에 대한 DNS 요청이 가장 가까운 Cloudflare 데이터 센터로 라우팅됩니다.\n\n<div class=\"content-ad\"></div>\n\n## DNS 라우트의 장점\n\n- 간편한 구성: IP 주소를 관리할 필요가 없습니다; DNS가 라우팅을 자동으로 처리합니다.\n- 동적 IP 주소: 서버의 IP 주소가 변경되어도 구성을 업데이트할 필요가 없습니다; Cloudflare가 동적 IP 변경을 처리합니다.\n- 부하 분산: Cloudflare의 글로벌 애니캐스트 네트워크가 트래픽을 자동으로 가장 가까운 데이터 센터로 라우팅하여 성능과 신뢰성을 향상시킵니다.\n\n## DNS 라우트 고려 사항\n\n- DNS 전파: DNS 레코드의 변경 사항은 전파되는 데 시간이 걸 수 있으며, 라우팅 변경이 적용되는 데 걸리는 시간에 영향을 줄 수 있습니다.\n- 제한된 제어: IP 라우트와 비교하여 라우팅에 대한 세밀한 제어가 적습니다.\n\n<div class=\"content-ad\"></div>\n\n## IP 경로 작동 방식\n\nIP 라우팅을 사용하면 Cloudflare 터널 클라이언트가 특정 IP 주소를 Cloudflare에 등록하고, 해당 IP 주소로 전송된 트래픽은 Cloudflare 네트워크를 통해 서버로 라우팅됩니다.\n\n## IP 경로의 장점\n\n- 직접 라우팅: 트래픽이 서버의 IP 주소로 직접 라우팅되어 DNS 라우팅보다 지연 시간을 단축할 수 있습니다.\n- 상세한 제어: 라우팅에 대해 더 많은 제어권을 가지고 서버에 연결할 수 있는 IP 주소를 지정할 수 있습니다.\n- 즉시 트래픽: IP 경로에 대한 변경 사항이 DNS 전파를 기다리지 않고 즉시 적용됩니다.\n\n<div class=\"content-ad\"></div>\n\n## IP 경로 고려 사항\n\n- 정적 IP 주소: 서버에 정적 IP 주소가 필요합니다. IP 경로는 특정 IP 주소에 연결되어 있기 때문입니다.\n- 구성 관리: 서버의 IP 주소가 변경되면 IP 경로를 수동으로 업데이트해야 합니다.\n- DNS 해결 문제 가능성: 클라이언트의 DNS 해결에 실패하면 서버에 연결할 수 없게 됩니다.\n\n## DNS 경로 또는 IP 경로를 사용해야 하는 경우\n\n- DNS 경로: 간편함, 동적 IP 주소, 그리고 클라우드플레어가 부하 분산과 트래픽 라우팅을 자동으로 처리하길 원하는 경우 DNS 라우팅을 사용하세요.\n- IP 경로: 라우팅 제어가 필요하거나 정적 IP 주소가 필요하거나 DNS 전파를 기다릴 필요 없이 즉시 트래픽 라우팅 변경이 필요한 경우 IP 라우팅을 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n최종적으로 DNS 라우팅과 IP 라우팅 사이의 선택은 특정 사용 사례, 요구 사항 및 제어, 유연성 및 관리 용이성에 대한 선호도에 따라 다릅니다.\n\n# DNS 라우팅 또는 cloudflared CLI를 사용하기로 결정했습니다\n\n먼저, 홈랩의 정적 IP를 노출시키고 싶지 않았습니다 (심지어 정적 IP조차 아닙니다). ISP에서 할당한 IP는 변경되지 않을 수 있지만, 이것이 정적 IP라는 것은 아닙니다. ISP가 원하는 경우 언제든지 IP가 변경될 수 있습니다.\n\n둘째, 저는 단순히 특정 도메인 이름으로의 트래픽을 홈랩으로 라우팅하길 원했습니다.\n\n<div class=\"content-ad\"></div>\n\n세 번째로, 클라우드플레어 터널 구성을 만들기 위해 클라우드플레어 클라이언트 명령줄 인터페이스(cloudflared CLI)를 사용하기로 결정했어요. 어떻게 작동하는지 알아내는 데 조금 더 시간이 걸렸지만, 구성을 자동화하는 데 도움이 되었어요 (실제로는 클라우드플레어 패키지 설치뿐이지만). 안시블 플레이북에서 자동화되고 스크립팅된 것들이 있었지만, 내가 개입해야 했던 몇 가지 단계들이 있었기 때문에 많이 도움이 되지는 않았어요.\n\n# 클라우드플레어 터널은 어떻게 구성되나요?\n\n클라우드플레어에 대한 게시물과 문서를 읽고, 비디오를 시청한 후, 내가 가지고 있는 라즈베리 파이 5 중 하나에 클라우드플레어 터널을 설치하고 구성했어요.\n\n클라우드플레어 터널을 통한 DNS 라우트를 위해 나에게는 세 가지 엔티티가 있었어요.\n\n<div class=\"content-ad\"></div>\n\n- 도메인 이름의 CNAME 레코드\n- Cloudflare의 Cloudflare 터널 데몬/구성\n- 내 HomeLab 기기에 Cloudflare 터널 데몬/구성\n\n클라우드플레어 터널은 사용한 라즈베리 파이와 클라우드플레어 간의 VPN처럼 보였어요.\n\n# Ansible Playbook을 작성했습니다\n\n라즈베리 파이에 클라우드플레어드(클라이언트)를 여러 번 설치했습니다. 이 작업은 간단했지만 실험 중에 반복되어 수행되었기 때문에, 라즈베리 파이에 클라우드플레어드를 설치하는 Ansible Playbook을 작성했어요.\n\n<div class=\"content-ad\"></div>\n\n앤서블 플레이북을 사용하면 GPG 키와 Cloudflared가 간단히 설치됩니다. (현재 Debian + Bookworm만 지원됩니다.)\n\n```js\n# moon-rapi 레포지토리 클론\ngit clone https://github.com/Gatsby-Lee/moon-rapi.git\n\n# 하위 디렉토리로 이동\ncd ansible_playbook\n\n# 1. 대상 머신 IP 주소, 로그인 사용자 이름, 개인 SSH 키를 변경하세요.\n# 2. 플레이북 실행\n# 이 작업은 cloudflared를 설치합니다. (아직 구성하지는 않음)\nansible-playbook --inventory <대상 머신 IP 주소>, \\\n  --user <로그인 사용자 이름> \\\n  --private-key ~/.ssh/<개인 SSH 키> \\\n  install-cloudflared-on-debian.yaml\n```\n\n![라즈베리파이와 Cloudflare Tunnel 및 DNS 라우팅을 사용하여 2024년 6월 23일에 개인 웹 서비스를 공개하는 방법](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_2.png)\n\n# Cloudflared CLI를 사용하여 Cloudflare 터널 구성하기\n\n<div class=\"content-ad\"></div>\n\n## 단계 1: 로그인하고 루트로 전환하기\n\n저는 Cloudflare Tunnel이 인프라의 일부였기 때문에 서비스를 구성하고 시작하기 위해 \"root\" 사용자를 사용했습니다.\n\n```js\n# 설치된 cloudflared 버전 확인\ncloudflared --version\n# root 사용자로 전환\nsudo -s\n# root 사용자의 홈 디렉토리로 이동\ncd ~ \n```\n\n![이미지](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_3.png)\n\n<div class=\"content-ad\"></div>\n\n## 단계 2: 클라우드플레어에 로그인하여 클라우드플레어 터널 승인하기\n\nCloudflared CLI를 사용하려면 클라우드플레어 로그인 및 승인을 거쳐 클라우드플레어 터널을 활성화해야 했습니다.\n\n시작 명령어는 \"cloudflared login\"입니다.\n\n해당 명령은 아래 스크린샷과 같은 https 링크를 출력했습니다. URI는 복사하여 브라우저에 붙여넣어 클라우드플레어 터널 승인을 진행해야 했습니다.\n\n<div class=\"content-ad\"></div>\n\n과정 중에 Cloudflare Tunnel과 구성하고 싶은 도메인을 선택해야 했어요. (저는 소유한 도메인 중 하나를 선택했어요.)\n\n과정이 끝난 후에, 로그인을 수행한 기기에 /root/.cloudflared/cert.pem 파일이 제공되었어요.\n\n```js\ncloudflared login\n```\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n\n![Step 3: Create Cloudflare Tunnel](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_5.png)\n\n![Step 3: Create Cloudflare Tunnel](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_6.png)\n\n![Step 3: Create Cloudflare Tunnel](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_7.png)\n\n## Step 3: Create Cloudflare Tunnel\n\n\n<div class=\"content-ad\"></div>\n\n\"wowamazon\"이라는 이름의 터널을 생성했어요. Cloudflare 터널을 생성한 후에는 `/root/.cloudflared` 경로 아래에 `uuid`.json 형식의 터널 전용 자격 증명이 생성되었어요.\n\nCloudflare 웹 UI에서 아래 스크린샷처럼 생성된 터널을 확인할 수 있었어요.\n\n```js\ncloudflared tunnel list\ncloudflared tunnel create <터널 이름>\n\n# 터널 정보 가져오기\ncloudflared tunnel info <터널 이름>\n\n# 터널을 삭제해야 하는 경우.\n# -f를 사용하여 강제로 삭제할 수 있어요\ncloudflared tunnel delete <터널 이름>\ncloudflared tunnel delete <터널 이름> -f\n```\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_8.png\" />\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_9.png)\n\n## 단계 4: DNS 경로 만들기 — 공개 도메인을 통한 트래픽 라우팅\n\nCloudflare 터널을 생성한 후, Cloudflare 터널을 통해 라우팅하고자 하는 도메인으로 DNS 경로를 만들었습니다.\n\nDNS 경로 생성은 wowamazon.party와 같은 도메인 아래 CNAME 레코드를 생성했습니다. 아래 스크린샷을 참조해주세요.\n\n<div class=\"content-ad\"></div>\n\n또한, 방금 추가한 Routes로 Cloudflare Tunnel이 업데이트되었습니다. 아래 스크린샷처럼요.\n\n```js\ncloudflared tunnel route dns <tunnel-name> <domain>\n\n# for myself.\ncloudflared tunnel route dns wowamazon wowamazon.party\ncloudflared tunnel route dns wowamazon *.wowamazon.party\n```\n\n![이미지1](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_10.png)\n\n![이미지2](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_11.png)\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_12.png\" />\n\n생성된 CNAME의 내용은 아래의 형식을 따릅니다.\n\n```js\n<tunnle-uuid>.cfargotunnel.com\n```\n\n## 단계 5: Cloudflare 터널 구성 파일 생성\n\n<div class=\"content-ad\"></div>\n\n클라우드플레어 터널 구성 파일을 생성했어요. 경로는 /root/.cloudflared/config.yml 입니다.\n\n다음과 같은 내용을 사용했어요. 인그레스를 구성하여 모든 트래픽을 로컬 \"http://127.0.0.1:8080\"으로 보내도록 설정했어요. 도커가 실행되고 수신 대기 중인 곳이에요. (내용은 당신의 환경에 맞게 변경해주세요.)\n\n```js\ntunnel: <터널-ID>\ncredentials-file: /root/.cloudflared/<터널-ID>.json\n\n# ref: https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/configure-tunnels/local-management/configuration-file/\ningress:\n  - hostname: wowamazon.party\n    service: http://127.0.0.1:8080\n  - hostname: \"*.wowamazon.party\"\n    service: http://127.0.0.1:8080\n\n  - service: http_status:404\n```\n\n![이미지](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_13.png)\n\n<div class=\"content-ad\"></div>\n\n## 단계 6: 구성으로 클라우드플레어 터널 실행하기\n\n클라우드플레어 터널 구성이 완료되고 나서, 아래 명령어로 수동으로 클라우드플레어 터널을 시작할 수 있었습니다.\n\n클라우드플레어 터널이 시작되면, 웹 UI에서 클라우드플레어 터널 상태가 \"정상\"으로 표시됩니다.\n\n또한, https://wowamazon.party로 이동하여 아래 스크린샷처럼 클라우드플레어 터널이 귀하의 홈랩에서 서비스로 트래픽을 라우팅하기 시작했음을 확인할 수 있었습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ncloudflared 터널 --config /root/.cloudflared/config.yml 실행 <터널-이름>\n\n# 모든 구성이 기본 이름을 사용하므로 이 축약된 명령어도 가능합니다.\ncloudflared 터널 실행\n\n# 제 경우에는 구성과 터널 이름을 명시하는 것이 더 좋습니다.\ncloudflared 터널 --config /root/.cloudflared/config.yml 실행 wowamazon\n```\n\n![이미지 1](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_14.png)\n\n![이미지 2](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_15.png)\n\n![이미지 3](/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_16.png)\n\n\n<div class=\"content-ad\"></div>\n\n## 단계 7: 클라우드플레어 터널을 서비스로 실행하기\n\n이전 단계인 6단계에서 특정 구성과 클라우드플레어 터널 이름으로 클라우드플레어드를 수동으로 시작했습니다. (수동 방식은 모든 것이 예상대로 작동하는지 확인하기 쉽고 간단했습니다)\n\n클라우드플레어 터널 시작은 내장된 \"서비스로 클라우드플레어드\"로 자동화할 수 있습니다.\n\n\"cloudflared service install\" 명령어를 사용하여 cloudflared 서비스를 설치할 수 있습니다. \"cloudflared service\"가 설치되면 /root/.cloudflared/config.yml의 사본이 /etc/cloudflared/config.yml로 복사됩니다. 아래 스크린샷과 같이요.\n\n<div class=\"content-ad\"></div>\n\n만약 \"cloudflared service\"가 문제없이 설치되었다면, 서비스는 자동으로 실행됩니다. 아래 명령어를 사용하여 서비스 상태를 확인할 수 있습니다.\n\n```js\ncloudflared service install\n\n# 서비스를 제거하려면,\ncloudflared service uninstall\nrm /etc/cloudflared/config.yml\n\n===\n\n# cloudflared 서비스 상태 확인\nsystemctl status cloudflared.service\n# cloudflared 서비스 수동 정지/시작\nsystemctl stop cloudflared.service\nsystemctl start cloudflared.service\n```\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_17.png\" />\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_18.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 마무리\n\n몇 주 전에 라즈베리 파이 5대에 클라우드플레어 터널을 설치했어요. 그런데 이 단계별 포스트를 작성하는 데 시간이 걸렸네요. 몇 가지가 제게 명확하지 않아서 그랬던 것 같아요.\n\n이 게시물이 클라우드플레어 터널에 참여하는 데 도움이 되길 바래요 😃\n\n# 다음부턴","ogImage":{"url":"/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_0.png"},"coverImage":"/assets/img/2024-06-23-RaspberryPiHowtoexposeWebServicesinPrivatetoPublicwithCloudflareTunnelDNSrouting_0.png","tag":["Tech"],"readingTime":12},{"title":"라즈베리 파이 클러스터 설정 Kubernetes와 Airflow, Ansible 사용 방법","description":"","date":"2024-06-23 18:09","slug":"2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible","content":"\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_0.png\" />\n\n아래는 Ansible을 Raspberry Pi 클러스터에서 작동시키기 위해 취한 단계를 요약한 것입니다. 이 프로젝트의 동기는 Kubernetes 및 Airflow를 실행하는 작은 규모이면서 효율적이고 유연한 클러스터 환경을 만드는 것입니다. 목표는 다양한 웹 스크래핑 스크립트를 자동으로 예약하고 서핑 조건을 확인하는 스크래핑을 포함한 DAG 스케줄링을 자동화하는 것입니다.\n\n시작하기 전에 필요한 하드웨어 구성 요소를 모두 준비했는지 확인해 주세요. 자세한 목록 및 설정 지침은 다음에서 확인할 수 있습니다:\n\n# 시작하기\n\n<div class=\"content-ad\"></div>\n\n## 초기화 스크립트에 접근하기 위해 Git 저장소를 복제하세요\n\n- 저장소를 복제하고 해당 폴더로 이동하세요:\n\n```js\ngit clone https://github.com/robronayne/PiClusterFlow.git\ncd PiClusterFlow\n```\n\n## microSD 카드에 Raspberry Pi OS 설치하기\n\n<div class=\"content-ad\"></div>\n\n1. Raspberry Pi Imager 다운로드하기:\n\n- 먼저 raspberrypi.org/software에서 Raspberry Pi Imager를 다운로드하세요.\n\n2. Imager를 사용하여 OS 설치하기:\n\n- SanDisk 32GB microSD 카드를 컴퓨터에 삽입하세요.\n- microSD 카드를 boot로 이름을 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_1.png\" />\n  \n- Raspberry Pi Imager를 열고 Raspberry Pi OS (32비트)를 선택합니다.\n- 삽입된 SD 카드를 선택합니다.\n\n3. 호스트, 사용자 이름 및 비밀번호 구성:\n\n- Pi OS의 최근 변경 사항은 SSH용 비밀번호 설정을 필요로 합니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_2.png\" />\n\n- OS 맞춤 설정 메뉴에서 호스트 이름, 사용자 이름 및 암호 구성하세요.\n- 모든 Raspberry Pi 노드의 사용자 이름을 \"pi\"로 설정하고 각각의 암호를 일관되게 유지하세요. 호스트 이름도 노드의 의도된 역할과 일치하도록 설정해주세요.\n- 프롬프트가 나타날 때 기존 데이터를 지울 것인지 확인하세요.\n- 각각의 microSD 카드에 대해 이 프로세스를 반복하세요.\n\n## Prepare microSD Cards\n\n1. microSD 카드 장착:\n\n<div class=\"content-ad\"></div>\n\n- 컴퓨터에 microSD 카드를 삽입하세요.\n- diskutil list를 사용하여 디스크 식별자(/dev/diskX)를 확인하세요.\n\n![이미지](/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_3.png)\n\n- /Volumes/에 카드의 부트 파티션을 마운트하세요. 다음 명령어를 사용하여 마운트하고 마운트를 확인할 수 있습니다:\n\n```js\ndiskutil mountDisk /dev/diskX\nls /Volumes\n```\n\n<div class=\"content-ad\"></div>\n\n2. setup_node.sh 스크립트 실행\n\n- setup_node.sh에 실행 권한을 부여하세요:\n\n```js\nchmod +x setup_node.sh\n```\n\n- 각 microSD 카드가 어떤 노드에 해당하는 지에 따라 스크립트를 한 번씩 실행하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n# 마스터 노드 마이크로SD 카드용\nsudo ./setup_node.sh master \n```\n\n```js\n# 워커 노드 마이크로SD 카드용\nsudo ./setup_node.sh worker1 \nsudo ./setup_node.sh worker2 \nsudo ./setup_node.sh worker3\n```\n\n![이미지](/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_4.png)\n\n3. 마이크로SD 카드를 추출하세요.\n\n<div class=\"content-ad\"></div>\n\n- 스크립트가 완료되면 마이크로SD 카드를 제거해 주세요\n\n```js\ndiskutil unmountDisk /dev/diskX\n```\n\n## 라즈베리 파이 기기에 마이크로SD 카드 삽입\n\n- 각 준비된 마이크로SD 카드를 해당 라즈베리 파이 기기에 넣어주세요.\n- 각 라즈베리 파이를 켜고 이더넷으로 네트워크에 연결해 주세요.\n\n<div class=\"content-ad\"></div>\n\n# 의존성 설치\n\n1. Homebrew 설치: Homebrew가 설치되어 있지 않은 경우, Homebrew를 설치하세요:\n\n```js\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n2. Ansible 설치:\n\n<div class=\"content-ad\"></div>\n\n```js\nbrew install ansible\n```\n\n3. 라즈베리 파이 IP 주소를 가져 오기 위해 nmap 설치:\n\n```js\nbrew install nmap\n```\n\n3. Ansible과의 SSH 인증을 위해 sshpass 설치하기:\n\n<div class=\"content-ad\"></div>\n\n```js\nbrew install sshpass\n```\n\n4. Ansible을 초기화합니다:\n\n- 각 Raspberry Pi에 대한 Ansible 호스트 파일 및 SSH 액세스를 구성해야 합니다.\n- init_ansible.sh 스크립트를 실행해주세요.\n\n```js\nchmod +x ./init_ansible.sh\nsudo ./init_ansible.sh\n```\n\n<div class=\"content-ad\"></div>\n\n- 이 스크립트는 Pi의 IP 주소를 동적으로 검색하여 ansible/hosts 파일에 저장합니다. 또한 각 IP 주소의 SSH 키를 ~/.ssh/known_hosts 파일에 추가합니다.\n\n![이미지](/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_5.png)\n\n- 마지막으로, 우리가 만든 Raspberry Pi 암호를 환경 변수에 추가할 수 있습니다. 스크립트는 이미 ansible/hosts 파일이 SSH 암호를 위한 환경 변수를 참조하도록 하였습니다. 이렇게 함으로써 Ansible 명령을 실행할 때마다 암호를 입력할 필요가 없어집니다.\n\n```js\nexport ANSIBLE_SSH_PASS='여러분의_ssh_암호_여기에'\n```\n\n<div class=\"content-ad\"></div>\n\n# 확인\n\n## 모든 노드에 핑 보내기\n\n- 이제 Ansible이 구성되었으므로 호스트 파일에 존재하는 모든 노드에 핑을 시도할 수 있습니다. 다음 명령어를 사용하여 디렉토리로 이동한 후 노드에 핑을 보낼 수 있습니다:\n\n```js\ncd ansible\nansible all -m ping\n```\n\n<div class=\"content-ad\"></div>\n\n\n아래는 마크다운 형식으로 변경한 표입니다.\n\n\n![Raspberry Pi Cluster](/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_6.png)\n\n지금까지 여러 Pi 노드를 구성하고 Ansible을 사용하여 설정 작업을 자동화하여 Raspberry Pi Cluster를 성공적으로 구축했습니다. 이러한 단계를 따라, 추가적인 사용자 정의 및 자동화를 위한 준비가 된 일관된 클러스터 환경을 만들었습니다. 각 Raspberry Pi 노드는 협력하여 작동할 수 있도록 준비되었으며, 분산 컴퓨팅 및 자동화에 대한 미래 프로젝트와 실험을 위한 길을 열었습니다.\n\n이 프로젝트의 현재 상태는 GitHub에서 확인할 수 있습니다:\n","ogImage":{"url":"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_0.png"},"coverImage":"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_0.png","tag":["Tech"],"readingTime":5},{"title":"바쁜 엄마가 PC 팬 코르시-로젠탈 박스를 만드는 방법","description":"","date":"2024-06-23 18:05","slug":"2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox","content":"\n\n<img src=\"/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_0.png\" />\n\nDIY 공기 청정기를 만드려는 관심에 감사드립니다! 2021년 여름에 처음으로 이에 대해 알게 되었을 때, 시작하고 싶었지만 약간 겁먹었습니다. 그 후로 다른 사람들로부터도 같은 이야기를 많이 들었습니다. 자료를 모으기 시작하고 실제로 공기 청정기를 만드는 데 조금 망설이는 것은 흔한 일입니다. 제 경험에 대해 읽는 것이 여러분이 자신의 장치를 만드는 데 도움이 되길 바랍니다.\n\n비용이 제한적이었다는 점도 솔직히 말씀드리겠습니다. 저는 파트타임으로 일하는 엄마이고 조금의 여유 재정이 없습니다. 모든 부품을 구입할 만큼의 자금이 필요하기까지 몇 달이 걸렸고, 가능한 것을 살 때마다 구입하는 식으로 비용을 조절했습니다. (Donate a Mask Canada에서 필터 재료를 기부해주고 있으므로 DIY 공기 청정이 경제적인 어려움이 되는 경우 선택할 수도 있습니다.)\n\n이 글은 자세하고 상세합니다. 주문한 부품, 상자 하나를 만드는 과정을 보여주는 사진과 함께 상세한 설명, 자원이 제한적인 부모/옹호자/일반인으로서 박스 팬 Corsi-Rosenthal 박스 대 PC 팬 버전에 대한 제 생각, 사용한 정보 자료 및 끝에 다른 대기질 자료 목록 등을 다룰 것입니다.\n\n<div class=\"content-ad\"></div>\n\n요즘 결과물을 보여주는 몇 장의 사진이 있어요:\n\n![사진1](/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_1.png)\n\n![사진2](/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_2.png)\n\n## 그래서, 이것을 어떻게 만들었고 비용은 얼마인지 궁금하신가요?\n\n<div class=\"content-ad\"></div>\n\n다른 사람들이 제작한 내용을 읽어본 것이 다행이었어요. PC 팬 버전은 더 복잡해 보였기 때문에 많은 도움이 되었습니다.\n\n여기 제가 시작한 내용이에요!\n\n![이미지](/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_3.png)\n\n제 주요 조언은 이에요: DIY 공기 청정기를 많이 제작해야 하거나 급하게 필요하다면, 일반 박스 팬 Corsi-Rosenthal 박스 디자인을 선택하세요. 20x20인치 MERV-13 필터 4개와 20인치 박스 팬이 필요해요. 이런 부품들을 찾는 데 시간이 덜 걸리고, 그 스타일로 제작하는 것이 더 직관적이고 저렴할 거예요. 결국 캐나다에서 일반 박스 팬 DIY 공기 청정기를 제작하는데 소요되는 비용은 대개 $100~150이고 한 어른이 30분이면 제작이 가능해요. PC 팬 버전은 비용이 약 $230~250이 들고 제가 3~3.5시간이 걸려요.\n\n<div class=\"content-ad\"></div>\n\n돈과 시간이 충분하다면 PC 팬 버전을 만들어 보세요! 만들 때는 급하긴 하지 말고 충분한 시간을 투자해 보세요. PC 팬을 구동하는 데 처음이라면 조립하기 전에 모든 연결 방법을 확인하기 위해 먼저 시험해 보는 것이 좋습니다.\n\n## 사용한 부품 목록\n\n필터 (2개)\n\n팬 (8개)\n\n<div class=\"content-ad\"></div>\n\n전원 공급\n\n어댑터/커넥터/분배기(필요한 경우)\n\n팬 그릴/손가락 가드(8)\n\n팬을 부착할 무언가(나무 또는 폼)\n\n<div class=\"content-ad\"></div>\n\n테이프 또는 접착제 (나는 가퍼 테이프를 사용하지만, 아마존에서 퀄리티가 낮은 가퍼 테이프에 주의하세요)\n\n폼 코어를 자르기 위한 박스 커터 - 부족한 점을 보완하기 위해 컴퍼스(원을 자를 때 사용하는 도구)를 강력히 추천합니다!\n\n제가 나열한 가격은 캐나다 달러이며 링크는 캐나다로 배송하는 곳을 가리킵니다. 미국에 계시다면 다른 링크가 필요하지만, 가격은 더 저렴할 것입니다.\n\n## 필터\n\n<div class=\"content-ad\"></div>\n\n어떤 사람들은 HEPA 또는 IKEA 필터를 사용하고 다른 사람들은 난로 필터를 사용해요. 저는 United Filter Canada에서 대량 구매한 MERV-13 필터를 사용했어요.\n\n참고: 최근에 이러한 필터의 품질에 대한 우려가 있었어요. 이 중 하나는 필터 소재에 충분한 주름이 없다는 점입니다. 독립적인 테스터 중 한 명은 이러한 필터를 통한 유속이 한 크기에서 매우 낮고, 다른 크기에서는 원활하다고 발견했어요. 전문가는 아니에요. United Filter 제품의 현재 품질에 대해 더 많은 이해를 할 때까지 3M Filtrete 필터를 구입하기로 결정했어요. 캐나다의 UF 필터보다 약 두 배 비싸기 때문에 DIY 공기 청정기를 더 적게 만들 수밖에 없을 거에요. 그 때 사용했던 United Filter 제품에 대해 계속 이야기할 것이지만, 현재 가장 안전한 접근 방법은 3M Filtretes를 구매하는 것 같아요.\n\n내 비용: 12개의 필터에 세금 포함 $146.89, 즉 필터당 $12.24 — 장치 당 $24.48. 내가 사는 곳에서는 MERV-13과 동등한 3M Filtretes를 찾기 어려우며, 일반적으로 각각 거의 $30 CAD에 판매돼요. 그래서 3M Filtretes를 선택하거나 대량으로 다른 MERV-13 필터를 구할 수 없다면 필터당 $12.24보다 비용이 더 많이 들 거에요. (또한 Rob Wissmann의 \"Tower of Power\" 디자인을 위해 United Canada로부터 20x30 MERV-13 필터 한 대량 세트를 구매했는데, 그 필터들은 조금 더 비싸고 주문했을 때 수 주가 소요됐어요. 20x20 크기는 몇 일 내에 도착했어요. UF 필터에 대해 알고 있는 내용을 고려하면, 그들의 필터로 제 PC 팬 CR 장치를 만들기 전에 품질을 확인할 때까지 기다릴 거에요.)\n\n제가 한 것처럼 2개의 필터 디자인을 만든 경우, 3개월마다 필터를 교체해야 해요. 일반 Corsi-Rosenthal 박스보다 필터가 적기 때문에 필터가 더 빠르게 더 많이 적재될 거에요. 원한다면 상단의 박스 팬을 9개의 PC 팬으로 교체하여 4개 필터 버전을 만들 수도 있습니다. 그럼 4개 필터의 경우 6~12개월 주기로 교체할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n최근에 2개의 필터 디자인을 사용한 교체 시간이 빨라진 사실과 훨씬 저렴한 United Filter 필터의 잠재적인 문제에 대해 최근에 알게 되었습니다. 이는 더 비싼 필터(3M)로 자주 교체해야 하며, 이로 인해 예상보다 운영 비용이 증가함을 의미합니다. 저에게는 DIY 공기 청정 또는 Honeywell 제품과 같은 HEPA 필터링 구입 중 선택이 있습니다. Honeywell은 HEPA 필터(매년 교체; 대형 장치는 2개 필터 사용), 프리 필터(매 3개월 교체) 및 운영 비용(전력 사용량)이 필요합니다. 올바르게 제작된 경우 DIY 필터링은 일반적으로 Honeywell이나 동등한 HEPA보다 더 높은 CADR을 제공하며, PC 팬 공기 청정기의 경우 소음이 적고 전력 소비량이 적습니다. 따라서 PC 팬 버전의 필터 비용이 증가하더라도 여전히 DIY 공기 청정의 장점이 있습니다.\n\n저는 현재 집에서 PC 팬 공기 청정기를 사용하고 있습니다. 가족 의료 연습실인 저희 가족 의학 오피스에는 다양한 크기의 허니웰 장치와 같은 HEPA 공기 청정기를 구매하고 있으며, 대기실에는 전통적인 Corsi-Rosenthal 상자를 두고 있습니다.\n\n## 팬\n\n대부분의 건축가들은 12 또는 14cm 컴퓨터 케이스 팬(120mm 또는 140mm)을 권장합니다. 팬을 한 세트에 판매하거나 “데이지 체인”으로 팬을 서로 연결할 수 있는 버전을 구매할 수 있습니다. 이를 통해 모든 팬을 구동하기 위해 스플리터를 별도로 구매할 필요가 없습니다. 위스만은 필터가 먼지로 적재되기 시작할 때 140mm이 조금 더 강력하고 오랫동안 최적으로 작동할 것이라고 권장합니다. 참고: 140mm 팬 가드는 구하기 어렵거나 건설 당시 어려웠습니다. 120mm 가드는 저렴하게 많이 구할 수 있습니다. 3D 프린터에 접근할 수 있다면 팬 가드를 3D 프린팅할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 옵션\n\n나는 내 Arctic 120mm 팬을 개당 $9.20에 삿어요.\n\n- Arctic 120mm 데이지 체인 버전 (PWM PST) in black\n- Arctic 140mm 데이지 체인 버전 (PWM PST) in black\n\n<div class=\"content-ad\"></div>\n\n5팩을 링크드해서 더 저렴하고 팬이 많이 필요할 것 같아서 추천해요. 물론 개별적으로도 구매할 수 있어요. 아마존이 아닌 다른 곳에서도 판매하고 있으니 Arctic에서 직접 주문할 수도 있어요.\n\n화이트로 제공되는 Arctic 팬도 구매할 수 있어요. RGB 팬으로 조립하고 싶은데 일부 비-RGB 팬을 섞어서 돈을 절약하고 싶다면 좋은 선택일 거예요.\n\n참고: 처음에는 데이지 체인(세이비 PST) 기능이 있는 것을 주문하지 않았어요. 선택이 주어진다면 언제나 데이지 체인 기능이 있는 것을 고르는 게 좋을 거예요. 데이지 체인 버전을 사용하면 $10분할기를 사지 않아도 될 가능성이 높아요.\n\n다른 회사에서 다른 팬 옵션이 있지만, 사람들은 Arctic 팬이 좋은 품질에 합리적인 가격으로 판매되고 있다고 동의하고 있어요.\n\n<div class=\"content-ad\"></div>\n\n제 사진들은 어린이 방에 사용된 PC 팬 빌드 사진들인데, 사진 속 주 DIY 공기 청정기는 Corsair RGB 팬을 사용하고 있어요. 나중에 해당 글에서 링크된 Wissmann의 테스트 결과를 보면, 일부 RGB 팬은 필터가 더 많이 물려있을수록 성능이 떨어진다는 것을 알 수 있는데요. 그 점도 고려해야 할 사항입니다. 필터를 3개월마다 교체하는 것이 그러한 염려를 줄일 수 있습니디까? Wissmann은 이전 필터로 테스트했는데, 그만큼 고려해보세요.\n\n## 팬 그릴 또는 손가락 그림/보호대\n\n제 빌드들은 어린이가 있는 방에 설치될 예정입니다. 그들의 손가락을 보호하고, 장난감이나 다른 물체가 들어가 화장기기를 손상시키지 않도록 팬 그릴을 부착해야 했어요. 이것이 기기에 약간의 비용과 무게를 추가하지만, 사용하는 곳에서는 필요합니다. 실수로 돌아가는 팬으로 손가락을 베었을 때, 그 통증은 정말 굉장합니다. 제 손가락이 날개에서 벗어났다고 생각하고 팬을 테스트하려 했지만 그것은 아니었습니다. 아파요!\n\n구입한 팬 크기에 따라 120mm 또는 140mm 팬 그릴 또는 팬 보호대를 찾아보세요. \"망\" 형태의 스크린을 구할 수도 있지만, 제가 살펴본 사양에 따르면 공기 흐름에 더 많은 영향을 줍니다. 팬의 공기 유속을 크게 감소시키면 DIY 공기 청정기의 효과가 줄어들게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n아마존에서 그릴을 살려고 했는데 너무 비싸보이고 대량 구매할만한 좋은 옵션이 없어요. 대부분의 PC 팬 필터 빌드는 최소한 6개의 팬을 사용하는데, 워프 코어 형태로 쌓지 않는 한 많은 그릴이 필요할 것 같아요. Digikey에서 더 많은 옵션을 찾게 되어 기뻤어요.\n\n여기 Digikey 사이트에 팬 가드를 찾아볼 수 있어요 — 개당 $1.40 또는 더 싼 가격에 구할 수 있어요. 배송도 빨랐어요. 나는 이 모델과 비슷한 것을 구매했고, 금속 소재도 있어요.\n\n## 폼 보드\n\n어떤 사람이 이것을 추천했어요. 일부 사람들은 달러 상점이나 공예 용품 가게에서 구할 수도 있었어요.\n\n<div class=\"content-ad\"></div>\n\n나의 비용: 10개의 보드에 $58.80이 듭니다. 만약 20x30 필터를 사용 중이라면, 20x30 폼 보드를 사용하시면 좋습니다. 필터와 가능한 가까운 크기의 폼 보드를 찾으셔야 합니다. 만약 길이가 일치한다면 많은 절단을 할 필요가 없습니다. 폼 코어를 선풍기 폭보다 약간 넓게 자르시면, 필터 가장자리에 부착할 공간과 전선이 붙이거나 다른 곳에 숨겨질 공간이 확보됩니다. 만약 20x30 필터를 사용하지 않는다면, 20x30 폼 코어를 구매할 필요는 없지만, 저는 이것을 구매하여 현재까지 만족했습니다. 폼 코어를 사용하고 싶지 않다면, 나무나 튼튼한 판지를 사용할 수 있습니다. 어떤 사람들은 하드보드를 사용하기도 합니다. 선거 표지판을 재활용하는 사람들도 있다고 합니다.\n\n저는 Rob이 추천한 이 나침반을 사용하여 원을 자르고 있습니다. 나는 나침반 없이 PC 선풍기 필터를 만들고 싶지 않습니다.\n\n## 전원\n\n선풍기는 벽 콘센트에 연결할 수 있는 것(또는 휴대용 파워 뱅크, 차량 전원 콘센트 등)에 연결되어야 합니다. 제품으로 제공되는 선풍기는 컴퓨터 마더보드에 연결되도록 설계되어 있기 때문에 직접 콘센트에 꽂을 수 없습니다. 전원을 구매할 때, UL 인증이 되어 있는지 확인해야 합니다. 또한 선풍기를 전원 공급 장치에 연결할 수 있는 어댑터도 구매했습니다.\n\n<div class=\"content-ad\"></div>\n\n어댑터\n\nUSB에 선풍기를 연결할 수 있는 어댑터 - 이 제품의 가격이 꽤 올랐으니 대안을 찾아보시는 것이 좋을 것 같아요. 아마존에서 어댑터를 찾는 한 가지 어려움은 제품이 계속 바뀌고 제품이 더 이상 구할 수 없는 경우가 있다는 것입니다. 전통적인 CR 박스에는 이러한 어려움이 없어요!\n\n## 전원 공급\n\nRob Wissmann의 정보를 바탕으로, 많은 선풍기를 구동할 예정이었기 때문에 UL 인증 받은 2A 전원 공급기를 선택했습니다. 더 적은 선풍기로 작은 걸 만드시는 경우 1A 전원 공급기를 선택할 수 있어요. (제 비용: 전원 공급기 당 $10)\n\n<div class=\"content-ad\"></div>\n\n다른 옵션\n\n내 RGB 및 차량 모델 장치에 대해 위에 제시된 USB 어댑터 옵션과 Anker의 2A 이중 USB 전원(또는 USB를 사용하는 차량 전원 어댑터)을 사용해왔어요.\n\n## RGB 라이트 — 선택 사항\n\nRGB 라이트가 있는 팬을 선택했다면, 라이트와 라이트 허브를 공급해야 합니다. 이것은 조금 더 복잡하며 팬과 라이트를 공급해야 하므로 두 가지를 연결해야 합니다. 이것은 Alex가 작성한 RGB 라이트를 공급하는 방법에 대한 설명입니다.\n\n<div class=\"content-ad\"></div>\n\n12월에 Corsair 브랜드를 세일해서 사용 중이에요. 참고로, 리모컨은 따로 안 오니까 무지개 색상으로 변하는 팬이에요. (제품 설명에 언급된 소프트웨어로 제어하려면 팬이 실제로 마더보드에 연결되어야 하는 거 같은데요. 공기 청정기 안에만 있을 때는 Corsair 팬 색상을 제어할 방법이 없어요.) 전원 공급은 SATA에서 USB 어댑터가 필요해요. 이에 관한 내용은 바로 위에 연결된 Alex의 스레드에서 다루고 있어요.\n\n다른 사람들은 다른 브랜드의 RGB 팬을 선호하는데요 — 가장 싼 것들은 고유의 연결 방식을 가지고 있을 가능성이 높아요 — 예를 들어 Cool Moon/UpHere 팬 같은 경우죠. 이 고유 연결 방식은 제가 처리하지 못하는 부분이에요. 주문하기 전에 항목들이 어떤 종류의 연결을 가지고 있는지 꼭 확인하세요.\n\n캐나다인들은 RGB 팬을 사용하면 DIY 공기 청정기 가격이 상당히 올라가요. 최근에는 RGB 팬 한 개가 $30-35 정도 하는데요; 위에 보신 대로, 평범한 Arctic 팬 5개 팩은 팬 당 $10 이하일 수 있어요. 저는 진짜 RGB 팬의 모습을 아주 좋아해요, 아이들 방에는 멋진 야간 조명이 되어주니까요. 아이들 방, 미디어 룸, 리크리에이션 룸, 놀이 방 등 집 안의 다양한 곳에 좋은 아이디어에요. 친구들 중 일부는 무대에서 공연 중에 공기 청정기로 사용하기도 했어요. 다양한 멋진 용도가 있지만, 건설 비용이 상당히 늘어나니까 유념해주세요. RGB 팬에 예산을 다 써버려서 이제 만드는 것은 그냥 평범한 것만 남았어요. LED 스트립으로 공기 청정기를 꾸밀 수도 있어요.\n\n## Splitter\n\n<div class=\"content-ad\"></div>\n\n올바른 팬을 얻으면 분배기 없이 데이지 체인을 할 수 있어요. 처음에는 올바른 팬을 구하지 못해서 분배기를 구해야 했어요. 사용하지 않는 팬 연결이 있다면 전기 테이프로 연결을 덮어두는 것이 좋을 수도 있어요. 이에 대해 전기 훈련을 받은 전문가와 상의하세요.\n\n다음 옵션을 구했어요. (2x1에서 5 분배기용으로 $15.99)\n\n또 다른 옵션입니다. (3x1에서 3 분배기용으로 $12.99)\n\n아마존 이외의 옵션입니다. (1에서 4 분배기용으로 $9.57)\n\n<div class=\"content-ad\"></div>\n\n## 하드웨어\n\n팬 그릴을 폼에 부착하고, 팬을 폼에 부착하기 위해 너트, 볼트,와 워셔가 필요합니다. 온라인으로 주문하는 것보다 직접 철물점을 방문하는 것이 더 나을 수 있습니다. 저는 결국 온라인에서 하드웨어를 사는 것을 포기하고 필요한 크기의 하드웨어를 현지 상점에서 모두 사버렸어요. 설치하는 각 팬은 네 군데에 부착되므로 사용하는 팬 수에 맞게 네 배의 하드웨어를 구해야 합니다. 캐나다인들에게는, 저는 하드웨어가 놀랍도록 비싼 것으로 발견했어요!\n\n원터: 옵션 1 또는 옵션 2\n\n너트\n\n<div class=\"content-ad\"></div>\n\n볼트: 옵션 1 또는 옵션 2\n\n# 가격\n\n일반 PC 팬(불빛 없음)으로 20x30 필터 크기의 타워를 만드는 비용을 각 장치 당 $228.90으로 계산했습니다. 세금 및 경우에 따라 운송 및 수입 수수료가 추가됩니다. 필터가 오래 걸려서 저스티의 의도했던 것이 맞습니다. 사진에 나온 것과는 다릅니다. 사진에 있는 것은 20x20 필터보다 작고 더 비쌌던 RGB 팬이 사용되었습니다.\n\n향후 제작 시 팬 그릴과 하드웨어를 더 싸게 구할 수 있어서 비용을 좀 더 낮출 수 있었습니다. 필터는 대량 주문으로 인한 절감도 있습니다. 친구와 대량 주문을 나누거나 많은 장치를 제작하는 것이 개별 장치 비용을 줄일 수 있습니다. 다만 대량 필터 주문을 할 수 있을 때까지 저축이 필요합니다. 만약 United Filter 옵션의 팬이 품질이 나쁘다면, 캐나다인들이 대량 MERV-13 필터를 어디서 구할 수 있는지 모르겠습니다. 사진에 나온 장치는 RGB 팬 비용 때문에 훨씬 더 비쌌습니다.\n\n<div class=\"content-ad\"></div>\n\nPC 팬 버전은 상자형 팬 CR 박스 버전에 비해 초기 비용이 비싸지만 둘 다 가격 대비 탁월한 가치를 제공합니다. PC 팬 자체는 6~8년 이상 또는 계속해서 작동해도 지속될 수 있습니다. 좋은 점은 부품이 매우 모듈식이라는 것입니다. 디바이스를 분해하고 다시 조립할 수 있습니다. 처음에 팬딜리어를 만들었지만 실패해서 전체 테이프를 제거하고 (테이프를 낭비했지만) 중력과 내 테이프가 잘 맞지 않아서 단순히 공중에 매달린 팬딜리어 대신 대지에 설치된 PC 팬 CR 박스로 재조립했습니다.\n\nPC 팬 버전은 등가 비용 상용 HEPA 필터에 비해 여전히 많은 여과 기능을 제공해야 합니다. Wissmann은 CADR을 500 근처로 측정했습니다 (20x30 3M 필트리트 필터와 9개의 140mm 팬 사용 시). 비교를 위해 2개의 허니웰 HEPA를 살펴보았습니다. Canadian Tire는 CADR이 48인 가장 작은 허니웰 HEPA에 $125를 청구합니다. 훨씬 큰 허니웰 HEPA는 $420이며 CADR이 338입니다. Wissmann의 Tower of Power 디자인은 이를 손쉽게 이기며, 더 조용하며 (1m 떨어진 거리에서 측정한 약 43 dB — 제 허니웰 HEPA는 최고 설정에서 56 dB로 측정되어 있으며 제가 사용 중인 방법입니다); 전력을 덜 소모합니다.\n\n전통적인 상자형 팬 CR 박스와 비교하면? 처음 CR 박스를 만들 때 비싼 필터를 사용했습니다. 20인치 상자형 팬은 일반적으로 약 $45이며 (NB에서 최근에 홈 하드웨어에서 $30에 Lasko 팬을 발견한 사람도 있지만 이 가격으로 정기적인 판매를 기대하지 마세요); 필트리트 대신 필터를 대량으로 주문해야 한다면 미국만 $88에 CR 박스를 만들 수 있습니다 (덕트 테이프 비용 제외). 특히 캐나다에서 3M 필트리트 필터를 사용하는 경우 가격이 더 비쌀 수 있습니다 — 판매 품목을 찾을 수 없다면 1개의 CR 박스를 만드는 데 최대 $170이 들 수도 있지만, 할인 품목을 구입할 수 있다면 $100-130 정도로 저렴할 수 있습니다. 작은 지역에서는 매장에서 MERV-13과 유사한 필터를 찾을 수 없을 수 있으며 온라인 주문을 해야 할 수도 있습니다.\n\n크기, 소음, 전력 소모의 교환을 고려할 때 이는 상당한 가격 차이입니다. 그러나 상자형 팬 CR 박스의 소음이 사용을 막아서거나 크기가 큐브 모양 때문에 불편하다면, 분명히 더 높은 비용을 지불해야 하는 경우에도 더 조용한 PC 팬 버전이 더 합리적일 것입니다.\n\n<div class=\"content-ad\"></div>\n\n나의 집에서 가장 작은 방에는 PC 팬 버전이 제공하는 유연성에 감사하다. 이 버전은 공간에서 덜 눈에 띄며 놀라울 만큼 조용하다. 침대에서 몇 피트밖에 떨어지지 않은 곳에서 밤낮으로 작동하는 PC 팬 DIY 공기 청정기에는 아무도 문제를 제기하지 않는다. 큐브 크기로 제한받지 않고 길고 납작한 DIY 공기 청정기를 만들 수 있다는 것은 정말 편리하다.\n\n만약 자선 단체, 마을, 교회, 기관 또는 학교를 위해 많은 DIY 공기 청정기를 대량 제작하려고 한다면, 비용과 시간 문제로 인해 전통적인 박스 선풍기 Corsi-Rosenthal 박스가 가장 현실적일 것이다. 캐나다인 경우 PC 팬 버전 한 대의 가격으로 약 2대의 전통적인 CR 박스를 만들 수 있다. 어떤 것이 가장 중요한지는 여러분이 결정해야 한다. 나의 경우, 집에서 PC 팬 버전으로 넘어간 것에 기뻐한다. 집 안 곳곳에 여러 박스 선풍기 CR 박스가 운전 중이었으면 좋겠다 생각하지 않지만, 알렉스의 \"와프 코어\" 디자인 3대 (끝 부분에 PC 팬이 쌓인 원형 HEPA 교체 필터)과 4개의 화로 필터 PC 팬 DIY 공기 청정기가 있으며, 추가로 더 만들 예정이다.\n\n시간적으로: 첫 번째 제작물은 4시간이 걸렸다. 두 번째 제작물은 3.5시간 소요되었는데 더 많은 팬과 RGB 배선이 있었다. 팬 원을 잘라내고 부품을 잘라내는 추가 노동을 고려하면 한 명이 제작 시간을 2시간 미만으로 줄이는 것이 어려울 수도 있겠지만, 나는 CR 박스를 30분 이내에 만들 수 있다. 그러나 만들어지면, PC 팬 버전을 우회할 이유가 없다. 어쨌든 실행하기 전면 PC 팬 버전이 저렴하며 (주거용) 상용 HEPA보다 거의 더 많은 공기를 정화하고 훨씬 조용하다.\n\n# 건설 프로세스\n\n<div class=\"content-ad\"></div>\n\n시작하기 전에, 필요한 모든 자료를 확인했어요. 다양한 곳에서 주문해서 도착하는 데 시간도 다르게 걸렸죠. 핫도그와 빵처럼, 부품들이 항상 같은 양으로 오지 않는 걸 보면서, 동시에 여러 가지를 만들고 있기 때문에 가지고 있는 부품의 수, 배송 중인 것, 그리고 \"한정 환원제\"가 무엇인지 계속 파악해야 했어요 — 필터가 먼저 다 떨어질까요, 아니면 선풍기가? 종종 볼트나 와셔였죠!\n\n먼저 모든 선풍기를 연결해서 작동하는지 확인하고, 작동 방법을 이해하는 것이 중요했어요.\n\n일부 이미지는 다른 제작물에서 가져왔어요. 초록색 DIY 공기 청정기를 제작할 때 적절한 이미지를 얻지 못한 게 이유에요.\n\n![image](/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_4.png)\n\n<div class=\"content-ad\"></div>\n\n이번 빌드에서는 20x30 필터를 사용하려고 했지만 아직 도착하지 않아 20x20을 사용했어요. 8개의 팬을 사용했는데, 그 중 6개는 RGB 팬이었고 2개는 일반 팬이었어요. 20x30 폼 보드는 기기의 4면(위와 아래가 닫힌 패널 및 환풍구가 파여진 옆패널 2면)을 만드는 데 완벽한 크기였어요. 로브 위스만은 팬의 다양한 방향을 테스트했어요. 이 경우에는 팬을 반대편에(왼쪽과 오른쪽) 놓은 디자인을 선택했어요. 제가 사용한 이 120mm 팬은 제가 가지고 있는 것이기 때문에 선택했어요. 140mm는 장단점이 있지만 140mm 팬 가드를 얻기 어렵다는 것을 알았어요. 3D 프린터가 있었다면 제가 직접 만들었을 텐데요. 비-필터 측면(닫힌 패널 2면과 팬을 놓을 환풍구가 파인 2면)의 너비를 결정하기 위해 팬을 놓고 옆에 필터를 두고 사이에 1cm 간격을 둔 후 다른 쪽에 대해서도 반복했어요. 로브의 팬 성능을 비교한 쓰레드 중 하나인 링크를 첨부했어요. 그는 어떤 RGB 팬들은 사용 후 몇 달이 지나면 필터가 적용된 후 성능이 떨어진다는 것을 발견했어요.\n\n<div class=\"content-ad\"></div>\n\n간격을 두는 이유는 케이블에 공간을 제공하고 실수 여지를 남기기 위해서에요 😅\n\n![image](/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_5.png)\n\n운 좋게도, 20x30 폼 보드를 이용해 4면을 잘라내어 딱 맞게 작업을 진행할 수 있었어요. 소량의 여분이 생겨나는 정도였죠. 이 장치를 만드는 데 사용된 폼 보드는 6달러 CAD 정도, 여러 색의 대량 폼 보드 주문 중에 사용한 가격이에요 (약 10개의 폼 코어 보드가 포함된 주문으로 60달러 정도).\n\n팬을 4개씩 각 면에 딱 맞게 배치해야 했기 때문에 여유 공간을 확보하기 위한 작업이 필요했어요. 모든 팬이 작동하는지 확인한 후, 다음 단계는 폼 보드를 잘라내어 어디에 자를지 결정하는 것이었죠. 팬을 서로 가깝게 배치하여 모두 맞출 수 있도록했어요. 20x30 필터를 사용하면 팬 사이의 공간을 조금 더 확보할 수 있어요. 컴퍼스 커터를 사용해 팬의 지름으로 설정하고 원형 구멍을 자르기 시작했어요.\n\n<div class=\"content-ad\"></div>\n\n팬이 12cm이므로 매 6cm마다 팬의 끝이거나 중심일 것입니다. 팬 센터가 나타내는 긴 선이 있는 6cm마다 선을 그어 나침반을 사용하여 원을 자릅니다.\n\n![이미지](/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_6.png)\n\n4개의 원을 자름. 나머지 4개는 두 번째 보드에 자를 예정입니다. 이 부분이 가장 오랜 시간이 걸리는 부분입니다.\n\n혹시 장치에 다른 디자인을 원한다면, 폼 보드 위에 스티커를 붙이거나, 서랍 라이너나 다른 디자인을 넣을 수도 있습니다. 또는 종이를 붙여서 색칠하거나 그림을 그리거나 어린이 스티커를 붙일 수도 있습니다. 폼을 잘라내는 데 있어서 저는 가장 세게 자르지는 않으니까 보통 한 쪽을 자르고, 뒤집어서 다시 재서 반대쪽도 자르곤 해요. 그러면 쉽게 떨어져 나와요. 날이 달린 나침반 없이 이걸 하겠다고 상상할 수 없네요.\n\n<div class=\"content-ad\"></div>\n\n<table> 태그를 Markdown 형식으로 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n팬 브랜드를 확인해서 공기가 어느 쪽으로 나가는지 확인하는 것이 좋아요. 지금까지 예쁜 로고 쪽이 공기를 빨아들이는 것 같아요. 하지만 모두가 해당하는 것은 아닐 수도 있어요.\n\n팬을 설치할 시간이에요!!\n\n![팬 이미지](/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_8.png)\n\n팬 가드를 바깥쪽에 설치하고 팬을 안쪽에 설치했어요.\n\n<div class=\"content-ad\"></div>\n\n일부 사용된 하드웨어:\n\n![이미지](/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_9.png)\n\n이 특정 빌드에서는 RGB 팬 6개와 일반 팬 2개를 사용했습니다. 일반 팬을 덜 눈에 띄는 \"뒷면\"에 설치했습니다. 두 필터 측면을 바닥에 테이프로 고정하고 팬 패널 하나를 테이프로 고정했습니다. 상단과 한 면을 열어두면 손을 넣어 무언가를 연결하는 것이 가능합니다. 팬 패널이 수직으로 배치된 경우보다 반대편에 있는 팬 패널이 있는 경우가 더 쉬운 것으로 발견했습니다.\n\n아래는 배선 사진들입니다. 이 이미지들은 처음에 이 단계의 좋은 사진을 얻지 못하여 다른 빌드에서 가져왔습니다:\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_10.png\" />\n\n이제 물건을 꽂고 케이블을 옆으로 테이핑하여 팬에 들어가지 않도록 해야 합니다.\n\n<img src=\"/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_11.png\" />\n\n공기 청정기에서 전원 케이블을 꺼내려면 발포 패널 하나에 구멍을 뚫어야 합니다. 그 후, 구멍 주위에 테이프를 붙여 기기를 밀봉할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n마지막 단단한 패널을 누르기 전에 모든 것이 작동하는지 확인하기 위해 장치를 연결했습니다. 이전에 모든 선풍기를 테스트했기 때문에 모두 작동할 것이라고 확신했습니다. 성공!\n\n이 디자인은 완전히 Rob Wissmann의 것을 기반으로 합니다. 이 특정 모델은 CADR이 더 높지 않습니다. 내 필터는 20x20 크기이고, 선풍기는 8개이며 12cm가 아니라 14cm입니다. 내가 만든 것에 CADR을 측정할 수 있는 방법이 없습니다. (사진에 나와 있는 두 번째 제작물은 보다 작은 필터를 사용하며, 16x16 크기에 6개의 선풍기만 사용했습니다.)\n\n내가 아는 한 건설과 관련된 유일한 다른 차이점은 RGB 전원 추가입니다. 이것은 @CRBoxKits로부터 배운 것입니다.\n\n난 NIOSH 앱을 사용하여 데시벨을 측정했습니다. 선풍기 쪽으로부터 1m 떨어진 곳에서 45 dB이었지만 주변 가족 소음이 기여했습니다. 필터로부터 1m 떨어진 곳에서는 40 dB였습니다.\n\n<div class=\"content-ad\"></div>\n\n저에게는 PC 팬의 놀라운 조용함이 꽤 중독적인 것 같아요. PC 팬과 배선, 하드웨어를 구매할 자금과 구멍을 잘라서 조립할 시간이 있다면, 좋은 DIY 공기 청정기를 만들 수 있는 만족스러운 프로젝트가 될 거예요. 이 글이 여러분이 가지고 있는 옵션을 이해하고 PC 팬 Corsi-Rosenthal 박스를 만드는 데 도움이 되기를 바래요.\n\n# 결론\n\n개인적으로 나는 사람들에게 상자 선풍기와 PC 팬 CR 박스 두 가지를 보여주고 옹호할 거예요. 각각 독특한 장단점이 있어요. 많은 공간이 있는 대형 커뮤니티 홀이나 전반적으로 소음 수준이 높은 장소에는 전통적인 상자 선풍기 CR 박스가 여전히 합리적인 선택이라고 생각해요. 예를 들어, 댄스 파티나 커뮤니티 식사가 열리는 장소 같은 곳이죠. 100~150달러 캐나다(이하 CAD)에 전통적인 상자 선풍기 CR 박스가 높은 CADR을 제공해주니 가격 대비 좋은 선택이에요.\n\n어떤 기업들은 컴퓨터 팬 옵션을 선호할 수도 있어요. 이 옵션은 더 작고 조용하기 때문이죠. 다른 공간에서 전통적인 상자 선풍기 버전을 옹호하는 것이 간단해요. 상자 선풍기를 열거나 그 구성 요소를 수정할 필요가 없어서 팬과 그 부품의 무결성이 완전히 유지되고 위험이 없을 거예요. 이 글의 맨 아래에는 EPA 보고서와 환경 보건 국립 협력 센터(National Collaborating Centre for Environmental Health)의 CR 박스의 안전성과 유효성에 관한 보고서 링크를 걸어놨어요. PC 팬 버전의 경우 빌더가 전원 어댑터를 구해야 하기 때문에 DIY 공기 청정기의 PC 팬 버전을 받아들이는 데 좀 더 망설임이 있을 수 있다고 이해해요.\n\n<div class=\"content-ad\"></div>\n\n# 참고 자료\n\n## 도움이 된 사진 및 동영상 목록입니다\n\n매튜 올리버의 작품:\n\nRob Wissmann이 IKEA HEPA 필터로 하나를 만드는 YouTube 동영상\n\n<div class=\"content-ad\"></div>\n\n앤드루 도비\n\n알렉스 \"CR everywhere\"\n\n조이 폭스는 미디엄과 트위터에서 활동 중입니다.\n\n그의 웹사이트에 게시된 정보 중 HEPA 필터 소음 문제에 대한 글이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n제 생방송 스레드에서 공유하는 중요한 링크:\n\n- [Ontario Society of Professional Engineers 실내공기질 보고서](링크)\n- [Canadian Aerosol Transmission Coalition](링크)\n\n<div class=\"content-ad\"></div>\n\nCorsi-Rosenthal Foundation\n\nClean Air Kits\n\nJoey Fox의 웹사이트\n\n캐나다 십대 Shiven Taneja의 웹사이트에는 CR 상자 지침서 및 아이들을 위한 활동북이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 Old House가 CR 상자를 건설했어요. [링크](https://youtu.be/wh4AxNkZyrE)\n\nEngineers Canada 국가 입장문 — 대기 중 오염물질 감소를 위한 환기 시스템과 건물 관리\n\nCDC 건물 환기\n\nASHRAE 교육 시설을 위한 설계 지침: 고급 실내 공기 질에 대한 우선순위 설정\n\n<div class=\"content-ad\"></div>\n\n직업 건강 클리닉 (OHCOW) — COVID 19 자료\n\nClean Air Crew\n\n미국 백악관 — 공기 청정을 위해\n\nEPA DIY 공기 청정기 안전 및 효과성 연구\n\n<div class=\"content-ad\"></div>\n\nNational Collaborating Centre for Environmental Health Do-it-yourself (DIY) air cleaners: Evidence on effectiveness and considerations for safe operation\n\nNB Lung video on building a CR box","ogImage":{"url":"/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_0.png"},"coverImage":"/assets/img/2024-06-23-BusymombuildsaPCfanCorsi-Rosenthalbox_0.png","tag":["Tech"],"readingTime":17},{"title":"프로그래밍을 배울 때 매일 코딩해야 하는 이유","description":"","date":"2024-06-23 18:03","slug":"2024-06-23-WhyYouNeedToCodeEveryDayWhenYoureLearningToProgram","content":"\n\n![image](/assets/img/2024-06-23-WhyYouNeedToCodeEveryDayWhenYoureLearningToProgram_0.png)\n\n첫 번째로 컴퓨터 프로그래밍을 스스로 가르치고 있을 때, 주말에 큰 시간을 내어 자습서를 공부하곤 했어요. 몇 시간 뒤에는 항상 진짜로 진전을 이루었다는 느낌을 받곤 했어요.\n\n그러나 다음 주말이 돌아오기 전에 배운 것들이 많이 사라졌어요. \"음, 어떻게 하죠... 다시 2차원 배열에서 요소를 선택하는 거였죠? 이걸 배웠다고 생각했는데?\" 구웃. 도와주세요.\n\n그래서 저는 우울한 루프에 빠지기 시작했어요: 매주 첫 번째 절반 시간을 속도를 내기 위해 썼고, 일주일 전에 배운 내용을 다시 흡수하는 데에만 시간을 보내곤 했어요. 짜증이 났어요.\n\n<div class=\"content-ad\"></div>\n\n이제쯤이면 아시겠지만, 프로그래밍을 배우는 올바른 방법은 아니에요.\n\n소프트웨어 분야에서 친구들이 말한 대로, 매일 조금씩 코딩해보는 게 올바른 방법이에요. 매일 15분씩만 해도 일주일에 몇 시간을 정해놓는 것보다 효과가 더 좋아요.\n\n내가 그렇게 시작하면서 개념이 정말 머릿속에 박히기 시작했어요. 물론, 여전히 몇 가지를 잊어버리곤 했어요. 오늘도 가끔 그렇지만요. 심지어 오랜 기간 일해온 프로그래머들조차 자주 구글링을 하는 법이죠. 그런데 기본 코딩 개념과 주요 패턴은 내 머릿속에 남아 있었어요. 매일 조금이라도 하는 한요.\n\n결국 일일 루틴이 주간 루틴보다 우세한 이유를 설명하는 멋진 과학적 근거가 있다고 하더라구요.\n\n<div class=\"content-ad\"></div>\n\n이것을 \"망각의 에빙하우스 곡선\"이라고합니다.\n\n1880년대에 독일 심리학자 헤르만 에빙하우스는 기억의 본질 - 보다 구체적으로 망각의 본질에 관심을 갖게 되었습니다. 우리가 방금 배운 것을 얼마나 오래 잊어버릴까요?\n\n그래서 그는 자신에게 흥미로운 실험을 진행했습니다. 그는 2,300개의 세 글자 조합을 생성했습니다. (그것들은 의미가 없는, 즉 실제 단어가 아닌 것들이었습니다). 그런 다음 그는 그들을 외우기 위해 앉았습니다. 그는 자주 자신을 테스트하여 단어를 기억할 수 있는지 확인했고, 그게 불가능한 경우 얼마나 많은 날이 지났는지도 확인했습니다.\n\n에빙하우스는 우리가 것을 정말 빨리 잊는다는 것을 발견했습니다. 새로 외운 단어를 처음 암기한 지 20분 후에, 그는 그 중 약 40%를 잊어버렸습니다. 1시간 후에는 50% 이상을 잊어버렸습니다. 그리고 하루 뒤 자신을 테스트해보면, 그는 더 많은 것을 잊었습니다. 글자 조합의 약 3분의 2가 이제 그의 기억에서 사라져 있었습니다.\n\n<div class=\"content-ad\"></div>\n\n하지만, 그 이후로는 망각 속도가 느려졌습니다. 만약 6일 후에 시험을 보았다면, 그가 잊어버린 정도는 약 75%로 약간 더 상승했습니다. 한 달 후에는 약 80%로 증가했습니다.\n\n기본적으로, 그는 3글자 조합의 대부분을 빠르게 잊어버렸습니다. 그러나 기억해둔 것들? 이제 그것들은 그의 기억에 영원히 남아 있는 것처럼 보였습니다.\n\n이것이 망각의 에빙하우스 곡선으로 알려진 현상이며, 이것을 이렇게 시각화할 수 있습니다 ...\n\n![이미지](/assets/img/2024-06-23-WhyYouNeedToCodeEveryDayWhenYoureLearningToProgram_1.png)\n\n<div class=\"content-ad\"></div>\n\n지난 몇 년 동안 인지 심리학자들은 대체로 에빙하우스의 연구 결과가 유효하다고 발견했습니다.\n\n왜 이렇게 망각이 작용할까요? 이는 단기기억과 장기기억이 어떻게 상호작용하는지와 관련이 있습니다.\n\n새로운 정보를 처음 만났을 때, 우리의 단기기억이 그것을 잡아냅니다 — 우리가 생각할 때 그 데이터를 사용하는 데 도움을 줍니다. 그러나 단기기억은 그 이름에서 알 수 있듯이 그리 오래 지속되지 않습니다.\n\n그에 비해 장기기억은 정말 머릿 속에 오래 유지되는 지식을 포함하고 있습니다. 그러나 무언가를 장기기억에 넣으려면 그 새로운 정보를 자주 만나야 합니다. 이상적으로는 그 정보를 사용해야 합니다 — 생각 과제나 실제 활동에서 사용해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n저기요, 어떤 방향으로 향하는지 이미 감이 오시나요?\n\n에빙하우스와 그의 추종자들은 우리가 예측 가능한 방식으로 것을 잊어버리기 때문에, 이러한 과정을 역으로 조작할 수 있다고 이론을 세웠어요.\n\n우리가 몇 일마다 새로운 지식을 재방문하는 것을 적극적으로 계속해 나간다면, 그 지식이 우리 장기기억으로 넘어가고 우리 마음의 전반적인 지식 기반이 되는 가능성이 크게 높아질 거예요. 이것이 \"활용하거나 잃어버리기\"인 거죠.\n\n저는 매일 코딩을 시작했을 때 정확히 이런 일이 일어났어요. 매일 몇 분씩 프로그래밍 과제에 매달리면서 (예를 들면 Glitch나 Codepen에서 누군가의 프로젝트를 리믹싱하거나 새 라이브러리를 만져보는 등), 배운 코딩 개념들이 모두 손에 익게 유지되었어요. 게다가 새로운 것을 배우는 것이 더 빨라졌어요, 왜냐하면 단 몇 일 전에 배운 것 위에 새로운 레고 조각을 끼워 넣었기 때문이죠.\n\n<div class=\"content-ad\"></div>\n\n그리고 물론, 이것은 훌륭한 전진 동력을 만들어 냈습니다! 안장에 뛰어 들기가 더 쉬워지자, 거기에 머무르고 싶었어요. 짧은 코딩 폭발을 하려고 앉아 있는데 - 그러다가 그루브에 몰입하고 몇 시간을 툭 툭 거의 밤을 넘어갈 때쯤 눈을 떠보면서, 오메, 많은 시간을 보내고 있었다고 발견하게 되었어요 (이미 오래 전에 자러 가야했지만, ㅋㅋ).\n\n새로운 음악 기법을 배우는 데에도 같은 것을 느낄 때가 있어요. 저는 기타를 치고 Logic Pro를 이용해서 조금의 경쾌한 음악 제작을 해요. 한동안 연주(또는 제작)하지 않으면 녹슬어져요. 그런데 정기적으로 앉아서 연습을 하거나 트랙을 작업할 때, 배우는 모든 것이 되게 기억에 남아요.\n\n(매우 정교하게 하고 싶다면, 이밍하우스 이용 곡선을 역행하는 앱이 따로 디자인되어 있답니다. 이것을 \"간격 반복\" 앱이라고 합니다: 플래시 카드를 만들고, 그런 다음 앱을 사용해서 매일쯤 자가검사를 하세요. 소프트웨어는 당신이 배운 내용과 잊어버린 내용을 주의 깊게 살펴보고, 언제 그것을 배웠거나 잊어버렸는지를 고려해서 당신이 재퀴즈를 할 지적저쨌든 (이론적으로 말이죠) 그것을 장기기억에 새기기에 정확히 적절한 때에 다시 테스트합니다. 이런 것들이 얼마나 잘 작동하는지에 대한 논란은 있지만, 솔직히 저는 이것을 시도해본 적이 없어요. 그러나 새로운 언어를 배우기 위해 사용한 사람들과 이것을 이용하여 큰 도움을 받았다고 맹세하는 사람들과 이야기를 나눠 본 적이 있어요. 하지만 개인차가 있을 수 있겠어요.)\n\n그래서, 그렇죠: 활용하지 않으면 잊게 되죠. 프로그래밍을 배우고 싶다면, 매일 조금씩 시간을 내어 실습해 보세요. 다른 기술도 마찬가지예요.\n\n<div class=\"content-ad\"></div>\n\n아마도 이미 이 규칙을 알고 계셨을 거예요!\n\n하지만 이제 그 이유를 아시게 되셨네요.\n\n(이 글을 즐겼다면? 그렇다면 “clap” 버튼을 꼭 눌러주세요 (ㅋ) 아래에 있습니다. 한 독자 당 최대 50번의 박수를 버틸 수 있어요!)\n\n또한 저의 월간 뉴스레터 “The Linkfest”를 즐기실 수도 있을 거예요. 웹에서 찾은 최고의 콘텐츠들을 정리한 뉴스레터입니다. “파멸 스크롤링과는 정반대.”\n\n<div class=\"content-ad\"></div>\n\n저는 뉴욕 타임스 매거진에 기고하는 작가이자, Wired와 Smithsonian 매거진의 칼럼니스트이며, Mother Jones에 꾸준히 기고하는 작가입니다. 또한, \"Coders: The Making of a New Tribe and the Remaking of the World”와 “Smarter Than You Think: How Technology is Changing our Minds for the Better\"의 저자이기도 합니다. 트위터와 인스타그램에서 @pomeranian99를, Mastodon에서는 @clive@saturation.social을 사용하고 있어요.","ogImage":{"url":"/assets/img/2024-06-23-WhyYouNeedToCodeEveryDayWhenYoureLearningToProgram_0.png"},"coverImage":"/assets/img/2024-06-23-WhyYouNeedToCodeEveryDayWhenYoureLearningToProgram_0.png","tag":["Tech"],"readingTime":5},{"title":"주말 AI 프로젝트 라즈베리 파이에서 음성 인식과 LLaMA-2 GPT 실행하는 방법","description":"","date":"2024-06-23 18:01","slug":"2024-06-23-AWeekendAIProjectRunningSpeechRecognitionandaLLaMA-2GPTonaRaspberryPi","content":"\n\n<img src=\"/assets/img/2024-06-23-AWeekendAIProjectRunningSpeechRecognitionandaLLaMA-2GPTonaRaspberryPi_0.png\" />\n\n요즘에는 클라우드에서 딥 러닝 모델을 실행하는 것에는 누구도 놀라지 않을 것입니다. 그러나 엣지나 소비자 기기 세계에서는 상황이 훨씬 복잡해질 수 있습니다. 이에는 여러 가지 이유가 있습니다. 먼저, 클라우드 API를 사용하려면 기기가 항상 온라인 상태여야 합니다. 이는 웹 서비스에는 문제가 되지 않지만 인터넷 액세스 없이 기능을 유지해야 하는 기기에는 결정적인 문제가 될 수 있습니다. 둘째, 클라우드 API는 비용이 들며, 고객들은 또 다른 구독료를 지불하기를 좋아하지 않을 것입니다. 마지막으로 몇 년 후에 프로젝트가 완료되고 API 엔드포인트가 종료되면 비싼 하드웨어는 벽돌처럼 변할 수 있습니다. 이는 고객, 생태계 및 환경에게 친숙하지 않습니다. 그래서 사용자 하드웨어가 완전히 오프라인에서 작동해야 하고 추가 비용 없이 또는 온라인 API를 사용하지 않고 (옵션일 수 있지만 의무적이어서는 안 됨) 이 살기 좋은 상황이 되어야 한다고 확신합니다.\n\n이 기사에서는 Raspberry Pi에서 LLaMA GPT 모델과 자동 음성 인식 (ASR)을 실행하는 방법을 보여드리겠습니다. 이를 통해 Raspberry Pi에 질문을 하고 답변을 받을 수 있게 될 겁니다. 약속한 대로, 이 모든 것이 완전히 오프라인에서 작동할 것입니다.\n\n시작해 보겠습니다!\n\n<div class=\"content-ad\"></div>\n\n이 기사에 제시된 코드는 라즈베리 파이에서 작동되도록 의도되었습니다. 그러나 \"디스플레이\" 부분을 제외한 대부분의 메소드는 윈도우, OSX 또는 리눅스 노트북에서도 작동할 것입니다. 따라서 라즈베리 파이를 갖고 있지 않은 독자들도 어떠한 문제없이 코드를 쉽게 테스트할 수 있습니다.\n\n## 하드웨어\n\n이 프로젝트에서는 라즈베리 파이 4를 사용할 것입니다. Linux를 실행하는 싱글 보드 컴퓨터로, 작고 팬 및 액티브 쿨링 없이 5V DC 전원만 필요합니다:\n\n![라즈베리 파이](/assets/img/2024-06-23-AWeekendAIProjectRunningSpeechRecognitionandaLLaMA-2GPTonaRaspberryPi_1.png)\n\n<div class=\"content-ad\"></div>\n\n2023년 신제품 라즈베리 파이 5는 더 좋을 것으로 예상됩니다. 벤치마크에 따르면 거의 2배 빨라졌다고 합니다. 하지만 거의 50% 더 비싸며, 저희 테스트에는 모델 4가 충분합니다.\n\nRAM 크기에 대해 두 가지 옵션이 있습니다:\n\n- 8GB RAM이 장착된 라즈베리 파이는 7B LLaMA-2 GPT 모델을 실행할 수 있게 해줍니다. 4비트 양자화 모드에서의 메모리 사용량은 약 5GB입니다.\n- 2 또는 4GB 장치는 TinyLlama-1B와 같은 더 작은 모델을 실행할 수 있습니다. 이 모델은 빠르지만, 나중에 살펴볼 것처럼 답변이 약간 덜 \"스마트\"할 수 있습니다.\n\n두 모델 모두 HuggingFace에서 다운로드할 수 있으며, 일반적으로 코드 변경이 거의 필요하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n라즈베리 파이는 완전한 리눅스 컴퓨터이며 SSH를 통해 터미널에서 쉽게 출력을 볼 수 있습니다. 하지만 이것은 로봇과 같은 모바일 장치에 적합하지 않아 재미있지 않을 수 있습니다. 라즈베리 파이에는 단색 128x64 I2C OLED 디스플레이를 사용할 것입니다. 이 디스플레이는 연결하기 위해 단지 4개의 전선이 필요합니다:\n\n![Image](/assets/img/2024-06-23-AWeekendAIProjectRunningSpeechRecognitionandaLLaMA-2GPTonaRaspberryPi_2.png)\n\n디스플레이와 전선은 아마존에서 5달러에서 10달러에 구할 수 있으며, 납땜 기술이 필요하지 않습니다. 라즈베리 파이 설정에서 I2C 인터페이스를 활성화해야 합니다. 이에 대한 충분한 자습서가 있습니다. 간단함을 위해 하드웨어 부분은 생략하고 Python 코드에만 집중하겠습니다.\n\n## 디스플레이\n\n<div class=\"content-ad\"></div>\n\n화면 테스트 중에 무언가를 화면에서 확인하는 것이 좋습니다. Adafruit_CircuitPython_SSD1306 라이브러리를 사용하면 OLED 디스플레이에 어떤 이미지든 표시할 수 있습니다. 이 라이브러리는 Low-level 인터페이스를 가지고 있어서 픽셀을 그리거나 메모리 버퍼에서 모노크롬 비트맵만을 그릴 수 있습니다. 스크롤 가능한 텍스트를 사용하기 위해 텍스트 버퍼를 저장하는 배열과 텍스트를 그리는 `_display_update` 메서드를 작성했습니다:\n\n```js\nfrom PIL import Image, ImageDraw, ImageFont\ntry:\n    import board\n    import adafruit_ssd1306\n    i2c = board.I2C()\n    oled = adafruit_ssd1306.SSD1306_I2C(pixels_size[0], pixels_size[1], i2c)\nexcept ImportError:\n    oled = None\n\nchar_h = 11\nrpi_font_poath = \"DejaVuSans.ttf\"\nfont = ImageFont.truetype(rpi_font_poath, char_h)\npixels_size = (128, 64)\nmax_x, max_y = 22, 5\ndisplay_lines = [\"\"]\n\ndef _display_update():\n    \"\"\"화면에 텍스트를 표시합니다.\"\"\"\n    global oled\n    image = Image.new(\"1\", pixels_size)\n    draw = ImageDraw.Draw(image)\n    for y, line in enumerate(display_lines):\n        draw.text((0, y*char_h), line, font=font, fill=255, align=\"left\")\n\n    if oled:\n        oled.fill(0)\n        oled.image(image)\n        oled.show()\n```\n\n여기서 (22, 5) 변수는 표시할 수 있는 행과 열의 수를 나타냅니다. oled 변수는 ImportError가 발생하는 경우 None일 수도 있습니다. 예를 들어, 랩톱에서 라즈베리 파이 대신에 이 코드를 실행하는 경우입니다.\n\n또한 텍스트 스크롤링을 에뮬레이션하기 위해 두 개의 도우미 메서드도 작성했습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ndef add_display_line(text: str):\n    \"\"\" 새로운 줄을 추가하고 스크롤링합니다. \"\"\"\n    global display_lines\n    # 화면 너비에 따라 텍스트를 청크로 분할합니다.\n    text_chunks = [text[i: i+max_x] for i in range(0, len(text), max_x)]\n    for text in text_chunks:\n        for line in text.split(\"\\n\"):\n            display_lines.append(line)\n            display_lines = display_lines[-max_y:]\n    _display_update()\n\ndef add_display_tokens(text: str):\n    \"\"\" 새 토큰을 추가하고 줄바꿈 유무를 선택합니다. \"\"\"\n    global display_lines\n    last_line = display_lines.pop()\n    new_line = last_line + text\n    add_display_line(new_line)\n```\n\n첫 번째 메소드는 새로운 줄을 디스플레이에 추가합니다. 문자열이 너무 길면 자동으로 여러 줄로 나눠집니다. 두 번째 메소드는 \"개행 없이\" 텍스트 토큰을 추가합니다. 이것은 GPT 모델의 답변을 표시할 때 사용할 것입니다. add_display_line 메소드를 사용하여 위와 같은 코드를 작성할 수 있습니다:\n\n```js\nfor p in range(20):\n    add_display_line(f\"{datetime.now().strftime('%H:%M:%S')}: Line-{p}\")\n    time.sleep(0.2)\n```\n\n모든 것이 제대로 되었다면, 출력은 다음과 같아야 합니다:\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*e9u31X5qtrbHccByJAA8pw.gif)\n\n외부 디스플레이용 Luma-oled와 같은 특별한 라이브러리도 있지만, 우리의 솔루션은 이 작업에 충분히 좋습니다.\n\n## 자동 음성 인식 (ASR)\n\nASR에 대해, 저희는 HuggingFace 🤗의 Transformers 라이브러리를 사용할 것입니다. 이를 통해 몇 줄의 Python 코드로 음성 인식을 구현할 수 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\nfrom transformers import pipeline\nfrom transformers.pipelines.audio_utils import ffmpeg_microphone_live\n\nasr_model_id = \"openai/whisper-tiny.en\"\ntranscriber = pipeline(\"automatic-speech-recognition\",\n                       model=asr_model_id,\n                       device=\"cpu\")\n```\n\n여기서는 680K 시간의 음성 데이터로 학습된 Whisper-tiny-en 모델을 사용했어요. 이 모델은 가장 작은 Whisper 모델로, 파일 크기가 151MB에요. 모델을 로드하면 ffmpeg_microphone_live 메서드를 사용하여 마이크에서 데이터를 가져올 수 있어요:\n\n```js\ndef transcribe_mic(chunk_length_s: float) -> str:\n    \"\"\" 마이크에서 오디오를 인식합니다 \"\"\"\n    global transcriber\n    sampling_rate = transcriber.feature_extractor.sampling_rate\n    mic = ffmpeg_microphone_live(\n            sampling_rate=sampling_rate,\n            chunk_length_s=chunk_length_s,\n            stream_chunk_s=chunk_length_s,\n        )\n    \n    result = \"\"\n    for item in transcriber(mic):\n        result = item[\"text\"]\n        if not item[\"partial\"][0]:\n            break\n    return result.strip()\n```\n\n실제로 구문을 말하기에는 5-10초가 충분해요. 라즈베리 파이에는 마이크가 없지만 USB 마이크를 사용할 수 있어요. 이 코드는 노트북에서도 테스트할 수 있어요; 이 경우 내장 마이크가 사용될 거예요.\n\n<div class=\"content-ad\"></div>\n\n## 대형 언어 모델 (LLM)\n\n이제 대형 언어 모델을 추가해 봅시다. 먼저, 필요한 라이브러리를 설치해야 합니다:\n\n```js\npip3 install llama-cpp-python\npip3 install huggingface-hub sentence-transformers langchain\n```\n\nLLM을 사용하기 전에 해당 모델을 다운로드해야 합니다. 이전에 논의했던 것처럼, 두 가지 옵션이 있습니다. 8GB 라즈베리 파이의 경우 7B 모델을 사용할 수 있습니다. 2GB 장치의 경우 1B \"작은\" 모델이 유일한 선택지이며, 더 큰 모델은 RAM에 들어가지 않습니다. 모델을 다운로드하려면 huggingface-cli 도구를 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nhuggingface-cli 다운로드 TheBloke/Llama-2-7b-Chat-GGUF llama-2-7b-chat.Q4_K_M.gguf --local-dir . --local-dir-use-symlinks False\nOR\nhuggingface-cli 다운로드 TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf --local-dir . --local-dir-use-symlinks False\n```\n\n우리는 Llama-2-7b-Chat-GGUF와 TinyLlama-1.1B-Chat-v1.0-GGUF 모델을 사용하고 있습니다. 더 작은 모델은 빠르게 작동하지만, 더 큰 모델은 잠재적으로 더 나은 결과를 제공할 수 있습니다.\n\n모델을 다운로드하고 나면, 사용할 수 있습니다:\n\n```js\nfrom langchain.llms import LlamaCpp\nfrom langchain.callbacks.manager import CallbackManager\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\nfrom langchain.prompts import PromptTemplate\nfrom langchain.schema.output_parser import StrOutputParser\n\nllm: Optional[LlamaCpp] = None\ncallback_manager: Any = None\n\nmodel_file = \"tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf\"  # OR \"llama-2-7b-chat.Q4_K_M.gguf\"\ntemplate_tiny = \"\"\"<|system|>\n                   You are a smart mini computer named Raspberry Pi. \n                   Write a short but funny answer.</s>\n                   <|user|>\n                   {question}</s>\n                   <|assistant|>\"\"\"\ntemplate_llama = \"\"\"<s>[INST] <<SYS>>\n                    You are a smart mini computer named Raspberry Pi.\n                    Write a short but funny answer.</SYS>>\n                    {question} [/INST]\"\"\"\ntemplate = template_tiny\n\n\ndef llm_init():\n    \"\"\" 큰 언어 모델 로드 \"\"\"\n    global llm, callback_manager\n\n    callback_manager = CallbackManager([StreamingCustomCallbackHandler()])\n    llm = LlamaCpp(\n        model_path=model_file,\n        temperature=0.1,\n        n_gpu_layers=0,\n        n_batch=256,\n        callback_manager=callback_manager,\n        verbose=True,\n    )\n\n\ndef llm_start(question: str):\n    \"\"\" LLM에게 질문하기 \"\"\"\n    global llm, template\n\n    prompt = PromptTemplate(template=template, input_variables=[\"question\"])\n    chain = prompt | llm | StrOutputParser()\n    chain.invoke({\"question\": question}, config={})\r\n```\n\n<div class=\"content-ad\"></div>\n\n흥미로운 점은 두 모델이 동일한 LLaMA 이름을 갖고 있지만, 다른 프롬프트 형식을 사용하여 훈련되었다는 것입니다.\n\n모델 사용은 간단하지만 여기가 까다로운 부분입니다: OLED 화면에 대답 토큰을 한 번에 하나씩 표시해야 합니다. 이를 위해 사용자 정의 콜백을 사용할 것인데, 이 콜백은 LLM이 새로운 토큰을 생성할 때마다 실행됩니다:\n\n```js\nclass StreamingCustomCallbackHandler(StreamingStdOutCallbackHandler):\n    \"\"\" LLM 스트리밍을 위한 콜백 핸들러 \"\"\"\n\n    def on_llm_start(\n        self, serialized: Dict[str, Any], prompts: List[str], **kwargs: Any\n    ) -> None:\n        \"\"\" LLM이 실행을 시작할 때 실행됩니다 \"\"\"\n        print(\"<LLM 시작>\")\n        \n    def on_llm_end(self, response: Any, **kwargs: Any) -> None:\n        \"\"\" LLM이 실행을 끝낼 때 실행됩니다 \"\"\"\n        print(\"<LLM 종료>\")\n        \n    def on_llm_new_token(self, token: str, **kwargs: Any) -> None:\n        \"\"\" 새로운 LLM 토큰이 있을 때 실행됩니다. 스트리밍이 활성화된 경우에만 사용 가능합니다 \"\"\"\n        print(f\"{token}\", end=\"\")\n        add_display_tokens(token)\r\n```\n\n여기서는 이전에 만들었던 add_display_tokens 메서드를 사용했습니다. 출력 메서드도 사용되었기 때문에 똑같은 코드가 라즈베리 파이 없이 일반 PC에서도 실행될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 테스트\n\n마침내, 모든 부분을 결합할 때입니다. 코드는 간단합니다:\n\n```js\nif __name__ == \"__main__\":\n    add_display_line(\"Init automatic speech recogntion...\")\n    asr_init()\n\n    add_display_line(\"Init LLaMA GPT...\")\n    llm_init()\n\n    while True:\n        # Q-A loop:\n        add_display_line(\"Start speaking\")\n        add_display_line(\"\")\n        question = transcribe_mic(chunk_length_s=5.0)\n        if len(question) > 0:\n            add_display_tokens(f\"> {question}\")\n            add_display_line(\"\")\n\n            llm_start(question)\r\n```\n\n여기서 Raspberry Pi는 오디오를 5초 동안 기록한 후, 음성 인식 모델이 오디오를 텍스트로 변환하고, 마지막으로 인식된 텍스트를 LLM으로 보냅니다. 끝나면 프로세스가 반복됩니다. 이 접근 방식은 예를 들어 자동 오디오 수준 임계값을 사용함으로써 개선할 수 있지만, \"주말 프로젝트\" 목적으로 충분히 좋습니다.\n\n<div class=\"content-ad\"></div>\n\n실제로는 다음과 같은 출력이 나타납니다:\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*78EMd_4kEMduoLN8z_pwdA.gif)\n\n여기에서 라즈베리 파이 4에서의 1B LLM 추론 속도를 확인할 수 있습니다. 이전에 언급한 바와 같이, 라즈베리 파이 5는 30~40% 더 빠를 것으로 예상됩니다.\n\n\"BLEU\"나 \"ROUGE\"와 같은 \"공식적인\" 벤치마크를 사용하여 1B와 7B 모델의 품질을 비교하지는 않았습니다. 주관적으로 7B 모델은 더 정확하고 정보를 많이 제공하는 답변을 제공하지만, 더 많은 RAM이 필요하며, 로딩하는 데 더 많은 시간이 걸립니다(파일 크기는 각각 4.6GB와 0.7GB입니다) 그리고 3~5배 더 느리게 작동합니다. 전력 소비에 관해서는, 라즈베리 파이 4는 평균 3~5W를 소비하며, 실행 중인 모델, 연결된 OLED 스크린, USB 마이크로폰이 있는 상태에서 필요합니다.\n\n<div class=\"content-ad\"></div>\n\n## 결론\n\n이 글에서는 라즈베리 파이(Raspberry Pi)에서 자동 음성 인식 및 대형 언어 모델을 실행할 수 있었습니다. 라즈베리 파이는 완전히 자율적으로 실행할 수 있는 휴대용 리눅스 컴퓨터입니다. 클라우드에서 다른 모델을 사용할 수도 있지만, 실제로 만질 수 있고 작동 방식을 볼 수 있는 것이 더 재미있는 것 같아요.\n\n이러한 프로토타입은 GPT 모델 사용에 있어 흥미로운 이정표가 됩니다. 1~2년 전에는 저렴한 소비자용 하드웨어에서 대형 언어 모델을 실행하는 것이 상상도 할 수 없었죠. 우리는 인간의 음성을 이해하고 텍스트 명령에 응답하거나 다양한 작업을 수행할 수 있는 스마트 기기 시대로 진입하고 있습니다. 아마도 향후 TV나 전자레인지 같은 기기에는 아예 버튼이 없을 것이고 우리는 그냥 말로 소통할 것입니다. 영상에서 보듯이 LLM은 아직 조금 느리게 작동하지만, 우리는 모든 사람이 알고 있는 무어의 법칙을 알고 있습니다. 분명히, 5~10년 뒤에는 동일한 모델이 현재 1달러 칩에서 쉽게 실행될 것이며, 현재 우리가 5달러의 ESP32 보드에서 완전한 PDP-11 에뮬레이터(80년대 10만달러 대의 컴퓨터였던 PDP)를 실행할 수 있는 것처럼요.\n\n다음 파트에서는 음성 인식을 위해 푸시 투 토크(Push-to-Talk) 버튼을 사용하는 방법 및 \"Rabbit\" 스타일의 데이터 처리 인공지능 파이프라인을 구현하는 방법을 소개할 예정이에요. 기대해주세요.\n\n<div class=\"content-ad\"></div>\n\n이야기를 즐겼다면 Medium에 구독해보세요. 나의 새로운 기사가 발행되면 알림을 받을 수 있을 뿐만 아니라, 다른 작가들의 수천 개의 이야기에도 전체 액세스할 수 있습니다. 또한 LinkedIn을 통해 연락할 수도 있습니다. 이 및 다른 게시물의 전체 소스 코드를 얻고 싶다면 Patreon 페이지를 방문해주세요.\n\n언어 모델과 자연어 처리에 관심이 있는 분들은 다른 기사를 읽어보시기를 환영합니다:\n\n- 모두를 위한 LLMs: LangChain 및 MistralAI 7B 모델을 Google Colab에서 실행하기\n- 모두를 위한 LLMs: LLaMA-13B 모델과 LangChain을 Google Colab에서 실행하기\n- 모두를 위한 LLMs: HuggingFace 텍스트 생성 추론을 Google Colab에서 실행하기\n- 완전 초보자를 위한 자연어 처리\n- 16, 8 및 4비트 부동 소수점 형식 - 어떻게 작동하는 것인가?\n\n읽어 주셔서 감사합니다.","ogImage":{"url":"/assets/img/2024-06-23-AWeekendAIProjectRunningSpeechRecognitionandaLLaMA-2GPTonaRaspberryPi_0.png"},"coverImage":"/assets/img/2024-06-23-AWeekendAIProjectRunningSpeechRecognitionandaLLaMA-2GPTonaRaspberryPi_0.png","tag":["Tech"],"readingTime":12},{"title":"내 DIY 여정 전자기기부터 가구까지 따라 하기 쉬운 10단계 방법","description":"","date":"2024-06-23 18:00","slug":"2024-06-23-MyDIYJourney","content":"\n\n\n![My DIY Journey](/assets/img/2024-06-23-MyDIYJourney_0.png)\n\nDIY Diaries라는 출판물을 위해 쓰기 시작한 이후, 여러 해 동안 한 DIY를 돌이켜보며 내 여정에 대해 생각하게 되었어요. 제 여정은 약 10살 때 시작됐죠.\n\n첫 번째 프로젝트는 이웃이 선물해준 조각 남은 천을 이용해 패턴 없이 인형 옷을 만드는 거였어요. 손으로 재단하고 바느질을 해서 먼저 인형에게 옷을 입혔다가 이후에는 좀 더 정교한 스타일의 바비 옷을 만들게 되었어요.\n\n그 후에 자수를 배워 Hope Chest를 위해 베개커버, 손님용 수건, 테이블보 등을 만들기 시작했어요. 그때 집안 사람들을 위해 스카프를 짜기도 배웠고, 고등학교에서 배운 패턴과 재단 기술을 이용해 옷을 만들기 시작했어요. 심지어 프롬 드레스도 만들었죠!\n\n\n<div class=\"content-ad\"></div>\n\n나는 대학에 소잉 기계를 가져가서 인도에서 구한 멋진 침대 스프레드로 \"히피\" 옷장을 만들었는데 동시에 기숙사 방 장식물도 만들었어. (작은 사이드 노트로, 그 옷들을 입고 지미 헨드릭스와 자니스 조플린을 보러 간 적이 있었는데, 평생의 즐거운 경험이었어!)\n\n시멘트 블록으로 만들어진 기숙사 방은 많은 장식이 필요했어. 그래서 나는 디코파쥬와 콜라주 만드는 법을 배우게 되었고 벽에 걸어보관하기도 했지.\n\n또한 나는 첫 번째 수채화 그림을 시도하기도 했어. 여기 사진에 나와 있는 작품은 지금은 내 누나 집에 걸려 있어. 작년에 그림을 다시 그려보기도 했어. 안타깝게도 그 후로는 그림을 그리지 않았지만, 곧 다시 시작하고 싶어.\n\n![2024-06-23-MyDIYJourney_1](/assets/img/2024-06-23-MyDIYJourney_1.png)\n\n<div class=\"content-ad\"></div>\n\n대학교 때 스카프와 매칭 되는 모자를 짜던 기억이 나요. 스카프는 지금도 코트 랙에 걸려 있어서 색감도 아직 생생하네요. 정말 멋진 양모였는데, 1968년에 만들었답니다!\n\n잠시 후에는 마크라메를 배워서 벽걸이, 화분 걸이, 분리형 탁자, 선물로 주었던 등 여러 작품을 만들었어요. 최근에는 그 때 사용한 안내 책 자료를 발견해서 다시 시도해보고 싶을 때를 대비해 구입했어요.\n\n첫 아파트로 이사 올 때, 친구들과 함께 전기 케이블과 전선 제품을 감았던 큰 나무 통을 활용해서 가구를 만들었어요. 탁자, 좌석, 도색, 천 커버 등 우리가 생각할 수 있는 모든 방법으로 장식을 해봤어요. 우리 중 아무도 돈이 부족해서 가구를 살 수 없었기 때문에 이 방법이 완벽한 장식 방법이었죠.\n\n다음으로 개인적으로 흥미를 느낀 것은 사진촬영이었어요. SLR 카메라 사용법을 스스로 익혀보았죠. 제 카메라는 Pentax K1000였는데 그 카메라를 정말 좋아했어요. 어디를 가든 사진을 찍어 기록했고, 사진을 확대해 프레임에 포장하여 방에서 쓰는 곳에 걸어둔 게 몇 장 있어요.\n\n<div class=\"content-ad\"></div>\n\n내 부모님께서 정년퇴직 후 롱 비치 아일랜드로 이주하시면서 선물로 받으신 사진들이었어요. 그런데 부모님께서 별세하신 후에 집을 비워야 했을 때, 아들이 그 사진을 가져다가 집으로 가져왔답니다. 지금은 조금 바래지긴 했지만, 아들은 소중히 간직하고 있답니다. 저도 그 사진들을 소중히 생각해요.\n\n![이미지](/assets/img/2024-06-23-MyDIYJourney_2.png)\n\n아들이 태어난 후에 정원 가꾸기에 흥미를 가지게 되어 우리 렌탈주택 옆 빈 필지에 거대한 야채 정원을 조성했어요. (거기에는 내가 아이들을 돌보는 동안 사용했던 우리 아이들을 위한 울타리로 둘러싸인 놀이터도 있었습니다.) 내 야채들은 잘 자라서 여름 내내 그 정원에서 먹었어요.\n\n아무도 몰랐던 한 가지는, 남편이 정원 가운데 마리화나를 심어 큰 식물이 자라났다는 것이었어요. 토마토 식물들에 가려져 잘 감춰져 있었죠. (물론, 건조시켜 미래를 위해 저장해 두었죠.)\n\n<div class=\"content-ad\"></div>\n\n몇 년 후에 톨 페인팅 수업을 듣게 되었고, 그것을 매우 즐겼습니다. 스크롤 톱을 구매해서 스스로 나무 조각물을 잘라 눈사람과 같은 작품을 만들고, 그것들을 공예 전시회에서 판매하기도 했습니다. 이러한 그림 그리기 방법을 좋아하는 이유는 아름다운 작품을 만들기 위해 그림을 그릴 필요가 없다는 점이에요. 모두 브러시 기술로 이루어지기 때문이죠.\n\n마지막으로 언급할 DIY는 보석 만들기인데, 이것도 또 다른 분야에서 스스로 배워나간 것이에요. 세 명이 함께 일하며 웹사이트를 시작하고, 공예 전시회에서 판매도 했습니다. 특히 나는 바다 유리를 수집하고, 그것으로 보석을 만들 때 이 DIY를 정말 좋아했어요. 아직도 만들어본 작품 몇 개와 포테스큐의 델라웨어 강변에서 수집한 바다유리 몇 병을 가지고 있어요.\n\n이것이 저의 DIY 여정을 통해 해 온 대부분의 활동이에요. 요즘은 크게 활동하지 않았지만요. 아마 발행 버튼을 누른 뒤 떠올린 것을 추가해야할지도 모르겠네요. 하지만 저의 삶 속에서 즐겨온 대부분의 작품들에 대해서 말씀드린 거예요.\n\n<div class=\"content-ad\"></div>\n\n(고등학교 때 목공예 수업을 듣게 된다면 좋았을 텐데요. 나무로 작업하는 것을 즐기기 때문에 가구를 만들고 싶었을 거예요.)\n\n더 이상 무언가를 창조하는 데 흥미를 느끼지 못 해 조금 슬퍼요. 그러나 아마도 새롭게 흥미로운 것을 발견하고 다시 시작할지도 모르죠. 배운 모든 것과 만들어낸 모든 것을 즐겼으며, 이것이 내 역사의 일부임을 행복하게 생각해요.\n\n내 이야기들을 모두 읽어주시고(Medium의 수천 명의 다른 작가들 또한), 혹은 Medium 멤버십에 가입하여 직접 Medium 작가가 되어보세요. 월 5달러 또는 연간 50달러만 지불하면 됩니다. (저에게 멤버십 비용의 일부가 지급됩니다.)\n\n당신의 멤버십 비용은 직접적으로 저, Michele Baumgardner,와 다른 여러 작가들에게 지원이 됩니다. 또한 Medium의 모든 이야기에 완전한 엑세스를 제공받을 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-23-MyDIYJourney_0.png"},"coverImage":"/assets/img/2024-06-23-MyDIYJourney_0.png","tag":["Tech"],"readingTime":4},{"title":"2024년 DIY Microsoft Teams Room Console 구축 방법","description":"","date":"2024-06-23 17:58","slug":"2024-06-23-DIYMicrosoftTeamsRoomConsole","content":"\n\n옛날 얘기지만... 약 2년 전, 저는 Crestron Teams Room 장치를 만져봤어요. 그리고 그것이 '그냥' 일부 주변 기기가 붙은 Intel NUC라는 사실에 놀랐죠. 그래서 우리가 실제로 인텔 NUC를 손에 쥐고 난 후(사실 유행병 기간중에 우리의 모든 NUC를 노트북으로 교체했죠), '나는 그 Microsoft Teams Room 콘솔을 처음부터 다시 만들 수 있을까?' 라는 생각이 들었어요.\n\n스포일러 주의: 예, 만들었습니다. 그래서 이 블로그 포스트를 작성하게 되었습니다.\n\n## 필요한 것:\n\n- Teams Room 콘솔을 설치하기 위한 최소 8GB USB 스틱\n- 나중에 필요한 구성 XML을 저장할 다른 크기의 USB 스틱\n- Microsoft의 이 문서 요건\n\n<div class=\"content-ad\"></div>\n\n## 일부 하드웨어:\n\n- 최대 3개의 디스플레이를 제공하고 실시간 비디오를 인코딩 및 디코딩할 수 있는 충분한 컴퓨팅 파워와 메모리를 갖춘 Intel NUC. 저는 8GB RAM을 가진 NUC7i5BNK를 사용 중이며 이 일에 완전히 적합하다고 생각합니다.\n- 터치 디스플레이, Viewsonic TD1655를 사용 중입니다.\n- 충분한 USB-A / USB-C 포트와 두 개의 4k 디스플레이를 연결할 수 있는 기능을 갖춘 USB 도킹 스테이션, Raidsonic ICY BOX IB-DK2245AC를 사용 중입니다.\n- USB 스피커폰, Teams 인증된 Jabra Speak 시리즈를 추천드립니다. 예를 들어 Jabra Speak 750 MS-Teams를 사용할 수 있습니다.\n- USB HD 웹캠, 저는 간단한 Logitech C920 HD Pro를 사용했습니다.\n- 노트북에서 비디오 공유를 가능하게 하는 USB HDMI 그랩버, 저는 아마존에서 Pengu 1080p USB HDMI 그랩버를 구입했습니다.\n\n## 그리고 Microsoft 365 테넌트를 위한 일부 라이선스:\n\n- Windows 10 엔터프라이즈\n- Teams Room Standard\n\n<div class=\"content-ad\"></div>\n\n## 이제 모든 것을 준비했네요: 행운을 빕니다!\n\n무슨 뜻이죠? '어떻게 해서 그걸 해냈니?'라고요. 알았어 알았어... 설명할게요.\n\n- 컴퓨터에 모든 작업을 할 폴더를 만들어주세요. 저는 이 d:\\teams-room\\ 폴더를 만들어서 사용했어요.\n- Windows 10 Enterprise 1909 원본 릴리스 ISO를 다운로드해주세요 (2020년 3월에 모든 업데이트가 포함된 것이 아니라, 2019년 10월에 발매된 것을 다운로드해야 해요). 전체 공개: 이 단계에서 1909의 로컬화된 버전을 시도해보지 않았어요. 항상 영어 버전을 선택했죠. 만약 이걸 시도해보게 된다면, 이 게시물을 업데이트할 거예요. 시도해보시면, 댓글을 남겨 다른 이들에게 알려주세요.\n- ISO 파일을 작업 디렉토리에 폴더를 만들어 압축 풀어주세요. 저는 d:\\teams-room\\win10-Enterprise-1909-iso\\라고 창의적으로 이름 짓고 사용했어요.\n- CreateSrsMedia.ps1 스크립트를 다운로드하여 d:\\teams-room\\ 등의 해당 폴더로 이동시켜주세요.\n- 관리자 권한으로 PowerShell을 열고 d:\\teams-room\\ 폴더로 이동해주세요.\n- 스크립트를 실행해주세요:\na. 첫 번째 질문에 답해주실 때... OEM 사용자면, 어째서 이 블로그를 읽고 계신 거죠? 'Enterprise'라는 대답을 선택해주세요. 그것이 당신의 특성입니다. 그런데 말이지: 이는 설치 프로세스에 필요한 Windows 10 버전에 영향을 줍니다. OEM 사용자들은 계속 진행하기 위해 Windows 10 IoT Enterprise ISO를 사용해야 하지만, 평범한 기업 사용자는 액세스할 수 없어요.\nb. 스크립트가 어떤 드라이버를 설치할지 물으면, 'none'을 선택해주세요.\nc. 스크립트가 완료되기까지 기다려주세요 (약 20분 정도 소요될 거예요).\n- 스크립트가 설치 미디어를 생성하는 동안, Microsoft 365 관리 센터로 가셔서 'Resources - Rooms & Equipment(자원 - 방 및 장비)'에서 '룸'을 만든 뒤, 'Teams Room Standard' 라이선스를 해당 룸에 할당해주세요.\n여기 작은 조언 하나: 룸의 주소를 표준 @[회사명].onmicrosoft.com 주소 이외의 다른 도메인 주소로 변경했다면, Teams 룸 콘솔을 인증할 때 이후에 작업을 해야 할 수 있어요. 대부분의 경우 로그인은 onmicrosoft로 할 거에요. 의문이 생기면, Azure AD에서 사용자 주체 이름을 확인해주세요.\n- 설정 루틴은 몇몇 장치에서 조금 까다로울 수 있어요 (설치 프로세스의 끝에 Teams Room 콘솔을 도킹 스테이션에 놓으라고 권고하는데, 그때 실패할 수도 있어요). 우리는 여기서 설명된 것처럼 Teams Room Console 구성을 위한 구성 XML을 준비하고 있어요.\n제가 작업한 것은 아래와 같아요:\n\n```js\n<SkypeSettings>\n...생략...\n</SkypeSettings>\n```\n\n<div class=\"content-ad\"></div>\n\n- 설치 절차를 시작하기 전에 NUC를 네트워크에서 분리하세요. 왜 그런지는 모르겠는데, 설치는 처음 몇 단계에서 네트워크가 없는 것이 신뢰할만 하다고 합니다. Microsoft도 장치를 분리하라고 권장하네요. 그냥 따르고 연결을 끊어보세요.\n- USB 스틱을 사용하여 기계에 설치하세요. 정말 할 일은 없어요. 그냥 구경하고 마음을 편히 하세요. 아직 7번에서 계정을 만들지 않았다면, 지금 만들어 보세요. 지금 할 일이 없을 테니까요.\n- Windows가 설치되면 USB 스틱을 뽑고, Windows가 준비되는 동안 우리 행성에서 지각 변동을 관찰하세요. 어느 순간 기계가 자동으로 꺼집니다.\n- 네트워크에 연결하고 다시 켜면, 모든 것을 준비하고 이번에는 스스로 다시 시작할 거에요.\n- 갑자기 야생의 Out-Of-Box-Experience가 나타나 지역 및 키보드 설정을 요청합니다. 완료되면 Teams 룸 어플리케이션이 첫 번째로 시작됩니다. 천천히. 아주 천천히. 그런 다음 기계가 다시 재부팅되면서 여러분의 희망을 모두 무너뜁니다.\n- Teams 룸 설정 화면이 나타날 텐데 무시하고 준비된 XML 파일을 예상 위치인 C:\\Users\\Skype\\AppData\\Local\\Packages\\Microsoft.SkypeRoomSystem_8wekyb3d8bbwe\\LocalState에 넣어주세요.\n  a. \"종료\"를 누르면 Windows 로그인 화면이 표시됩니다.\n  b. 관리자 계정을 선택하고 \"sfb\"라는 비밀번호를 입력하세요 (Skype For Business의 약자)\n  c. Explorer에서 해당 경로를 열면 C:\\Users\\Skype\\에 대한 액세스 권한을 부여하라는 메시지가 표시됩니다. 당연히 동의해야겠죠.\n  d. 준비된 파일을 복사해서 기계를 다시 시작하세요.\n- 다시 시작되면 필요한 매개변수를 수정하고 완성했어요: 기본 Teams 룸 콘솔이 준비되었습니다.\n\n그리고: 기본 관리자 비밀번호를 변경하는 것을 잊지 마세요.\n\n\"어떤 말씀? 과정을 보여주는 비디오가 도움이 될까요?\"라고요? 그럼 제가 준비해둔 영상이 도움이 될 거에요. 한 번 확인해보세요:\n\n기본 콘솔이 준비되면 나머지 장비와 함께 설정을 시작할 수 있습니다. 작은 허들 룸과 중간 규모의 회의실의 배선을 설명한 간단한 다이어그램을 함께 제공했습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![DIY Microsoft Teams Room Console 0](/assets/img/2024-06-23-DIYMicrosoftTeamsRoomConsole_0.png)\n\n가격은 다를 수 있고, 소형 컴퓨터와 여분의 TV를 이미 보유하고 있는지에 따라 다르지만, 간단한 허들 룸을 위한 추가 하드웨어 비용은 1000달러 미만이어야 합니다.\n\n![DIY Microsoft Teams Room Console 1](/assets/img/2024-06-23-DIYMicrosoftTeamsRoomConsole_1.png)\n\n더 큰 회의실용으로는 추가로 유선 마이크로폰이 있는 AVer 비디오-사운드바를 선택했습니다. 하지만 Logitech Rally나 Poly Studio와 같은 제품들도 잘 작동합니다. 원하는 대로 Jabra 750을 Jabra Speak 810 MS 솔루션으로 업그레이드할 수도 있습니다. 당신의 방, 당신의 선택입니다!\n\n\n<div class=\"content-ad\"></div>\n\n그리고 큰 USB-C 독 덕분에 이중 디스플레이 솔루션으로 갈아탈 수도 있어요. 이렇게 하면 모든 참가자를 한 화면에 넣고 다른 화면에 프레젠테이션을 볼 수 있어요.\n\n이 DIY 매뉴얼이 도움이 되었기를 바라며, 피드백을 기다리고 있겠어요!","ogImage":{"url":"/assets/img/2024-06-23-DIYMicrosoftTeamsRoomConsole_0.png"},"coverImage":"/assets/img/2024-06-23-DIYMicrosoftTeamsRoomConsole_0.png","tag":["Tech"],"readingTime":5}],"page":"12","totalPageCount":112,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":0},"__N_SSG":true}