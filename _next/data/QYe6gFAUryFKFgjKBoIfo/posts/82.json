{"pageProps":{"posts":[{"title":"맥을 더 빠르게 만드는 방법 macOS Ventura","description":"","date":"2024-06-19 08:56","slug":"2024-06-19-HowtoSpeedUpYourMacWithmacOSVentura","content":"\n\n## macOS 13.1 Venture에서 맥을 빠르게 하는 다섯 가지 방법\n\n<img src=\"/assets/img/2024-06-19-HowtoSpeedUpYourMacWithmacOSVentura_0.png\" />\n\n이 기사에서는 macOS Ventura 속도를 최적화하는 방법을 살펴보겠습니다. 보통 나는 내 맥을 완벽하게 만족하지만 13.1 버전으로 업데이트한 후에 부팅 중 간헐적으로 멈춤이 발생하고, 포토샵이 멈추며, 애니메이션이 느려지는 것을 알아챘습니다. 그래서 이를 고치는 방법에 대해 연구를 시작하고 다음 다섯 가지를 찾아냈습니다.\n\n## 부팅 후 애플리케이션\n\n<div class=\"content-ad\"></div>\n\n일부 설치한 애플리케이션은 시스템 부팅 후 자동으로 시작할 수 있습니다. 이는 시스템이 부팅되는 동안 macOS를 시작하는데 바쁘기 때문에 앱을 즉시 사용할 수 있지만 앱을 실행하는 것이 전체 부팅 프로세스를 늦출 수 있다는 것을 의미합니다.\n\n거기에, 대부분의 경우 부팅 후 바로 앱을 사용하지는 않습니다. 따라서 부팅을 빨리 하려면 부팅 후 자동으로 실행되는 앱을 확인하고 필요한 경우 그 목록을 줄이는 것이 좋습니다.\n\n이를 위해서는 → 시스템 환경 설정 → 일반 → 로그인으로 이동하십시오. 여기에서 상단에 있는 \"시작 시 열기\" 앱 목록을 선택하고, 필요한 경우 왼쪽 아래쪽에 있는 체크를 해제할 수 있습니다.\n\n## 디스크 오류\n\n<div class=\"content-ad\"></div>\n\n최근에 맥북이 느려지거나 종종 다시 부팅하거나 종료해야 하는 경우가 있나요? 그렇게 대답한다면, 디스크에 오류가 있을 수 있어서 이러한 문제가 발생할 수 있습니다.\n\n![맥북 속도 향상 팁](/assets/img/2024-06-19-HowtoSpeedUpYourMacWithmacOSVentura_1.png)\n\n그러나 맥에서 간단한 테스트를 실행하여 오류를 찾고 수정할 수 있습니다. 디스크 유틸리티 앱을 열고 왼쪽에 있는 내부 디스크를 강조 표시한 다음 상단의 \"고급 수리\"를 탭하고 마법사를 따라 오류를 제거할 수 있습니다.\n\n## 도전적인 응용 프로그램\n\n<div class=\"content-ad\"></div>\n\n새로운 운영 체제로 업그레이드 한 후, 우리의 경우 macOS 13.1 Ventura, 가끔 앱이 제대로 작동하지 않을 수도 있습니다.\n\n가끔은 개발자의 잘못이거나, 가끔은 시스템의 잘못일 수도 있지만, 그것을 받아들여야 합니다. 앱이 제대로 작동하지 않으면 \"루핑\"과 같은 문제를 일으킬 수 있어서 꼭 필요한 작업이 중단되고 전력이 과다 사용되어 속도가 느려질 수 있습니다. 업데이트 후 Mac이 느리게 실행되는 경우 무거운 앱을 확인해보세요.\n\nActivity Monitor 앱으로 이동하고 CPU 범주로 이동한 다음 % CPU에 따라 내림차순으로 프로세스를 정렬합니다. 그런 다음 상위 위치에 의심스러운 앱을 찾은 경우 해당 앱을 누르고, 그런 다음 상단의 X를 누릅니다. 그런 다음 강제 종료를 누릅니다.\n\n## 효과 및 애니메이션\n\n<div class=\"content-ad\"></div>\n\n맥OS에서는 앱을 열 때, 제스처를 사용할 때 등 다양한 효과와 애니메이션이 보입니다. 그러나 이러한 모든 효과와 애니메이션을 렌더링하는 데에는 일정한 성능이 필요하며, 이는 예전 맥에서는 여분으로 가지고 있지 않을 수 있습니다.\n\n다행히도, macOS에서는 효과와 애니메이션을 쉽게 제한할 수 있습니다. 시스템 설정 → 접근성 → 모니터로 이동하여 '모션 제한 활성화'를 설정할 수 있습니다. 더불어 '투명도 줄이기'도 활성화할 수 있습니다.\n\n게다가, 애니메이션 자체가 수행하는 데 시간이 걸리므로 이를 끄면 맥이 즉시 빠르게 느껴질 것이며, 이는 새로운 기계에서도 느낄 수 있을 것입니다.\n\n## 저장 공간\n\n<div class=\"content-ad\"></div>\n\n맥이 빠르고 안정적으로 작동되도록 보장하려면 저장 공간에 충분한 여유 공간이 있는지 확인해야 합니다. 물론 맥이 여유 공간이 부족하다면 알려줄 겁니다.\n\n하지만, 여유 공간이 없어진다면, 애플은 불필요한 파일을 삭제하여 저장 공간을 확보하기 위해 하드웨어 리소스를 주로 할당할 것입니다. 이는 심각한 속도 저하로 이어질 수 있습니다.\n\n맥이 저장 공간을 확보하지 못하면 종료되고 데이터를 삭제한 상태에서 다시 설치해야 할 수도 있습니다. 비슷한 문제가 발생했거나 맥 미니를 맥 이상으로 사용하고 있는 건 아닌지요?\n\n이 글을 읽어주셔서 감사합니다! 마음에 드셨다면 좋아요 👏🏻와 댓글 💬로 지지해주시면 감사하겠습니다. 그리고 더 많은 콘텐츠를 원한다면, 저를 팔로우해주시기 바랍니다! 즐거운 하루 보내세요 😊👌👋\n\n<div class=\"content-ad\"></div>\n\n제 작업을 직접적으로 지원해 주시면 감사하겠습니다: [https://ko-fi.com/jakubjirak](https://ko-fi.com/jakubjirak)","ogImage":{"url":"/assets/img/2024-06-19-HowtoSpeedUpYourMacWithmacOSVentura_0.png"},"coverImage":"/assets/img/2024-06-19-HowtoSpeedUpYourMacWithmacOSVentura_0.png","tag":["Tech"],"readingTime":3},{"title":"맥 해독하기 macOS 커널에서 고급 CPU 메트릭스 조사하기","description":"","date":"2024-06-19 08:54","slug":"2024-06-19-DecodingMachInvestigatingmacOSsKernelforAdvancedCPUMetrics","content":"\n\n<img src=\"/assets/img/2024-06-19-DecodingMachInvestigatingmacOSsKernelforAdvancedCPUMetrics_0.png\" />\n\n우리의 지난 탐험에서는 인텔과 애플 실리콘 간 CPU 사용량 차이에 대해 표면을 긁었습니다. 이제는 더 깊이 파고들어볼 시간입니다. macOS 커널은 CPU 사용량을 어떻게 추적하고, 다른 커널 서브시스템들이 시간 기록에 대해 어떤 가정을 하는지 살펴봅니다. 본 글은 Mach 리카운트 서브시스템으로 빠져들어, CPU 시간의 매 틱이 면밀하게 기록되는 과정을 안내합니다.\n\n외부에서 커널 밖에서 CPU 부하를 정확히 결정하는 것은 불가능하다는 것을 이해한 뒤, 서로 다른 CPU 코어가 서로 다른 속도로 동작한다는 점에서 좋은 근사치를 찾겠다는 다짐을 하였습니다. 결국, 우리는 시스템 문제 진단을 제공하고 정확한 시스템 사용 보고서를 제공하는 대신에 도움을 제공해야 합니다.\n\nproc_pidinfo(PROC_PIDTASKINFO) 시스템 호출을 통해 프로세스별 CPU 시간 사용량을 사용할 수 있게 되었는데, 우리가 찾고 있는 것은 전체 시스템에서 (유휴 시간 포함) 사용된 CPU 시간을 결정하여 프로세스별 비율을 수립하는 방법입니다.\n\n<div class=\"content-ad\"></div>\n\n# 초기 접근 방식: host_process_info 메트릭 값을 합산하기\n\n일반적으로 가장 명백한 해결책을 먼저 시도하고, 그 후에 이를 발전시키는 편입니다. 이 경우, host_process_info() API는 이미 각 프로세서별 전체 CPU 부하를 반환하며, 여기에 idle 시간이 포함되어 있기 때문에 이를 합산하는 것은 각 프로세스를 측정할 기준을 결정하는 명백한 방법일 수 있습니다.\n\n그러나 결과를 보고 실망했습니다: 테스트 프로세스를 설정하여 전체 CPU 시간의 약 10%를 사용하도록 하였으나, 이 방법을 따르면 보고된 사용량이 약 0.01%와 같은 수준으로 표시되었습니다. 결과에 일정한 배수를 곱하면 일부 결과가 더 좋아지지만, 유감스럽게도 동일한 배수로 모든 결과를 의미 있게 변환할 수 없었습니다.\n\n점점 더 가까워지는 기분이었습니다. 이러한 차이로 인해 처음에 host_process_info()와 proc_pidinfo API에서 사용되는 시간 단위에 차이가 있을 수 있다고 생각하게 되었습니다. 내 관찰 아래에 정확히 무엇이 있는지 알아보기 위해, 시스템 질문에 대한 모든 답을 찾을 수 있는 유일한 장소인 케널 소스로 의존하게 되었습니다.\n\n<div class=\"content-ad\"></div>\n\n# 유일한 진실의 근원\n\n리눅스를 기반으로 한 네트워크 보안 장치를 개발하던 시절, 리눅스 네트워킹 구현을 이해하기 위한 책을 추천해 줄 수 있느냐고 동료에게 물어보았어요. 그때 동료가 한 말을 절대로 잊지 못할 거예요: 왜 구식 책을 사서 읽느냐고 할 때, 커널 소스로부터 가장 정확한 답변을 받을 수 있는데?\n\n그 이후로는 언제나 코드베이스에 접근하는 방식이 바뀌었어요.\n\n커널 소스에 내 질문에 대한 답변이 반드시 포함되어 있을 것이라고 확신을 가지고, 이 버그를 최종적으로 해결하기로 결심했어요.\n\n<div class=\"content-ad\"></div>\n\n## 올바른 질문하기\n\n커널 소스를 연구하기 전에 항상 답변하고자하는 구체적인 질문을 생각해냅니다. 이러한 질문들을 프로그램이라는 복잡한 운영 체제 커널을 특징 짓는 지나치게 많은 세부 사항을 탐색하는 데 도움이 되는 지도로 생각하세요.\n\nhost_process_info()와 proc_pidinfo(PROC_PIDTASKINFO)은 아마도 서로 다른 시간 단위를 사용할 것으로 의심했기 때문에 아직 찾아야 할 것이 있었습니다:\n\n- 각 API가 사용하는 시간 단위는 무엇인가요?\n- 이러한 시간 단위를 서로 변환하는 방법은 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n세부적으로 각 API를 살펴보기 전에 Mach 커널이 리소스 회계를 수행하는 방법을 이해하려면 우회해야 합니다.\n\n# Mach 재계산 서브시스템\n\n작업 리소스 사용에 대한 카운터를 유지하는 Mach 커널의 일부는 재계산(Recount)이라고 합니다. recount_context_switch() 함수는 문맥 전환이 발생할 때 호출되며 현재 실행 중인 작업에 대한 사용량 카운터를 업데이트하는 역할을 합니다.\n\n재계산 서브시스템은 다른 리소스 유형에 대해 서로 다른 세분도를 사용하며, 청소 및 메모리 사용의 효율성 사이의 균형을 유지합니다.\n\n<div class=\"content-ad\"></div>\n\n저는 당신의 조사와 관련된 사안으로, Recount 이름이 곧 커널 소스에 나타날 것임을 확인했습니다.\n\n# 첫 번째 정착지: proc_pidinfo\n\nproc_pidinfo API를 살펴보면서 시작했습니다. 이 API는 단일 프로세스가 사용한 CPU 시간을 보고합니다.\n\n해당 함수를 검색하고 스택 추적을 따라가 보니, fill_taskprocinfo 함수가 Mach 커널에서 작업 정보를 획득하고 보고하는데 궁극적으로 관여하고 있음을 알 수 있었습니다. task_info 속성인 pti_total_system과 pti_total_user를 거슬러 올라가면 proc_pidinfo() API와 Mach Recount 서브시스템 사이의 관련성이 드러납니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-19-DecodingMachInvestigatingmacOSsKernelforAdvancedCPUMetrics_1.png)\n\n해설: fill_taskprocinfo 함수에서 이 코드 조각은 CPU 시간 정보를 수집하는 방법을 보여줍니다. recount_task_times 함수는 작업에 대한 총 시스템 및 사용자 시간을 수집하며, proc_pidinfo API가 CPU 사용량을 보고하는 방법을 이해하는 데 중요합니다.\n\nrecount_task_times()로 호출 스택을 따라가면, 최종적으로 집계되는 필드는 rt_usage라는 것을 알 수 있습니다:\n\n![이미지](/assets/img/2024-06-19-DecodingMachInvestigatingmacOSsKernelforAdvancedCPUMetrics_2.png)\n\n\n<div class=\"content-ad\"></div>\n\n설명: recount_usage 구조는 Mach 시간 단위에서 사용자 및 시스템 시간을 구체적으로 유지하는 CPU 사용 메트릭을 저장합니다. 이를 통해 proc_pidinfo API가 CPU 시간을 어떻게 검색하고 보고하는지 이해할 수 있습니다.\n\n저는 recount_usage 구조의 필드가 동일한 접미사(_time_mach)를 가지고 있는 것을 발견했습니다. 이는 사용된 시간 단위에 대한 초기 힌트로 이해했습니다.\n\n# 다음 정거장: host_process_info\n\nhost_process_info() 함수는 각 CPU 코어가 사용한 전체 CPU 시간을 보고합니다. processor_cpu_load_info() 함수가 이 정보를 보고하는 데 책임이 있다는 것을 알아보는 데 시간이 오래 걸리지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n\n\n![이미지](/assets/img/2024-06-19-DecodingMachInvestigatingmacOSsKernelforAdvancedCPUMetrics_3.png)\n\n설명: 이 함수에서는 recount_processor_usage가 Mach 시간의 CPU 사용률 데이터를 제공하고, hz_tick_interval을 사용하여 해당 데이터를 틱으로 변환합니다. 이 변환 단계는 서로 다른 API 간에 CPU 시간 보고에 대한 불일치를 이해하는 데 중요합니다.\n\n이것은 host_process_info와 Mach Recount 서브시스템 간의 연결이고, Recount로부터 얻은 지표가 Mach 시간으로 보고되며 반환되기 전에 상수 요소 hz_tick_interval로 나눠진다는 사실이 더 중요합니다.\n\n저는 실험 중에 이전에 관찰했던 내용이 변환 시간 단위 사이에 상수 요소가 포함되어 있다는 명백한 확인을 발견해서 기뻤습니다.\n\n\n<div class=\"content-ad\"></div>\n\n이를 통해 proc_pidinfo API가 Mach 시간 단위로 CPU 사용량을 반환하고 host_process_info API가 대신 틱을 사용한다는 것을 알았습니다. 두 단위는 hz_tick_interval 요소를 사용하여 변환할 수 있습니다. 즉, hz_tick_interval 값을 결정할 수 있다면 두 시간 단위를 변환하고 버그를 해결할 수 있을 것입니다.\n\n그러므로, 다음으로 해야 할 당연한 단계는 hz_tick_interval 값을 찾는 것입니다.\n\n## hz_tick_interval 역추적\n\n안타깝게도 hz_tick_interval은 사용자 공간에서 접근할 수 없습니다. 빠른 해결책에 대한 희망이 사라졌지만, 최소한 값을 가져와서 아이디어가 유효한지 확인할 수 있다면 좋겠습니다.\n\n<div class=\"content-ad\"></div>\n\n이 상수를 찾는 것은 커널의 어느 부분이 관련되느냐에 따라 달랜 시간 기록 가정들의 미로에 들어간 것 같았습니다. 예를 들어, hz_tick_interval의 정의를 보며 BSD 부분에서 틱이 10ms를 나타내는 것으로 예상한다는 코멘트를 보았습니다. 이것이 서로 다른 API에서 서로 다른 시간 단위가 사용되는 이유일 것입니다.\n\n사용할 수 있는 변환 루틴을 찾아보았습니다. 궁극적으로는 사용자 공간에서 접근할 수 없는 rtclock_sec_divisor 상수인 것 같습니다. 이 값은 부트로더가 시스템 부팅 시 채우는 것입니다. 따라서, 제 가정을 수동으로 확인하기 위해 이 값을 설정하는 것은 성공하지 못했습니다.\n\n이 값을 제공할 것으로 예상했던 사용자 공간 API인 mach_timebase_info가 실제로는 기대한 결과를 제공하지 않았습니다. 따라서 다시 한 번 원점으로 돌아간 것 같은 느낌이 들었습니다!\n\nproc_pidinfo와 host_process_info 간의 시간 단위 불일치를 추적하는 것은 도전적이지만 유익한 여정이었습니다. Mach Recount 하위 시스템을 면밀히 살펴보고 macOS에서의 CPU 시간 보고 복잡성을 밝혀냈습니다. 문제의 근원을 이해했지만, 사용자 공간에서 hz_tick_interval에 접근할 수 없어 해결책을 찾는 것이 쉽지 않습니다. 그러나 이 도전은 끝이 아니라 혁신적인 해결책을 찾을 기회입니다. 다음 부분에서 이러한 시간 단위를 변환하고 정확한 CPU 메트릭을 보장하는 방법을 탐색할 것입니다. 더 많은 통찰과 실용적인 응용 프로그램을 기대해 주세요!","ogImage":{"url":"/assets/img/2024-06-19-DecodingMachInvestigatingmacOSsKernelforAdvancedCPUMetrics_0.png"},"coverImage":"/assets/img/2024-06-19-DecodingMachInvestigatingmacOSsKernelforAdvancedCPUMetrics_0.png","tag":["Tech"],"readingTime":6},{"title":"2024년 개발자를 위한 macOS에서 반드시 필요한 도구 및 앱","description":"","date":"2024-06-19 08:52","slug":"2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024","content":"\n\n\n![매체 기사](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_0.png)\n\n여기가 내 첫 번째 매체 기사야.\n\n10년 이상 동안 macOS를 활용해온 나는 아키텍처, 클라우드, 모바일 앱, 웹 앱에 집중하며 반드시 필요한 다음과 같은 도구들을 소개하고 싶다.\nVS Code, Intellij IDEA, Xcode, Android Studio, Docker와 같이 흔히 쓰는 것들은 건너뛰겠어. 그런데 Fleet에 관심 있는 사람 있나요? 나한테 알려줘.\n\n\n<div class=\"content-ad\"></div>\n\n# 개발자 도구\n\nBrew (무료)\n\nHomebrew는 Apple의 운영 체제인 macOS에 소프트웨어를 설치하는 작업을 단순화하는 무료 오픈 소스 소프트웨어 패키지 관리 시스템입니다. 사용하기 쉽고 몇 가지 간단한 단계로 설치할 수 있습니다. Homebrew를 설치하면 Homebrew 리포지토리에서 소프트웨어를 설치할 수 있습니다. Homebrew 리포지토리에는 수천 가지 패키지가 포함되어 있습니다. GitHub와 같은 다른 소스에서 소프트웨어를 설치하는 데도 Homebrew를 사용할 수 있습니다. Homebrew는 macOS를 최신 소프트웨어로 유지하고 macOS 앱 스토어에 없는 소프트웨어를 설치하는 좋은 방법입니다.\n\n이것은 macOS를 새로 설치한 후 맨 처음 설치하는 앱입니다.\n\n<div class=\"content-ad\"></div>\n\n이제 아래 명령어를 사용하여 Homebrew를 설치해보세요.\n\n```js\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nHomebrew가 설치되면 매우 간단하게 대부분의 앱을 Homebrew로 설치할 수 있어요. 아래는 몇 가지 IDE 예시입니다:\n\n```js\n# VS Code 설치\nbrew install --cask visual-studio-code\n\n# Intellij IDEA Community Edition 설치\nbrew install --cask intellij-idea-ce\n\n# Android Studio 설치\nbrew install --cask android-studio\n```\n\n<div class=\"content-ad\"></div>\n\nbrew 앱을 업데이트하려면 아래 명령어를 사용하세요 (또는 MacUpdater, Latest app을 사용하세요). 자동화하려면 크론 작업을 설정할 수도 있어요 :)\n\n```js\nbrew update && brew upgrade && brew cleanup\n```\n\nWarp Terminal (무료/유료)\n\nWarp Terminal은 macOS용 현대적이고 빠르며 사용자 정의가 가능한 터미널 에뮬레이터입니다. Rust로 개발되었으며 GPU 가속을 사용하여 부드럽고 반응이 빠른 경험을 제공합니다. Warp Terminal은 탭, 분할 창 및 다중 프로필을 포함한 다양한 기능을 지원합니다. 또한 내장 파일 관리자와 강력한 검색 도구를 갖추고 있습니다. Warp Terminal은 개발자와 강력하고 사용자 정의 가능한 터미널 에뮬레이터를 원하는 모든 사람들에게 좋은 선택입니다.\n\n<div class=\"content-ad\"></div>\n\n\n\n![Image](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_1.png)\n\n요즘 모든 도구와 마찬가지로 이것도 AI (GPT ahem ahem) 기능을 갖추고 있습니다. Mac에서 숨겨진 파일을 표시하는 명령을 요청할 수 있어요. 가장 좋아하는 기능은 구문 강조, 자동 제안 및 북마크 옵션으로 시간을 많이 절약할 수 있습니다.\n\nbrew를 사용하여 설치해보세요\n\n```js\nbrew install --cask warp\n``` \n\n\n<div class=\"content-ad\"></div>\n\nCotEditor (무료)\n\nCotEditor는 웹 페이지 (HTML, CSS), 프로그램 소스 코드 (Python, Ruby, Perl 등), 구조화된 텍스트 (Markdown, Textile, TeX 등) 또는 기타 종류의 일반 텍스트를 편집하기 위해 설계된 오픈 소스 경량이면서 강력한 텍스트 편집기입니다. macOS용으로 만들어져 macOS 응용 프로그램이 가져야 할 외관과 기능을 갖추고 있습니다.\n\n![이미지](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_2.png)\n\n\"또 다른 텍스트 편집기가 필요한 이유가 뭐냐구요?\"라고 궁금해하실 수도 있습니다. 그런데 때로는 파일을 저장하지 않아도 문법 강조를 할 수 있는 곳에 코드를 복사하여 붙여넣고 싶을 때도 있거든요 (이것이 Sublime에서 잘 되지 않는 부분입니다). CotEditor는 바로 그런 상황에 유용하죠.\n\n<div class=\"content-ad\"></div>\n\n맥 앱 스토어에서 설치하거나 간단히 brew를 사용할 수 있어요.\n\n```js\nbrew install --cask coteditor\n```\n\nFork (유료)\n\nFork는 맥과 윈도우용 빠르고 친근한 Git 클라이언트에요. 사용하기 쉽도록 설계되어 깔끔하고 직관적인 인터페이스를 갖췄어요. Fork는 기본적인 Git 명령뿐만 아니라 더 고급 기능인 병합 충돌 해결 및 대화식 리베이스도 지원해요. 내장된 차이점 뷰어와 강력한 검색 도구도 있어요. Fork는 강력하면서 사용하기 쉬운 Git 클라이언트를 원하는 개발자들에게 좋은 선택이에요.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_3.png)\n\nFork를 사용하는 이유는 macOS 앱 같은 느낌이 들기 때문이에요 :) SourceTree나 Tower와 같은 대안이 있지만, 난 항상 간단함 때문에 Fork로 돌아오게 되죠.\n\n일반적으로 brew를 사용하여 설치하세요.\n\n```js\nbrew install --cask fork\n```\n\n<div class=\"content-ad\"></div>\n\n새 파일 메뉴(유료)\n\n새 파일 메뉴는 Finder 확장 프로그램으로, Finder 콘텍스트 메뉴를 통해 손쉽고 빠르게 새 파일을 만들 수 있습니다. Finder 창이나 데스크톱에서 마우스 오른쪽 버튼을 클릭하여 새 파일을 생성하거나 한꺼번에 여러 파일을 만들 수 있습니다. 새 파일 메뉴는 텍스트 파일, 문서, 스프레드시트, 프레젠테이션 등 다양한 파일 유형을 지원하며 html, dart, go 등을 위한 새 템플릿을 추가할 수도 있습니다.\n\nMac App Store에서 다운로드하세요.\n\n<div class=\"content-ad\"></div>\n\nColorSlurp (무료/유료)\n\n맥OS와 iOS용 컬러 피커 앱인 ColorSlurp은 화면에서 색상을 선택하고 편집하고, 컬러 팔레트를 만들고, 다양한 형식으로 색상을 내보낼 수 있습니다. 디자이너와 개발자들에게 강력한 도구로 만드는 다양한 기능을 갖고 있습니다. 초정밀 확대 도구, 다양한 컬러 선택 도구, 사진에서 자동으로 팔레트 만드는 기능 등이 있습니다. ColorSlurp은 사용하기 쉽고, 세련된 모던한 인터페이스를 갖추고 있습니다.\n\n![이미지](/assets/img/2024-06-19-Must-have-tools-and-apps-for-macOS-for-developers-in-2024_5.png)\n\n맥 앱 스토어에서 받아보세요.\n\n<div class=\"content-ad\"></div>\n\nUTM (무료)\n\n이것은 macOS용 무료 오픈소스 가상 머신 앱입니다. 인기 있는 시스템 에뮬레이터인 QEMU를 기반으로하며 사용자 친화적 인터페이스를 제공하여 가상 머신을 만들고 관리할 수 있습니다. UTM은 Mac에서 Windows, Linux, macOS를 포함한 다양한 운영 체제를 실행하는 데 사용할 수 있습니다. macOS에서 지원되지 않는 새 소프트웨어를 테스트하거나 예전 운영 체제를 실행하려는 개발자와 사용자들에게 강력한 도구입니다.\n\nM1/M2 기반 Mac에 최적화되어 있습니다.\n\n대안으로는 Parallels ($$$), VMware Fusion (무료/유료), VirtualBox (무료)가 있습니다. 개인적으로 저는 Parallels와 같은 구독 기반 앱을 선호하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_6.png\" />\n\nbrew를 사용하여 설치하세요\n\n```js\nbrew install --cask utm\n```\n\nShellHistory (유료)\n\n<div class=\"content-ad\"></div>\n\n백업, 동기화 및 쉘 히스토리를 정리하는 데 도움을 줍니다. 이 도구는 쉘 히스토리를 SQLite 데이터베이스에 Write-Ahead-Log로 저장하여 단순한 텍스트 파일이 아니라 iCloud에 백업합니다. 전체 텍스트 검색을 사용하여 명령을 쉽게 찾을 수 있습니다. 또한 ShellHistory는 종료 코드, 작업 디렉토리, 호스트, 사용자, 명령의 경과 시간 및 세션 ID를 포함하여 히스토리를 확장합니다. 쉘 히스토리에서 명령을 노트북에 정리할 수 있습니다.\n\n필수는 아니지만 유용합니다. 기억하지 못하는 명령을 사용한 경우 UI에서 빠르게 검색하고 복사할 수 있습니다.\n\n맥 앱 스토어에서 다운로드하세요.\n\n![이미지](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_7.png)\n\n<div class=\"content-ad\"></div>\n\n# 유틸리티\n\n사각형 (무료/유료)\n\n우리가 정말로 인정해야 할 것은, macOS에서의 창 관리가 없다는 것입니다. 그래서 이 앱이 필요한 것입니다. 우리는 항상 코드를 작성하고 미리보기를 나란히 표시하는 간단한 해결책을 찾고 있었고, 이 앱은 정확히 그 역할을 해주며 더 많은 일도 할 수 있습니다. 더 많은 기능이 있는 프로 버전도 있습니다.\n\n![이미지](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_8.png)\n\n<div class=\"content-ad\"></div>\n\nbrew을 사용하여 설치하세요.\n\n```js\nbrew install --cask rectangle\n```\n\nMacUpdater (유료)\n\nMac App Store 앱이 아닌 앱을 최신 상태로 유지하는 필수 앱입니다. 이 앱은 유료이지만 모든 돈을 할 가치가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_9.png)\n\nbrew를 사용하여 설치하세요\n\n```js\nbrew install --cask macupdater\n```\n\n최신 버전 (무료)\n\n\n<div class=\"content-ad\"></div>\n\n맥업데이터의 대안으로 오픈 소스이며, 모든 앱의 업데이트를 보여주지 않는 유일한 제한이 있습니다. 그러나 맥업데이터보다 한 가지 장점이 있습니다. 맥 앱 스토어 앱의 업데이트를 정확히 보여주며, 한 번 클릭으로 모두 업데이트할 수 있습니다. 솔직히 말해서, 저는 두 앱 모두 사용합니다 :)\n\n![image](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_10.png)\n\nbrew를 사용하여 설치할 수 있습니다\n\n```js\nbrew install --cask latest\n```\n\n<div class=\"content-ad\"></div>\n\nShottr (무료)\n\nShottr은 macOS용 무료 경량화면 캡처 앱입니다. M1/M2 맥에 최적화되어 있고 프리미엄 도구에서 기대할 수 있는 기능을 제공합니다. 캡처 모드에서 Shottr 앱은 스크롤링 스냅샷 및 창 스냅샷과 함께 배경을 추가한 고급 캡처를 수행할 수 있습니다. 또한 스크린샷에 주석을 추가하거나 텍스트를 넣고 민감한 정보를 흐릴 수 있는 내장 편집기도 있습니다. Shottr은 가격표가 부착되지 않은 강력한 스크린샷 앱을 찾고 있는 사용자들에게 좋은 선택지입니다.\n\n![이미지](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_11.png)\n\nHomebrew를 사용하여 설치하세요\n\n<div class=\"content-ad\"></div>\n\n```js\nbrew install --cask shottr\n```\n\nOpenIn (유료)\n\nOpenIn은 macOS용 앱으로, 링크, 이메일 및 파일을 선택한 애플리케이션에서 열 수 있게 해줍니다. 링크, 이메일 및 파일을 위한 선택 목록을 사용자 정의하여 업무 흐름을 간소화할 수 있습니다.\n\n예를 들어, Teams 앱에서 클릭한 링크를 Edge 브라우저에서 열도록 구성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_12.png\" />\n\n맥 앱 스토어에서 설치하세요.\n\nOnyX (무료)\n\nOnyX는 macOS용의 다기능 유틸리티로, 부팅 디스크와 시스템 파일 구조를 확인하고 미사용 파일을 정리하며 기타 유지 보수 작업을 수행할 수 있습니다. Apple 애플리케이션의 숨겨진 매개변수를 구성하고 다양한 기능을 제공합니다. OnyX는 복잡한 명령어를 사용하여 입력해야 할 작업을 많이 처리할 수 있는 신뢰할 수 있는 응용 프로그램으로서, 명령 줄 인터페이스를 통해 작업할 필요가 없도록 깔끔한 인터페이스를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n아래의 표를 마크다운 형식으로 변경해 주세요.\n\n![이미지](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_13.png)\n\nbrew를 사용하여 설치하실 수 있습니다.\n\n```js\nbrew install --cask onyx\n```\n\nHand Mirror (무료/유료)\n\n<div class=\"content-ad\"></div>\n\n핸드 미러는 메뉴 바에 위치한 무료 맥 유틸리티입니다. 클릭할 때마다 셀피 카메라의 작은 미리보기가 표시됩니다. 비디오 통화에 참여하기 전에 외모를 확인하거나 프레임에 부끄러운 것이 없는지 확인하는 데 유용합니다. 핸드 미러에는 유료 애드온이 있어 미리보기 창을 화면 다른 곳으로 이동하고 외관을 변경하거나 다른 앱 아이콘을 선택하는 기능과 같은 보너스 기능들을 잠금 해제할 수 있습니다.\n\n맥 앱 스토어에서 설치하세요.\n\nRaycast (무료/유료)\n\n<div class=\"content-ad\"></div>\n\nRaycast은 macOS용 생산성 앱으로, 작업을 완료하고 계산하며 공통 링크를 공유하며 등 손쉽게 할 수 있게 해줍니다. 이 앱은 앱을 실행하거나 파일을 검색하고 어떤 일이든 키보드 단축키를 만들 수 있는 확장 가능한 런처로 사용할 수 있습니다. Raycast에는 질문에 대답하거나 채팅하고 작업을 간소화할 수 있는 내장 AI 어시스턴트도 포함되어 있습니다.\n\nbrew를 사용하여 설치하세요\n\n```js\nbrew install --cask raycast\n```\n\n<div class=\"content-ad\"></div>\n\nTinkerTool (무료)\n\nTinkerTool은 macOS용 무료 오픈 소스 시스템 유틸리티로, 사용자들이 macOS의 숨겨진 환경 설정과 일부 시스템과 함께 제공되는 애플리케이션의 환경 설정을 변경할 수 있습니다. macOS의 룩앤필을 사용자 정의하고 macOS에서 발생할 수 있는 일부 문제를 해결하는 데 사용할 수 있는 강력한 도구입니다. TinkerTool은 사용이 쉽고 관리자 권한이 필요하지 않습니다. macOS 시스템에서 더 많이 활용하고 싶은 사람들에게 좋은 도구입니다.\n\n<img src=\"/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_16.png\" />\n\n그들의 웹사이트에서 다운로드하세요.\n\n<div class=\"content-ad\"></div>\n\nNumi (유료)\n\nNumi은 macOS용 계산기 앱으로, 자연스럽게 작업을 설명하고 정확한 답변을 즉시 얻을 수 있게 해줍니다. 예를 들어 \"9달러를 유로로\" 입력하면 Numi가 대신 정확히 계산해줍니다. Numi는 단위 변환, 날짜 및 시간 처리, Alfred 통합도 지원합니다.\n\n![이미지](/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_17.png)\n\nbrew를 사용하여 설치하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nbrew install --cask numi\n```\n\n## AltTab (무료)\n\nAltTab의 개발자로써, 이 앱은 macOS에 윈도우의 \"alt-tab\" 창 전환기능을 가져옵니다. 윈도우에서 앱 전환 중 미리 보기를 그리워한 적이 있나요? macOS에서 창을 찾는 고통을 알고 계시겠죠. 동일한 앱에 대해 여러 창이 있는 경우 cmd+tab로는 그것들이 표시되지도 않아요. 이상한 이동을 해야만 하는데요. 즉, cmd+tab 그리고 cmd+~입니다. 하지만 더 이상 그럴 필요가 없어요. AltTab은 이러한 모든 문제를 해결하면서 멋지게 보여줍니다. 내 의견으로는 반드시 필요한 도구이며, 무료입니다!\n\n<img src=\"/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_18.png\" />\n\n\n<div class=\"content-ad\"></div>\n\nbrew를 사용하여 설치해 보세요\n\n```js\nbrew install --cask alt-tab\n```\n\n다른 인기 있는 어플로는 Bartender, iStat Menus, 그리고 Amphetamine이 있어요.\n\n여기까지입니다. 이 어플들은 저가 거의 매일 사용하는 것들이에요. 다른 개발자들이 작업을 더 빨리 할 수 있도록 이들이 도움이 됐으면 좋겠네요.\n\n<div class=\"content-ad\"></div>\n\n다음 기사에서 VS Code 플러그인을 다룐다면 알려주세요. 또한 목록에 추가해야 할 애플리케이션이 있으면 아래 댓글로 알려주세요.\n\n2023년 8월 12일 업데이트: AltTab을 목록에 추가했습니다. 이 앱이 정말 좋으니까요.\n\n2024년 1월 12일 업데이트: 2024년에 앱들이 여전히 관련성이 있기 때문에 제목을 업데이트했어요 🤓\n\n2024년 3월 13일 업데이트: Fig를 삭제했습니다. 이제 Fig 팀은 명령줄을 위해 Amazon CodeWhisperer을 권장하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n감사합니다!","ogImage":{"url":"/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_0.png"},"coverImage":"/assets/img/2024-06-19-Must-havetoolsandappsformacOSfordevelopersin2024_0.png","tag":["Tech"],"readingTime":10},{"title":"나만의 창작글 작성 환경","description":"","date":"2024-06-19 08:49","slug":"2024-06-19-MyCreativeWritingSetup","content":"\n\n\n![My Creative Writing Setup](/assets/img/2024-06-19-MyCreativeWritingSetup_0.png)\n\n저는 드디어 2년간의 노력 끝에 첫 소설을 마쳤고 이미 두 번째 작품에도 착수했습니다. 또한 여러 단편 소설을 쓰고 있으며 몇 가지 게임 보조 자료도 천천히 작업 중에 있어요.\n\n많은 분들이 이러한 정보를 궁금해하니, 창작 작업을 위한 제 세팅을 공유하는 시간이 된 것 같아요. \"창작 작업\"이라고 명시한 이유는 다른 글쓰기 활동을 위한 도구 체인이 따로 있기 때문이에요. 이에 대해 미래 게시물에서 더 읽어보실 수 있어요.\n\n## 아이디어 기록\n\n\n<div class=\"content-ad\"></div>\n\n아이디어를 기록하고 추적하는 내 방식은 다소 산발적이며, 이제야 형식화하기 시작했습니다.\n\n아이디어가 떠오를 때 내가 어디에 있는지에 크게 달려 있습니다. 저는 사과 생태계의 일부분만 사용하는 이상한 사람 중 한 명입니다. 아이패드, 맥북, 그리고 안드로이드 폰을 사용하고 있습니다.\n\n폰에서 아이디어를 기록할 때는 보통 Zoho Notebook에 메모를 남기는 편이며, 이 애플리케이션을 사용하게 된 이유는 이 블로그 포스트에서 확인할 수 있어요.\n\n아이패드와 맥북을 오가며 여러 애플리케이션을 사용한 끝에, 아이디어를 위해 대부분 Apple Notes를 사용하고 있습니다. 가끔씩 Zoho Notebook이나 Mind Node를 사용하기도 하고, Freeform도 사용해봤지만, 내 아이디어가 주로 단어들의 연속이기 때문에 Notes만으로도 충분합니다.\n\n<div class=\"content-ad\"></div>\n\n가끔은 Trello 보드에 아이디어를 추가하기도 합니다. 하지만 일반적으로 아이디어가 프로젝트적 성격을 띄는 경우에 Trello를 사용하는 편이에요. 하지만 아이들이 언제 프로젝트로 전환되는지에 대한 정의가 약간 모호하다는 것을 인정해요.\n\n아이디어를 더 탐구하고 싶을 때, 일반적으로 Trello 아이템과 Scrivener 프로젝트의 텍스트 파일을 만들어요. Scrivener에 대해서는 나중에 자세히 이야기할게요!\n\n## 계획\n\n일반적으로 계획을 세울 때는 \"팬서\" 스타일입니다. 즉, 아이디어의 큰 그림을 그리고 \"바로 쓰기\"로 뛰어들고, 나중에 수정 단계에서 더 많은 계획과 연구를 합니다. 짧은 이야기의 경우, 그림을 그리고 연구를 하는 것을 최소화합니다. 대부분 몇 천 단어밖에 되지 않는 단편 소설의 경우에는 아이디어를 발견하는 탐험이 된다고 생각하기 때문이에요. 단편 소설의 특정 부분은 연구가 필요한 경우도 있지만 일반적으로는 최소한으로 합니다.\n\n<div class=\"content-ad\"></div>\n\n내 장편 소설과 게임 글쓰기에는 계획과 연구가 필요하며, 다시 말해 여러 가지 도구를 사용합니다.\n\n## 타임라인\n\n누가 어디서 무엇을 하는지 빠르게 헷갈리는 성격이에요. 어떤 방법을 따르는 사람이기도 한데, 제 생각에는 스티븐 킹이 제안했던 방법인데, 틀릴 수도 있어요. 타임라인의 적절한 세부 수준에 대한 방법을 따르고 있어요. 소설 주변의 전체 타임라인을 알 필요는 없지만, 소설 주변에서 일어난 일들을 대략적으로 파악하는 것이 도움이 될 수 있어요. 왜냐하면 그러한 사건들이 소설의 직접적인 타임라인에 어떻게 영향을 미치는지 알 수 있기 때문이에요. 소설의 기간에 대한 타임라인의 세부 수준은 나중에 논의할 주제로, 더 자세히 다루는 것이 좋을 것 같아요. 그렇다고 해도, 보통 더 자세한 내용이 필요한 편이에요.\n\n<div class=\"content-ad\"></div>\n\n타임 라인 작업에선 정말 멋진 Aeon Timeline을 사용해요. 이 앱은 잠재력의 한 부분만 사용하고 있다는 걸 알지만, 그 중 일부분을 활용하고 있어요. 주로 \"타임라인\" 보기에서 사용하고 있지만, 어디에서 누가 무엇을 하는지 확인할 수 있는 점이 마음에 들어요. Aeon Timeline은 엔티티(캐릭터, 장소, 장면 등)를 Scrivener와 동기화할 수도 있어요. 이는 제가 \"세계의 상태\" 개요 도구로 사용한 다음 더 발전시키는 데 활용할 수 있게 해줘요.\n\nMac 버전은 Setapp의 일부로 제공받고 있어요. Apple Pencil로 좀 더 캐주얼한 구성 및 계획을 위해 iPad 버전을 구입하고 싶지만, 효과적으로 저에게는 단일 플랫폼뿐인 가격을 아직 정당화하기 어려운 상황이에요. Setapp에서 삭제된다면 결정을 내릴 것 같아요.\n\n## 연구 및 추가 사항\n\n연구를 위한 제 설정은 아이디어를 기록하는 것처럼 여기저기 흩어져 있어요. 사용하는 각 방법과 그 이유에 대해 만족스러워하지만, 이들을 더 효율적으로 통합하는 방법을 끊임없이 찾고 있어요. 태그 등을 활용해 서로 다른 소스를 연결하려고 노력하지만, 아직 이 태그 중 어느 하나도 통합된 인터페이스를 통해 접근할 수 있는 방법이 없어요.\n\n<div class=\"content-ad\"></div>\n\n## Raindrop\n\n![Raindrop](/assets/img/2024-06-19-MyCreativeWritingSetup_2.png)\n\n기본적으로 크로스 플랫폼 및 크로스 브라우저 북마크 매니저입니다. Raindrop은 다양한 용도로 유용하게 사용할 수 있지만, 연구 관련 문맥에서는 웹 페이지를 조직화, 태그 지정 및 주석 달기가 가능합니다. 많은 연구가 온라인에서 시작되므로 연구를 관리하는 좋은 시작점이 될 수 있습니다.\n\n## MarginNote\n\n<div class=\"content-ad\"></div>\n\n\n![My Creative Writing Setup](/assets/img/2024-06-19-MyCreativeWritingSetup_3.png)\n\nI mentioned MarginNote before in my note-taking post, and it remains my main way of taking notes on PDFs and ePubs. It also lets you then collate notes from multiple documents into large mind maps for further exploration of connected ideas.\n\n## Apple Notes\n\nI mostly use Apple notes for gathering images and text ideas based on research. For examples, images acquired from The State Library of Victoria for my second novel. The in-built image annotation features of macOS also means I can scrawl ideas on those images. It’s still a bit of a miscellaneous dumping ground for research, but the integration with the rest of macOS means it’s easy to get content in and out.\n\n\n<div class=\"content-ad\"></div>\n\n## 스크리브너\n\n저는 Scrivener에 대한 논의를 글쓰기 섹션까지 저질러두려고 합니다. 하지만 이는 특히 캐릭터와 같은 텍스트와 직접적으로 관련된 연구 자료에 대한 훌륭한 저장소이기도 합니다. 그리고 Aeon Timeline 동기화 설정을 통해 동기화가 자동으로 폴더와 엔티티 파일을 만들어 제가 연구 자료를 추가하기 쉽게 만들어 줍니다.\n\n이 책이나 시퀄로 사용될 수 있는 노트 조각들의 흩어진 폴더가 있습니다. 텍스트에 언급된 사항에 대한 더 많은 맥락을 제공하는 아이디어와 개념이 섞여 있습니다. 이것은 나에게 개념들 사이의 일관성을 유지할 수 있도록 참조용으로 더 많은 정보를 제공합니다. Scrivener의 링크 기능을 사용하면 향후 참조로 텍스트 조각들을 해당 개념에 연결할 수 있으며, 컴파일할 때 모든 링크를 독자를 위해 제거할 수 있습니다.\n\nScrivener은 이 모든 자료에 대한 훌륭한 위치이지만 항상 찾기 쉬운 것은 아닙니다. 하지만 아마도 이게 제 잘못이거나 제 프로젝트 조직의 문제인 것일지도 모릅니다.\n\n<div class=\"content-ad\"></div>\n\n## 글쓰기\n\n창조적인 글쓰기를 위해, 저는 이제 Scrivener만 사용합니다 (당신이 이런 걸 기대하지 못했겠죠!). 잠깐 Ulysses를 사용했지만, 이제는 다른 쓰기 작업에만 사용합니다. 글쓰기에만 집중하고 싶을 때는 기능이 제한된 iPad 버전을 사용합니다.\n\n![이미지](/assets/img/2024-06-19-MyCreativeWritingSetup_4.png)\n\nScrivener는 매우 유연하고 주장이 없는 응용 프로그램 중 하나입니다. 여러분에게 공백 캔버스를 제시하고 원하는 대로 구성할 수 있게 해줍니다. 많은 초보자들에게는 이것이 직면해야 하는 문제일 수 있습니다. 아직 원하는 바를 모르기 때문이죠.\n\n<div class=\"content-ad\"></div>\n\nScrivener를 사용할 때 제 주요 조언은 꾸준히 사용하는 것입니다. Scrivener 안에 있는 모든 것은 폴더 안의 파일들의 연속입니다. 이 유연성은 프로젝트를 어떻게 설정하고 조직할지에 대한 생각을 바꾼다 해도 아무것도 잃지 않고 그냥 재조직할 수 있다는 것을 의미합니다.\n\n그것을 염두에 두고, 여기에 어떻게 기계를 구성하는지에 대한 아이디어를 드리겠습니다. 가장 간단한 것부터 가장 복잡한 것까지 순서로 시작합니다.\n\n## 단편 소설과 게임\n\n제가 쓴 가장 긴 단편 소설은 약 4,000 단어 정도인데, 각 단편 소설을 위해 별도의 프로젝트를 만드는 것은 너무 지루해 보였습니다. 그래서 모든 소설을 하나의 프로젝트로 결합했습니다. 아직 이 모든 단편 소설을 어디에 어떻게 발표할지를 고민 중이기 때문에 나중에는 컬렉션 기반 프로젝트로 소설들을 재조직할 수도 있습니다. \"매커스크립트\" 폴더(기본 이름)가 하나 있고 각각의 이야기가 파일로 되어 있습니다. 각 파일에 몇 가지 사용자 정의 메타데이터를 첨부하여 이야기의 진행 상황을 추적하고 수정에서 오디오 버전을 만들었는지 또는 이미 어디에 발표했는지 등을 파악합니다. 이 정보를 다른 곳(예: Trello)에서 추적하고 싶을지에 대해 확신이 없지만 아직 결정은 내리지 않았습니다. 현재는 사용자 정의 메타데이터와 목록 보기가 잘 작동하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n과거에 Scrivener가 플러그인 아키텍처를 가졌었던 걸 기억하시나요? 그래서 다른 곳으로 내보내는 것이 가능했던 거죠. 예를 들어, 짧은 이야기의 경우, Medium과 같은 곳으로 내보내는 것이 좋을 것 같아요.\n\n아직 Scrivener에서 게임 책을 쓰는 가장 좋은 방법을 완전히 알아내지는 못했어요. 그것들은 사실상 많은 연구가 필요한 책이기 때문에 가능해야 하지만, Scrivener가 어려워하는 부분이 사용하는 사용자 지정 서식일 수도 있어요.\n\n## 긴 이야기\n\n글을 쓰고 긴 형식의 콘텐츠를 조직하는 것이 Scrivener가 빛나는 곳이에요.\n\n<div class=\"content-ad\"></div>\n\n저는 저자 찰스 스트로스가 스크리브너 팟캐스트에서 한 말을 듣고 이것이 스크리브너의 진정한 유연성과 잠재력에 대해 눈을 뜨게 되었습니다. 그가 말한 내용을 그대로 전할 순 없겠지만, 그는 말했습니다:\n\n당시 제가 그것을 하고 있었지만, 그의 말로 인해 스크리브너가 당신이 원하는 순서대로 파일을 조직할 수 있는 방식이 실제 강점이라는 것을 깨닫게 되었습니다. 다른 많은 텍스트 편집기들은 하나의 긴 파일에 작성하도록 유도하는 경향이 있습니다. 이것은 위험할 수 있지만, 선형적으로 생각하게 만들기도 합니다. 그 당시에 저는 책의 중간부분에서 막혀 있었습니다. 그래서 키보드에 머리를 부딪히는 대신에, 저는 앞으로 나아가서 끝부분을 썼습니다. 이것이 제 블록을 해결해 주었으며, 어떻게 중간을 채워야 끝 부분에 도달할 수 있는지 이해하는 데 도움이 되었습니다.\n\n제 경우에는 제 책을 네 가지 섹션으로 구성하여 각각을 여러 장으로 이뤄진 챕터들로 나눴습니다. 아직 책을 어떻게 나눌지 완전히 확신하지는 못했지만, 스크리브너가 이후에 선택권을 줄 수 있도록 유연성을 제공해줍니다.\n\n나의 베타 독자들은 텍스트를 다양한 형식으로 요청합니다. 여러 형식으로 쉽게 내보내기는 가능하지만, 동시에 모든 메모, 링크, 주석을 보전할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n저는 쓰는 기능 중에서 선호하는 몇 가지를 소개했고, 사용 가능한 것들입니다. 더 유용한 것들이 많이 있을 거라는 것을 알고 있어요. Scrivener이 유용하긴 한데 조금은 닫힌 상자 같은 면이 있어서 확장성 옵션을 정말 원해요. 언어 검사기를 손쉽게 사용하거나 텍스트를 번역하거나 다른 매체에 출판하는 옵션이 없어서 번거로워요.\n\n## 계속해서 글쓰기\n\n그것이 전부입니다. 지금은요. 창작글 쓰기에 속도를 내고 있고 예전보다 많이 창작하고 있어요. 이것은 더 많은 도구 사용하고 프로세스를 개선해서 내생각을 더 많이 나누게 될 것이란 걸 의미해요. 그래서, 몇 달 동안 어떤 변화들을 시도하고 그 변화가 제게 어떤 영향을 미치는지 블로그를 구독해서 확인해주세요.\n\n<div class=\"content-ad\"></div>\n\n창작 작업을 할 때 어떤 도구를 사용하시나요? 그 도구들이 어떻게 도움이 되나요?","ogImage":{"url":"/assets/img/2024-06-19-MyCreativeWritingSetup_0.png"},"coverImage":"/assets/img/2024-06-19-MyCreativeWritingSetup_0.png","tag":["Tech"],"readingTime":7},{"title":"매번 놓치기 힘든 MacOS 개발자를 위한 소프트웨어","description":"","date":"2024-06-19 08:48","slug":"2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain","content":"\n\n맥OS 개발을 위한 필수 소프트웨어 요약입니다. 이 도구들은 모두 무료이며 대부분 오픈 소스입니다. 여러분의 개발 경험을 향상시키기를 바랍니다.\n\n# 기본 사항\n\n## Git\n\nGit은 설명이 필요 없을 정도로 유명합니다. 터미널에서 간단히 git을 실행하면 대화 상자가 나타납니다. 설치를 클릭하십시오. 이렇게 하면 일반적으로 기본 Xcode 런타임 환경이 함께 설치됩니다. 다른 방법으로는 터미널에서 xcode-select --install을 실행하여 설치할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## ServBay\n\nServBay는 아맥에서 사용하기 가장 훌륭한 개발 환경일 거예요. 다양한 개발 환경을 쉽게 원클릭 설치할 수 있고, 이후의 업그레이드도 간편해요. 팀원들을 위해 의존성과 설정을 일관되게 유지해 줍니다.\n\n![이미지](/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_0.png)\n\n# 터미널 도구\n\n<div class=\"content-ad\"></div>\n\n## iTerm2 + Oh-My-Zsh\n\niTerm2는 Mac에서 최고의 터미널이며, Oh-My-Zsh는 강력한 테마 및 플러그인 기능을 제공합니다.\n\n![image](/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_1.png)\n\n## Terminus\n\n<div class=\"content-ad\"></div>\n\n저는 자주 사용하는 간단하고 크로스 플랫폼 셸 도구입니다. 이것을 사용하여 클라우드 서버에 연결합니다.\n\n![이미지](/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_2.png)\n\n# 디버깅 도구\n\n## Bruno\n\n<div class=\"content-ad\"></div>\n\nPostman이 유료로 전환되었기 때문에 대안으로 Bruno로 전환했어요. 이는 데이터 저장에 JSON을 사용하여 Git을 통한 버전 관리를 가능케 하며, 팀 협업 요구를 충족합니다. 게다가 API 도구 중 최고 수준의 UI를 제공해요.\n\n![image](/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_3.png)\n\n## SwitchHosts\n\n로컬 HTTPS 디버깅을 쉽게 만들어주는 여러 호스트 구성을 관리하고 전환할 수 있는 도구에요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_4.png\" />\n\n## AnotherRedisDesktopManager\n\n무료이지만 강력한 Redis GUI 도구입니다.\n\n## CotEditor\n\n<div class=\"content-ad\"></div>\n\n가볍지만 강력한 기능을 갖춘 텍스트 편집기입니다. 시스템 기본 텍스트 편집기를 대체하기에 적합합니다. 더 복잡한 텍스트 편집이 필요한 경우, VS Code를 사용해보세요.\n\n![이미지](/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_5.png)\n\n편리성을 위해 명령줄 도구를 설치하세요:\n\n```js\n# Cot 명령 설치\nsudo ln -s /Applications/CotEditor.app/Contents/SharedSupport/bin/cot /usr/local/bin/cot\n\n# cot 명령을 사용하여 xxx 오픈\ncot ~/.zshrc\n```\n\n<div class=\"content-ad\"></div>\n\n# 생산성 도구들\n\n## 히든 바\n\n숨겨진 작업 표시줄 아이콘을 사용자 정의하여 무료 및 오픈 소스로 이용하세요.\n\n![이미지](/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_6.png)\n\n<div class=\"content-ad\"></div>\n\n## Fork - 강력 추천합니다\n\n직관적인 선형 히스토리 뷰를 제공하는 강력한 Git GUI 소프트웨어로, 브랜치 관리를 쉽게 만들어줍니다. 머지/스쿼시/리베이스/수정과 같은 작업이 빠르고 부드럽게 이루어집니다.\n\n![이미지](/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_7.png)\n\n## Maccy\n\n<div class=\"content-ad\"></div>\n\n최근 복사한 내용을 쉽게 찾을 수 있도록 도와주는 필수 클립보드 도구입니다. 이미지와 검색을 모두 지원합니다!\n\n![Clipboard Tool](/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_8.png)","ogImage":{"url":"/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_0.png"},"coverImage":"/assets/img/2024-06-19-SoftwareforMacOSDevelopersthatcannotMissAgain_0.png","tag":["Tech"],"readingTime":3},{"title":"Mac 앱 창을 정리하는 키보드 단축키","description":"","date":"2024-06-19 08:47","slug":"2024-06-19-Mackeyboardshortcutsforarrangingappwindows","content":"\n\n(이 게시물에 업데이트가 있습니다. 이곳에서 확인할 수 있습니다: 최적의 워크플로우를 위한 Mac 창 단축키 전략 업데이트)\n\n두 해 전에 Mac을 메인 머신으로 사용하기 시작할 때, macOS에서 앱 창을 정렬하는 데 어려움을 겪었습니다.\n\nMicrosoft Windows는 이동하는 단축키를 기본으로 제공하는 반면, macOS에서는 다음을 해야 합니다:\n\n- 또는 앱의 왼쪽 상단 모서리의 초록 버튼 위로 마우스를 가져 가거나 (추가 옵션을 보려면 ⎇ 키를 누른 채로 가져 가세요)\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-06-19-Mackeyboardshortcutsforarrangingappwindows_0.png)\n\n- Or open an app’s Window menu (Hold ⎇ for more options)\n\n![image](/assets/img/2024-06-19-Mackeyboardshortcutsforarrangingappwindows_1.png)\n\nand select the option you want, for example:\n\n\n<div class=\"content-ad\"></div>\n\n- 화면 왼쪽/오른쪽으로 창 이동\n- 확대\n- 다른 모니터로 이동\n\n서드파티 도구들로는 Microsoft Windows 동작을 모방할 수 있어요.\n\n하지만 좋은 소식은 별도의 무료 솔루션이 있답니다.\n\n우리는 위에서 언급된 명령어들에 시스템 전반적인 키보드 단축키를 할당할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n다음 단계를 따라서 테이블 태그를 마크다운 형식으로 변경할 수 있어요:\n\n1. '시스템 환경설정'을 열고 `키보드` `단축키` 를 선택해주세요.\n\n2. 왼쪽 패널에서 '앱 단축키'를 선택해주세요.\n\n3. \"+\" 버튼을 눌러 새로운 단축키를 만들어보세요.\n\n<div class=\"content-ad\"></div>\n\n\n![image1](/assets/img/2024-06-19-Mackeyboardshortcutsforarrangingappwindows_2.png)\n\n4. 대화 상자 안에 세 가지 입력 사항이 있습니다:\n\n- 어플리케이션:\n앱별 단축키 또는 모든 앱에서 사용 가능하도록 원하는 단축키를 추가할 수 있습니다.\n- 메뉴 제목:\n초록색 버튼 위에 마우스를 올리면 나타나는 메뉴 명령의 제목을 입력하세요. 예: 화면 왼쪽으로 창 이동.\n글자 하나하나 정확히 일치해야 합니다.\n- 키보드 단축키:\n키보드 단축키를 선택하세요. 예: ⌃⌥⌘←\n기존 단축키와 충돌하지 않도록 주의하세요.\n\n![image2](/assets/img/2024-06-19-Mackeyboardshortcutsforarrangingappwindows_3.png)\n\n\n<div class=\"content-ad\"></div>\n\n여기 제 바로 가기입니다:\n\n- 확대: ⌃⌥⌘↑\n- 창을 화면 왼쪽으로 이동: ⌃⌥⌘←\n- 창을 화면 오른쪽으로 이동: ⌃⌥⌘→\n\n저는 듀얼 모니터 설정을 사용하고 있어요. 그래서 위에 나열된 것 이외에도 다른 모니터로 창을 이동하는 단축키도 설정했어요:\n\n- 내장 Retina 디스플레이로 이동: ⌃⌥⇧⌘←\n- C49RG9x로 이동: ⌃⌥⇧⌘→\nC49RG9x는 제 외부 모니터의 이름인데, 여러분의 것은 다를 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n\n![2024-06-19-Mackeyboardshortcutsforarrangingappwindows_4.png](/assets/img/2024-06-19-Mackeyboardshortcutsforarrangingappwindows_4.png)\n\n바로 가기 키를 기억하기 위해서, 모든 키가 서로 옆에 있다는 것을 유의해 주세요. 다른 화살표 키를 사용하면 됩니다. 또한, 다른 모니터로 이동하는 것은 동일한 모니터에서 창을 분할 보기로 이동하는 것보다 한 키가 더 필요합니다.\n\n각 앱은 다른 기본 바로 가기 키를 가질 수 있습니다. 따라서 이러한 바로 가기 키를 방해하지 않도록 4와 5 키를 사용했습니다.\n\n더 생산적으로 작업할 수 있기를 바라겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\n이 게시물에 업데이트가 있습니다. 확인하시려면 여기를 참조하세요: 업데이트 된 Mac 창 단축키 전략으로 최적의 워크플로우를 설정하기.","ogImage":{"url":"/assets/img/2024-06-19-Mackeyboardshortcutsforarrangingappwindows_0.png"},"coverImage":"/assets/img/2024-06-19-Mackeyboardshortcutsforarrangingappwindows_0.png","tag":["Tech"],"readingTime":3},{"title":"시각적 요약 - WWDC23 파트 II OS 업데이트","description":"","date":"2024-06-19 08:45","slug":"2024-06-19-TheVisualSummaryWWDC23PartIIOSupdates","content":"\n\n## 애플의 WWDC23 OS 업데이트 스케치 노트 요약\n\n이번 Visual WWDC23 요약의 두 번째 포스트에서는 애플이 발표한 모든 OS 업데이트인 iOS, watchOS, iPadOS, macOS 및 tvOS를 살펴볼 것입니다.\n\n이 개요를 좋아하신다면 The Visual Summary의 다른 부분도 꼭 확인해보세요:\n\n- Part I: Unveiling Apple Vision Pro\n- Part III: Mac Updates\n\n<div class=\"content-ad\"></div>\n\n보통: 상호 작용하는 위젯, 기분 추적, Journal 앱 및 스티커!\r\niOS 17: Stand By 기능을 사용하면 iPhone을 도킹하여 알람 시계, 책상 달력 또는 홈 컨트롤 장치로 사용할 수 있습니다. 메시지에 Check In이 추가되어 안전하게 집으로 돌아가는지 확인하고 스티커를 사용할 수 있습니다. 키보드 자동 수정이 AI 개선이 되었습니다. AirDrop가 사용자 친화적으로 개선되었습니다.\r\niPadOS 17: 전반적으로 작은 업데이트이며, 위젯은 이제 대화식으로 작동합니다. 잠금 화면에 위젯이 포함되어 있으며, 새로운 배경 화면 옵션(슬로우 모션 사진)도 추가되었습니다. PDF 주석 및 협업에 대한 지원이 향상되었으며, Health 앱이 iPad에도 추가되었습니다!\r\nwatchOS 10: 화면을 더 잘 활용할 수 있는 디자인 변경이 있습니다. 사이클링 및 하이킹 운동에 더 많은 기능이 추가되었으며, 건강은 정신 건강 및 눈의 피로에 초점을 맞추고 있습니다. 또한 Snoopy 시계 페이스가 있습니다!\r\nmacOS Sonoma: 위젯이 데스크톱으로 이동, 도움이 되는 비디오 회의 기능을 포함하여 콘텐츠 및 카메라를 공유할 수 있고, Safari 개인 정보 보호 기능이 개선되었습니다. Web Apps(Dock 및 알림 지원)가 추가되었습니다. CPU 및 GPU 우선 순위를 제공하고 저지연 입력 및 음성을 제공하여 게임 지원이 향상되었습니다.\r\ntvOS: Apple TV에서 FaceTime을 사용하세요!\n\n# iOS 17: Stand By, Journal, AirDrop & Stickers\n\n<div class=\"content-ad\"></div>\n\niOS 17 버전의 주요 새로운 기능 중 하나는 \"스탠드 바이(Stand By)\"입니다. 이 기능은 iPhone을 알람 시계, 캘린더, 음악 컨트롤러, 홈 자동화 리모컨 등으로 변신시켜줍니다. 이 기능은 전화를 충전하고 잠금 상태로 만들어 기욁니다. 야간에는 작년 애플 워치 울트라에서 본 것과 같이 붉은 톤의 저조도 모드를 사용합니다.\n\nAirDrop도 명심할 만한 개선 사항을 받았습니다. 이제 두 대의 iPhone을 함께 들고 있으면 AirDrop를 활성화할 수 있습니다. NameDrop을 사용하면 연락처 카드를 빠르게 공유할 수 있고, 파일 및 사진 공유가 훨씬 쉬워졌습니다. 내년에 나오는 확장 기능은 인터넷을 통해 전송이 자연스럽게 계속되도록 허용합니다.\n\n메시지도 다양한 개선 사항을 받았습니다. 검색 필터, 더 차분한 앱 통합 인터페이스, 음성 메시지 텍스트 전환 기능이 iOS 17에 포함되어 있습니다. 그러나 iOS 업데이트의 진정한 별은 스티커와 체크 인입니다. 스티커를 이모지를 사용할 수 있는 모든 곳에서 사용하고 실시간 사진에서 사용자 정의 스티커를 만들 수 있습니다. 체크 인은 친구와 가족들이 도착 여부를 안전하게 알 수 있도록 합니다. iOS는 당신의 위치와 전화 상태(배터리 및 셀 서비스 등)를 자동으로 공유하고, 집에 도착할 때까지 계속 암호화됩니다.\n\n마지막으로, \"저널(Journal)\"이라는 새로운 앱이 있습니다. 이 앱을 사용하면 특별한 순간을 기록하고 곰곰히 생각할 수 있습니다. 이 새로운 앱은 운동, 사진 또는 음악과 같은 다양한 소스에서 정보를 수집하여 저널링에 대한 맥락 인식 경험을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n저는 여러 데이터 소스와 쉽게 통합할 수 있는 기능 덕분에 매우 흥미를 갖고 저널 앱을 탐험하고 싶어 합니다. 또한, iPhone XR이 아직 호환되는 것을 발견해서 특히 Stand By를 시도해보고 싶습니다!\n\n# iPadOS 17: 잠금 화면, 위젯, PDF 및 건강\n\n최신 iPadOS 버전은 많은 새로운 독특한 기능을 제공하지는 않지만, Apple의 태블릿 운영 체제에 몇 가지 좋은 추가 기능이 있습니다.\n\n새롭게 디자인된 잠금 화면은 이제 글꼴과 색상을 사용자 정의할 수 있으며, 실시간 사진, 새로운 배경 화면, 실시간 활동 및 ... 위젯을 특징으로 합니다! 라이브 사진으로 만들 수있는 새로운 배경 화면은 락 화면을 해제할 때 추가된 슬로우 모션 효과와 함께 특히 멋집니다.\n\n<div class=\"content-ad\"></div>\n\n아이패드 (그리고 다른 OS들) 위젯은 이제 상호작용이 가능해요. 이는 위젯 요소를 터치하여 동작을 트리거할 수 있으며 앱을 다시 여는 것 대신에 직접 작용이 가능합니다. 이는 훨씬 직관적인 사용자 경험을 제공하기 때문에 매우 환영받는 변화입니다! 동시에, 일부 앱에서는 사용자가 덜 시간을 소비할 것으로 예상되며, 이는 모든 개발자가 기쁘지 않을 수도 있겠지요.\n\n올해 5월에 로직 프로와 파이널 컷 프로에 이어 새로운 아이패드 앱이 출시되었어요: 헬스 앱입니다. 전용 헬스 앱을 통해 사용자들은 아이패드에서 직접 건강 그래프를 모니터링할 수 있어 안심하고 안전하게 동기화됩니다. 아이폰에서와 같이, 하지만 더 큰 화면에서.\n\nPDF 문서에 주석을 달기 위해 아이패드를 사용하는 사용자들에게 올해 중요한 업데이트가 있을 거에요: 양식 작성이 쉬워지고 문서에 서명할 수 있으며, 노트 앱을 사용하여 주석을 달아 협업할 수 있게 됩니다. 전체 경험은 이전보다 매끈해 보입니다.\n\n이번 업데이트의 특히 기쁜 점 중 하나는 오래된 기기를 계속해서 지원한다는 것이에요. 2017년에 출시된 10.5인치 아이패드도 호환되어 사용자들에게 많은 새로운 기능을 제공하고 있어요. 저는 주로 헬스 앱을 사용하고 상호작용 위젯을 사용하는 걸 기대하고 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 워치OS 10\n\n워치OS 10은 애플 워치에 상당한 업데이트를 제공합니다. OS의 시각적 재디자인으로 디스플레이 활용이 더욱 향상되었습니다. 이 재디자인은 디스플레이를 완전히 활용하여 더 자세한 정보, 상호 작용 요소 및 생동감 넘치는 배경을 제공합니다. Snoopy와 Woodstock 중 하나인 두 개의 새로운 워치 페이스도 추가되었습니다!\n\n워치OS 10에서 두드러지는 기능 중 하나는 Smart Stack으로, 옛 Siri 워치 페이스를 연상시키지만 이제 모든 워치 페이스에서 접근할 수 있습니다. 크라운을 간단히 돌리면 머신 러닝 모델을 기반으로 한 위젯 선택에 액세스하여 가장 관련성 높은 정보와 작업에 손쉽게 접근할 수 있습니다.\n\n사이클 애호가들은 새롭게 추가된 기능을 감사히 여길 것입니다. 자전거 센서를 연결하여 더 \"프로\" 수준의 사이클링을 지원합니다. 이제 자전거 센서를 연결하면 새로운 지표인 회전수와 파워에 액세스할 수 있으며 \"파워 존\"을 활성화할 수 있습니다. 또한 iPhone도 소중한 동료가 되어 자전거를 탈 때 손목을 들지 않고도 자전거용 스티어링 휠에 iPhone을 장착하여 모든 사이클링 지표를 표시합니다.\n\n<div class=\"content-ad\"></div>\n\n등산 애호가들을 대상으로 한 새로운 기능들이 추가되었습니다. 등산 워크아웃을 통해 해발 뷰에서 웨이포인트에 액세스할 수 있으며, 예를 들어 마지막으로 휴대 전화 연결이 있었던 위치를 보여줍니다. 또한 WatchOS 17에서는 지형 지도도 제공되어 지형을 더 쉽게 탐험할 수 있게 됩니다.\n\n게다가, 개발자들은 이제 워크아웃 API를 사용하여 사용자 정의 워크아웃을 생성하고, Watch의 높은 정확도 모션 센서를 활용하여 더 정밀한 추적이 가능해졌습니다.\n\n정신 건강에 대한 새로운 주안점을 맞춘 Health 앱은 기분 추적을 소개하여 감정적 안녕 상태를 더 잘 모니터하고 이해하며 우울증 발병 위험을 지시할 수 있도록 해줍니다. 시력 건강도 우선순위로 고려되었는데, 화면 거리를 고려하고 전체적인 눈 건강 증진을 위해 충분한 일광을 즐겼는지를 확인합니다. 이러한 새로운 기능들은 iOS로 확장되어, Apple의 포괄적인 건강 관리에 대한 약속을 강조합니다.\n\nWatchOS 10의 전체적인 리디자인은 미감 있고 OS에 신선함을 더했습니다. 지난 세 해 동안 다소 느린 성능을 보인 Series 2를 업데이트할 때가 되었기 때문에 이번 업데이트를 기대할 만 합니다!\n\n<div class=\"content-ad\"></div>\n\n# MacOS Sonoma\n\n맥 OS의 최신 버전인 Sonoma은 위젯, 비디오 회의, 게임, 그리고 Safari 영역에서 특히 흥미로운 개선 사항을 가져왔네요. 새로운 슬로우 모션 스크린세이버 옵션도 추가되었습니다.\n\nSonoma에서는 위젯이 더 중요한 역할을 하게 되었어요. 이제 위젯들은 알림 센터에서 데스크톱으로 이동하며 iPad에서와 같이 상호작용이 가능해졌어요. 창을 사용할 때 위젯들은 부드럽게 배경으로 사라지면서 벽지의 색조를 채택해요. 맥을 사용하다가 핸드폰이 근처에 있을 때 iPhone 위젯을 데스크톱에 추가할 수 있는 능력도 있어요. 이는 다시 한번 애플의 생태계 접근 방식의 힘을 보여주는 멋진 추가 기능이네요.\n\n비디오 회의에서 애플은 한 단계 더 나아졌어요. 발표자는 이제 발표 창 위에 자신을 오버레이할 수 있는 옵션을 가지게 되었어요. 뒤에 나타나거나 앞에 동그랗게 나타남으로써 추가적인 효과를 줄 수 있어요. 또한, 손으로 하트 모양을 만드는 등의 특정 동작은 비디오에 창의적인 터치를 더해주는 특별한 효과를 촉발해요.\n\n<div class=\"content-ad\"></div>\n\n사파리는 여러 개인 정보 보호 업데이트를 받아서 이제 더 많은 사생활 보호 기능을 가지게 되었습니다. 이제 사용자들은 PassKeys를 가족과 공유할 수 있게 되었습니다. 웹 앱은 이제 사파리에서 지원되며 알림 지원과 독에 추가하는 옵션을 갖추고 있습니다. 또 다른 큰 기능은 프로필인데요, 프로필을 사용하여 작업 및 개인 브라우징을 분리하여 서로 다른 즐겨찾기, 쿠키, 히스토리, 탭 그룹 및 확장 프로그램을 유지할 수 있습니다.\n\n마지막으로 게임 모드가 있습니다. macOS의 이 특별한 모드는 게임에 대한 CPU 및 GPU 성능을 우선시하고 오디오 및 입력 대기 시간을 크게 줄입니다. 애플은 또한 게임 포팅 툴킷(GPTK)을 출시했는데, 이 툴킷은 게임 개발자들이 게임을 Mac으로 포팅하는 데 도움을 줍니다.\n\n인상적인 점은 이 툴킷을 사용하여 사이버펑크, 호그와트 레거시, GTA V, 디아블로 IV 등 인기 있는 게임이 Mac에서 작동하는 것이 입증되었으며, 많은 경우에 높은 설정에서 60fps를 달성했습니다. 모든 개발자가 자신들의 게임을 포팅할 것을 보장하는 것은 아니지만, 결과는 의심할 여지 없이 인상적입니다. 많은 취미 개발자들이 이 툴킷을 채택하여 Mac에서 게임이 작동할 수 있도록 하여 플랫폼의 게임 가능성을 넓혔습니다.\n\n저는 이전의 \"대시보드\" 오버레이에서 사용 가능했던 위젯 시대를 겪어왔고, 화면이 주로 창으로 가득 차 있기 때문에 위젯에 대해 크게 흥분하지는 않습니다. 그러나 새로운 단축키가 있어서 보이게 하는 경우에는 새로운 데스크톱 은유를 위한 길을 열 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n그러나 게임 성능 향상에 대해 정말 기대돼요. 직접X 12 지원은 VMWare나 Parallels가 이전에 제공한 것보다 뛰어난 게임 성능을 약속하고 있습니다. 기존 게임을 최적으로 작동하도록 조정하는 데는 약간의 조정이 필요할 수 있지만, 현대 맥이 무엇을 할 수 있는지 보여주며, 플랫폼을 고려하는 개발자를 기대합니다.\n\n# 오디오 및 홈: tvOS 17, AirPod 및 AirPlay\n\n마침내 tvOS 17, AirPod 및 AirPlay에 대한 일부 홈 업데이트가 있습니다.\n\n모든 이야기가 한 가지 카테고리에 있다는 것은 올해 tvOS가 그다지 많은 주목을 받지 못했다는 뜻입니다. 그렇지만, tvOS 17은 콘트롤 센터의 멋진 리디자인을 가져왔습니다. 이제 상단에 위치하여 빠르게 액세스할 수 있습니다. 콘트롤 센터는 중요 정보의 편리한 개요를 제공하며, 다양한 섹션에 쉽게 액세스할 수 있게 해줍니다. 새로운 \"Memory\" 스크린 세이버는 화면에 멋진 사진 순간들을 아름답게 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n그러나 눈에 띄는 특징은 오랜 기다림 끝에 선보인 FaceTime 지원 기능입니다! iPhone을 활용하여 이제 iPhone 카메라가 당신을 촬영하면서 TV 화면에 모든 참가자를 보여줄 수 있습니다. Zoom과 WebEx 지원은 준비 중이지만 Teams는 언급되지 않았네요. 저는 이것이 Microsoft에게 미팅 룸을 위한 Teams 설정을 쉽게 확장할 수 있는 방법을 제공할 수 있기 때문에 Microsoft에게 TV로 나아가도록 유도할 것으로 기대하고 있습니다. 이런 식으로요... 전체적으로 보면 뭉쳐서, FaceTime이 Apple TV에서 락다운 기간 동안 좋은 선택이었을 것 같습니다.\n\nAirPods Pro(기존 제품)는 적응형 오디오를 포함한 업데이트를 받게 될 것입니다. 이 기능은 소음 캔슬링과 투명 모드를 결합하여 관련된 소리만 통과되도록 보장합니다. 대화 인식 기능은 AirPods가 대화를 감지하면 대화 중에 투명 모드로 자동 전환되게 해줍니다. 개인화된 볼륨은 환경 조건을 사용하여 최적의 볼륨 설정을 결정합니다. 게다가 통화 중 음소거는 줄기(또는 AirPods Max의 크라운)를 누르면 가능해질 것입니다. 마지막으로, 기기 전환은 빠르고 신뢰성 있게 이루어질 것입니다.\n\n마지막으로, AirPlay가 있습니다. 이 기능은 사용자의 선호도를 학습하여 예를 들어 저녁 요리 중에 주방 스피커에서 노래를 재생할 것을 제안합니다. 이제 Siri를 사용하여 HomePods에서 AirPlay 세션을 시작하는 것도 가능합니다.\n\n여행 중 AirPlay가 더 유용해질 것으로 예상됩니다. 호텔이 TV에 AirPlay 옵션을 제공할 수 있게 되어, 화면에 QR 코드를 표시하여 즉시 연결하게 됩니다. 또한 차 안에서, CarPlay를 통해 동승자가 차 스피커에서 AirPlay를 통해 음악을 재생할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n요약하자면, 홈 영역에서 멋진 업데이트가 있었습니다. 호텔 설정이 가장 흥미로운 것으로 보입니다. 여행 중에 TV를 잘 안 보는 편이지만, 다른 사람들이 콘텐츠를 쉽게 시청할 수 있도록 만드는 데 큰 도움이 될 수 있겠네요.\n\n# 제 생각\n\n올해의 WWDC는 많은 업데이트로 엄청난 규모였는데, 주목할만한 하이라이트는 Vision Pro 발표였습니다. 애플은 손을 놓지 않고 iOS와 WatchOS가 올해 주목을 받으면서 iPadOS, macOS, 그리고 tvOS는 좀 더 배경에 있었습니다.\n\n이것은 애플이 OS마다 WWDC를 발표할 때 직면한 도전입니다. iOS의 많은 업데이트가 다른 OS에도 나타나기 때문에 종종 잊혀지는 것 같지만 실제로는 멋진 기능이 많이 포함될 것입니다. 과거에는 기능이 생태계로 점차 전파되는 데 훨씬 더 많은 시간이 걸렸습니다. 예를 들어, Control Center는 2013년에 iPhone에 소개되었으며, 2022년에 macOS에 도달했습니다. 그러나 Journal 앱이 올해 모든 플랫폼에 도착할지 잘 모르겠습니다. 그래서 애플이 어떤 것이 언제 어디에서 사용 가능할지 명확하게 전달하는 것은 여전히 도전입니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 또한 Apple이 AirPods 장치 전환 기능을 개선했다는 발표를 보았어요. 이것은 매우 사소한 일이지만, 이 기능이 이전에 그리 신뢰성이 높지 않았다는 뜻으로 들립니다. 이런 말을 하는 것은 매우 아이폰스럽지 않았죠. 게다가, 저는 Apple이 처음부터 이런 것들을 바로 잡아줄 것으로 기대하며, 아마도 WWDC에서 업데이트로 소개하지 않을 것으로 예상했습니다. 하지만, 언제나 버그는 존재하고, 그것을 인정했다는 점에는 공감할 수 있어요.\n\n이번 WWDC에서는 기분 추적, 상호작용 위젯, 스티커 등 여러 OS 간 기능이 도입되었습니다. 이것은 에어드롭, 에어플레이와 같은 생태계 연결성에 대한 강조와 함께, Apple이 생태계의 힘을 계속해서 확장한다는 것을 시사하는 것으로 보입니다. 이는 왜 저가 왜 Apple 하드웨어와 함께 작업해야 하는지 물어올 때 제가 제시하는 개인적인 주장 중 하나이기도 해요: 생태계 덕분에 일을 하기가 훨씬 수월해졌거든요.\n\n게임 쪽에서 가장 놀라운 측면 중 하나는, 맥으로의 게임 이식이 더 쉬워졌다는 것이었습니다. 게임 이식 툴킷을 통해 이미 커뮤니티가 최근 게임을 Apple Silicon에서 성공적으로 실행할 수 있었습니다. 이겪게 될 경우, 맥의 게임 환경에 더 많은 게임이 진입하게 될 수도 있을 거에요...\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n올해의 WWDC는 엄청난 규모였어요. 다른 해보다 스케치 노트 요약을 그리는 데 많은 시간이 걸렸다는 것을 느꼈어요. Vision Pro 발표에서 오랜만의 감동을 느꼈는데, OS와 Mac 업데이트 자체도 정말 좋았어요. iOS와 watchOS가 성숙해지고 있는 느낌을 받을 수 있고, iPadOS는 아직 자신의 길을 찾고 있는 상태이며, macOS는 천천히지만 확실하게 iOS의 전문 사용자 버전으로 발전해 가고 있어요.\n\n총론적으로, 우리가 보았던 것은 매우 탄탄한 업데이트였어요. 9월에 새로운 기능들을 모두 시도해 볼 것을 기대하고 있고, 어떻게 새로운 제품 발표들과 통합될지도 기대되요. OS 업데이트에 대한 생각이 있으시면 아래 댓글란에 공유해주세요!\n\nWWDC 스케치 노트 이미지의 전체 크기 뷰는 여기에서 확인할 수 있어요.","ogImage":{"url":"/assets/img/2024-06-19-TheVisualSummaryWWDC23PartIIOSupdates_0.png"},"coverImage":"/assets/img/2024-06-19-TheVisualSummaryWWDC23PartIIOSupdates_0.png","tag":["Tech"],"readingTime":9},{"title":"맥북 프로 2012에서 소노마 업데이트 후 안드로이드 스튜디오가 충돌하는 문제 해결 방법","description":"","date":"2024-06-19 08:44","slug":"2024-06-19-AndroidStudiocrashesonMacBookPro2012afterSonomaUpdateSOLVED","content":"\n\n2012년식 맥북 프로를 사용 중입니다. 일상적인 사용 및 모바일 개발에 아주 좋은 성능을 발휘하고 있어요. 이렇게 오래된 기기를 여전히 잘 사용할 수 있는 것은 바로 OpenCore Legacy Patcher 프로젝트 덕분이에요.\n\n하지만 최신 macOS로 업데이트한 이후로 안드로이드 스튜디오가 갑자기 다운되기 시작했어요.\n\n처음에는 원인을 찾지 못했지만 결국 문제를 이해하게 되었어요. 맥북에 외부 모니터를 연결하면 안드로이드 스튜디오가 전혀 시작되지 않고, 외부 모니터를 연결하면 다운되는 현상이 발생한 거예요.\n\n문제를 해결하기 위해 몇 차례 시도를 거쳐 시스템 로그를 확인하고 인터넷 검색을 했지만 결국 해결책을 찾을 수 있었어요.\n\n<div class=\"content-ad\"></div>\n\n맥북 프로의 금속 GPU로 인한 충돌 문제를 해결하려고 Android Studio를 명령줄을 통해 시작해야 했고 다음 JVM 매개변수를 추가해야 했습니다: -Dsun.java2d.metal=false\n\nAndroid Studio를 사용할 때마다 명령줄에서 시작해야 한다는 것은 적어도 귀찮은 일이라는 데 동의하실 거예요. 하지만 해결책이 가까이에 있다는 것을 발견할 겁니다.\n\n당신의 Android Studio 버전을 위한 studio.vmoptions 파일을 찾아보세요. 제 버전은 다음 경로에 있었습니다\n\n\n/Users/[내_사용자_이름]/Library/Application Support/Google/AndroidStudio2024.1/\n\n\n<div class=\"content-ad\"></div>\n\n다음과 같은 JVM 매개변수를 파일 상단에 추가하십시오:\n\n<!-- ![Alt text](/assets/img/2024-06-19-AndroidStudiocrashesonMacBookPro2012afterSonomaUpdateSOLVED_0.png) -->\n\n이거 간단합니다! 😜\n\n댓글에서 여러분의 경험과 의견을 공유해주세요.","ogImage":{"url":"/assets/img/2024-06-19-AndroidStudiocrashesonMacBookPro2012afterSonomaUpdateSOLVED_0.png"},"coverImage":"/assets/img/2024-06-19-AndroidStudiocrashesonMacBookPro2012afterSonomaUpdateSOLVED_0.png","tag":["Tech"],"readingTime":1},{"title":"새로운 홈랩 테스트하기","description":"","date":"2024-06-19 08:43","slug":"2024-06-19-TestingmynewHomeLab","content":"\n\n\n![이미지](/assets/img/2024-06-19-TestingmynewHomeLab_0.png)\n\n새로운 홈랩을 설정했어요. 계속 공부를 하기 위한 아이디어인데, 설정은 아주 간단해요. 인터넷에서 볼 수 있는 멋진 홈랩들과는 거리가 먼데, 누구나 출발점으로 달성할 수 있는 것이에요.\n\n- HP ProDesk (홈랩)\n- D-Link DES-1016D 스위치 (모든 것을 연결)\n- 내 개인 컴퓨터 (HP ProDesk에 SSH 연결하는 용도로 사용 중)\n- TP-Link TL-PA4010P (D-Link에 연결하고 홈 와이파이를 사용하지 않으려고 이것을 사용하여 모든 것을 함께 사용함)\n\n![이미지](/assets/img/2024-06-19-TestingmynewHomeLab_1.png)\n\n\n<div class=\"content-ad\"></div>\n\n비관리 스위치는 관리 스위치보다 싸지만, MAC 주소 학습을 통해 네트워크 트래픽을 효율적으로 제어하여 허브에 비해 상당한 이점을 제공합니다. 허브가 모든 연결된 장치로 데이터를 브로드캐스트하는 반면, 비관리 스위치는 트래픽을 목적지에만 전달합니다. 이로써 네트워크 혼잡을 줄이고 전반적인 성능을 향상시킵니다. 그러나 이 이점은 제한된 제어 기능과 함께 제공됩니다. 관리 스위치와 달리, 비관리 스위치는 서비스 품질 (QoS) 또는 고급 보안 설정과 같은 기능을 구성할 수 없습니다. 또한 모니터링 기능이 없어서 문제 해결이 어려울 수 있습니다.\n\n요약하자면, 기본적인 요구 사항을 갖춘 소규모 네트워크에 적합한 비관리 스위치입니다. 허브와 비교했을 때 가격 대비 성능 향상의 균형을 제공합니다. 그러나 보안, 우선 순위 부여, 심층적인 모니터링과 같은 기능이 필요한 복잡한 네트워크의 경우 관리 스위치를 선택하는 것이 좋습니다.\n\n어쨌든 관리 스위치는 저렴한 가격에 구할 수 있습니다 (아마존에서 30파운드쯤에 판매 중이며 비관리 버전은 반값입니다), 그래서 하나가 필요하다면 얼마든지 구입하세요. 큰 스위치의 아이디어는 미래에 내 라즈베리를 쉽게 연결할 수 있는 확장성입니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-TestingmynewHomeLab_3.png\" />\n\n내 홈랩에서 우분투 서버를 운영 체제로 선택했어요. Arch Linux는 맞춤 설정을 통해 명성을 얻었지만, 우분투는 데비안 기반 배포판과의 친근함으로 안정적인 기초를 제공해줍니다. Proxmox라는 또 다른 데비안 기반 옵션이 인기 있긴 했지만, 하드웨어 한계(램과 CPU 코어, 하이퍼스레딩 제외)를 고려할 때 우분투가 더 효율적인 솔루션을 제공할 것 같았어요. 학습 기회를 극대화하기 위해 Docker 컨테이너를 활용하기로 결정했어요. 이를 통해 다른 프로젝트와 함께 Docker를 탐구하면서 홈랩의 교육적 잠재력을 최대한 발휘할 수 있어요.\n\n첫 번째 테스트를 시작하기 위해 Arch Linux 컨테이너를 설치하고 네트워크에서 nmap을 실행하기로 결정했어요.\n\n<img src=\"/assets/img/2024-06-19-TestingmynewHomeLab_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n```js\n도커 풀 archlinux\nsudo docker rename NAME_CONTAINER 새_이름 # 제 경우에는 myarch\nsudo docker start myarch\nsudo docker exec -it myarch /bin/bash\n\n#(컨테이너 내부)\npacman -Syu\npacman -S nmap\n\nnmap -sn IP\nnmap -p443 --script http-waf-detect --script-args=\"http-waf-detect.aggro,http-waf-detect.detectBodyChanges\" www.google.com\nnmap -Pn -sV --script=vulners\n```\n\n![이미지](/assets/img/2024-06-19-TestingmynewHomeLab_5.png)\n\n작업을 마치면 컨테이너를 중지시킬 수 있습니다: sudo docker stop myarch\n\n집 서버를 실행하는 컨테이너를 손쉽게 설정할 수 있습니다. 다음 단계는 Docker 네트워크를 설정하는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n확인해보세요: [https://www.redhat.com/sysadmin/quick-nmap-inventory](https://www.redhat.com/sysadmin/quick-nmap-inventory)","ogImage":{"url":"/assets/img/2024-06-19-TestingmynewHomeLab_0.png"},"coverImage":"/assets/img/2024-06-19-TestingmynewHomeLab_0.png","tag":["Tech"],"readingTime":3},{"title":"언데드의 정체 노출하기 리눅스에서의 좀비 프로세스 이해 및 제거","description":"","date":"2024-06-19 08:42","slug":"2024-06-19-UnmaskingtheUndeadUnderstandingandEliminatingZombieProcessesinLinux","content":"\n\n![링크 텍스트](/assets/img/2024-06-19-UnmaskingtheUndeadUnderstandingandEliminatingZombieProcessesinLinux_0.png)\n\n좀비 프로세스는 Linux를 포함한 Unix류 운영 체제에서 흔히 발생하는 현상입니다. 스포키한 이름을 가졌지만, 소수의 좀비 프로세스는 해로울 만큼은 아니지만 관리되지 않으면 시스템 성능 문제를 일으킬 수 있습니다. 이 글에서는 좀비 프로세스가 무엇인지, 어떻게 생성되는지, 다양한 명령어, 스크립트 및 예제를 사용하여 그것들을 어떻게 제거하는지 설명하겠습니다.\n\n## 좀비 프로세스란 무엇인가요?\n\n좀비 프로세스 또는 defunct 프로세스는 실행을 완료했지만 프로세스 테이블에 여전히 기록이 남아 있는 프로세스입니다. 이것은 부모 프로세스가 종료된 프로세스의 종료 상태를 아직 읽지 않았기 때문에 발생합니다. 결과적으로, 프로세스는 \"좀비\" 상태에 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 좀비 프로세스는 어떻게 생성되나요?\n\n프로세스가 종료되면 부모 프로세스에게 SIGCHLD 시그널을 보냅니다. 부모 프로세스는 wait() 또는 waitpid() 시스템 호출을 사용하여 자식 프로세스의 종료 상태를 읽어야 합니다. 부모 프로세스가 이를 하지 않으면 종료된 프로세스가 좀비로서 프로세스 테이블에 남게 됩니다.\n\n## 좀비 프로세스 식별하기\n\n좀비 프로세스를 식별하기 위해 ps, top, htop 등의 명령어를 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n사용하실 때는 아래와 같이 Markdown 형식의 테이블로 변환해주시면 됩니다.\n\n\n| 명령어 |\n| --- |\n| ps aux | grep Z |\n\n\n출력 결과에서 STAT 열에 \"Z\"가 있는 경우에는 좀비 프로세스를 나타냅니다.\n\nUsing top\n\n<div class=\"content-ad\"></div>\n\ntop 명령에서 좀비 프로세스는 Z 상태로 표시됩니다.\n\n```js\ntop\n```\n\nShift + z를 눌러 top 인터페이스에서 좀비 프로세스를 강조할 수 있습니다.\n\nhtop을 사용하여\n\n<div class=\"content-ad\"></div>\n\nhtop에서 좀비 프로세스는 상태 열에 Z로 표시됩니다.\n\n```js\nhtop\n```\n\n## 예시와 시나리오\n\n예시 1: 좀비 프로세스 생성하기\n\n<div class=\"content-ad\"></div>\n\n간단한 시나리오를 만들어 좀비 프로세스가 어떻게 생성되는지 이해해봅시다. 다음과 같은 C 프로그램을 고려해보세요:\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nint main() {\n    pid_t pid = fork();\n    if (pid > 0) {\n        // 부모 프로세스\n        sleep(30); // 좀비를 관찰할 시간을 줍시다\n    } else if (pid == 0) {\n        // 자식 프로세스\n        exit(0); // 자식 프로세스는 즉시 종료됩니다\n    } else {\n        perror(\"fork\");\n        exit(1);\n    }\n    return 0;\n}\n```\n\n```bash\n이 프로그램을 컴파일하고 실행합니다:\n```\n\n```bash\ngcc -o zombie_example zombie_example.c\n./zombie_example\n```\n\n<div class=\"content-ad\"></div>\n\n부모 프로세스가 sleep 중일 때, 좀비 프로세스를 관찰하기 위해 ps 또는 top을 사용해보세요.\n\n예시 2: 좀비 프로세스 제거하기\n\n좀비 프로세스를 제거하려면, 부모 프로세스가 자식 프로세스의 종료 상태를 읽도록 해야 합니다. 이는 부모 프로세스를 수정하여 SIGCHLD 시그널을 처리하거나 wait()를 사용하는 방법으로 수행할 수 있습니다.\n\n이전 프로그램을 수정하여 SIGCHLD 시그널을 처리하는 예시를 아래에 제시합니다:\n\n<div class=\"content-ad\"></div>\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n\nvoid handle_sigchld(int sig) {\n    (void)sig; // 사용되지 않는 매개변수 경고 억제\n    while (waitpid(-1, NULL, WNOHANG) > 0) {\n        // 모든 종료된 자식 프로세스를 처리\n    }\n}\n\nint main() {\n    signal(SIGCHLD, handle_sigchld);\n    pid_t pid = fork();\n    if (pid > 0) {\n        // 부모 프로세스\n        sleep(30);\n    } else if (pid == 0) {\n        // 자식 프로세스\n        exit(0);\n    } else {\n        perror(\"fork\");\n        exit(1);\n    }\n    return 0;\n}\n```\n\n이제 변경된 프로그램을 다시 컴파일하여 실행하여 좀비 프로세스가 올바르게 처리되는지 확인하세요.\n\n## 좀비 프로세스 관리 스크립트\n\n실제 시나리오에서 여러 응용 프로그램에 의해 생성된 좀비 프로세스를 만날 수 있습니다. 아래는 좀비 프로세스를 관리하고 제거하는 데 도움이 되는 몇 가지 스크립트입니다.\n\n<div class=\"content-ad\"></div>\n\n스크립트 1: 좀비 프로세스 감시 및 보고\n\n좀비 프로세스를 모니터링하고 보고하는 스크립트를 만들어보세요:\n\n```bash\n#!/bin/bash\n\nwhile true; do\n    ZOMBIES=$(ps aux | awk '{if ($8 == \"Z\") print $2}')\n    if [ -n \"$ZOMBIES\" ]; then\n        echo \"좀비 프로세스가 감지되었습니다: $ZOMBIES\"\n    fi\n    sleep 5\ndone\n```\n\n이 스크립트를 monitor_zombies.sh로 저장하고, 실행 가능하도록 만든 후 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n\n```js\nchmod +x monitor_zombies.sh\n./monitor_zombies.sh\n```\n\nScript 2: Killing Parent Processes of Zombies\n\nIf you need to eliminate zombie processes quickly, you can kill their parent processes. Use this script with caution, as it will terminate the parent processes:\n\n```js\n#!/bin/bash\nZOMBIE_PARENTS=$(ps -eo ppid,stat | awk '$2 ~ /Z/ {print $1}' | sort -u)\nfor ppid in $ZOMBIE_PARENTS; do\n    echo \"Killing parent process $ppid of zombie processes\"\n    kill -9 $ppid\ndone\n``` \n\n\n<div class=\"content-ad\"></div>\n\n이 스크립트를 kill_zombie_parents.sh로 저장하고 실행 가능하게 만들어서 실행하세요:\n\n```js\nchmod +x kill_zombie_parents.sh\n./kill_zombie_parents.sh\n```\n\n좀비 프로세스는 즉시 해로운 것은 아니지만 확인되지 않으면 리소스 누출과 시스템의 불안정성으로 이어질 수 있습니다. 이러한 프로세스가 어떻게 생성되는지 이해하고 식별하여 제거하는 방법을 알아두는 것은 건강한 Linux 시스템을 유지하는 데 중요합니다. 제공된 명령어, 예시, 스크립트를 사용하여 효과적으로 좀비 프로세스를 관리하고 시스템이 원할하게 실행되도록 할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-19-UnmaskingtheUndeadUnderstandingandEliminatingZombieProcessesinLinux_0.png"},"coverImage":"/assets/img/2024-06-19-UnmaskingtheUndeadUnderstandingandEliminatingZombieProcessesinLinux_0.png","tag":["Tech"],"readingTime":4}],"page":"82","totalPageCount":112,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":4},"__N_SSG":true}