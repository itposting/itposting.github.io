{"pageProps":{"posts":[{"title":"내 앰비언트 정보 디스플레이","description":"","date":"2024-05-27 13:55","slug":"2024-05-27-MyAmbientInformationDisplay","content":"\n유용한 정보에 몰두하는 것을 좋아하고 종종 상상하여 새롭고 흥미로운 것을 보고 싶을 때 상층에 떠다니는 정보를 바라보고 싶다고 꿈꿔 왔어요.\n\n몇 년 전에 나는 책상 위에 43인치 Fire TV를 설치했고, Raspberry Pi를 묶어서 뒷면에 붙였습니다. 그리고 MagicMirror를 사용하여 꿈꾸던 표시를 만들었어요. 몇 년간 디스플레이를 개선해왔고 이제 여러분께 알려드릴 준비가 됐어요!\n\nMagicMirror는 매우 활발한 커뮤니티를 가진 성숙한 오픈 소스 코드입니다. 기본 패키지에는 기본 모듈 세트가 포함되어 있고 수백 개의 모듈이 더 있어요. 이러한 대부분의 모듈은 개발자들이 '자신의 문제'를 해결하기 위해 만들어졌으며, 그 결과 많은 사람들과 공유하기도 했고, 오픈 소스 형태로 이용할 수 있어요.\n\n원래의 MagicMirror 개념은 반반 반사 유리 뒤에 모니터를 부착하여 전반적인 프로젝트가 거울처럼 보이도록 하는 것이었어요. 이렇게 MagicMirror를 사용하는 방법도 있지만, 표준 모니터에 표시할 수도 있어요. 제 것은 이렇게 생겼어요:\n\n<div class=\"content-ad\"></div>\n\n![My Ambient Information Display](/assets/img/2024-05-27-MyAmbientInformationDisplay_0.png)\n\n키보드 오른쪽에는 Elgato Stream Deck이 있습니다. 비디오 스트림 및 조명을 제어하는 것 외에도 내 강력한 Stream Deck은 MagicMirror를 제어하여 버튼 하나로 페이지를 전환할 수 있게 해줍니다.\n\n당신만의 MagicMirror를 설정하고 구성하는 데 도움이 되는 상세 가이드가 수십 개 있지만, 이 문서는 아닙니다. 대신, 내 계속 발전하는 설정의 독특한 세부 정보를 주로 공유할 것입니다.\n\n이 프로젝트에서 특히 좋아했던 점은 (결과물 외에) TV를 안전하게 부착하기 위해 스터드 파인더 사용법, 리눅스 명령 줄 사용법(새로운 기술은 아니지만 항상 연습해야 하는 기술 중 하나), 효과적인 소스 코드 제어 시스템 설정, JavaScript 및 Node 디버깅 등 다양한 기술을 사용할 수 있었다는 것입니다. 이러한 기술이 전혀 없어도 시작할 수 있도록 하는 데 마음을 멈추지 마세요!\n\n<div class=\"content-ad\"></div>\n\n들어가기 전에, 몇 달 동안 내 MagicMirror를 점진적으로 발전시켜 현재의 형태로 만들었다는 점을 강조하고 싶어요. 모듈을 추가하고, 설정하고, 재설정하고, 제거하고, 업데이트하고, 심지어 필요에 맞게 수정하면서 요구 사항에 맞게 맞춰 왔어요. 당신에게 제안드리는 것은 간단히 시작하고, 압도되지 않도록 천천히 진행하면서 자신의 속도로 움직이는 것이 좋다는 거에요. 이 곳에는 많은 기능과 유연성이 있지만, 한 걸음씩 가십시오.\n\n## 소스 코드 제어\n\n이것을 처음부터 소프트웨어 프로젝트로 다루었어요. 내 변경 사항을 추적하고 필요 시 되돌릴 수 있도록 하고, 미래에 더 강력하고 성능이 더 좋은 Pi로 쉽게 업그레이드할 수 있도록 하고 싶었어요.\n\n이를 위해 Amazon CodeCommit을 사용하여 내 Git 리포지토리를 설정했죠. 이것은 AWS Free Tier의 일부로 제공되며, AWS 직원이 아니더라도 사용했을 것 같아요.\n\n<div class=\"content-ad\"></div>\n\n저는 Git 전문가는 아니지만 상대적으로 간단한 명령어로 대부분의 작업을 수행할 수 있습니다: git checkout, git add, git commit 및 git push.\n\n주요 MagicMirror 구성 파일(config.js 및 custom.css)을 소스 코드 관리하고 있을 뿐만 아니라, Git 관리하에 진행 상황을 추적하는 진행중인 README 파일을 유지합니다:\n\n![매직미러 설정 파일](/assets/img/2024-05-27-MyAmbientInformationDisplay_1.png)\n\n다시 읽어보니, 초기 설정을 Amazon EC2 인스턴스에서 했다는 것을 상기했습니다. 이는 중요한 사항입니다: MagicMirror는 단순히 리눅스 서버에서 실행되는 프로그램이며, 라즈베리 파이에서 실행할 필요가 없습니다.\n\n<div class=\"content-ad\"></div>\n\n# 반복 가능한 시스템 설정\n\n매일 새로운 시스템을 설정하지는 않기 때문에, 사용할 때마다 필요한 모든 단계를 추적하고 작동하는지 확인해야 한다는 것을 깨달았어요. 이 프로젝트에는 구글 문서를 사용했어요. 이 문서에는 22개의 단계가 있고, 이를 통해 원시적인 Pi로부터 MagicMirror가 설치되어 실행되는 Pi까지 가는 과정이 나와 있어요:\n\n![이미지](/assets/img/2024-05-27-MyAmbientInformationDisplay_2.png)\n\n# MagicMirror 구성\n\n<div class=\"content-ad\"></div>\n\n마법 거울의 설정 프로세스는 긴 시리즈의 git clone 및 npm install 명령으로 구성되어 있습니다. 프로세스를 완전히 반복 가능하고 완전히 자동화하는 것이 제 목표이기 때문에 Bash 스크립트를 만들어 모든 설정 단계를 수행하도록 하고 있습니다. 이 스크립트는 디렉토리를 생성하고 모든 준비 작업을 마무리합니다 (이 작업에는 20~40분 정도 소요됩니다):\n\n![마법 거울 설정](/assets/img/2024-05-27-MyAmbientInformationDisplay_3.png)\n\n## 디렉토리 / 파일 구조\n\n제 디렉토리 구성은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\nSource/MagicMirror — 이건 내 Git 저장소에서 체크아웃한 내용이야.\n\nSource/MagicMirror/mm_setup.sh — 설정 스크립트야.\n\nSource/MagicMirror/config.js — 설정 파일이야.\n\nSource/MagicMirror/custom.css — 사용자 정의 CSS 파일이야.\n\n<div class=\"content-ad\"></div>\n\nSource/MagicMirror/MagicMirror — 이는 github.com에서 가져온 sub-repo입니다. MagicMirror 코드가 실제로 포함되어 있습니다.\n\nSource/MagicMirror/MagicMirror/modules — 각각이 github.com의 별도 sub-repo 인 모든 모듈이 여기에 있습니다.\n\nMagicMirror를 실행하려면 로그인한 후에 다음 명령을 실행합니다:\n\n```js\ncd ~/Source/MagicMirror/MagicMirror/ ; cp ../config.js config ; cp ../custom.css css ; npm run start\n```\n\n<div class=\"content-ad\"></div>\n\n# 모듈별 리뷰\n\n마법거울(MagicMirror)을 작동하기 위해 사용하는 각 모듈을 살펴보겠습니다. 앞서 언급한 대로, 저는 간단히 시작해서 시간이 지남에 따라 추가해왔고, 당신도 마찬가지로 해야 합니다.\n\n보이는 모듈들에 대해 자세히 살펴보기 전에 보이지 않는 하나에 대해 말씀드릴게요! MMM-Pages를 통해 여러 페이지를 만들 수 있고, 각 페이지는 하나 이상의 모듈들로 구성됩니다. 특정 시간 간격마다 페이지를 전환할 수 있는 옵션이 있으며, Stream Deck을 설정하여 명령으로 동일하게 전환할 수도 있습니다.\n\n여기가 제 첫 번째 페이지입니다:\n\n<div class=\"content-ad\"></div>\n\n\n![My Ambient Information Display](/assets/img/2024-05-27-MyAmbientInformationDisplay_4.png)\n\nThe left column uses the following modules:\n\n- clock\n- MMM-OpenWeatherForecast\n- MMM-SORT — Tides for Vashon Island.\n- MMM-Countdown — A countdown to my ultimate retirement day.\n- MMM-SystemStats — Pi stats.\n- MMM-WorldClock — World clock, with time in Seattle and Ankara (Turkey).\n\nThe center column uses the newsfeed module to display the latest AWS news via an RSS feed.\n\n\n<div class=\"content-ad\"></div>\n\n및 오른쪽 열에는 다음 모듈이 사용됩니다:\n\n- calendar — 개인, 가족 및 소셜 세 가지 Google 캘린더의 이벤트를 표시합니다.\n- MMM-EmbedURL — 내 3D 프린터에 연결된 카메라의 라이브 비디오 피드를 제공합니다.\n- MMM-Parcel — tracktry.com의 데이터를 사용하여 송장 추적을 제공합니다. 전자상거래 사이트에서 송장 통지를 받을 때마다 추적 번호를 입력하여 속편하게 나의 소포가 어디에 있는지 확인할 수 있습니다.\n- MMM-SpeedTest — 라즈베리 파이의 (다소 제한된) 시각에서 제공하는 인터넷 속도 테스트입니다.\n\n다음은 두 번째 페이지입니다:\n\n![이미지](/assets/img/2024-05-27-MyAmbientInformationDisplay_5.png)\n\n<div class=\"content-ad\"></div>\n\n이 페이지는 여러 실험의 결과입니다. MMM-Webview를 사용하여 PiAware를 실행 중인 Pi에 있는 HTML 페이지를 열고 있습니다. 페이지는 워싱턴 주 페리 카메라에서 이미지를 왼쪽에 로드하고 Pi에서 FlightAware 지도를 오른쪽에 로드합니다. 내 집은 시애틀-타코마 국제공항에 접근하는 길 가에 있습니다. 때때로 밖에서 비행기 소리가 들리고 지도 상에서 움직이는 비행기를 볼 수 있습니다. 이 페이지를 동작하고 멋지게 보이도록 만드는 데 시간이 걸렸지만 정말 좋아합니다!\n\n여기 사용한 HTML입니다:\n\n```js\n  <body class=\"outer\">\n    <div class=\"container\">\n      <div class\"ferries\">\n        <div class=\"inner\"><img src=\"https://images.wsdot.wa.gov/wsf/fauntleroy/terminal/fauntleroy.jpg\"  /></div>\n        <div class=\"inner\"><img src=\"https://images.wsdot.wa.gov/wsf/fauntleroy/terminal/fauntterminal.jpg\"  /></div>\n        <div class=\"inner\"><img src=\"https://images.wsdot.wa.gov/wsf/fauntleroy/terminal/faunttrenton.jpg\"  /></div>\n        <div class=\"inner\"><img src=\"https://images.wsdot.wa.gov/wsf/fauntleroy/terminal/fauntlincoln.jpg\"  /></div>\n      </div>\n\n      <div class=\"skyaware\">\n        <iframe class=\"skyaware-iframe\" src=\"http://192.168.7.242/skyaware/?aircraftTrails=show\" />\n      </div>\n    </div>\n  </body>\n```\n\n세 번째 페이지는 여기 있습니다. 이 페이지는 새롭게 만들었고 설정하는 데 많은 재미를 느끼고 있습니다. 목표는 다양한 교육적이고 유익한 인포그래픽을 표시하여 새로운 정보를 찾고 배울 수 있는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![2024-05-27-MyAmbientInformationDisplay_6.png](/assets/img/2024-05-27-MyAmbientInformationDisplay_6.png)\n\nThis page uses MMM-WebView. This infographic is from the brand new AWS Fundamentals book, and is shared with their permission. The book contains 13 infographics, each one jam-packed with very useful info:\n\n![2024-05-27-MyAmbientInformationDisplay_7.png](/assets/img/2024-05-27-MyAmbientInformationDisplay_7.png)\n\nI am still building up my collection of infographics; here’s what I have so far, and your suggestions are welcome:\n\n\n<div class=\"content-ad\"></div>\n\n- 물리 포스터\n- 이진 포스터\n- NASA 태양계 이상 (앞면 파일만)\n\n아직 이러한 것들을 검토하고 다운로드해야 합니다:\n\n- 무료 과학 포스터\n- 2023년 집을 화사하게 하는 9개의 최고의 과학 포스터\n- 세상에서 가장 좋은 책 아이디어 하나\n\n그리고 여기가 네 번째 페이지입니다 (이미지는 ezgif.com을 사용하여 만들어졌습니다):\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*mnHtyQjE8smDHDM7eLXwYQ.gif)\n\n이것은 MMM-RAIN-MAP 및 RainViewer API의 데이터를 사용하여 내 지역의 과거 및 예측 강우량을 보여줍니다.\n\n지금까지 이렇게 준비한 것이며, 더 많은 것들은 메모리와 컴퓨팅 성능이 더 강력한 Pi 4B를 손에 넣을 때 더할 예정입니다.\n\n그리고 다섯 번째 페이지가 더 있지만, 시간당 회전에는 없습니다. Stream Deck에서 키를 누르면 MMM-MonthlyCalendar의 도움으로 전체 화면 형식으로 캘린더를 볼 수 있습니다(개인 항목은 파란 막대로 가려졌습니다):\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-MyAmbientInformationDisplay_8.png\" />\n\n# 모듈에 관해 몇 마디\n\n내가 언급한 각 모듈은 선의의 의도를 갖고 만든 개발자에 의해 만들어졌음을 인지하십시오. 이제 그 모듈을 유지 및 향상시킬 수 있는지 여부는 확실하지 않을 수 있습니다.\n\n몇 년이 지나면 모듈이 더 이상 유지되지 않을 수도 있고, 다른 유지자가 나타날 수도 있습니다. 모듈이 고장나 있고 더 이상 관리되지 않는다면 분기점을 확인하고 문제를 해결하는 분기점을 찾아볼 수 있습니다. 혹은, 더 나아가서 버그를 수정하고 풀 요청을 제출해보세요.\n\n<div class=\"content-ad\"></div>\n\n사용 사례 및 원하는 반복 가능성에 따라 각 모듈의 개인 포크를 만들고 해당 포크를 프로젝트에 복제하는 것이 좋을 수 있습니다. 이렇게하면 필요할 때마다 사본을 업데이트해야 합니다.\n\n# 스트림 데크 / 원격 제어\n\n알아야 할 모듈이 하나 더 있습니다. MMM-RemoteControl. MMM-Pages를 사용하는 경우 원격 제어를 고정 페이지로 구성해야 합니다.\n\n```js\nfixed:\n[\n    \"MMM-Remote-Control\",\n],\n```\n\n<div class=\"content-ad\"></div>\n\nMMM-RemoteControl은 REST API를 구현하여 Stream Deck에서 MagicMirror를 제어할 수 있게 합니다. config 파일에는 (로컬) 장난으로부터 보호하기 위한 apiKey가 포함되어 있습니다:\n\n```js\n  /* 원격 제어 */\n  {\n      module: \"MMM-Remote-Control\",\n      position: \"bottom_left\",\n      config:\n      {\n          customCommand: {},\n          showModuleApiMenu: true,\n          secureEndpoints: false,\n          apiKey: \"XYZ\"\n      }\n  },\n```\n\n물론 XYZ는 실제 키가 아닙니다!\n\nStream Deck은 키를 누를 때 비동기 HTTP GET 요청을 수행하도록 구성되어 있습니다; 하단 왼쪽의 6개 키가 이와 같이 설정되어 있습니다:\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-27-MyAmbientInformationDisplay_9.png)\n\n예를 들어, Home 키를 누를 때 다음 요청이 발생합니다:\n\n```js\nhttp://192.168.7.217:8080/api/notification/HOME_PAGE?apiKey=XYZ\n```\n\n각 모듈은 특정 종류의 알림에 응답합니다. 이들은 일반적으로 문서화되어 있지만 가끔 소스 코드를 살펴봐야 할 수도 있습니다.\n\n\n\n<div class=\"content-ad\"></div>\n\n# 전반적인 정보 흐름\n\n여기는 다양한 외부 소스에서 내 MagicMirror로 흐르는 정보가 어떻게 표시되는지 보여주기 위한 내 시도입니다 (Dendron 및 Mermaid로 생성함):\n\n![Information Flow](/assets/img/2024-05-27-MyAmbientInformationDisplay_10.png)\n\n# 다음은 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n그래서 여기에요! 현재 구성에 매우 만족하고 있지만 계속해서 새로운 모듈을 찾아 시도해 볼 예정입니다.\n\n# 직접 만들어 보는 것을 권장합니다\n\n앞서 말했듯이, MagicMirror를 설정하는 과정에서 다양한 기술을 활용하게 되어 매우 만족스러웠습니다. 이러한 프로젝트에서는 새로운 기술을 습득하고 현재 기술을 향상시키는 것이 불가피하게 발생하는 긍정적인 부작용입니다.\n\n여러분도 직접 만들어 보고 제게 소식 주세요!\n\n","ogImage":{"url":"/assets/img/2024-05-27-MyAmbientInformationDisplay_0.png"},"coverImage":"/assets/img/2024-05-27-MyAmbientInformationDisplay_0.png","tag":["Tech"],"readingTime":9},{"title":"파이썬에서 return을 사용할 때 발생하는 잘못된 구문 오류 해결하기","description":"","date":"2024-05-27 13:53","slug":"2024-05-27-PythonReturnInvalidSyntaxError","content":"\n\n라즈베리 파이에서 간단한 파이썬 프로그램을 작성 중이며 파이썬 프로그래밍이 처음이라고 하셨군요. GetMessage라는 매개변수가 없고 data라는 변수를 반환하는 함수를 정의했는데, 다음과 같은 오류가 발생하고 있다고 하셨군요.\n\n```js\n^\n```\n\n해당 오류가 발생하는 이유와 어떻게 해결할 수 있는지 알려드리겠습니다.\n\n<div class=\"content-ad\"></div>\n\n수정 사항: 전역 변수로 데이터를 정의했고, 지금 발생한 오류는\n\n```js\n^\n```\n\n# 해결 방법\n\n코드에 여러 구문 문제가 있습니다. 코드 구문을 이해하지 못할 때 발생하는 SyntaxError 예외의 특성 때문에 오류 메시지가 문제의 원인인 적절한 줄을 식별하지 못할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n제가 먼저 발견한 구문 오류는 GetMessage 함수에서 반복문 내에 없는 상태에서 break를 사용하고 있다는 것입니다. break 문은 for 또는 while 블록 내에서만 유용하며, 다른 곳에서 사용하는 것은 구문 오류입니다.\n\n다음으로 발견된 오류는 누락된 콜론과 관련이 있습니다. DecodeInput 및 SetPower의 각 조건 분기가 조건 뒤에 콜론이 있어야 합니다: if 조건1:, elif 조건2:, else:\n\n또한 elif 대신 else if를 사용하는 것은 오류입니다 (별도의 if 문을 사용하여 일부 조정을 했다고 한다면 작동할 수 있지만, 공간을 낭비하게 될 것입니다).\n\n추가 문제들도 있지만 구문 오류는 아닙니다. 예를 들어, 함수를 정의하기 전에 상위 코드에서 함수를 호출하는 것이 있으며, DecodeInput에는 아무 작업도 수행하지 않는 SetPower 표현이 있는데, 아마도 인수를 전달하여 SetPower를 호출하길 원할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n희망을 가질 때 올바른 방향으로 나아갈 수 있기를 바랍니다.\n\n답변 작성자 - Blckknght\n\n답변 확인자 - Marilyn (FixIt 자원봉사자)\n\n해당 내용은 스택 오버플로우에서 수집되었으며, cc by-sa 2.5, cc by-sa 3.0 및 cc by-sa 4.0로 라이선스가 부여되어 있습니다.","ogImage":{"url":"/assets/img/2024-05-27-PythonReturnInvalidSyntaxError_0.png"},"coverImage":"/assets/img/2024-05-27-PythonReturnInvalidSyntaxError_0.png","tag":["Tech"],"readingTime":2},{"title":"적절한 Python 설정 pyenv와 Poetry","description":"","date":"2024-05-27 13:52","slug":"2024-05-27-ProperPythonsetupwithpyenvPoetry","content":"\n많은 경우, 사람들이 Python의 로컬(개발) 환경 설정에서 고민하는 것을 자주 볼 수 있어요. 솔직히 말하자면, 쉽지 않아요. 그러나 동시에 안정성과 문제 해결 능력을 위해 중요하답니다.\n\n이 글은 로컬 Python 환경을 제대로 설정하는 방법을 설명하는 또 다른 글이 될 거예요. 우리의 경우에는 pyenv와 Poetry를 사용할 거에요. 이미 이 링크들에는 필요한 모든 정보가 포함되어 있지만, 정보가 너무 많아 보일 수 있어요. 이 글에서는 평균적인 Python 애플리케이션을 위한 로컬 개발 환경 설정에만 초점을 맞추려고 해요.\n\n![이미지](/assets/img/2024-05-27-ProperPythonsetupwithpyenvPoetry_0.png)\n\n# pyenv\n\n<div class=\"content-ad\"></div>\n\n## pyenv 설치\n\n첫 번째 단계는 pyenv를 설치하는 것입니다. 이는 각기 다른 운영 체제에 특정하므로 아래 문서의 지침을 따라주시기 바랍니다: [https://github.com/pyenv/pyenv?tab=readme-ov-file#installation](https://github.com/pyenv/pyenv?tab=readme-ov-file#installation)\n\n리눅스 배포판을 사용 중이시라면, 다음을 실행해주십시오:\n\n```js\ncurl https://pyenv.run | bash\n```\n\n<div class=\"content-ad\"></div>\n\npyenv은 ~/.pyenv 위치에 설치됩니다.\n\npyenv를 로드 경로에 추가해야하는 몇 가지 추가 단계가 나타날 것입니다. 이 단계도 실행하세요. 저의 경우에는 ZSH를 사용하기 때문에 이러한 줄을 ~/.zshrc에 추가해야 합니다. 이 문서에 ZSH를 설치하는 방법은 포함되어 있지 않습니다. 도움이 필요하면 언제든지 연락해 주세요.\n\n이제 터미널을 다시 열어주세요.\n\n새 터미널에서 pyenv를 실행하여 테스트해보세요. 명령어 목록이 표시된다면 사용할 준비가 된 것입니다.\n\n<div class=\"content-ad\"></div>\n\n## Python 설치\n\n우리가 먼저 해야 할 일은 터미널에서 기본적으로 활성화된 Python 버전을 확인하는 것입니다. 제 예시에서는 Raspberry Pi OS 12.4 (Bookworm)를 실행하는 Raspberry Pi 5 (8GB)에서 작업하고 있습니다.\n\n```js\n[~]$ which python\n/usr/bin/python\n```\n\n이것은 OS와 함께 제공되는 표준 Python입니다.\n\n<div class=\"content-ad\"></div>\n\n다음으로 pyenv에서 Python 버전을 확인합니다:\n\n```js\n[~]$ pyenv versions\n* system (set by /home/vandermeij/.pyenv/version)\n```\n\n여기에는 Python 버전이 없다는 것을 알려줍니다. 지금은 아무것도 설치되지 않았습니다. 좋은 일이죠.\n\npyenv를 통해 Python 버전을 설치하려면 몇 가지 의존성을 설치해야 합니다. 여러분의 운영 체제에 해당하는 의존성을 설치하려면 다음 문서를 참조해주세요: https://github.com/pyenv/pyenv/wiki#suggested-build-environment\n\n<div class=\"content-ad\"></div>\n\n우리 상황에서:\n\n```bash\nsudo apt update; sudo apt install build-essential libssl-dev zlib1g-dev \\\nlibbz2-dev libreadline-dev libsqlite3-dev curl \\\nlibncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev\n```\n\n이제 Python을 설치할 수 있습니다. 예를들어, 버전 3.11:\n\n```bash\n[~]$ pyenv install 3.11\nPython-3.11.7.tar.xz 다운로드 중...\n-> https://www.python.org/ftp/python/3.11.7/Python-3.11.7.tar.xz\nPython-3.11.7 설치 중...\n```\n\n<div class=\"content-ad\"></div>\n\n다음은 pyenv에서 Python 버전을 다시 확인해 봅시다:\n\n```js\n[~]$ pyenv versions\n* system (set by /home/vandermeij/.pyenv/version)\n  3.11.7\n```\n\n여기서 3.11.7 버전이 설치되어 있는 것을 확인할 수 있습니다.\n\n이제 활성화하고 버전을 다시 확인해 봅시다:\n\n<div class=\"content-ad\"></div>\n\n\n[~]$ pyenv global 3.11.7\n[~]$ pyenv versions\nsystem\n\n- 3.11.7 (set by /home/vandermeij/.pyenv/version)\n\n\n지금은 Python 3.11.7이 활성화된 Python 버전으로, 전역적이며 시스템 전역으로 적용되었음을 확인했습니다.\n\n다시 한 번 기본 Python 버전을 확인해보세요:\n\n\n[~]$ which python\n/home/vandermeij/.pyenv/shims/python\n\n\n<div class=\"content-ad\"></div>\n\n위치가 /usr/bin/python과 다르다는 것을 주목하세요. 이제 pyenv가 유지 관리하는 심볼릭 링크를 가리킵니다. 이건 좋은 일이에요! 이제 penv versions로 확인할 수 있듯이 선택한 Python 버전을 가리킵니다.\n\n시스템 Python으로 다시 변경하면, 이 변경 사항은 OS에서의 Python 버전을 관리하는 pyenv versions에만 반영됩니다.\n\n```bash\n[~]$ pyenv global system\n[~]$ pyenv versions\n* system (set by /home/vandermeij/.pyenv/version)\n  3.11.7\n[~]$ which python\n/home/vandermeij/.pyenv/shims/python\n```\n\n## 사용법\n\n<div class=\"content-ad\"></div>\n\n저는 주로 pyenv를 주요 Python 배포 업체로 사용합니다. 기본 시스템 Python을 거의 사용하지 않아요. 저의 컴퓨터에서는 이렇게 나와요:\n\n```js\n[~]$ pyenv versions\n  system\n* 3.11.7 (set by /home/vandermeij/.pyenv/version)\n```\n\n때로는 프로젝트에서 다른 Python 버전을 사용하고 싶을 수도 있어요, 예를 들어 Python 3.12를 사용하고 싶다고 가정해봅시다. 전역 Python 버전을 변경하는 것 외에도 pyenv를 통해 로컬 버전을 사용할 수도 있어요.\n\ntestapp이라는 작은 프로젝트를 만든다고 가정해봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\n[~]$ mkdir testapp\n[~]$ cd testapp\n```\n\n다음으로 pyenv를 사용하여 로컬 Python 버전을 설정합니다:\n\n```js\n[~/testapp]$ pyenv local 3.12\npyenv: version `3.12' not installed\n```\n\n버전 3.12가 아직 설치되지 않았다고 알려줍니다.\n\n<div class=\"content-ad\"></div>\n\n그럼 설치해보겠습니다:\n\n```js\n[~/testapp]$ pyenv install 3.12\nPython-3.12.1.tar.xz를 다운로드 중...\n-> https://www.python.org/ftp/python/3.12.1/Python-3.12.1.tar.xz\nPython-3.12.1을 설치 중...\n```\n\n다시 시도해보세요:\n\n```js\n[~/testapp]$ pyenv local 3.12\n[~/testapp]$ pyenv versions\n  system\n  3.11.7\n* 3.12.1 (설정 위치: /home/vandermeij/testapp/.python-version)\n```\n\n<div class=\"content-ad\"></div>\n\n파이썬 3.12.1이 활성화되어 있는 것을 확인할 수 있어요. 이는 이 폴더 내의 .python-version이라는 로컬 파일로 인해 터미널에서 특정 버전을 로드하도록 pyenv에 알려주기 때문이에요.\n\n서브 폴더를 제외한 다른 폴더로 이동하면 활성화된 파이썬 버전이 재설정됩니다:\n\n```js\n[~]$ pyenv versions\n  system\n* 3.11.7 (set by /home/vandermeij/.pyenv/version)\n  3.12.1\n```\n\npyenv를 사용하면 로컬 또는 전역 파이썬 버전에 관해 항상 사용 중인 파이썬 버전을 알 수 있고 완전한 제어권을 가질 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n다음 적절한 개발 환경 설정 단계는 외부 라이브러리/의존성을 설치하기 위해 가상 환경을 사용하는 것입니다. 이렇게 함으로써 a) 우리의 pyenv Python 배포를 깨끗하게 유지할 수 있고, b) 다른 프로젝트와 충돌하지 않습니다. 이에 대해 저는 Poetry를 추천합니다.\n\n# Poetry\n\n## 설치\n\n새로 설치한 pyenv Python 버전에 설치할 유일한 외부 라이브러리는 Poetry입니다.\n\n<div class=\"content-ad\"></div>\n\n```sh\n[~]$ pip install poetry\n[~]$ poetry -V\nPoetry (version 1.7.1)\n```\n\n이 작업을 각 Python 버전마다 수행하십시오.\n\n```sh\n[~/testapp]$ poetry -V\npyenv: poetry: command not found\n```\n\n## 사용법\n\n<div class=\"content-ad\"></div>\n\n새 프로젝트를 시작하려면 poetry init -q를 실행해 보세요. 이렇게 하면 pyproject.toml 파일이 생성됩니다.\n\n이제 의존성을 추가할 수 있게 됩니다. 하지만 그 전에 가상 환경을 활성화해야 합니다. poetry shell을 실행하세요:\n\n```js\n[~/testapp]$ poetry shell\nCreating virtualenv testapp-b6lGsqOc-py3.12 in /home/vandermeij/.cache/pypoetry/virtualenvs\nSpawning shell within /home/vandermeij/.cache/pypoetry/virtualenvs/testapp-b6lGsqOc-py3.12\n[~/testapp]$ emulate bash -c '. /home/vandermeij/.cache/pypoetry/virtualenvs/testapp-b6lGsqOc-py3.12/bin/activate'\n(testapp-py3.12) [~/testapp]$\n```\n\n이렇게 하면 가상 환경 (virtualenv)이 생성되고, 이미 존재하지 않는 경우 새 쉘이 생성되며 해당 가상 환경이 활성화됩니다. 프롬프트(PS1)에서 확인할 수 있습니다: (testapp-py3.12) [~/testapp]$.\n\n<div class=\"content-ad\"></div>\n\n현재 which python을 실행하면 가상 환경에 연결된 다른 심볼릭 링크를 볼 수 있습니다:\n\n```js\n(testapp-py3.12) [~/testapp]$ which python\n/home/vandermeij/.cache/pypoetry/virtualenvs/testapp-b6lGsqOc-py3.12/bin/python\n```\n\n확인하세요. pyenv로 활성화된 Python 버전과 동일하지만 이제 가상 환경으로 묶여 있습니다.\n\n```js\n(testapp-py3.12) [~/testapp]$ python -V\nPython 3.12.1\n```\n\n<div class=\"content-ad\"></div>\n\n이 가상 환경에서는 종속 항목을 설치할 것입니다.\n\n이미 pyproject.toml 파일이 있는 경우, 단지 그것을 포함하는 git 저장소를 복제했기 때문에, 프로젝트 자체가 파이썬 라이브러리인지 여부에 따라 poetry install 또는 poetry install --no-root를 실행할 수 있습니다. 우리의 경우, testapp은 파이썬 라이브러리가 아닙니다:\n\n```js\n(testapp-py3.12) [~/testapp]$ poetry install --no-root\n잠금 파일에서 종속성을 설치 중\n```\n\n이제 FastAPI와 같은 새로운 종속성을 추가할 수 있습니다. poetry add fastapi를 사용하거나 pyproject.toml 파일을 수동으로 편집할 수 있습니다. 일반적으로 후자를 사용합니다.\n\n<div class=\"content-ad\"></div>\n\n패스트API를 수동으로 추가하겠습니다. 좋아하는 편집기로 pyproject.toml 파일을 열고 다음 줄을 변경하세요 (fastapi = \"\\*\"):\n\n\n[tool.poetry.dependencies]\npython = \"^3.12\"\nfastapi = \"*\"\n\n\n이제 Poetry 업데이트를 실행해보세요:\n\n\n(testapp-py3.12) [~/testapp]$ poetry update\n의존성 업데이트 중\n의존성 해결 중... (6.6초)\n\n패키지 작업: 9개 설치, 0개 업데이트, 0개 제거\n\n  • idna (3.6) 설치 중\n  • sniffio (1.3.0) 설치 중\n  • typing-extensions (4.9.0) 설치 중\n  • annotated-types (0.6.0) 설치 중\n  • anyio (4.2.0) 설치 중\n  • pydantic-core (2.14.6) 설치 중\n  • pydantic (2.5.3) 설치 중\n  • starlette (0.35.1) 설치 중\n  • fastapi (0.109.0) 설치 중\n\n잠금 파일 작성 완료\n\n\n<div class=\"content-ad\"></div>\n\n가상 환경이 FastAPI 및 해당 종속성들로 풍부해졌어요. 보너스로, Poetry가 poetry.lock 파일을 생성했는데, 이 파일에는 설치된 각 (하위)종속성의 특정 버전이 포함되어 있어요.\n\n다음 파일을 git에 추가해주세요:\n\n- .python-version\n- pyproject.toml\n- poetry.lock\n\n이제 pyenv와 Poetry를 사용하여 깔끔하고 적절한 Python 개발 환경을 구축했어요.\n\n<div class=\"content-ad\"></div>\n\n모든 가상 환경의 전체 개요를 보려면 poetry env list를 실행하세요:\n\n```js\n(testapp-py3.12) [~/testapp]$ poetry env list\ntestapp-b6lGsqOc-py3.12 (Activated)\n```\n\n전용 쉘을 종료하려면 CTRL+D를 누르거나 exit를 입력하세요:\n\n```js\n(testapp-py3.12) [~/testapp]$ exit\n[~/testapp]$\n```\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\npyenv 및 Poetry는 로컬 개발 환경을 위한 강력한 도구를 제공합니다. 이를 사용하는 것을 강력히 권장합니다. 저는 그것을 사용하여 매우 만족하고 있습니다.\n\n앞서 간단히 언급했듯이 중요 파일을 저장하기 위해 git을 사용해주세요. 또한, 어플리케이션을 설치할 때는 어디에서든 poetry.lock 파일을 사용해주세요. 예를 들어, Docker에서.\n\n이 글에 관한 질문, 문의 또는 의견이 있으시다면 언제든지 연락해주세요. 도움이 되겠습니다. 여기나 제 개인 웹사이트에서 저에게 연락을 주셔도 됩니다.\n","ogImage":{"url":"/assets/img/2024-05-27-ProperPythonsetupwithpyenvPoetry_0.png"},"coverImage":"/assets/img/2024-05-27-ProperPythonsetupwithpyenvPoetry_0.png","tag":["Tech"],"readingTime":8},{"title":"GenPiCam - 생성적 AI 카메라","description":"","date":"2024-05-27 13:51","slug":"2024-05-27-GenPiCam-GenerativeAICamera","content":"\n![image](https://miro.medium.com/v2/resize:fit:1268/1*eZzfeCJggafmHaYGcjqEDA.gif)\n\n이 프로젝트의 무거운 처리와 진정한 지혜는 머신 러닝 기반 이미지 생성기를 사용하는 외부 서비스인 Midjourney가 처리합니다. GenPiCam은 두 가지 Midjourney 능력을 활용합니다.\n\n- 존재하는 사진을 사용하여 이미지에 대한 텍스트 설명 프롬프트를 생성하는 \"Describe\"\n- 자연어 프롬프트를 이미지로 변환하는 \"Imagine\"\n\n이 두 단계 사이에서 나는 창의적 입력 수준을 허용하므로 GenPiCam 카메라에는 최종 이미지의 스타일을 조정하는 다이얼이 있습니다. 이것은 본질적으로 생성된 이미지에 \"애니메이션\", \"팝 아트\" 또는 \"미래적\" 영향을 더하는 필터가 되게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 지루해요 — 비디오를 보고 싶어요?\n\n물론이죠 — 여기 2분 요약 영상이 있어요\n\n# \"사진\" 프로세스\n\n초기 사진 이미지는 라즈베리 파이 카메라 모듈로 촬영됩니다. 외부 카메라 셔터(라즈베리 파이 GPIO 핀에 연결된 푸시 버튼)를 누르면 정지 이미지를 촬영하고 사진을 jpeg 이미지로 저장합니다.\n\n<div class=\"content-ad\"></div>\n\n![GenPiCam-GenerativeAICamera_0](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_0.png)\n\n이 사진은 Midjourney에 업로드되었는데, 기존 사진을 시작으로 이미지에 대한 텍스트 설명 프롬프트를 생성합니다. 궁금하신 분들을 위해, 저는 PyAutoGUI를 사용하여 매우 서투른 봇 상호 작용을 마우스와 키보드를 제어하는 데 사용하고 있습니다(API가 없기 때문에) — 이것은 쓰면 안 되는 코드의 예제가 될 수 있도록 해주세요.\n\nMidjourney의 describe 도구는 이미지를 입력으로 받아와 텍스트 프롬프트를 생성합니다. 이는 \"텍스트를 이미지로\" 하는 일반적인 과정을 반대로 해서 사진을 시작으로 이미지의 본질을 설명하는 텍스트를 추출하는 매우 탐구적인 서비스입니다. 여기에는 Snowy가 있지만 Midjourney에는 훨씬 더 표현력이 풍부한 설명이 있습니다.\n\n![GenPiCam-GenerativeAICamera_1](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_1.png)\n\n<div class=\"content-ad\"></div>\n\n\"describe\" 함수는 실제로 이미지를 기반으로 네 가지 설명을 반환하지만, GenPiCam은 임의로 첫 번째 설명을 선택합니다.\n\n이제 재미난 부분이 시작됐어요. 우리는 그 텍스트 프롬프트를 가져와서 새로운 이미지를 Generative AI를 사용하여 Midjouney imagine에 새로운 호출로 만들 수 있어요. 이전 텍스트 프롬프트에서 생성된 이미지가 여기 있어요.\n\n![image](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_2.png)\n\nGenPiCam에는 스타일 지시 사항으로 텍스트 프롬프트를 업데이트하는 선택 스위치가 있어요.\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_3.png)\n\n라즈베리 파이 GPIO 핀에 연결된 12진 스위치입니다. 현재 \"예술적 선택\"을 읽어서 GenPiCam이 텍스트 프롬프트에 \"레트로 팝 아트 스타일 일러스트\"와 같은 접두사를 추가할 것입니다. 다른 스타일 프롬프트 중 일부는 다음과 같습니다.\n\n- 애니메이션 스타일\n- 초현실주의, 다양한 모자와 풍선이 있는 화려한 히퍼리얼리즘\n- 흐릿한 브러시 스트로크\n- 우주 정거장에서 초현실주의인 미래주의\n\n눈이 내린 이미지의 \"팝아트\" 이미지를 보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n\n[![](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_4.png)](https://example.com)\n\nThe final image is created using the Pillow Python imaging library and consists of:\n\n- The initial photo taken by the Raspberry Pi camera module, resized on the left\n- The final Midjouney image—the first of four images is selected, composited to the right\n- Text prompt—against a colored background and icon signifying the style mode\n\nHere's the same process, but adding the text “Hyper-Realistic, whimsical with a colorful hat and balloons”.\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_5.png)\n\n우측 이미지가 Generative AI로 만들어진 것임에도 불구하고, 스노위의 비평적인 시선을 통해 실망감이 느껴집니다.\n\n# Generative AI 이미지 — 배운 점\n\nGenPiCam 카메라를 구축하는 데 정말 즐겁게 시간을 보냈고, 이는 Generative AI에 대한 프립트 엔지니어링을 탐구하는 흥미로운 경로였습니다. 더 좋았던 사진들은 단순한 구성을 가진 것들이었는데, 즉, 말로 표현하기 쉬운 이미지였습니다. 예를 들어, 이 장면은 색상과 명확한 객체로 쉽게 설명할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n![Generated Image 1](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_6.png)\n\nHowever, there were some very strange results while describing more unique scenes. I found the description of a classic Australian clothesline created an unusual image.\n\n![Generated Image 2](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_7.png)\n\nOne of my favorite reimagined images was the identification of my laser mouse. It turns out a laser mouse has multiple meanings leading to a striking result.\n\n\n<div class=\"content-ad\"></div>\n\n\n![GenPiCam Hardware](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_8.png)\n\n# 하드웨어\n\nGenPiCam의 가장 세련되지 않은 부분은 서둘러 조립한 하드웨어입니다. 만약 당신이 자신만의 현실 왜곡 카메라를 만들고 싶다면, 아래 항목이 필요합니다.\n\n- RaspberryPi 4가 설치된 Raspberry Pi OS\n- Raspberry Pi 카메라 모듈 v2\n- Raspberry Pi용 터치스크린 모니터\n- 12개의 PCB 회전 스위치\n- 푸시버튼 (순간접촉)\n- 폴리카보네이트 케이스\n- 재충전 가능한 배터리 팩\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_9.png\" />\n\n가장 아름다운 빌드는 아닐지 몰라요. 하지만 이건 기능성이 뛰어나다는 점으로만 용서하겠습니다.\n\n<img src=\"/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_10.png\" />\n\n# 요약, 코드 및 크레딧\n\n<div class=\"content-ad\"></div>\n\nGenPiCam은 생성 AI를 탐험하는 재미있는 방법이었어요. 그림을 스타일에 맞게 변환해주는 (때로는 놀랄만한) 이미지들을 만들어내죠.\n\n![GenPiCam](/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_11.png)\n\n## 크레딧\n\n- Ned Letcher — Midjourney의 describe 기능을 보여줌으로써 저를 영감받게 한 분이자 이미지를 재창조하는 개념을 제공해준 분\n- Michael King의 'Midjourney 이미지 다운로드하는 Discord 봇 만들기' — Midjourney와 상호작용하기 위한 Python 자동화 및 Discord 봇 설정을 보여주는 훌륭한 글\n- Midjourney — 봇 채널을 위한 Midjourney 명령 구문\n- discord.py — Discord를 위한 Python API 래퍼\n\n<div class=\"content-ad\"></div>\n\n## 코드\n\n[https://github.com/saubury/GenPiCam](https://github.com/saubury/GenPiCam)\n","ogImage":{"url":"/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_0.png"},"coverImage":"/assets/img/2024-05-27-GenPiCam-GenerativeAICamera_0.png","tag":["Tech"],"readingTime":5},{"title":"어디서나 Tailscale을 통해 Immich 라이브러리에 접근하고 동기화하기","description":"","date":"2024-05-27 13:49","slug":"2024-05-27-AccessingandSyncingYourImmichLibraryfromAnywherewithTailscale","content":"\n\n<img src=\"/assets/img/2024-05-27-AccessingandSyncingYourImmichLibraryfromAnywherewithTailscale_0.png\" />\n\n이전 글에서 Raspberry Pi에 추가 SSD 저장 공간을 이용해 오픈 소스 사진 백업 솔루션인 Immich를 자체 호스팅하는 방법에 대해 이야기했습니다. 자신의 미디어 서버를 호스팅함으로써 데이터에 완전한 제어권을 갖는 장점 중 하나는 있습니다. 그러나 어디서든 라이브러리에 액세스하고 동기화하는 것은 견고하고 안전한 방법 없이는 어려울 수 있습니다. 이때 Tailscale이 등장합니다. Tailscale은 어디에 있든 안전하게 디바이스를 인터넷을 통해 연결할 수 있게 해주는 망 VPN 서비스입니다.\n\n# Tailscale이란?\n\nTailscale은 WireGuard를 기반으로 한 현대적인 VPN 솔루션으로, 쉽게 설정하고 사용할 수 있도록 설계되었습니다. 디바이스 간에 안전하고 암호화된 네트워크를 만들어주어 전 세계 어디에서나 로컬 네트워크에 연결된 것처럼 Immich 라이브러리에 액세스할 수 있습니다. Tailscale은 NAT 트래버셜을 처리해주므로 라우터 구성이나 복잡한 네트워크 설정에 대해 걱정할 필요가 없습니다.\n\n<div class=\"content-ad\"></div>\n\n# Tailscale와 Immich 함께 사용하는 이점\n\n- 사용 편의성: 네트워킹 지식이 제한된 사용자도 쉽게 설정하고 사용할 수 있는 Tailscale입니다.\n- 보안성: 모든 연결은 WireGuard를 사용하여 암호화되어 데이터가 안전하게 전송됩니다.\n- 이용 편의성: 세계 어디에서나 어떤 기기에서든 Immich 라이브러리에 액세스할 수 있습니다.\n- 포트 포워딩 불필요: Tailscale은 포트 포워딩이나 동적 DNS 설정이 필요없어요.\n\n# Immich의 주요 이점: 자동 동기화 기능\n\nImmich의 주목할 만한 기능 중 하나는 모바일 앱의 통합 자동 동기화 기능입니다. 이 기능을 사용하면 동기화할 폴더를 선택할 수 있고 Immich가 사진과 비디오를 자동으로 업로드합니다. 사용자는 장치가 충전 중이거나 Wi-Fi에 연결되어 있을 때에만 업로드하도록 설정할 수 있어 데이터 사용량과 배터리 수명을 효율적으로 관리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n일반적으로 집 네트워크에 연결된 상태일 때만 작동하지만, Tailscale을 사용하면 RaspberryPi에 어디서나 안전하게 액세스할 수 있습니다. 해외 여행 중일 때도 이미지를 업로드하고 저장할 수 있습니다. 이것은 구글 포토와 같은 클라우드 서비스와 비교했을 때 하드웨어 제한을 제외하고 저장 용량 제한이 없어서 특히 유용합니다. \n\n# Immich와 Tailscale 설정 방법\n\n## 전제 조건\n\n- Raspberry Pi에 Immich가 정상적으로 설치되어 있어야 합니다.\n- 무료로 Tailscale 계정을 만들 수 있습니다 (Tailscale에서 가입할 수 있습니다).\n\n<div class=\"content-ad\"></div>\n\n## 단계별 안내\n\n라즈베리 파이에 Tailscale 설치하기:\n\n- 라즈베리 파이에서 터미널을 엽니다.\n- Tailscale 설치하기:\n\n```bash\ncurl -fsSL https://tailscale.com/install.sh | sh\n```\n\n<div class=\"content-ad\"></div>\n\nTailscale를 시작하고 로그인하세요:\n\n\nsudo tailscale up\n\n\n- 기기를 인증하기 위해 지침을 따르세요. 웹 브라우저에서 URL을 열고 Tailscale 계정으로 로그인해야 합니다.\n\n다른 기기에 Tailscale 설치하기:\n\n<div class=\"content-ad\"></div>\n\n- 다른 기기(예: 휴대폰, 노트북 또는 데스크톱)에 Tailscale을 다운로드하고 설치하세요.\n- 동일한 계정을 사용하여 각 기기에서 Tailscale에 로그인하세요.\n\n라즈베리 파이에 액세스:\n\n- 모든 기기에 Tailscale이 설정되면 Tailscale 대시보드에서 각 기기에서 라즈베리 파이가 나열될 것입니다.\n- 라즈베리 파이에 할당된 Tailscale IP 주소를 기록하세요. IP 주소는 100.x.x.x와 같은 형식일 것입니다.\n\n어디서나 Immich에 액세스하세요:\n\n<div class=\"content-ad\"></div>\n\n- Tailscale에 연결된 장치의 웹 브라우저를 엽니다.\n- http://100.x.x.x:2283 으로 이동합니다 (100.x.x.x를 Raspberry Pi의 Tailscale IP 주소로 교체합니다).\n- Immich 인터페이스가 표시되어 사진 및 비디오 라이브러리에 액세스하고 관리할 수 있습니다.\n\nImmich 모바일 앱을 사용하여 라이브러리 동기화하기:\n\n- 모바일 장치에 Immich 앱을 다운로드하고 설치합니다.\n- 앱을 열고 서버 설정을 Tailscale IP 주소로 구성합니다.\n- 앱 내 설정으로 이동하여 자동 동기화할 폴더를 선택합니다.\n- 배경 업로드 설정을 활성화하고 충전 중이거나 Wi-Fi에 연결되어 있는 경우에만 업로드하는 환경 설정을 선택합니다.\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\nTailscale을 Immich와 함께 사용하면 전 세계 어디에서나 미디어 라이브러리에 안전하고 쉽게 액세스하고 동기화할 수 있는 솔루션을 제공합니다. Immich의 모바일 애플리케이션의 자동 동기화 기능은 배경 업로드를 원활하게하며 수동 개입없이 미디어가 항상 백업되도록 보장합니다. 이 설정은 원격 액세스의 편리함을 유지하면서 데이터에 대한 완전한 제어를 보장합니다. Tailscale의 강력한 보안 기능과 간편한 구성을 통해 전통적인 VPN이나 포트 포워딩 설정의 번거로움없이 자체 호스팅 미디어 서버의 이점을 즐길 수 있습니다.\nTailscale을 활용하여 라즈베리 파이를 강력하고 접근성이 있는 미디어 허브로 변신시킬 수 있으며 상용 클라우드 서비스와 견줄 만한 라이벌이 될 수 있습니다. Immich의 자동 동기화 기능과 Tailscale의 안전한 연결이 결합되어 개인 미디어 라이브러리를 효과적이고 효율적으로 관리할 수 있는 포괄적인 솔루션을 제공합니다.","ogImage":{"url":"/assets/img/2024-05-27-AccessingandSyncingYourImmichLibraryfromAnywherewithTailscale_0.png"},"coverImage":"/assets/img/2024-05-27-AccessingandSyncingYourImmichLibraryfromAnywherewithTailscale_0.png","tag":["Tech"],"readingTime":4},{"title":"내 끝내지 못한 프로젝트에 대한 추모","description":"","date":"2024-05-27 13:48","slug":"2024-05-27-Amemorialtomyunfinishedproject","content":"\n\n# 모든 것 그리고 내가 버린 모든 것)\n\n지난 주에, 거의 완성된 크로셰 프로젝트를 버렸어요. 기분이 좋지 않았어요.\n\n그것은 몇 년 전에 기본 가디건이었던 것인데, 그때는 팬데믹의 봉쇄 기간 동안 시작한 것이었어요. 프로젝트를 멈춘 것은 모든 별도의 패널들을 함께 꿰매는 마지막 단계였어요. 불행하게도, 그때까지 제 작품에서 발견한 주요 실수들을 알아차릴 때 너무 늦었어요.\n\n<img src=\"/assets/img/2024-05-27-Amemorialtomyunfinishedproject_0.png\" />\n\n<div class=\"content-ad\"></div>\n\n일단, 얀 염색 로트가 일치하지 않았어요. 앞 패널의 절반은 다른 카디건 부분의 푸르스름한 회색 대신 분홍 회색이었어요. 낮에는 색 차이가 뚜렷했어요. 마치 주머니에 빨간 양말이 들어있는 채로 세탁기에 세탁된 것처럼 보였어요. \n\n그리고 한 쪽 앞 패널이 다른 쪽보다 짧았어요. 그것도 조금이 아니라, 약 다섯 인치나 짧았어요. 얼룩의 긴장이 감정 수준의 지표이라면, 그 때 저는 정말 스트레스가 많았나 봐요.\n\n이런 일들에 대한 해결책은 있어요: Rit 직물 염료 상자나 직물을 전략적으로 늘리고 블로킹하는 것 등이요. 그리고 정말 좋은 해결책 없을 때는 항상 작품을 풀어서 얀을 회수하고 새로 시작할 수 있어요. 그러나 이 경우에는 얀도 정말 싫었어요. 미끄럼성이 있고, 쪼개지기 쉬웠고, 일 처리하기 어려웠어요. 분명 구할 가치가 없었어요.\n\n완전히 좌절하여, 공예 물품 바구니에 프로젝트를 놓고 나중에 돌아오자고 다짐했어요.\n\n<div class=\"content-ad\"></div>\n\n훨씬, 훨씬 후에.\n\n구체적으로는 3년 후에요.\n\n![Image](/assets/img/2024-05-27-Amemorialtomyunfinishedproject_1.png)\n\n마침내 그것으로 돌아왔어요. 보관 중에 약간 먼지가 쌓였고, 내게는 쓰릴 듯한 쓸쓸함이 모였어요. 모든 장인은 재료가 싸지 않다는 걸 알아요. 그런데 비용을 어떻게 상환할 수 있을지는 몰라도, 나의 시간과 노력은 다시 얻을 수 없어요.\n\n<div class=\"content-ad\"></div>\n\n하지만 물론, 제 분노의 진짜 대상은 제 프로젝트가 아니라 제 자신의 나쁜, 잘못된 결정이었습니다. 선택을 해야 했어요. 제 분노와 후회에 집착할 수도 있었고, 영원히 놓아줄 수도 있었어요.\n\n그래서 난 가디건을 쓰레기통에 넣었어요.\n\n쓰레기통 위를 맴돌며, 나는 얼마나 많은 사람들이 같은 경험을 했는지 궁금했어요. 공예가로만이 아니라 물건을 사고 소유한 사람으로서 일반적으로 경험했을지도 몰랐어요. 난 얼마나 많은 다른 사람들이 원치 않는 비용이 많이든 물건을 범죄자처럼 쓰레기통에 버린 적이 있는지 궁금해졌어요. \n\n![이미지](/assets/img/2024-05-27-Amemorialtomyunfinishedproject_2.png)\n\n<div class=\"content-ad\"></div>\n\n하지만 이 순간을 범죄 현장이 아닌 기념비로 취급하기로 결심했어요. 시간과 재료가 낭비된 것은 사실이지만, 이로부터 얻은 경험은 낭비되지 않았답니다.\n\n내 마무리되지 않은 가디건은 많은 것을 가르쳐 주었어요. 프로젝트를 시작하기 전에 더 많은 조사를 하고, 염색배치와 게이지에 더 근면해지는 법을 배웠어요. 이것들은 시간이 흐를수록 나에게 큰 도움이 되는 교훈들이에요, 비록 그 소스가 되는 프로젝트가 궁극적으로 쓰레기였든 말이에요.\n\n나는 버린 모든 것들과 낭비해온 것을 곰곰히 생각했어요. 그것들로부터 무슨 교훈을 얻을 수 있었을까요? 아마 임펄시브하게 구입하는 대신 미니 와플 제조기를 사고서 생각해볼 것이었지요. 아마 모든 살사와 피클병 대신 새로운 메이슨 브랜드 케이스를 사는 대신 재활용할 수 있었을 거예요. 아마 신체에 잘 맞지 않은 저렴하고 빠른 패션 스웨터보다는 잘 만들어진 터틀넥 스웨터에 투자했어야 했을지도 몰라요.\n\n하지만 그 구멍에 왕따지기하지 마세요. 배우고 나아갈 때가 훨씬 좋아요.\n\n<div class=\"content-ad\"></div>\n\n그럼 이제 안녕, 옛 카디건! 안녕, 미완성 작품! 내게 함께한 시간이 끝났지만, 너희의 교훈은 계속되리라.\n\n고마워.\n\n그리고 평화롭게 쉬어가세요.","ogImage":{"url":"/assets/img/2024-05-27-Amemorialtomyunfinishedproject_0.png"},"coverImage":"/assets/img/2024-05-27-Amemorialtomyunfinishedproject_0.png","tag":["Tech"],"readingTime":3},{"title":"물 한 방울씩 절약하기","description":"","date":"2024-05-27 13:48","slug":"2024-05-27-SAVINGWATERDROPBYDROP","content":"\n\n<img src=\"/assets/img/2024-05-27-SAVINGWATERDROPBYDROP_0.png\" />\n\n팔라모스, 히로나, 스페인 지역의 지역 수도 사무소에서 받은 이메일입니다. 이해하지 못해도 걱정하지 마세요. 이 지역은 카탈루냐어로 대부분의 통지가 작성됩니다.\n\n최근 세 날 동안 제 물 공급 시스템의 일부가 계속 실행되고 있다고 합니다. 정말 똑똑한 시스템이죠, 그렇죠?\n\n그런 다음 \"fuga\"를 확인하는 방법에 대해 안내합니다. 이는 누출을 의미합니다. 이전에도 여러 번 있었던 문제에 대한 것으로 누출이 아니라 고장이었습니다. 저희 물은 칼슘 악화가 심하게 발생하여 시스템의 여러 부분에 축적됩니다. 아내가 화장실 중 하나가 계속 작동 중이라고 이미 말해 주었었어요. 변기 물조절 장치의 분리 핀을 빼고 고무 밀봉판에 어떤 결정이 달라붙어 있는 것을 발견했습니다. 10분 정도 소요되는 남은 작업을 했더니 고쳐졌어요.\n\n<div class=\"content-ad\"></div>\n\n스페인에 대해 생각하는 많은 사람들이 프랑코 시대에 뒤쳐졌다고 생각합니다. 하지만 그것은 사실과는 거리가 멉니다. 우리는 하이테크 생산 분야에서 세계 리더는 아니지만 응용 분야에서는 세계 리더입니다. 우리 나라의 모든 집은 유틸리티 공급 업체에 연결된 디지털 미터를 통해 전력 공급 및 상수도 공급에 연결되어 있습니다.\n\n따라서 어떠한 불규칙성도 자동으로 반응합니다. 스페인에서 물은 50년 이상 계량되어 왔지만 지난 3년 동안 매우 심각한 가뭄이 있었습니다. 그래서 모든 한 방울이 중요합니다. 이런 “Fuga” 통지를 받안 때는 보통 골칫거리입니다. 저희 집에는 화장실이 12개, 세면대가 12개, 욕조나 샤워실이 12개, 정원 호스가 2개, 지붕에 3개의 저장탱크, 전기 온수기가 4개, 그리고 PVC 파이프 연결은 몇 개인지 모릅니다. 이번에는 쉬웠어요.\n\n몇 년 전에 미친 상황이 있었어요. 거리 맞은편 두 채짜리 집을 철거할 때였죠. 굴착기가 상수도 메인을 들어올린 후 운전수는 새로운 후버 댐을 만드는 것에 대해 알아차리지 못 했습니다. 저는 수도 사무실에 전화를 걸어서 상태를 알리니, 명랑해 보이는 어린 남자가 나왔어요. 그는 제가 물 미터와 설치물을 모두 점검하도록 요구했습니다. 나는 우리 발코니에서 물 분수를 보며 거리가 가라앉아가는 것을 지켜보았습니다. 내가 그 어린 남자에게 매우 무례했죠! 그가 문제를 일으킨 것은 나가 아니라 물 회사인 것을 납득시키기도 했습니다.\n\n한편, 물 누수 문제가 해결되었다는 자동 통지를 받았어요. 따라서 변기 탱크 밸브 청소가 작용한 것 같아요.\n\n<div class=\"content-ad\"></div>\n\n저는 DIY를 즐기는 것을 좋아해요. 하지만 배관 공사는 정말로 싫어해요.\n이제는 조금의 그림 그리기를 할 예정이에요. 제 이야기가 즐거웠으면 좋겠어요. 현재 Medium에서 여러 주제에 관한 이야기가 거의 70편 있어요. 모두 무료로 읽을 수 있어요.","ogImage":{"url":"/assets/img/2024-05-27-SAVINGWATERDROPBYDROP_0.png"},"coverImage":"/assets/img/2024-05-27-SAVINGWATERDROPBYDROP_0.png","tag":["Tech"],"readingTime":2},{"title":"도커 컴포즈로 Nextcloud를 배포하기","description":"","date":"2024-05-27 13:46","slug":"2024-05-27-DeployNextcloudwithDockerCompose","content":"\n\nDIY, 실험, 그리고 학습을 즐기며, Google Drive와 One Drive를 대체하기 위해 Nextcloud 서버를 설정했어요. 몇 년 동안 제 Nextcloud 인스턴스는 백업된 파일, 연락처, 캘린더, 노트 등이 모두 모여 있는 집이 되었고, Collabora 덕분에 서버에는 사무실 스위트도 갖췄네요.\n\nNextcloud는 여러 서비스에 대한 멋진 오픈 소스 대안일 수 있어요.\n\n좋은 점이든 나쁜 점이든, 저는 도커 컨테이너를 사용해 홈 서버에 Nextcloud를 배포하기로 결정했어요. 도커 경험을 쌓고자 하거나 Nextcloud 배포를 위한 도커 컴포즈 파일을 설정하는 방법을 찾고 있다면, 여기가 바로 옳은 장소에요.\n\n다음은 docker-compose.yml입니다.\n\n<div class=\"content-ad\"></div>\n\n```yaml\n---\nversion: '3'\n\nservices:\n  nextcloud:\n    image: nextcloud\n    container_name: nextcloud\n    restart: unless-stopped\n    networks: \n      - cloud\n    depends_on:\n      - nextclouddb\n      - redis\n    ports:\n      - 8081:80\n    volumes:\n      - ./html:/var/www/html\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./config:/var/www/html/config\n      - ./data:/var/www/html/data\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=dbpassword\n      - MYSQL_HOST=nextclouddb\n      - REDIS_HOST=redis\n\n  nextclouddb:\n    image: mariadb\n    container_name: nextcloud-db\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW\n    networks: \n      - cloud\n    volumes:\n      - ./nextclouddb:/var/lib/mysql\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n      - MYSQL_RANDOM_ROOT_PASSWORD=true\n      - MYSQL_PASSWORD=dbpassword\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      \n  collabora:\n    image: collabora/code\n    container_name: collabora\n    restart: unless-stopped\n    networks: \n      - cloud\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n      - password=password\n      - username=nextcloud\n      - domain=example.com\n      - extra_params=--o:ssl.enable=true\n    ports:\n      - 9980:9980\n\n  redis:\n    image: redis:alpine\n    container_name: redis\n    volumes:\n      - ./redis:/data  \n    networks: \n      - cloud\n  \n  nginx-proxy:\n    image: 'jc21/nginx-proxy-manager:latest'\n    container_name: nginx-proxy\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n    restart: unless-stopped\n    ports:\n      - '80:80'\n      - '81:81'\n      - '443:443'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n\nnetworks:\n  cloud:\n    name: cloud\n    driver: bridge\n```\n\n알겠어요. 이제 한 번 살펴볼게요.\n\n이 Docker Compose 파일은 5개의 컨테이너를 배포합니다. 그들은 다음과 같습니다:\n\n- Nextcloud\n- Nextcloud에 필요한 MySQL 데이터베이스\n- Collabora - 구글 문서와 유사한 멋진 오픈 소스 오피스 스위트입니다. Collabora Office에는 모바일 앱도 있습니다.\n- Redis - 메모리 캐싱입니다. 중요한 파일을 다음 클라우드에 의존할 계획이라면 Redis를 설정하는 것을 강력히 권장합니다.\n- Nginx Proxy Manager - 서버로 들어오는 요청을 처리하는 리버스 프록시 매니저입니다.\n\n\n<div class=\"content-ad\"></div>\n\n## 도커 컴포즈\n\n각 줄이 하는 일에 대한 간단한 설명.\n\nNextcloud:\n\n```js\nnextcloud:\n    image: nextcloud # 사용할 이미지입니다. 공식 Nextcloud 도커 이미지\n    container_name: nextcloud # 컨테이너의 이름입니다. 식별하는 데 도움이 됩니다\n    restart: unless-stopped # 컨테이너가 충돌하는 등의 문제가 발생하면 다시 시작되도록 설정\n    networks: # 모든 컨테이너를 \"cloud\" 네트워크를 통해 연결합니다\n      - cloud\n    depends_on: # Nextcloud를 시작하기 전에 데이터베이스와 레디스 컨테이너가 준비될 때까지 기다립니다\n      - nextclouddb \n      - redis\n    ports: # 서버에 여러 웹 서비스가 있다면 포트를 변경해야 합니다. 저는 Nextcloud를 포트 80에서 8081로 연결하고 있습니다\n      - 8081:80\n    volumes: # 이 부분은 중요합니다. 컨테이너 내의 파일 디렉토리를 실제 컴퓨터의 디렉토리에 매핑합니다\n      - ./html:/var/www/html # 컨테이너 내의 /var/www/html 디렉토리를 docker-compose.yml 파일이 있는 폴더 내의 html 폴더에 매핑합니다\n      - ./custom_apps:/var/www/html/custom_apps # 이러한 볼륨을 사용하면 컨테이너 내의 파일에 쉽게 액세스할 수 있습니다\n      - ./config:/var/www/html/config\n      - ./data:/var/www/html/data\n    environment: # 환경 변수 설정\n      - PUID=1000 # 사용자 ID입니다. 아마도 둘 다 1000이어야 합니다. 이를 잘못 설정하면 파일 권한 문제가 발생할 수 있습니다\n      - PGID=1000 # 사용자 ID를 설정하세요.\n      - TZ=America/Los_Angeles # 사용하는 시간대를 설정하세요\n      - MYSQL_DATABASE=nextcloud # 다음 섹션에서 설정할 데이터베이스 정보입니다\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=dbpassword\n      - MYSQL_HOST=nextclouddb\n      - REDIS_HOST=redis # 사용할 Redis 컨테이너\n```\n\n<div class=\"content-ad\"></div>\n\nNextcloud 데이터베이스:\n\n```yaml\nnextclouddb:\n    image: mariadb # 공식 mariadb 이미지\n    container_name: nextcloud-db \n    restart: unless-stopped \n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW # 정말 기억이 나지 않아요. 알고 계시면 알려주세요.\n    networks: \n      - cloud\n    volumes:\n      - ./nextclouddb:/var/lib/mysql\n    environment:\n      - PUID=1000 # 다른 컨테이너와 동일해야 함\n      - PGID=1000\n      - TZ=America/Los_Angeles\n      - MYSQL_RANDOM_ROOT_PASSWORD=true\n      - MYSQL_PASSWORD=dbpassword # Nextcloud 부분에 입력한 정보와 같아야 함\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n```\n\nCollabora (선택 사항, 하지만 정말 멋짐):\n\n```yaml\ncollabora:\n    image: collabora/code:latest\n    container_name: collabora\n    restart: unless-stopped\n    networks: \n      - cloud\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles # 다른 것과 동일해야 함\n      - password=password \n      - username=nextcloud\n      - domain=example.com # Nextcloud가 있는 도메인\n      - extra_params=--o:ssl.enable=true # SSL을 사용하는 경우에 사용합니다. 꼭 사용해야 합니다.\n    ports:\n      - 9980:9980\n```\n\n<div class=\"content-ad\"></div>\n\nRedis (선택 사항이지만, 진지하게, 추가하세요. 파일 잠금 문제가 나타날 수 있으며 Redis가 이를 방지해줄 것입니다):\n\n```js\nredis:\n    image: redis:alpine\n    container_name: redis\n    volumes:\n      - ./redis:/data  \n    networks: \n      - cloud\n```\n\nNginx Proxy Manager:\n\n```js\nnginx-proxy:\n    image: 'jc21/nginx-proxy-manager:latest'\n    container_name: nginx-proxy\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=America/Los_Angeles\n    restart: unless-stopped\n    ports:\n      - '80:80'\n      - '81:81'\n      - '443:443'\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n```\n\n<div class=\"content-ad\"></div>\n\nNginx Proxy Manager는 서버로 들어오는 트래픽을 Nextcloud로 전달하는 멋진 프로그램이에요. 새 호스트를 추가해보세요.\n\n세부 정보 패널에 도메인 이름을 입력해주세요.\n\nScheme = http, Forward Hostname = 이용 중인 기기의 로컬 IP 주소(예: 192.168.1.35), 전달할 포트 = 80.\n\n자산 캐시, 일반적인 공격 차단, 웹소켓 지원은 모두 켜두시는 게 좋아요.\n\n<div class=\"content-ad\"></div>\n\n\"맞춤 위치\" 탭에서 caldav와 carddav를 활성화하여 캘린더와 연락처에 대한 원격 액세스를 허용할 예정입니다.\n\n위치 1:\n\n- 위치 = /.well-known/caldav\n- 스킴 = html\n- 전방 호스트 이름 = `로컬 IP`/ remote.php/dav\n- 전방 포트 80\n\n위치 2:\n\n<div class=\"content-ad\"></div>\n\n- 위치 = /.well-known/carddav\n- scheme = html\n- 전달 호스트 이름 = `로컬 IP`/ remote.php/dav\n- 전달 포트 80\n\n## 추가 구성\n\n이제 Nextcloud를 사용자 정의 도메인과 함께 사용하도록 설정하는 경우 config.php 파일을 열어 신뢰할 수있는 도메인을 사용자의 도메인으로 변경해야합니다.\n\nNextcloud를 네트워크에서 액세스하려는 경우 Nextcloud의 로컬 IP 주소를 추가하는 것이 유용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n'trusted_domains' => \narray (\n 0 => 'example.com',\n 1 => '192.168.1.12:8081',\n),\n'overwritehost' => 'example.com',\n'overwriteprotocol' => 'https',\n```\n\nNiginx Proxy Manager이 설정되어 있으므로 config.php 파일에 다음을 추가해야 합니다:\n\n```js\n'default_phone_region' => 'US',\n'trustedproxies' => \narray (\n 0 => 'NginxProxyManager',\n 1 => '192.168.0.145',\n),\n```\n\n일부 경고를 해결하려면 다음을 수행해야 합니다:\n  \n\n<div class=\"content-ad\"></div>\n\n```js\n 'default_phone_region' => 'US', \n```\n\n메일 알림을 설정하려면 구성 파일에 다음을 추가해야 합니다. 필요한 값은 이메일 공급업체에서 얻어야 합니다.\n\n```js\n 'mail_from_address' => 'user', # 이메일 사용자를 입력하세요\n 'mail_smtpmode' => 'smtp',\n 'mail_sendmailmode' => 'smtp',\n 'mail_domain' => 'example.com', # 귀하의 이메일 도메인\n 'mail_smtphost' => 'smtp.example.com',\n 'mail_smtpport' => '465',\n 'mail_smtpauth' => 1,\n 'mail_smtpsecure' => 'ssl',\n 'mail_smtpname' => 'user@example.com',\n 'mail_smtppassword' => '비밀번호',\n```\n\n## 컨테이너 실행하기\n\n\n<div class=\"content-ad\"></div>\n\n```yaml\ndocker-compose up -d\n```\n\n축하합니다! Docker 컨테이너와 docker compose를 사용하여 Nextcloud를 설정했습니다! 궁금한 점이 있으면 언제든지 물어보세요.\n\n## 잠재적인 문제점\n\n- 502 Gateway 오류가 발생하면 호스트 서버의 도메인에 대한 브라우저 쿠키를 지워보세요. 대부분의 경우에 도움이 됩니다.\n- 정기적으로 Docker 이미지를 업데이트해야 합니다. Docker에서는 Nextcloud의 버전을 한 번에 건너뛸 수 없습니다. 예를 들어, 현재 버전이 24이고 가장 최신 버전이 26인 경우, 바로 26으로 업데이트하지 마세요. 저는 이를 까다로운 방법으로 배웠습니다. 먼저 25로 업데이트하세요. 그래서 정기적으로 `docker-compose pull` 명령을 실행해 주세요.","ogImage":{"url":"/assets/img/2024-05-27-DeployNextcloudwithDockerCompose_0.png"},"coverImage":"/assets/img/2024-05-27-DeployNextcloudwithDockerCompose_0.png","tag":["Tech"],"readingTime":8},{"title":"텍스트를 움직여 발견한 시의 이야기","description":"","date":"2024-05-27 13:46","slug":"2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround","content":"\n## 창의성\n\n![이미지](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_0.png)\n\n지난 주말에 새 시를 썼어요. 다름이 아니라 식탁에서 일하면서 며칠 동안 시가 완성되었죠. 만약 식탁을 보셨다면 시를 쓰는 게 아니라 공예 프로젝트를 하고 있는 것 같을 거에요.\n\n![이미지](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_1.png)\n\n<div class=\"content-ad\"></div>\n\n태그를 마크다운 형식으로 변경하십시오.\n\n<div class=\"content-ad\"></div>\n\n그대의 곁 — 선물같은 근접함을 얻어,\n문을 두드리며 함께해요. 방 안에서\n\n우리는 완벽한 잠 자는 달 같아.\n\n자, 이 텍스트를 내가 테이블 위에 모두 놓아 놨을 때의 모습 그대로 전달해볼게. 다양한 글꼴을 보는 것도 멋진 것 같아요 — 그리고 각 라인이 어디서 왔는지 상상하는 것도 재미있어요.\n\n특히 손글씨와 인쇄체 텍스트를 조합하는 것을 특히 좋아해요. 텍스트를 이리저리 움직여 나의 단어가 새로운 아이디어를 불러들이는 더 무작위한 단어들과 상호 작용하게 되어 시인으로서 더 창의적이고 몰입된 느낌을 받을 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_2.png)\n\n요즘 몇 달 동안 쓰기에 애를 먹고 있었는데, 최근에 텍스트 줄들을 물리적으로 이동시키는 건 해방감을 느끼게 해줬어요. 최근에 텍스트로 가져다 쓰는 것들로는, 제 손글씨로 노트나 인덱스 카드에서 자른 줄들, 최근 드래프트/시를 출력한 것들로부터 타이핑된 줄들, 그리고 이웃에 있는 리틀 프리 라이브러리에서 우연히 찾은 책과 잡지의 줄들을 사용하고 있어요.\n\n글을 쓰고 싶지만 작성은 하고 싶지 않은 때에 줄들을 잘라내는 것도 좋아요. 이 활동은 TV를 보거나 오디오북을 듣는 시간에 딱 좋아요.\n\n테이블에 시를 펼친 다음, 사진을 찍고 컴퓨터 파일에 저장할 텍스트를 타이핑해요. 그리고 물리적인 텍스트를 어떻게/어디에 붙이고 저장할지 결정해요. 항상 저장하지는 않아요 — 때로는 텍스트 줄들을 다시 잘라내기 모아 둔 모음집에 넣기도 해요. 하지만 대부분의 경우에는 어렵지 않게 내 붙이기 같은 작은 수제 책(짠) 만들기 위해 글 붙이를 꺼내고 줄들을 플라스틱으로 엮은 잡지에서 찢어진 한 장으로 접은 책을 만들어 붙여요.\n\n<div class=\"content-ad\"></div>\n\n\n![이동하는 텍스트로 찾은 시 이야기](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_3.png)\n\n![이동하는 텍스트로 찾은 시 이야기](/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_4.png)\n\n가끔은 한 장에 전체 시를 콜라주하기도 합니다. 작은 노트북이나 스케치북의 일부로 남겨두기도 해요. 짧은 시의 경우, 시 전체 텍스트를 5x7인치 색인 카드에 맞출 수 있어요. 일부는 카드 위에 콜라주를 먼저 해요 (다른 일을 하면서 보거나 들을 때 하는 좋은 활동이기도 해요).\n\n나에게 중요한 이 작업의 다른 부분은 시를 출력하고 한 줄씩 자르는 과정을 통해, 개인적으로 너무 민감하다고 느껴지거나 원래 완성된 형태로는 (적어도 지금은) 공개하거나 발표하기가 어려웠던 시를 다시 작업해 볼 수 있다는 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n노트북에서 손으로 쓴 글도 이런 방식으로 사용할 수 있어요. 보통 나의 일기에서 편집되지 않은 글을 공유하지는 않지만, 라인을 잘라내고 그것들이 가끔 어떻게 새로운 시의 맥락에서 작동할 수 있는지 찾아내는 과정이 좋아요. 이 과정을 통해 서로 다른 텍스트 조각들을 교차로 배치하면서 형성되는 시를 통해 아이디어와 테마에 대해 더 의식적으로 생각하게 됩니다.\n\n또한, 이러한 재활용과 재상상이 나에게 내 시에 반복에 대해 더 의식적으로 생각하게 해줍니다. 고의적으로 잘라내고 재사용할 수 있는 구체적인 단어들 뿐만 아니라 아이디어와 주제의 반복에 대해서도 말이죠. 이와 같은 아이디어를 다시 살펴보고 다양한 표현 수단을 시도해보는 것을 좋아해요.\n\n이러한 공예적 과정을 통해 나에게 개인적이고 독특한 글을 쓸 수 있지만, 작품에 대한 작은 예술적 거리를 두어 나의 시에 쉽게 가져오지 못했던 경험과 감정에 대해 쓰는 데 더 편안함을 느끼게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n글을 읽는 독자들에게 너무 간접적일 수 있지만, 저는 최종적으로 공유하게 된 시에 숨어있는 레이어들을 알고 있어요. 이야기에서 선택한 시를 읽어 주셔서 감사드리며, 그 창작 과정에 대한 설명까지 함께 공유하게 되어 기쁩니다.\n\n창의적인 과정을 어떻게 변화시켜 왔는지, 더 풀어지거나 자유로워지거나 더 접근하기 쉬운 방식으로 글을 쓸 수 있었나요?\n\n댓글에서 여러분의 경험에 대해 듣고 싶어요 — 물론, 공유하고 싶은 더 긴 이야기가 있다면 언제든지 The DIY Diaries로 보내주시면 항상 환영합니다.\n","ogImage":{"url":"/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_0.png"},"coverImage":"/assets/img/2024-05-27-TheStoryofaPoemIFoundbyMovingTextAround_0.png","tag":["Tech"],"readingTime":3},{"title":"각 AI에게 맞는 Python","description":"","date":"2024-05-27 13:44","slug":"2024-05-27-ToeachAIitsownPython","content":"\n![2024-05-27-ToeachAIitsownPython_0](/assets/img/2024-05-27-ToeachAIitsownPython_0.png)\n\n약간 까다로운 주제로 보일 수 있지만 믿거나 말거나, AI 애플리케이션을 구축하는 데 발생하는 문제의 90%는 Python 종속성 때문이죠.\n\n어제까지 잘 작동하던 AI 앱을 시험했는데 갑자기 모든 게 망가졌다고 합니다! 원인을 찾고 코드를 디버깅하려고 애쓰지만... 아마도 문제는 단순히 파이썬 라이브러리 업데이트 때문인 것 같아요!\n\n5가지 다른 파이썬 버전을 설치하지 않고도 문제를 해결할 수 있는 방법을 찾았습니다. 이제 한 번에 모든 문제를 해결할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 파이썬 임베디드 만나보기\n\n임베디드 배포는 최소한의 파이썬 환경이 포함된 ZIP 파일입니다. 이는 최종 사용자가 직접 액세스하는 대신 다른 응용 프로그램의 일부로 작동하기 위해 설계되었습니다.\n\n이 조금 단조로운 ZIP 파일에는 pip가 없기 때문에 의존성을 설치할 수 없습니다.\n\n하지만 우리가 pip를 사용할 수 있다고 가정해 봅시다... 여전히 소스에서 패키지를 빌드할 수 없습니다: 이미 컴파일된 휠 패키지를 얻으면 문제가 전혀 없지만 설치에 빌드가 필요한 경우에는 할 수 없습니다.\n\n<div class=\"content-ad\"></div>\n\n하지만 이 문제에 대한 해결책이 있습니다.\n\n# 실제 시나리오\n\n내 게시물 중 몇 가지를 따라가보면, 거의 항상 Python 3.10을 사용한다는 것을 알 수 있을 것입니다. 내가 그것에 집착하는 것이 아닌... 단지 몇 주 전까지는 sentence-piece 라이브러리가 더 높은 Python 버전을 사용하려고 할 때마다 망가졌기 때문입니다.\n\n동시에, 웹 서버를 구축하는 동안 Protobuf가 모든 API 호출을 망가뜨리는 바람에 Streamlit 버전 1.27.0 이전을 사용해야 했습니다.\n\n<div class=\"content-ad\"></div>\n\n그럼 어떻게 해야 할까요? Windows 기계에 여러 Python 버전을 설치하는 것은 Linux/Mac OS보다 조금 까다로울 수 있습니다. PATH에 추가해야 하며, 이는 명령어로 작업하는 데 영향을 줄 것입니다.\n\n해결책은 적어도 두 가지가 있습니다.\n\n# 1 Python을 독립적으로 사용\n\n컴파일해야 할 패키지가 없다는 것을 알면 이 옵션이 가장 안전합니다. 공식 ZIP 파일을 추출하고, 약간의 해킹을 한 후에 작업이 끝납니다.\n\n<div class=\"content-ad\"></div>\n\n예시: OpenAI 호환 API에 연결되는 Streamlit 앱을 만들어보세요.\n\n이 시나리오에서는 최신 Streamlit 버전(1.34.0)을 사용하고자 합니다. 이 버전은 완전한 채팅 인터페이스 지원, 텍스트 스트리머 및 새로운 스타일 관리 기능을 제공합니다. 이를 위해서는 Python 3.11+이 필요합니다.\n\n브랜드 네임 폴더(저는 pythontests라고 이름 짓겠습니다)를 생성하고, 공식 페이지에서 Python 3.11.7 Embedded를 다운로드하세요. 제 시스템은 64비트 미니PC이므로, 64비트용 ZIP 아카이브를 다운로드할 것입니다.\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_1.png)\n\n<div class=\"content-ad\"></div>\n\n지금 ZIP 파일을 python311이라는 하위 폴더로 푸실 수 있어요.\n\n만약 Windows 터미널을 사용 중이시라면, Windows 11에 있는 것처럼 터미널 창에서 아카이브를 푸실 수도 있어요:\n\n```js\nExpand-Archive -Force .\\python-3.11.7-embed-amd64.zip .\\python311\n```\n\n이제 새로운 Python 인터프리터를 바로 사용하실 수 있어요! pythontests 폴더에서 터미널을 열고 아래 명령어를 실행하면 됩니다:\n\n<div class=\"content-ad\"></div>\n\n\n.\\python311\\python.exe\n\n\n![ToeachAIitsownPython_2](/assets/img/2024-05-27-ToeachAIitsownPython_2.png)\n\nThis portable version cannot install pip dependencies. Try and you will see an annoying message:\n\n![ToeachAIitsownPython_3](/assets/img/2024-05-27-ToeachAIitsownPython_3.png)\n\n\n\n<div class=\"content-ad\"></div>\n\n## 내장 Python에 pip를 설치하는 것은 쉽습니다. 먼저 새롭게 추출한 python311 디렉토리 내부의 python311._pth 파일을 편집해야 합니다.\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_4.png)\n\n그런 다음 텍스트 파일 맨 위에 Lib/site-packages를 추가하고 site를 import하는 마지막 줄의 주석을 해제해야 합니다.\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_5.png)\n\n<div class=\"content-ad\"></div>\n\n이제 python311 폴더 안으로 이동하여 터미널에서 아래 curl 명령어를 실행하여 get-pip.py 파일을 설치하세요. 이 파일은 임베디드 파이썬에 pip 지원을 추가하는 데 필요합니다.\n\n```js\ncd .\\python311\\\n\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n```\n\n마지막으로 python311 폴더에서 python.exe get-pip.py를 실행하세요.\n\n지금은 pip 패키지를 설치하는 것이 평소와 같습니다. 임베디드 Python 폴더에서 Python 실행 파일을 사용하는지 확실하게 확인하세요.\n\n<div class=\"content-ad\"></div>\n\n예를 들어:\n\n\n# 메인 프로젝트 디렉토리인 pythontests 안에서\n.\\python311\\python.exe -m pip install streamlit==1.34.0\n\n# python311 디렉토리에서\npython.exe -m pip install openai\n\n\n참고: 여기서는 아주 잘 작동하지만 여전히 문제가 있습니다. 미리 빌드된 휠을 제공하지 않는 종류의 패키지를 설치할 수 없습니다. 예를 들어, 저는 llama-cpp-python의 팬인데, 최신 버전 0.2.75는 미리 빌드된 휠이 제공되지 않습니다.\n\n어떻게 사용해야 하나요?\n\n<div class=\"content-ad\"></div>\n\n파이썬 프로젝트를 함께 보내려면 동료나 친구들에게 venv을 전달할 수 없습니다. 장치된 Python 디렉토리에 종속성을 설치하면 상대 경로로 종속성을 유지하며... 주요 폴더를 이동하더라도 아무것도 깨지지 않습니다.\n\n![image](/assets/img/2024-05-27-ToeachAIitsownPython_6.png)\n\n## 2. Embedded Python 사용하여 가상 환경 만들기\n\n개인적으로 생각해보면, 이 두 번째 옵션이 적어도 로컬 프로토타이핑에 있어서 선호되는 옵션입니다. 기본적으로 장치된 Python을 사용하여 선택한 Python 버전으로 가상 환경을 만드는 방법입니다.\n\n<div class=\"content-ad\"></div>\n\n내 세팅을 봐볼까요:\n\n- 미니 PC에는 Python 3.10이 설치되어 있어요.\n- 방금 Python311 버전을 만들었어요.\n\n만약 Python 3.12를 사용하는 가상 환경이 필요하다면 어떻게 하면 될까요?\n\n쉽죠!! 여기에서 Python 3.12를 위한 임베디드 Python을 다운로드합시다. ZIP 파일 다운로드를 위해 동일한 pythontests 디렉토리를 사용해볼까요? 터미널에서도 같은 작업을 할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n\nwget https://www.python.org/ftp/python/3.12.2/python-3.12.2-embed-amd64.zip -OutFile python-3.12.2-embed-amd64.zip\n\n\n터미널에서 ZIP 파일을 새 폴더로 압축 해제할 수도 있어요:\n\n\nExpand-Archive -Force .\\python-3.12.2-embed-amd64.zip .\\python312\n\n\n지금은 우리의 테스트 폴더에 pip 패키지와 이미 몇 개의 다른 패키지(streamlit, openai, llama-cpp-python)가 설치된 python311과 아직 pip조차 지원하지 않는 새로운 휴대용 Python이 있어요...\n\n\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_7.png)\n\n그리고 가상 환경을 지원하지 않습니다!\n\n그래서 첫 번째 단계는 python312가 pip 패키지를 다운로드할 수 있는지 확인하는 것입니다. python312 디렉토리로 이동하고 python312._pth를 이전과 동일하게 변경하십시오.\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_8.png)\n\n<div class=\"content-ad\"></div>\n\n터미널 창 안에서 python312 디렉토리 내에서 유명한 get-pip.py를 다운로드하고 명령을 실행합니다.\n\n```js\ncd .\\python312\\\n\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n\n.\\python.exe .\\get-pip.py\n```\n\n## 휴대용 Python 내에 virtualenv 설치하기\n\n내장된 Python에는 venv 도구가 필요합니다. 전통적인 방식으로 Python을 설치하면 이미 이 도구가 함께 제공됩니다.\n\n<div class=\"content-ad\"></div>\n\n저희 경우에는 해당하는 기능이 없지만 간단히 다음과 같이 할 수 있어요.\n\n```js\n.\\python.exe -m pip install virtualenv\n```\n\n휴대용 파이썬으로 가상 환경 생성하기\n\n이제 이 단계에 주의해야 해요. python312로 venv를 생성하려면 가상 환경을 만들 폴더의 메인 폴더에 있어야 해요. 가상 환경을 main directory인 pythontests 폴더 안에 만들고 싶다고 가정해봅시다.\n\n<div class=\"content-ad\"></div>\n\n터미널에서 프로젝트 폴더를 열고 다음을 실행합니다:\n\n```js\n.\\python312\\python.exe -m virtualenv venv\n```\n\n간단히 활성화하려고 시도해보면 작동 중인 것을 확인할 수 있습니다:\n\n```js\nvenv\\Scripts\\activate\n```\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-27-ToeachAIitsownPython_9.png)\n\n파이썬 버전 확인을 위해 다음 명령어를 실행하세요:\n\n```bash\n.\\venv\\Scripts\\python.exe --version\nPython 3.12.2\n```\n\n# 결론\n\n\n\n<div class=\"content-ad\"></div>\n\n파이썬으로 작업하는 것은 즐겁고 항상 새로운 모험이에요. 이 프로그래밍 언어는 놀라울 만큼 쉽고 인공 지능 애플리케이션을 만드는 데 매우 편리해요.\n\n간단한 해킹을 사용하여 의존성과 설치와 같은 문제조차 해결할 수 있는 것이 놀라울 정도에요. 직접 시도해 보세요!\n\n이 실용적인 기사를 즐겁게 읽었기를 바라요. 이 이야기가 가치 있는 정보를 제공했고 조금이라도 지원하고 싶으면:\n\n- 이 이야기에 많이 박수를 보내주세요\n- 나중에 찾기 쉽도록 기억해야 할 부분을 강조해주세요(나중에 찾기 쉽고 훌륭한 기사 작성에 용이해요)\n- 여기를 클릭하여 자신만의 AI 만드는 방법 배우기, 이 무료 eBook 다운로드 받기\n- 링크를 통해 Medium 회원 가입하기($5/월로 무제한 Medium 이야기 읽기)\n- Medium에서 저를 팔로우하기\n- 내 최신 기사 읽기 https://medium.com/@fabio.matricardi\n\n<div class=\"content-ad\"></div>\n\n더 많은 내용을 보시려면 몇 가지 아이디어가 있습니다:\n\n![Read More](/assets/img/2024-05-27-ToeachAIitsownPython_10.png)\n\n이 이야기는 Generative AI에서 발행되었습니다. LinkedIn에서 연락을 유지하고 Zeniteq를 팔로우하여 최신 AI 이야기를 계속해서 만나보세요.\n\n최신 뉴스 및 생성 AI에 대한 업데이트를 받으시려면 뉴스레터를 구독해주세요. 함께 AI의 미래를 함께 만들어봅시다!\n\n<div class=\"content-ad\"></div>\n\n![2024-05-27-ToeachAIitsownPython_11.png](/assets/img/2024-05-27-ToeachAIitsownPython_11.png)\n\n","ogImage":{"url":"/assets/img/2024-05-27-ToeachAIitsownPython_0.png"},"coverImage":"/assets/img/2024-05-27-ToeachAIitsownPython_0.png","tag":["Tech"],"readingTime":7}],"page":"108","totalPageCount":113,"totalPageGroupCount":6,"lastPageGroup":13,"currentPageGroup":5},"__N_SSG":true}