{"pageProps":{"post":{"title":"Coral Dual Edge TPU를 Frigate를 위해 설정하는 방법","description":"","date":"2024-06-19 18:15","slug":"2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate","content":"\n\n\n![이미지](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_0.png)\n\n# 전체 비디오 튜토리얼\n\n# Coral AI PCIe 가속기 드라이버 설치\n\n여기서부터 모든 것을 간소화하는 이 스크립트를 사용하시면 됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\ncurl -sS https://gist.githubusercontent.com/dataslayermedia/8676e010a9121adaaab8e6dc98bca383/raw/f208dbb5e3efda51b75183c67e8dc857e375234e/Install-Coral-PCIe-Accelerator-TPU-Linux.sh | bash\n```\n\n재부팅\n\n```js\nsudo reboot\n```\n\n장치 확인\n\n<div class=\"content-ad\"></div>\n\n```js\nlspci -nn | grep 089a\n```\n\n![Link](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_1.png)\n\nApex 장치를 확인하세요\n\n```js\nls /dev/apex_*\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_2.png\" />\n\n도커 설치\n\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_3.png\" />\n\n```js\n# 도커의 공식 GPG 키 추가:\nsudo apt-get update\nsudo apt-get install ca-certificates curl gnupg\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n\n# Apt 소스에 저장소 추가:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\\n  $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n```\n\n<div class=\"content-ad\"></div>\n\n```js\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n다음 명령어로 설치를 테스트해보세요.\n\n```js\ndocker ps -a\n```\n\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n# MQTT(Mosquitto) 설치\n\nMQTT 프로토콜은 발행/구독 모델을 사용하여 메시지를 전달하는 가벼운 방법을 제공합니다. 이는 저전력 센서나 휴대폰과 같은 모바일 장치, 임베디드 컴퓨터, 또는 마이크로컨트롤러와 같은 사물인터넷 메시징에 적합합니다.\n\n```js\nsudo apt install mosquitto mosquitto-clients\n```\n\n```js\nsudo systemctl is-enabled mosquitto\nsudo systemctl status mosquitto\n```\n\n<div class=\"content-ad\"></div>\n\n아래와 같이 테이블 태그를 Markdown 형식으로 변경해주세요.\n\n\n![이미지](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_5.png)\n\nMQTT 구성 파일을 편집합니다.\n\n```sh\nvim /etc/mosquitto/mosquitto.conf\n```\n\n이 두 줄을 추가하세요...\n\n\n<div class=\"content-ad\"></div>\n\n\nallow_anonymous true\nlistener 1883\n\n\n설정 파일은 다음과 같이 보일 것입니다...\n\n![이미지](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_6.png)\n\nVIM에서 “:x” 입력 후 엔터 키를 눌러 저장하고 종료하세요.\n\n<div class=\"content-ad\"></div>\n\n서비스를 저장하고 다시 시작하세요\n\n```js\nsystemctl restart mosquitto\n```\n\n# Frigate 설정\n\n![이미지](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_7.png)\n\n<div class=\"content-ad\"></div>\n\n루트 디렉터리에서 \"frigate\"라는 디렉터리를 만들어 config.yml 파일을 추가하세요.\n\n```js\ncd /\nmkdir frigate\ncd /frigate\ntouch config.yml\n```\n\nconfig.yml 파일을 편집하세요.\n\n```js\nmqtt:\n  enabled: True\n  host: 192.168.X.XXX\n  port: 1883\ncameras:\n  eyeofsauron:\n    ffmpeg:\n      # hwaccel_args: preset-vaapi\n      #hwaccel_args:\n      #  - vf:v \"fps=15\"\n      inputs:\n        - path: rtsp://192.168.X.XXX:554/mystream\n          input_args: preset-rtsp-generic\n          roles:\n            - detect\n            - record\n            - rtmp\n    detect:\n      fps: 25\n      enabled: True\n      width: 1280\n      height: 720\ndetectors:\n  coral1:\n    type: edgetpu\n    device: pci:0\n  coral2:\n    type: edgetpu\n    device: pci:1\nobjects:\n  track:\n    - person\n\nrecord:\n  # Optional: 녹화 기능 활성화 (기본값은 아래와 같습니다)\n  # 주의: 설정에서 녹화를 비활성화한 경우, 나중에 UI나 MQTT를 통해 녹화를 켜도 영향이 없습니다.\n  enabled: True\n  # Optional: 정리 실행 간격(분) 설정 (기본값은 아래와 같습니다)\n  # I/O를 최소화하기 위해 디스크에서 녹화 세그먼트를 삭제하는 빈도를 줄이려면 사용할 수 있습니다.\n  expire_interval: 60\n  # Optional: 녹화 보관 설정\n  retain:\n    # Optional: 이벤트와 관계없이 녹화 보관일 수 (기본값은 아래와 같습니다)\n    #참고: 이벤트의 녹화만 유지하려면 이 값을 0으로 설정하고 아래 이벤트 섹션에서 보관을 정의해야 합니다.\n    days: 0\n    # Optional: 보관 모드. 가능한 옵션은 다음과 같습니다: all, motion, active_objects\n    #   all - 모든 활동에 관계없이 모든 녹화 세그먼트를 저장\n    #   motion - 감지된 모션을 가진 모든 녹화 세그먼트를 저장합니다.\n    #   active_objects - 활동/움직이는 객체를 가진 모든 녹화 세그먼트를 저장합니다.\n    #NOTE: 이 모드는 위의 days 설정이 0보다 클 때만 적용됩니다.\n    mode: all\n  # Optional: 이벤트 녹화 설정\n  events:\n    # Optional: 이벤트 이전 시점을 포함할 초 수 (기본값은 아래와 같습니다)\n    pre_capture: 5\n    # Optional: 이벤트 후속 시점을 포함할 초 수 (기본값은 아래와 같습니다)\n    post_capture: 5\n    # Optional: 녹화를 위해 저장할 객체 (기본값: 추적되는 모든 객체)\n    objects:\n      - person\n    # Optional: 지정된 모든 존에 들어간 객체로 녹화를 제한 (기본값: 필수 존 없음)\n    required_zones: []\n    # Optional: 이벤트 녹화 보관 설정\n    retain:\n      # 필수: 기본 보관 일 수 (기본값은 아래와 같습니다)\n      default: 10\n      # Optional: 보관 모드 (기본값은 아래와 같습니다)\n      #   all - 활동 여부에 관계없이 이벤트를 위한 모든 녹화 세그먼트를 저장\n      #   motion - 감지된 모션을 가진 이벤트를 위한 모든 녹화 세그먼트를 저장\n      #   active_objects - 활동/움직이는 객체를 가진 이벤트를 위한 모든 녹화 세그먼트를 저장\n      #NOTE: 카메라의 보관 모드가 여기에서 구성된 모드보다 제한적이면 이 모드가 적용되는 시점에 세그먼트는 이미 삭제됩니다.\n      #       예를 들어, 카메라의 보관 모드가 \"motion\"이면 모션 없는 세그먼트는 저장되지 않으므로 여기에서 모드를 \"all\"로 설정해도 복구되지 않습니다.\n      mode: motion\n      # Optional: 객체별 보관 일 수\n      objects:\n        person: 15\n\n# Optional: 이벤트별 클립 디렉터리에 작성된 jpg 스냅샷에 대한 구성\n#NOTE: 카메라 수준에서 재정의할 수 있음\nsnapshots:\n  # Optional: jpg 스냫샷을 /media/frigate/clips에 작성 활성화 (기본값은 아래와 같습니다)\n  enabled: False\n  # Optional: 스냅샷 이미지의 깨끗한 PNG 복사 저장 (기본값은 아래와 같습니다)\n  clean_copy: True\n  # Optional: 스냅샷에 타임스탬프 추가 (기본값은 아래와 같습니다)\n  timestamp: False\n  # Optional: 스냅샷에 바운딩 박스 그리기 (기본값은 아래와 같습니다)\n  bounding_box: False\n  # Optional: 스냅샷 자르기 (기본값은 아래와 같습니다)\n  crop: False\n  # Optional: 스냅샷 크기 조정을 위한 높이 (기본값: 원본 크기)\n  height: 175\n  # Optional: 지정된 모든 존에 들어간 객체로 제한된 스냅샷 (기본값: 필수 존 없음)\n  required_zones: []\n  # Optional: 보관 설정을 위한 카메라 오버라이드 (기본값: 전역 값)\n  retain:\n    # 필수: 기본 보관 일 수 (기본값은 아래와 같습니다)\n    default: 10\n    # Optional: 객체별 보관 일 수\n    objects:\n      person: 15\n\nbirdseye:\n  # Optional: 전방향 보기 활성화 (기본값은 아래와 같습니다)\n  enabled: True\n  # Optional: RTSP를 통해 전방향 보기 다시 전송 (기본값은 아래와 같습니다)\n  #NOTE: 이를 활성화하면 전방향 보기가 항상 실행되어 CPU 사용량이 어느 정도 증가할 수 있습니다.\n  restream: False\n  # Optional: 출력 해상도의 너비 (기본값은 아래와 같습니다)\n  width: 1280\n  # Optional: 출력 해상도의 높이 (기본값은 아래와 같습니다)\n  height: 720\n  # Optional: mpeg1 피드의 인코딩 품질 (기본값은 아래와 같습니다)\n  # 1이 가장 높은 품질이고 31이 가장 낮습니다. 품질이 낮은 피드는 CPU 리소스를 적게 사용합니다.\n  quality: 1\n  # Optional: 뷰 모드. 가능한 옵션은 다음과 같습니다: objects, motion, continuous\n  #   objects - 마지막 30초 내에 추적된 객체가 있는 경우 카메라가 포함됨\n  #   motion - 마지막 30초 내에 모션을 감지한 경우 카메라가 포함됨\n  #   continuous - 모든 카메라가 항상 포함됨\n  mode: continuous\n\nlogger:\n  # Optional: 기본 로그 상세도 (기\n\n<div class=\"content-ad\"></div>\n\n이 구성은 PCIe TPU에 모두 준비가 되어 있으며 프레임에서 사람을 감지하면 녹화를 합니다. 해상도는 HD이고 프레임 속도는 높습니다(25 FPS). 이 모든 것은 필요에 맞게 조정할 수 있습니다.\n\nIP 주소를 교체해야 합니다.\n\nhostname -I\n\nIP 카메라가 있다면이 프로세스가 훨씬 쉽습니다. 하지만 제가 저렴한 웹캠을 사용하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```\n![이미지](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_8.png)\n\n프리게이트 도커 컨테이너 실행\n\n```js\ndocker run -d \\\n  --name frigate \\\n  --restart=unless-stopped \\\n  --mount type=tmpfs,target=/tmp/cache,tmpfs-size=1000000000 \\\n  --device /dev/apex_0:/dev/apex_0 \\\n  --device /dev/apex_1:/dev/apex_1 \\\n  --shm-size=512m \\\n  -v /frigate/storage:/media/frigate \\\n  -v /frigate/config.yml:/config/config.yml \\\n  -v /etc/localtime:/etc/localtime:ro \\\n  -p 5000:5000 \\\n  -p 8555:8555/tcp \\\n  -p 8555:8555/udp \\\n  ghcr.io/blakeblackshear/frigate:stable\n```\n\n노트: 우리는 apex 장치를 컨테이너로 모두 전달하고 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n로컬 네트워크에서 Frigate 웹 UI를 열어보세요.\n\n192.168.X.XXX:5000\n\n![이미지](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_9.png)\n\n# RTSP 서버 만들기\n\n<div class=\"content-ad\"></div>\n\n```js\nwget https://github.com/aler9/rtsp-simple-server/releases/download/v0.16.0/rtsp-simple-server_v0.16.0_linux_amd64.tar.gz\n```\n\n```js\ntar -xzvf rtsp-simple-server_v0.16.0_linux_amd64.tar.gz\n```\n\n```js\nRTSP_RTSPADDRESS=192.168.XXX.XXX:554 ./rtsp-simple-server\n```\n\n![How to Setup the Coral Dual Edge TPU for Frigate](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_10.png)\n\n\n<div class=\"content-ad\"></div>\n\n# RTSP 서버로 웹캠 피드 스트리밍하기\n\n```js\napt-get install ffmpeg\n```\n\n```js\nsudo ffmpeg -f v4l2 -framerate 25 -video_size 1280x720 -i /dev/video0 -pix_fmt yuv420p -b:v 2000k -f rtsp -rtsp_transport tcp rtsp://192.168.X.XXX:554/mystream\n```\n\nIP 주소를 교체하는 것을 기억해 주세요.\n\n<div class=\"content-ad\"></div>\n\n# 브라우저에서 Frigate 열기\n\n192.168.X.XXX:5000\n\n코랄 장치의 온도를 모니터링하고 싶다면 해당 작업을 수행할 수 있는 스크립트가 있어요.\n\n[해당 스크립트는 여기에서 확인할 수 있어요](https://gist.github.com/dataslayermedia/fb20aae9dea64bca286b5e6d189027b8)\n\n<div class=\"content-ad\"></div>\n\n```bash\ncurl -sS https://gist.githubusercontent.com/dataslayermedia/fb20aae9dea64bca286b5e6d189027b8/raw/a4f264ee7be546bdf5c3363bfafdc9597f9edd5c/real-time-temperature-output-coral-ai-pcie-accelerators.sh | bash\n```\n\n![Demo](https://miro.medium.com/v2/resize:fit:1280/1*S-F-NGRpvd9eVHcbkeB7RA.gif)\n\n## 제품 하드웨어 링크\n\n1080P 웹캠\n\n\n<div class=\"content-ad\"></div>\n\n아래는 표 형식을 변경한 것입니다.\n\n\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_11.png\" />\n\nCoral AI Dual Edge TPU\n\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_12.png\" />\n\nZima Board\n\n\n<div class=\"content-ad\"></div>\n\n\n![Dual Edge TPU Adapter Low Profile](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_13.png)\n\n![Dual Edge TPU Adapter Low Profile](/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_14.png)\n","ogImage":{"url":"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_0.png"},"coverImage":"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_0.png\" alt=\"이미지\"></p>\n<h1>전체 비디오 튜토리얼</h1>\n<h1>Coral AI PCIe 가속기 드라이버 설치</h1>\n<p>여기서부터 모든 것을 간소화하는 이 스크립트를 사용하시면 됩니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">curl -sS <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//gist.githubusercontent.com/dataslayermedia/8676e010a9121adaaab8e6dc98bca383/raw/f208dbb5e3efda51b75183c67e8dc857e375234e/Install-Coral-PCIe-Accelerator-TPU-Linux.sh | bash</span>\n</code></pre>\n<p>재부팅</p>\n<pre><code class=\"hljs language-js\">sudo reboot\n</code></pre>\n<p>장치 확인</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">lspci -nn | grep 089a\n</code></pre>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_1.png\" alt=\"Link\"></p>\n<p>Apex 장치를 확인하세요</p>\n<pre><code class=\"hljs language-js\">ls /dev/apex_*\n</code></pre>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_2.png\">\n<p>도커 설치</p>\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_3.png\">\n<pre><code class=\"hljs language-js\"># 도커의 공식 <span class=\"hljs-variable constant_\">GPG</span> 키 추가:\nsudo apt-get update\nsudo apt-get install ca-certificates curl gnupg\nsudo install -m <span class=\"hljs-number\">0755</span> -d /etc/apt/keyrings\ncurl -fsSL <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span>\nsudo chmod a+r /etc/apt/keyrings/docker.<span class=\"hljs-property\">gpg</span>\n\n# <span class=\"hljs-title class_\">Apt</span> 소스에 저장소 추가:\necho \\\n  <span class=\"hljs-string\">\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \\\n  $(. /etc/os-release &#x26;&#x26; echo \"</span>$VERSION_CODENAME<span class=\"hljs-string\">\") stable\"</span> | \\\n  sudo tee /etc/apt/sources.<span class=\"hljs-property\">list</span>.<span class=\"hljs-property\">d</span>/docker.<span class=\"hljs-property\">list</span> > <span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-literal\">null</span>\nsudo apt-get update\n</code></pre>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">sudo apt-get install docker-ce docker-ce-cli containerd.<span class=\"hljs-property\">io</span> docker-buildx-plugin docker-compose-plugin\n</code></pre>\n<p>다음 명령어로 설치를 테스트해보세요.</p>\n<pre><code class=\"hljs language-js\">docker ps -a\n</code></pre>\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_4.png\">\n<div class=\"content-ad\"></div>\n<h1>MQTT(Mosquitto) 설치</h1>\n<p>MQTT 프로토콜은 발행/구독 모델을 사용하여 메시지를 전달하는 가벼운 방법을 제공합니다. 이는 저전력 센서나 휴대폰과 같은 모바일 장치, 임베디드 컴퓨터, 또는 마이크로컨트롤러와 같은 사물인터넷 메시징에 적합합니다.</p>\n<pre><code class=\"hljs language-js\">sudo apt install mosquitto mosquitto-clients\n</code></pre>\n<pre><code class=\"hljs language-js\">sudo systemctl is-enabled mosquitto\nsudo systemctl status mosquitto\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>아래와 같이 테이블 태그를 Markdown 형식으로 변경해주세요.</p>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_5.png\" alt=\"이미지\"></p>\n<p>MQTT 구성 파일을 편집합니다.</p>\n<pre><code class=\"hljs language-sh\">vim /etc/mosquitto/mosquitto.conf\n</code></pre>\n<p>이 두 줄을 추가하세요...</p>\n<div class=\"content-ad\"></div>\n<p>allow_anonymous true\nlistener 1883</p>\n<p>설정 파일은 다음과 같이 보일 것입니다...</p>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_6.png\" alt=\"이미지\"></p>\n<p>VIM에서 “:x” 입력 후 엔터 키를 눌러 저장하고 종료하세요.</p>\n<div class=\"content-ad\"></div>\n<p>서비스를 저장하고 다시 시작하세요</p>\n<pre><code class=\"hljs language-js\">systemctl restart mosquitto\n</code></pre>\n<h1>Frigate 설정</h1>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_7.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>루트 디렉터리에서 \"frigate\"라는 디렉터리를 만들어 config.yml 파일을 추가하세요.</p>\n<pre><code class=\"hljs language-js\">cd /\nmkdir frigate\ncd /frigate\ntouch config.<span class=\"hljs-property\">yml</span>\n</code></pre>\n<p>config.yml 파일을 편집하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">mqtt</span>:\n  <span class=\"hljs-attr\">enabled</span>: <span class=\"hljs-title class_\">True</span>\n  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-property\">X</span>.<span class=\"hljs-property\">XXX</span>\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">1883</span>\n<span class=\"hljs-attr\">cameras</span>:\n  <span class=\"hljs-attr\">eyeofsauron</span>:\n    <span class=\"hljs-attr\">ffmpeg</span>:\n      # <span class=\"hljs-attr\">hwaccel_args</span>: preset-vaapi\n      #<span class=\"hljs-attr\">hwaccel_args</span>:\n      #  - <span class=\"hljs-attr\">vf</span>:v <span class=\"hljs-string\">\"fps=15\"</span>\n      <span class=\"hljs-attr\">inputs</span>:\n        - <span class=\"hljs-attr\">path</span>: <span class=\"hljs-attr\">rtsp</span>:<span class=\"hljs-comment\">//192.168.X.<span class=\"hljs-doctag\">XXX:</span>554/mystream</span>\n          <span class=\"hljs-attr\">input_args</span>: preset-rtsp-generic\n          <span class=\"hljs-attr\">roles</span>:\n            - detect\n            - record\n            - rtmp\n    <span class=\"hljs-attr\">detect</span>:\n      <span class=\"hljs-attr\">fps</span>: <span class=\"hljs-number\">25</span>\n      <span class=\"hljs-attr\">enabled</span>: <span class=\"hljs-title class_\">True</span>\n      <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">1280</span>\n      <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">720</span>\n<span class=\"hljs-attr\">detectors</span>:\n  <span class=\"hljs-attr\">coral1</span>:\n    <span class=\"hljs-attr\">type</span>: edgetpu\n    <span class=\"hljs-attr\">device</span>: <span class=\"hljs-attr\">pci</span>:<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-attr\">coral2</span>:\n    <span class=\"hljs-attr\">type</span>: edgetpu\n    <span class=\"hljs-attr\">device</span>: <span class=\"hljs-attr\">pci</span>:<span class=\"hljs-number\">1</span>\n<span class=\"hljs-attr\">objects</span>:\n  <span class=\"hljs-attr\">track</span>:\n    - person\n\n<span class=\"hljs-attr\">record</span>:\n  # <span class=\"hljs-title class_\">Optional</span>: 녹화 기능 활성화 (기본값은 아래와 같습니다)\n  # 주의: 설정에서 녹화를 비활성화한 경우, 나중에 <span class=\"hljs-variable constant_\">UI</span>나 <span class=\"hljs-variable constant_\">MQTT</span>를 통해 녹화를 켜도 영향이 없습니다.\n  <span class=\"hljs-attr\">enabled</span>: <span class=\"hljs-title class_\">True</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 정리 실행 간격(분) 설정 (기본값은 아래와 같습니다)\n  # I/O를 최소화하기 위해 디스크에서 녹화 세그먼트를 삭제하는 빈도를 줄이려면 사용할 수 있습니다.\n  <span class=\"hljs-attr\">expire_interval</span>: <span class=\"hljs-number\">60</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 녹화 보관 설정\n  <span class=\"hljs-attr\">retain</span>:\n    # <span class=\"hljs-title class_\">Optional</span>: 이벤트와 관계없이 녹화 보관일 수 (기본값은 아래와 같습니다)\n    #참고: 이벤트의 녹화만 유지하려면 이 값을 <span class=\"hljs-number\">0</span>으로 설정하고 아래 이벤트 섹션에서 보관을 정의해야 합니다.\n    <span class=\"hljs-attr\">days</span>: <span class=\"hljs-number\">0</span>\n    # <span class=\"hljs-title class_\">Optional</span>: 보관 모드. 가능한 옵션은 다음과 같습니다: all, motion, active_objects\n    #   all - 모든 활동에 관계없이 모든 녹화 세그먼트를 저장\n    #   motion - 감지된 모션을 가진 모든 녹화 세그먼트를 저장합니다.\n    #   active_objects - 활동/움직이는 객체를 가진 모든 녹화 세그먼트를 저장합니다.\n    #<span class=\"hljs-attr\">NOTE</span>: 이 모드는 위의 days 설정이 <span class=\"hljs-number\">0</span>보다 클 때만 적용됩니다.\n    <span class=\"hljs-attr\">mode</span>: all\n  # <span class=\"hljs-title class_\">Optional</span>: 이벤트 녹화 설정\n  <span class=\"hljs-attr\">events</span>:\n    # <span class=\"hljs-title class_\">Optional</span>: 이벤트 이전 시점을 포함할 초 수 (기본값은 아래와 같습니다)\n    <span class=\"hljs-attr\">pre_capture</span>: <span class=\"hljs-number\">5</span>\n    # <span class=\"hljs-title class_\">Optional</span>: 이벤트 후속 시점을 포함할 초 수 (기본값은 아래와 같습니다)\n    <span class=\"hljs-attr\">post_capture</span>: <span class=\"hljs-number\">5</span>\n    # <span class=\"hljs-title class_\">Optional</span>: 녹화를 위해 저장할 객체 (기본값: 추적되는 모든 객체)\n    <span class=\"hljs-attr\">objects</span>:\n      - person\n    # <span class=\"hljs-title class_\">Optional</span>: 지정된 모든 존에 들어간 객체로 녹화를 제한 (기본값: 필수 존 없음)\n    <span class=\"hljs-attr\">required_zones</span>: []\n    # <span class=\"hljs-title class_\">Optional</span>: 이벤트 녹화 보관 설정\n    <span class=\"hljs-attr\">retain</span>:\n      # 필수: 기본 보관 일 수 (기본값은 아래와 같습니다)\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">10</span>\n      # <span class=\"hljs-title class_\">Optional</span>: 보관 모드 (기본값은 아래와 같습니다)\n      #   all - 활동 여부에 관계없이 이벤트를 위한 모든 녹화 세그먼트를 저장\n      #   motion - 감지된 모션을 가진 이벤트를 위한 모든 녹화 세그먼트를 저장\n      #   active_objects - 활동/움직이는 객체를 가진 이벤트를 위한 모든 녹화 세그먼트를 저장\n      #<span class=\"hljs-attr\">NOTE</span>: 카메라의 보관 모드가 여기에서 구성된 모드보다 제한적이면 이 모드가 적용되는 시점에 세그먼트는 이미 삭제됩니다.\n      #       예를 들어, 카메라의 보관 모드가 <span class=\"hljs-string\">\"motion\"</span>이면 모션 없는 세그먼트는 저장되지 않으므로 여기에서 모드를 <span class=\"hljs-string\">\"all\"</span>로 설정해도 복구되지 않습니다.\n      <span class=\"hljs-attr\">mode</span>: motion\n      # <span class=\"hljs-title class_\">Optional</span>: 객체별 보관 일 수\n      <span class=\"hljs-attr\">objects</span>:\n        <span class=\"hljs-attr\">person</span>: <span class=\"hljs-number\">15</span>\n\n# <span class=\"hljs-title class_\">Optional</span>: 이벤트별 클립 디렉터리에 작성된 jpg 스냅샷에 대한 구성\n#<span class=\"hljs-attr\">NOTE</span>: 카메라 수준에서 재정의할 수 있음\n<span class=\"hljs-attr\">snapshots</span>:\n  # <span class=\"hljs-title class_\">Optional</span>: jpg 스냫샷을 /media/frigate/clips에 작성 활성화 (기본값은 아래와 같습니다)\n  <span class=\"hljs-attr\">enabled</span>: <span class=\"hljs-title class_\">False</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 스냅샷 이미지의 깨끗한 <span class=\"hljs-variable constant_\">PNG</span> 복사 저장 (기본값은 아래와 같습니다)\n  <span class=\"hljs-attr\">clean_copy</span>: <span class=\"hljs-title class_\">True</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 스냅샷에 타임스탬프 추가 (기본값은 아래와 같습니다)\n  <span class=\"hljs-attr\">timestamp</span>: <span class=\"hljs-title class_\">False</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 스냅샷에 바운딩 박스 그리기 (기본값은 아래와 같습니다)\n  <span class=\"hljs-attr\">bounding_box</span>: <span class=\"hljs-title class_\">False</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 스냅샷 자르기 (기본값은 아래와 같습니다)\n  <span class=\"hljs-attr\">crop</span>: <span class=\"hljs-title class_\">False</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 스냅샷 크기 조정을 위한 높이 (기본값: 원본 크기)\n  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">175</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 지정된 모든 존에 들어간 객체로 제한된 스냅샷 (기본값: 필수 존 없음)\n  <span class=\"hljs-attr\">required_zones</span>: []\n  # <span class=\"hljs-title class_\">Optional</span>: 보관 설정을 위한 카메라 오버라이드 (기본값: 전역 값)\n  <span class=\"hljs-attr\">retain</span>:\n    # 필수: 기본 보관 일 수 (기본값은 아래와 같습니다)\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">10</span>\n    # <span class=\"hljs-title class_\">Optional</span>: 객체별 보관 일 수\n    <span class=\"hljs-attr\">objects</span>:\n      <span class=\"hljs-attr\">person</span>: <span class=\"hljs-number\">15</span>\n\n<span class=\"hljs-attr\">birdseye</span>:\n  # <span class=\"hljs-title class_\">Optional</span>: 전방향 보기 활성화 (기본값은 아래와 같습니다)\n  <span class=\"hljs-attr\">enabled</span>: <span class=\"hljs-title class_\">True</span>\n  # <span class=\"hljs-title class_\">Optional</span>: <span class=\"hljs-variable constant_\">RTSP</span>를 통해 전방향 보기 다시 전송 (기본값은 아래와 같습니다)\n  #<span class=\"hljs-attr\">NOTE</span>: 이를 활성화하면 전방향 보기가 항상 실행되어 <span class=\"hljs-variable constant_\">CPU</span> 사용량이 어느 정도 증가할 수 있습니다.\n  <span class=\"hljs-attr\">restream</span>: <span class=\"hljs-title class_\">False</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 출력 해상도의 너비 (기본값은 아래와 같습니다)\n  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">1280</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 출력 해상도의 높이 (기본값은 아래와 같습니다)\n  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">720</span>\n  # <span class=\"hljs-title class_\">Optional</span>: mpeg1 피드의 인코딩 품질 (기본값은 아래와 같습니다)\n  # <span class=\"hljs-number\">1</span>이 가장 높은 품질이고 <span class=\"hljs-number\">31</span>이 가장 낮습니다. 품질이 낮은 피드는 <span class=\"hljs-variable constant_\">CPU</span> 리소스를 적게 사용합니다.\n  <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-number\">1</span>\n  # <span class=\"hljs-title class_\">Optional</span>: 뷰 모드. 가능한 옵션은 다음과 같습니다: objects, motion, continuous\n  #   objects - 마지막 <span class=\"hljs-number\">30</span>초 내에 추적된 객체가 있는 경우 카메라가 포함됨\n  #   motion - 마지막 <span class=\"hljs-number\">30</span>초 내에 모션을 감지한 경우 카메라가 포함됨\n  #   continuous - 모든 카메라가 항상 포함됨\n  <span class=\"hljs-attr\">mode</span>: continuous\n\n<span class=\"hljs-attr\">logger</span>:\n  # <span class=\"hljs-title class_\">Optional</span>: 기본 로그 상세도 (기\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\n이 구성은 <span class=\"hljs-title class_\">PCIe</span> <span class=\"hljs-variable constant_\">TPU</span>에 모두 준비가 되어 있으며 프레임에서 사람을 감지하면 녹화를 합니다. 해상도는 <span class=\"hljs-variable constant_\">HD</span>이고 프레임 속도는 높습니다(<span class=\"hljs-number\">25</span> <span class=\"hljs-variable constant_\">FPS</span>). 이 모든 것은 필요에 맞게 조정할 수 있습니다.\n\n<span class=\"hljs-variable constant_\">IP</span> 주소를 교체해야 합니다.\n\nhostname -I\n\n<span class=\"hljs-variable constant_\">IP</span> 카메라가 있다면이 프로세스가 훨씬 쉽습니다. 하지만 제가 저렴한 웹캠을 사용하고 있습니다.\n\n&#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"content-ad\"</span>>&#x3C;/div>\n\n</code></pre>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_8.png\" alt=\"이미지\"></p>\n<p>프리게이트 도커 컨테이너 실행</p>\n<pre><code class=\"hljs language-js\">docker run -d \\\n  --name frigate \\\n  --restart=unless-stopped \\\n  --mount type=tmpfs,target=<span class=\"hljs-regexp\">/tmp/</span>cache,tmpfs-size=<span class=\"hljs-number\">1000000000</span> \\\n  --device /dev/<span class=\"hljs-attr\">apex_0</span>:<span class=\"hljs-regexp\">/dev/</span>apex_0 \\\n  --device /dev/<span class=\"hljs-attr\">apex_1</span>:<span class=\"hljs-regexp\">/dev/</span>apex_1 \\\n  --shm-size=512m \\\n  -v /frigate/<span class=\"hljs-attr\">storage</span>:<span class=\"hljs-regexp\">/media/</span>frigate \\\n  -v /frigate/config.<span class=\"hljs-property\">yml</span>:<span class=\"hljs-regexp\">/config/</span>config.<span class=\"hljs-property\">yml</span> \\\n  -v /etc/<span class=\"hljs-attr\">localtime</span>:<span class=\"hljs-regexp\">/etc/</span><span class=\"hljs-attr\">localtime</span>:ro \\\n  -p <span class=\"hljs-number\">5000</span>:<span class=\"hljs-number\">5000</span> \\\n  -p <span class=\"hljs-number\">8555</span>:<span class=\"hljs-number\">8555</span>/tcp \\\n  -p <span class=\"hljs-number\">8555</span>:<span class=\"hljs-number\">8555</span>/udp \\\n  ghcr.<span class=\"hljs-property\">io</span>/blakeblackshear/<span class=\"hljs-attr\">frigate</span>:stable\n</code></pre>\n<p>노트: 우리는 apex 장치를 컨테이너로 모두 전달하고 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>로컬 네트워크에서 Frigate 웹 UI를 열어보세요.</p>\n<p>192.168.X.XXX:5000</p>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_9.png\" alt=\"이미지\"></p>\n<h1>RTSP 서버 만들기</h1>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">wget <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/aler9/rtsp-simple-server/releases/download/v0.16.0/rtsp-simple-server_v0.16.0_linux_amd64.tar.gz</span>\n</code></pre>\n<pre><code class=\"hljs language-js\">tar -xzvf rtsp-simple-server_v0<span class=\"hljs-number\">.16</span>.0_linux_amd64.<span class=\"hljs-property\">tar</span>.<span class=\"hljs-property\">gz</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">RTSP_RTSPADDRESS</span>=<span class=\"hljs-number\">192.168</span>.<span class=\"hljs-property\">XXX</span>.<span class=\"hljs-property\">XXX</span>:<span class=\"hljs-number\">554</span> ./rtsp-simple-server\n</code></pre>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_10.png\" alt=\"How to Setup the Coral Dual Edge TPU for Frigate\"></p>\n<div class=\"content-ad\"></div>\n<h1>RTSP 서버로 웹캠 피드 스트리밍하기</h1>\n<pre><code class=\"hljs language-js\">apt-get install ffmpeg\n</code></pre>\n<pre><code class=\"hljs language-js\">sudo ffmpeg -f v4l2 -framerate <span class=\"hljs-number\">25</span> -video_size 1280x720 -i /dev/video0 -pix_fmt yuv420p -<span class=\"hljs-attr\">b</span>:v 2000k -f rtsp -rtsp_transport tcp <span class=\"hljs-attr\">rtsp</span>:<span class=\"hljs-comment\">//192.168.X.<span class=\"hljs-doctag\">XXX:</span>554/mystream</span>\n</code></pre>\n<p>IP 주소를 교체하는 것을 기억해 주세요.</p>\n<div class=\"content-ad\"></div>\n<h1>브라우저에서 Frigate 열기</h1>\n<p>192.168.X.XXX:5000</p>\n<p>코랄 장치의 온도를 모니터링하고 싶다면 해당 작업을 수행할 수 있는 스크립트가 있어요.</p>\n<p><a href=\"https://gist.github.com/dataslayermedia/fb20aae9dea64bca286b5e6d189027b8\" rel=\"nofollow\" target=\"_blank\">해당 스크립트는 여기에서 확인할 수 있어요</a></p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-bash\">curl -sS https://gist.githubusercontent.com/dataslayermedia/fb20aae9dea64bca286b5e6d189027b8/raw/a4f264ee7be546bdf5c3363bfafdc9597f9edd5c/real-time-temperature-output-coral-ai-pcie-accelerators.sh | bash\n</code></pre>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1280/1*S-F-NGRpvd9eVHcbkeB7RA.gif\" alt=\"Demo\"></p>\n<h2>제품 하드웨어 링크</h2>\n<p>1080P 웹캠</p>\n<div class=\"content-ad\"></div>\n<p>아래는 표 형식을 변경한 것입니다.</p>\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_11.png\">\n<p>Coral AI Dual Edge TPU</p>\n<img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_12.png\">\n<p>Zima Board</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_13.png\" alt=\"Dual Edge TPU Adapter Low Profile\"></p>\n<p><img src=\"/assets/img/2024-06-19-HowtoSetuptheCoralDualEdgeTPUforFrigate_14.png\" alt=\"Dual Edge TPU Adapter Low Profile\"></p>\n</body>\n</html>\n"},"__N_SSG":true}