{"pageProps":{"post":{"title":"윈도우에서 로컬 도커 개발을 위한 WSL2 설정 방법","description":"","date":"2024-06-22 16:31","slug":"2024-06-22-SetupWSL2forlocaldockerdevelopmentonWindows","content":"\n\n안녕하세요! 혹시 업무 중에 도커가 필요하고 관리해야 하는 상황이신가요?\n\n윈도우 기기를 사용 중이지만, 회사 보안 정책, 자금 부족, 또는 기기에 더 많은 소프트웨어를 추가하고 싶지 않아서 Docker Desktop과 같은 라이선스를 확보할 수 없는 상황이신가요?\n\n이 글은 여러분을 위한 것입니다. 개발자들이 리눅스 환경을 실행할 수 있도록 Windows의 기능인 WSL2(Windows 하위 시스템 for Linux)을 사용하여 로컬 기기를 도커 개발에 활성화하는 방법을 단계별로 안내해 드릴 거예요.\n\n<div class=\"content-ad\"></div>\n\n\n![Screenshot](/assets/img/2024-06-22-SetupWSL2forlocaldockerdevelopmentonWindows_0.png)\n\n# Setting up the host machine\n\n# Installing WSL2\n\nNavigate on Windows to %UserProfile% in Windows Explorer\n\n\n<div class=\"content-ad\"></div>\n\n\nAdd, .wslconfig document (note: DOT (.) is in the front → .wslconfig)\n\n```js\n# Settings apply across all Linux distros running on WSL 2\n# Can see memory in wsl2 with \"free -m\"\n# Goes in windows home directory as .wslconfig\n[wsl2]\n\n# Limits VM memory to use no more than 48 GB, defaults to 50% of ram\nmemory=4GB\n\n# Sets the VM to use 8 virtual processors\nprocessors=8\n\n# Sets the amount of swap storage space to 8GB, default is 25% of available RAM\nswap=1GB\n```\n\nOpen the command prompt and execute the following commands:\n\nChoose Linux distro\n\n\n<div class=\"content-ad\"></div>\n\n```js\nwsl --list --online\n```\n\n리눅스 배포판 설치\n\n```js\nwsl --install -d Ubuntu-20.04\n```\n\n설치 확인하기\n\n<div class=\"content-ad\"></div>\n\n\nwsl --list --verbose\n\n\n버전 2로 업그레이드하세요.\n\n\nwsl --set-default-version 2\nwsl --set-version Ubuntu-20.04 2\n\n\n버전이 2로 설정되었는지 확인하세요.\n\n<div class=\"content-ad\"></div>\n\n\n다음 명령어를 실행해 WSL 목록을 볼 수 있어요.\n\n\nwsl --list --verbose\n\n\nWSL을 다시 시작할 수 있어요.\n\n\nwsl --shutdown\n\n\n바시 셸 (Ubuntu)을 열 수 있어요. Windows 시작 → Ubuntu 검색해보세요.\n\n<div class=\"content-ad\"></div>\n\n애플리케이션을 열어서 도커 엔진을 설치하러 이동해주세요.\n\n루트 사용자 이름과 암호를 설정하라는 메시지가 표시될 것입니다.\n\n# 도커 엔진 설치\n\n리눅스 배포판에 로그인하신 후에요.\n\n<div class=\"content-ad\"></div>\n\n사용자를 sudo(관리자)로 추가하세요.\n\n```js\ngrep -E 'sudo|wheel' /etc/group\n```\n\n확인:\n\n```js\nsudo grep -E '%sudo|%wheel' /etc/sudoers\n```\n\n<div class=\"content-ad\"></div>\n\n위의 내용은 다음과 같이 번역됩니다:\n\n\"테이블 태그를 마크다운 형식으로 변경해주세요.\"\n\n<div class=\"content-ad\"></div>\n\n```js\nsudo apt remove docker docker-engine docker.io containerd runc\n```\n\n저장소를 이용해서 Docker를 설치해보세요.\n\napt를 업데이트하고 저장소를 HTTPS로 사용할 수 있도록 패키지를 설치해주세요.\n\n```js\nsudo apt-get update\n\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n```\n\n<div class=\"content-ad\"></div>\n\n도커 공식 GPG 키를 추가하세요.\n\n```bash\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n```\n\n안정적인 저장소를 설정하세요.\n\n```bash\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n\n<div class=\"content-ad\"></div>\n\n도커 엔진 설치하기\n\n```js\nsudo apt-get update\n\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin\n```\n\n사용자를 도커 그룹에 추가하기\n\n```js\nsudo groupadd docker\nsudo usermod -aG docker $USER\n```\n\n<div class=\"content-ad\"></div>\n\n도커 서비스를 실행하세요.\n\n```sh\nsudo service docker start\n```\n\n상태를 확인하세요. (\"docker is running\"이어야 함)\n\n```sh\nsudo service docker status\n```\n\n<div class=\"content-ad\"></div>\n\n도커 컴포즈 (글 쓰는 시점의 최신 버전은 2.5.0입니다)를 설치해보세요.\n\n```js\nsudo curl -L https://github.com/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n```\n\n실행 권한 부여하기\n\n```js\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n<div class=\"content-ad\"></div>\n\n버전 확인\n\n```js\ndocker-compose --version\n```\n\n출력: docker-compose version 1.27.4, build 40524192\n\n이제 \"wsl\"을 사용하여 CMD/Powershell을 통해 도커를 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nwsl docker image ls\n```\n\n# 도커를 로컬 머신에 노출시키기\n\netc/docker/daemon.json 위치에서 daemon.json을 편집하세요.\n\n<div class=\"content-ad\"></div>\n\n\"hosts\": [ \"unix:///var/run/docker.sock\",\"tcp://0.0.0.0:2375\"]를 입력하고 저장하세요.\n\n![이미지](/assets/img/2024-06-22-SetupWSL2forlocaldockerdevelopmentonWindows_1.png)\n\n머신을 재시작하고 dockerd로 도커를 시작하세요.\n\n로그를 확인하여 위 사진의 호스트를 확인하세요.\n\n<div class=\"content-ad\"></div>\n\n잘 했어요! 도커와 도커 컴포즈를 사용하여 로컬 환경을 설정하고 생산적으로 사용할 수 있도록 세팅했네요 :)!\n\n참고 자료:\nhttps://learn.microsoft.com/en-us/windows/wsl/install\nhttps://dev.to/_nicolas_louis_/how-to-run-docker-on-windows-without-docker-desktop-hik\nhttps://dev.to/bowmanjd/install-docker-on-windows-wsl-without-docker-desktop-34m9\nhttps://medium.com/geekculture/run-docker-in-windows-10-11-wsl-without-docker-desktop-a2a7eb90556d","ogImage":{"url":"/assets/img/2024-06-22-SetupWSL2forlocaldockerdevelopmentonWindows_0.png"},"coverImage":"/assets/img/2024-06-22-SetupWSL2forlocaldockerdevelopmentonWindows_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요! 혹시 업무 중에 도커가 필요하고 관리해야 하는 상황이신가요?</p>\n<p>윈도우 기기를 사용 중이지만, 회사 보안 정책, 자금 부족, 또는 기기에 더 많은 소프트웨어를 추가하고 싶지 않아서 Docker Desktop과 같은 라이선스를 확보할 수 없는 상황이신가요?</p>\n<p>이 글은 여러분을 위한 것입니다. 개발자들이 리눅스 환경을 실행할 수 있도록 Windows의 기능인 WSL2(Windows 하위 시스템 for Linux)을 사용하여 로컬 기기를 도커 개발에 활성화하는 방법을 단계별로 안내해 드릴 거예요.</p>\n<div class=\"content-ad\"></div>\n<p><img src=\"/assets/img/2024-06-22-SetupWSL2forlocaldockerdevelopmentonWindows_0.png\" alt=\"Screenshot\"></p>\n<h1>Setting up the host machine</h1>\n<h1>Installing WSL2</h1>\n<p>Navigate on Windows to %UserProfile% in Windows Explorer</p>\n<div class=\"content-ad\"></div>\n<p>Add, .wslconfig document (note: DOT (.) is in the front → .wslconfig)</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Settings</span> apply across all <span class=\"hljs-title class_\">Linux</span> distros running on <span class=\"hljs-variable constant_\">WSL</span> <span class=\"hljs-number\">2</span>\n# <span class=\"hljs-title class_\">Can</span> see memory <span class=\"hljs-keyword\">in</span> wsl2 <span class=\"hljs-keyword\">with</span> <span class=\"hljs-string\">\"free -m\"</span>\n# <span class=\"hljs-title class_\">Goes</span> <span class=\"hljs-keyword\">in</span> windows home directory <span class=\"hljs-keyword\">as</span> .<span class=\"hljs-property\">wslconfig</span>\n[wsl2]\n\n# <span class=\"hljs-title class_\">Limits</span> <span class=\"hljs-variable constant_\">VM</span> memory to use no more than <span class=\"hljs-number\">48</span> <span class=\"hljs-variable constant_\">GB</span>, defaults to <span class=\"hljs-number\">50</span>% <span class=\"hljs-keyword\">of</span> ram\nmemory=4GB\n\n# <span class=\"hljs-title class_\">Sets</span> the <span class=\"hljs-variable constant_\">VM</span> to use <span class=\"hljs-number\">8</span> virtual processors\nprocessors=<span class=\"hljs-number\">8</span>\n\n# <span class=\"hljs-title class_\">Sets</span> the amount <span class=\"hljs-keyword\">of</span> swap storage space to 8GB, <span class=\"hljs-keyword\">default</span> is <span class=\"hljs-number\">25</span>% <span class=\"hljs-keyword\">of</span> available <span class=\"hljs-variable constant_\">RAM</span>\nswap=1GB\n</code></pre>\n<p>Open the command prompt and execute the following commands:</p>\n<p>Choose Linux distro</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">wsl --list --online\n</code></pre>\n<p>리눅스 배포판 설치</p>\n<pre><code class=\"hljs language-js\">wsl --install -d <span class=\"hljs-title class_\">Ubuntu</span>-<span class=\"hljs-number\">20.04</span>\n</code></pre>\n<p>설치 확인하기</p>\n<div class=\"content-ad\"></div>\n<p>wsl --list --verbose</p>\n<p>버전 2로 업그레이드하세요.</p>\n<p>wsl --set-default-version 2\nwsl --set-version Ubuntu-20.04 2</p>\n<p>버전이 2로 설정되었는지 확인하세요.</p>\n<div class=\"content-ad\"></div>\n<p>다음 명령어를 실행해 WSL 목록을 볼 수 있어요.</p>\n<p>wsl --list --verbose</p>\n<p>WSL을 다시 시작할 수 있어요.</p>\n<p>wsl --shutdown</p>\n<p>바시 셸 (Ubuntu)을 열 수 있어요. Windows 시작 → Ubuntu 검색해보세요.</p>\n<div class=\"content-ad\"></div>\n<p>애플리케이션을 열어서 도커 엔진을 설치하러 이동해주세요.</p>\n<p>루트 사용자 이름과 암호를 설정하라는 메시지가 표시될 것입니다.</p>\n<h1>도커 엔진 설치</h1>\n<p>리눅스 배포판에 로그인하신 후에요.</p>\n<div class=\"content-ad\"></div>\n<p>사용자를 sudo(관리자)로 추가하세요.</p>\n<pre><code class=\"hljs language-js\">grep -E <span class=\"hljs-string\">'sudo|wheel'</span> /etc/group\n</code></pre>\n<p>확인:</p>\n<pre><code class=\"hljs language-js\">sudo grep -E <span class=\"hljs-string\">'%sudo|%wheel'</span> /etc/sudoers\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>위의 내용은 다음과 같이 번역됩니다:</p>\n<p>\"테이블 태그를 마크다운 형식으로 변경해주세요.\"</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">sudo apt remove docker docker-engine docker.<span class=\"hljs-property\">io</span> containerd runc\n</code></pre>\n<p>저장소를 이용해서 Docker를 설치해보세요.</p>\n<p>apt를 업데이트하고 저장소를 HTTPS로 사용할 수 있도록 패키지를 설치해주세요.</p>\n<pre><code class=\"hljs language-js\">sudo apt-get update\n\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>도커 공식 GPG 키를 추가하세요.</p>\n<pre><code class=\"hljs language-bash\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n</code></pre>\n<p>안정적인 저장소를 설정하세요.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> \\\n  <span class=\"hljs-string\">\"deb [arch=<span class=\"hljs-subst\">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  <span class=\"hljs-subst\">$(lsb_release -cs)</span> stable\"</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/apt/sources.list.d/docker.list > /dev/null\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>도커 엔진 설치하기</p>\n<pre><code class=\"hljs language-js\">sudo apt-get update\n\nsudo apt-get install docker-ce docker-ce-cli containerd.<span class=\"hljs-property\">io</span> docker-compose-plugin\n</code></pre>\n<p>사용자를 도커 그룹에 추가하기</p>\n<pre><code class=\"hljs language-js\">sudo groupadd docker\nsudo usermod -aG docker $USER\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>도커 서비스를 실행하세요.</p>\n<pre><code class=\"hljs language-sh\">sudo service docker start\n</code></pre>\n<p>상태를 확인하세요. (\"docker is running\"이어야 함)</p>\n<pre><code class=\"hljs language-sh\">sudo service docker status\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>도커 컴포즈 (글 쓰는 시점의 최신 버전은 2.5.0입니다)를 설치해보세요.</p>\n<pre><code class=\"hljs language-js\">sudo curl -L <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span>\n</code></pre>\n<p>실행 권한 부여하기</p>\n<pre><code class=\"hljs language-js\">sudo chmod +x /usr/local/bin/docker-compose\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>버전 확인</p>\n<pre><code class=\"hljs language-js\">docker-compose --version\n</code></pre>\n<p>출력: docker-compose version 1.27.4, build 40524192</p>\n<p>이제 \"wsl\"을 사용하여 CMD/Powershell을 통해 도커를 사용할 수 있습니다.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">wsl docker image ls\n</code></pre>\n<h1>도커를 로컬 머신에 노출시키기</h1>\n<p>etc/docker/daemon.json 위치에서 daemon.json을 편집하세요.</p>\n<div class=\"content-ad\"></div>\n<p>\"hosts\": [ \"unix:///var/run/docker.sock\",\"tcp://0.0.0.0:2375\"]를 입력하고 저장하세요.</p>\n<p><img src=\"/assets/img/2024-06-22-SetupWSL2forlocaldockerdevelopmentonWindows_1.png\" alt=\"이미지\"></p>\n<p>머신을 재시작하고 dockerd로 도커를 시작하세요.</p>\n<p>로그를 확인하여 위 사진의 호스트를 확인하세요.</p>\n<div class=\"content-ad\"></div>\n<p>잘 했어요! 도커와 도커 컴포즈를 사용하여 로컬 환경을 설정하고 생산적으로 사용할 수 있도록 세팅했네요 :)!</p>\n<p>참고 자료:\n<a href=\"https://learn.microsoft.com/en-us/windows/wsl/install\" rel=\"nofollow\" target=\"_blank\">https://learn.microsoft.com/en-us/windows/wsl/install</a>\n<a href=\"https://dev.to/_nicolas_louis_/how-to-run-docker-on-windows-without-docker-desktop-hik\" rel=\"nofollow\" target=\"_blank\">https://dev.to/_nicolas_louis_/how-to-run-docker-on-windows-without-docker-desktop-hik</a>\n<a href=\"https://dev.to/bowmanjd/install-docker-on-windows-wsl-without-docker-desktop-34m9\" rel=\"nofollow\" target=\"_blank\">https://dev.to/bowmanjd/install-docker-on-windows-wsl-without-docker-desktop-34m9</a>\n<a href=\"https://medium.com/geekculture/run-docker-in-windows-10-11-wsl-without-docker-desktop-a2a7eb90556d\" rel=\"nofollow\" target=\"_blank\">https://medium.com/geekculture/run-docker-in-windows-10-11-wsl-without-docker-desktop-a2a7eb90556d</a></p>\n</body>\n</html>\n"},"__N_SSG":true}