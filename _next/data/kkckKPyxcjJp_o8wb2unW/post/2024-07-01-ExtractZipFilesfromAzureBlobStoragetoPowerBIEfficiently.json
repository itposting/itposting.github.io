{"pageProps":{"post":{"title":"Azure Blob Storage에서 Power BI로 Zip 파일 효율적으로 추출하는 방법","description":"","date":"2024-07-01 17:28","slug":"2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently","content":"\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*eeenqDzhFDi7GcVfOvqo8Q.gif)\n\n# 소개\n\n데이터 분석 분야에서, 원시 데이터부터 통찰력 있는 시각화물로 가기까지의 여정은 종종 복잡한 과정입니다. 이 안내서는 Power BI를 Blob Storage와 통합하고 Power Query Editor를 사용하여 파일을 압축 해제하는 방법을 탐구하여 이 과정을 설명합니다. 직접 실습하려면 이 간단한 지침을 따르십시오.\n\n단계 1 - Azure Blob Storage와 안전한 연결 설정:\n\n\n<div class=\"content-ad\"></div>\n\nBlob Storage와의 연결을 시작하려면 일반적으로 'Get Data' 작업을 먼저 선택합니다.\n\n![이미지](/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_0.png)\n\nAzure를 선택하고 옵션 목록에서 'Azure Blob Storage'를 선택합니다. 원하는 Blob과의 연결은 Blob URL 및 액세스 토큰을 사용하여 설정됩니다. 이 절차를 통해 Blob Storage와의 성공적인 연결이 용이해집니다.\n\n![이미지](/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_1.png)\n\n<div class=\"content-ad\"></div>\n\n연결이 성공적으로 설정되면 아래 이미지가 표시됩니다. 파일 추출을 진행하려면 일반적으로 추가 처리를 위해 '데이터 변환' 옵션을 선택합니다.\n\n![이미지](/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_2.png)\n\n단계 2 - zip 파일에서 데이터 추출:\n\nPower Query Editor는 데이터 압축 해제 프로세스를 처리할 수 있는 기능을 보유하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n아래 이미지는 변환 데이터 페이지를 보여줍니다. 왼쪽 모서리에는 새로운 쿼리를 만들기 위한 쿼리 섹션이 있습니다. 이 섹션에서 마우스 오른쪽 단추를 클릭한 후 ‘New Query’ 항목 위에 마우스를 올리고 ‘Blank Query’를 선택합니다.\n\n![이미지](/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_3.png)\n\n아래 이미지는 빈 쿼리의 성공적인 생성을 보여줍니다.\n\n![이미지](/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_4.png)\n\n<div class=\"content-ad\"></div>\n\n\"이제 코드를 복사하고 빈 쿼리에 붙여넣은 다음 완료를 선택하세요.\n\n단계 3 - 사용자 정의 열 생성:\n\n현재 데이터 세트에서 '열 추가'를 선택한 다음 '사용자 정의 열 함수 호출'을 선택하세요.\"\n\n<div class=\"content-ad\"></div>\n\n이 함수를 구성할 때는 매개변수를 설정해야 합니다. 이 매개변수에 대해 내보낸 데이터에서 내용 열을 선택하십시오. 이 내용 열에는 압축 해제해야 하는 zip 파일이 포함되어 있어야 합니다.\n\n![이미지](/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_6.png)\n\n새 열에 사용자 정의 함수의 결과가 채워집니다. 아래 이미지에서는 사용자 정의 함수에 의해 생성된 \"Files\"라는 열이 있습니다.\n\n![이미지](/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_7.png)\n\n<div class=\"content-ad\"></div>\n\n위 이미지에서, 맨 끝에 \"파일\"이라는 열이 있습니다. \"목록\"을 클릭하면 zip 폴더에 포함된 모든 파일이 표시됩니다.\n\n아래 이미지는 이전 이미지에서 \"목록\"이 선택될 때 나타나는 모든 파일의 기록을 보여줍니다.\n\n![파일 레코드](/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_8.png)\n\n아래 이미지는 zip 파일 내에 포함된 데이터를 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\nStep 4 - 추출된 데이터를 통찰적인 시각화로 변환하기:\n\n데이터를 모델에 로드하고, 이후 데이터를 효과적으로 표현하는 시각화를 생성해주세요. 이 과정은 데이터에서 가치 있는 메트릭 및 중요 통찰을 추출하는 데 도움이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n위의 내용과 유사한 대시보드를 구축하여 데이터를 효과적으로 시각화하세요.\n\n## 코드:\n\n```js\n(ZIP 파일) => \nlet\n    ushort = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger16, ByteOrder.LittleEndian),\n    uint = BinaryFormat.ByteOrder(BinaryFormat.UnsignedInteger32, ByteOrder.LittleEndian),\n    EDOCfn = BinaryFormat.Record([\n        ZipContent = BinaryFormat.Binary(Binary.Length(ZIP 파일) - 22),\n        Magic = uint,\n        DiskNum = ushort,\n        CDirectoryDiskId = ushort,\n        CDirectoryRecordCountOnDisk = ushort,\n        CDirectoryRecordCount = ushort,\n        SizeOfCentralDirectory = uint,\n        CentralDirectoryOffset = uint,\n        CommendLength = ushort\n    ]),\n    EDOC = EDOCfn(ZIP 파일),\n    BeforeCentralDirectory = BinaryFormat.Binary(EDOC[CentralDirectoryOffset]),\n    CentralDirectory = BinaryFormat.Length(BinaryFormat.Record(\n        [\n            ZipContent = BeforeCentralDirectory,\n            Items = BinaryFormat.List(BinaryFormat.Record(\n                [\n                    Magic = uint,\n                    CurrentVersion = ushort,\n                    MinVersion = ushort,\n                    Flags = ushort,\n                    CompressionMethod = ushort,\n                    FileModificationTime = ushort,\n                    FileModificationDate = ushort,\n                    CRC32 = uint,\n                    BinarySize = uint,\n                    FileSize   = uint,\n                    FileInfo = BinaryFormat.Choice(\n                    BinaryFormat.Record(\n                        [\n                            Len = ushort,\n                            FieldsLen = ushort,\n                            FileCommentLength = ushort,\n                            Disk = ushort,\n                            InternalFileAttr = ushort,\n                            ExternalAttr = uint,\n                            PosOfFileHeader = uint\n                        ]),\n                    (fileInfo) => BinaryFormat.Record(\n                        [\n                            FileName = BinaryFormat.Text(fileInfo[Len], TextEncoding.Ascii),\n                            Fields = BinaryFormat.Binary(fileInfo[FieldsLen]),\n                            FileComment = BinaryFormat.Text(fileInfo[FileCommentLength], TextEncoding.Ascii),\n                            Disk = BinaryFormat.Transform(BinaryFormat.Null, each fileInfo[Disk]),\n                            InternalFileAttr = BinaryFormat.Transform(BinaryFormat.Null, each fileInfo[Disk]),\n                            ExternalAttr = BinaryFormat.Transform(BinaryFormat.Null, each fileInfo[InternalFileAttr]),\n                            PosOfFileHeader = BinaryFormat.Transform(BinaryFormat.Null, each fileInfo[PosOfFileHeader])\n                        ])\n                    )\n                ]), \n                EDOC[CDirectoryRecordCount]\n            )\n        ]), \n        EDOC[CentralDirectoryOffset] + EDOC[SizeOfCentralDirectory]),  \n    Contents = List.Transform(\n        CentralDirectory(ZIP 파일)[Items],\n            (cdEntry) => \n                let\n                    ZipEntry = BinaryFormat.Record(\n                    [\n                        PreviousData = BinaryFormat.Binary(cdEntry[FileInfo][PosOfFileHeader]), \n                        Magic = uint,\n                        ZipVersion = ushort,\n                        ZipFlags = ushort,\n                        CompressionMethod = ushort,\n                        FileModificationTime = ushort,\n                        FileModificationDate = ushort,\n                        CRC32 = uint, \n                        BinarySize = uint,\n                        FileSize   = uint,\n                        FileName = BinaryFormat.Choice(\n                            BinaryFormat.Record(\n                                [\n                                    Len = ushort,\n                                    FieldsLen = ushort\n                                ]),\n                            (fileInfo) => BinaryFormat.Record(\n                                [\n                                    FileName = BinaryFormat.Text(fileInfo[Len], TextEncoding.Ascii),\n                                    Fields = BinaryFormat.Binary(fileInfo[FieldsLen])\n                                ]) \n                        ),\n                        FileContent = BinaryFormat.Transform(\n                            BinaryFormat.Binary(cdEntry[BinarySize]), \n                            each Binary.Decompress(_, Compression.Deflate)\n                        )\n                    ])(ZIP 파일)\n                in\n                    [FileName=ZipEntry[FileName][FileName], Content=ZipEntry[FileContent]]\n    )\nin\n    Contents\n```\n\n<div class=\"content-ad\"></div>\n\n## 코드 설명:\n\n- ZIP 파일 추출: 이 코드는 ZIP 파일의 내용을 추출하는 데 사용됩니다.\n- 이진 포맷 정의: 16비트 및 32비트 부호 없는 정수에 대한 이진 포맷을 정의합니다.\n- 중앙 디렉터리의 끝 (EDOC) 레코드: 이 코드는 ZIP 파일의 EDOC 레코드를 구성합니다.\n- 중앙 디렉터리 읽기: ZIP 파일의 중앙 디렉터리를 읽어 ZIP 파일의 각 파일에 대한 메타데이터를 포함합니다.\n- 파일 헤더 읽기: 각 파일에 대해 코드는 파일 헤더를 읽고 파일 이름과 압축된 내용을 추출합니다.\n- 내용 압축 해제: 압축된 내용은 그런 다음 Deflate 알고리즘을 사용하여 압축 해제됩니다.\n- 레코드 목록 반환: 함수는 최종적으로 각 파일의 파일 이름과 압축 해제된 내용이 포함된 레코드 목록을 반환합니다.\n- 효율적인 데이터 추출: 이 과정을 통해 압축 된 파일에서 데이터를 효과적으로 추출 및 변환할 수 있습니다.\n\n# 결론:\n\nBlob 저장소에서 파일을 추출하고 압축 해제하는 데 Power Query Editor를 사용하는 것은 초강력한 데이터 변환기를 사용하는 것과 같습니다. 이는 엉망인 데이터를 깔끔하고 조직적인 형식으로 변환하여 Power BI가 쉽게 이해할 수 있도록합니다. 이는 우리가 명확한 이야기를 전하는 아름다운 차트와 그래프를 만들 수 있도록 도와줍니다. 따라서 이 방법을 사용함으로써, 우리는 기본적으로 데이터가 더 똑똑하게, 더 열심히 일하도록 만드는 것입니다!\n\n<div class=\"content-ad\"></div>\n\n# 회사 소개\n\nBi3는 호주에서 가장 빠르게 성장하는 기업 중 하나로 인정받고 있습니다. 저희 팀은 전 세계의 주요 기관들을 위해 상당하고 복잡한 프로젝트를 완수해 왔으며, 우수한 성과로 잘 알려진 브랜드를 빠르게 구축하고 있습니다.","ogImage":{"url":"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_0.png"},"coverImage":"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*eeenqDzhFDi7GcVfOvqo8Q.gif\" alt=\"image\"></p>\n<h1>소개</h1>\n<p>데이터 분석 분야에서, 원시 데이터부터 통찰력 있는 시각화물로 가기까지의 여정은 종종 복잡한 과정입니다. 이 안내서는 Power BI를 Blob Storage와 통합하고 Power Query Editor를 사용하여 파일을 압축 해제하는 방법을 탐구하여 이 과정을 설명합니다. 직접 실습하려면 이 간단한 지침을 따르십시오.</p>\n<p>단계 1 - Azure Blob Storage와 안전한 연결 설정:</p>\n<div class=\"content-ad\"></div>\n<p>Blob Storage와의 연결을 시작하려면 일반적으로 'Get Data' 작업을 먼저 선택합니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_0.png\" alt=\"이미지\"></p>\n<p>Azure를 선택하고 옵션 목록에서 'Azure Blob Storage'를 선택합니다. 원하는 Blob과의 연결은 Blob URL 및 액세스 토큰을 사용하여 설정됩니다. 이 절차를 통해 Blob Storage와의 성공적인 연결이 용이해집니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_1.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>연결이 성공적으로 설정되면 아래 이미지가 표시됩니다. 파일 추출을 진행하려면 일반적으로 추가 처리를 위해 '데이터 변환' 옵션을 선택합니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_2.png\" alt=\"이미지\"></p>\n<p>단계 2 - zip 파일에서 데이터 추출:</p>\n<p>Power Query Editor는 데이터 압축 해제 프로세스를 처리할 수 있는 기능을 보유하고 있습니다.</p>\n<div class=\"content-ad\"></div>\n<p>아래 이미지는 변환 데이터 페이지를 보여줍니다. 왼쪽 모서리에는 새로운 쿼리를 만들기 위한 쿼리 섹션이 있습니다. 이 섹션에서 마우스 오른쪽 단추를 클릭한 후 ‘New Query’ 항목 위에 마우스를 올리고 ‘Blank Query’를 선택합니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_3.png\" alt=\"이미지\"></p>\n<p>아래 이미지는 빈 쿼리의 성공적인 생성을 보여줍니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_4.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>\"이제 코드를 복사하고 빈 쿼리에 붙여넣은 다음 완료를 선택하세요.</p>\n<p>단계 3 - 사용자 정의 열 생성:</p>\n<p>현재 데이터 세트에서 '열 추가'를 선택한 다음 '사용자 정의 열 함수 호출'을 선택하세요.\"</p>\n<div class=\"content-ad\"></div>\n<p>이 함수를 구성할 때는 매개변수를 설정해야 합니다. 이 매개변수에 대해 내보낸 데이터에서 내용 열을 선택하십시오. 이 내용 열에는 압축 해제해야 하는 zip 파일이 포함되어 있어야 합니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_6.png\" alt=\"이미지\"></p>\n<p>새 열에 사용자 정의 함수의 결과가 채워집니다. 아래 이미지에서는 사용자 정의 함수에 의해 생성된 \"Files\"라는 열이 있습니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_7.png\" alt=\"이미지\"></p>\n<div class=\"content-ad\"></div>\n<p>위 이미지에서, 맨 끝에 \"파일\"이라는 열이 있습니다. \"목록\"을 클릭하면 zip 폴더에 포함된 모든 파일이 표시됩니다.</p>\n<p>아래 이미지는 이전 이미지에서 \"목록\"이 선택될 때 나타나는 모든 파일의 기록을 보여줍니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ExtractZipFilesfromAzureBlobStoragetoPowerBIEfficiently_8.png\" alt=\"파일 레코드\"></p>\n<p>아래 이미지는 zip 파일 내에 포함된 데이터를 보여줍니다.</p>\n<div class=\"content-ad\"></div>\n<p>Step 4 - 추출된 데이터를 통찰적인 시각화로 변환하기:</p>\n<p>데이터를 모델에 로드하고, 이후 데이터를 효과적으로 표현하는 시각화를 생성해주세요. 이 과정은 데이터에서 가치 있는 메트릭 및 중요 통찰을 추출하는 데 도움이 됩니다.</p>\n<div class=\"content-ad\"></div>\n<p>위의 내용과 유사한 대시보드를 구축하여 데이터를 효과적으로 시각화하세요.</p>\n<h2>코드:</h2>\n<pre><code class=\"hljs language-js\">(<span class=\"hljs-variable constant_\">ZIP</span> 파일) => \n<span class=\"hljs-keyword\">let</span>\n    ushort = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">ByteOrder</span>(<span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-property\">UnsignedInteger16</span>, <span class=\"hljs-title class_\">ByteOrder</span>.<span class=\"hljs-property\">LittleEndian</span>),\n    uint = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">ByteOrder</span>(<span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-property\">UnsignedInteger32</span>, <span class=\"hljs-title class_\">ByteOrder</span>.<span class=\"hljs-property\">LittleEndian</span>),\n    <span class=\"hljs-title class_\">EDOCfn</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Record</span>([\n        <span class=\"hljs-title class_\">ZipContent</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Binary</span>(<span class=\"hljs-title class_\">Binary</span>.<span class=\"hljs-title class_\">Length</span>(<span class=\"hljs-variable constant_\">ZIP</span> 파일) - <span class=\"hljs-number\">22</span>),\n        <span class=\"hljs-title class_\">Magic</span> = uint,\n        <span class=\"hljs-title class_\">DiskNum</span> = ushort,\n        <span class=\"hljs-title class_\">CDirectoryDiskId</span> = ushort,\n        <span class=\"hljs-title class_\">CDirectoryRecordCountOnDisk</span> = ushort,\n        <span class=\"hljs-title class_\">CDirectoryRecordCount</span> = ushort,\n        <span class=\"hljs-title class_\">SizeOfCentralDirectory</span> = uint,\n        <span class=\"hljs-title class_\">CentralDirectoryOffset</span> = uint,\n        <span class=\"hljs-title class_\">CommendLength</span> = ushort\n    ]),\n    <span class=\"hljs-variable constant_\">EDOC</span> = <span class=\"hljs-title class_\">EDOCfn</span>(<span class=\"hljs-variable constant_\">ZIP</span> 파일),\n    <span class=\"hljs-title class_\">BeforeCentralDirectory</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Binary</span>(<span class=\"hljs-variable constant_\">EDOC</span>[<span class=\"hljs-title class_\">CentralDirectoryOffset</span>]),\n    <span class=\"hljs-title class_\">CentralDirectory</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Length</span>(<span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Record</span>(\n        [\n            <span class=\"hljs-title class_\">ZipContent</span> = <span class=\"hljs-title class_\">BeforeCentralDirectory</span>,\n            <span class=\"hljs-title class_\">Items</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">List</span>(<span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Record</span>(\n                [\n                    <span class=\"hljs-title class_\">Magic</span> = uint,\n                    <span class=\"hljs-title class_\">CurrentVersion</span> = ushort,\n                    <span class=\"hljs-title class_\">MinVersion</span> = ushort,\n                    <span class=\"hljs-title class_\">Flags</span> = ushort,\n                    <span class=\"hljs-title class_\">CompressionMethod</span> = ushort,\n                    <span class=\"hljs-title class_\">FileModificationTime</span> = ushort,\n                    <span class=\"hljs-title class_\">FileModificationDate</span> = ushort,\n                    <span class=\"hljs-title class_\">CRC32</span> = uint,\n                    <span class=\"hljs-title class_\">BinarySize</span> = uint,\n                    <span class=\"hljs-title class_\">FileSize</span>   = uint,\n                    <span class=\"hljs-title class_\">FileInfo</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Choice</span>(\n                    <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Record</span>(\n                        [\n                            <span class=\"hljs-title class_\">Len</span> = ushort,\n                            <span class=\"hljs-title class_\">FieldsLen</span> = ushort,\n                            <span class=\"hljs-title class_\">FileCommentLength</span> = ushort,\n                            <span class=\"hljs-title class_\">Disk</span> = ushort,\n                            <span class=\"hljs-title class_\">InternalFileAttr</span> = ushort,\n                            <span class=\"hljs-title class_\">ExternalAttr</span> = uint,\n                            <span class=\"hljs-title class_\">PosOfFileHeader</span> = uint\n                        ]),\n                    <span class=\"hljs-function\">(<span class=\"hljs-params\">fileInfo</span>) =></span> <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Record</span>(\n                        [\n                            <span class=\"hljs-title class_\">FileName</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Text</span>(fileInfo[<span class=\"hljs-title class_\">Len</span>], <span class=\"hljs-title class_\">TextEncoding</span>.<span class=\"hljs-property\">Ascii</span>),\n                            <span class=\"hljs-title class_\">Fields</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Binary</span>(fileInfo[<span class=\"hljs-title class_\">FieldsLen</span>]),\n                            <span class=\"hljs-title class_\">FileComment</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Text</span>(fileInfo[<span class=\"hljs-title class_\">FileCommentLength</span>], <span class=\"hljs-title class_\">TextEncoding</span>.<span class=\"hljs-property\">Ascii</span>),\n                            <span class=\"hljs-title class_\">Disk</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Transform</span>(<span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-property\">Null</span>, each fileInfo[<span class=\"hljs-title class_\">Disk</span>]),\n                            <span class=\"hljs-title class_\">InternalFileAttr</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Transform</span>(<span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-property\">Null</span>, each fileInfo[<span class=\"hljs-title class_\">Disk</span>]),\n                            <span class=\"hljs-title class_\">ExternalAttr</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Transform</span>(<span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-property\">Null</span>, each fileInfo[<span class=\"hljs-title class_\">InternalFileAttr</span>]),\n                            <span class=\"hljs-title class_\">PosOfFileHeader</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Transform</span>(<span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-property\">Null</span>, each fileInfo[<span class=\"hljs-title class_\">PosOfFileHeader</span>])\n                        ])\n                    )\n                ]), \n                <span class=\"hljs-variable constant_\">EDOC</span>[<span class=\"hljs-title class_\">CDirectoryRecordCount</span>]\n            )\n        ]), \n        <span class=\"hljs-variable constant_\">EDOC</span>[<span class=\"hljs-title class_\">CentralDirectoryOffset</span>] + <span class=\"hljs-variable constant_\">EDOC</span>[<span class=\"hljs-title class_\">SizeOfCentralDirectory</span>]),  \n    <span class=\"hljs-title class_\">Contents</span> = <span class=\"hljs-title class_\">List</span>.<span class=\"hljs-title class_\">Transform</span>(\n        <span class=\"hljs-title class_\">CentralDirectory</span>(<span class=\"hljs-variable constant_\">ZIP</span> 파일)[<span class=\"hljs-title class_\">Items</span>],\n            <span class=\"hljs-function\">(<span class=\"hljs-params\">cdEntry</span>) =></span> \n                <span class=\"hljs-keyword\">let</span>\n                    <span class=\"hljs-title class_\">ZipEntry</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Record</span>(\n                    [\n                        <span class=\"hljs-title class_\">PreviousData</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Binary</span>(cdEntry[<span class=\"hljs-title class_\">FileInfo</span>][<span class=\"hljs-title class_\">PosOfFileHeader</span>]), \n                        <span class=\"hljs-title class_\">Magic</span> = uint,\n                        <span class=\"hljs-title class_\">ZipVersion</span> = ushort,\n                        <span class=\"hljs-title class_\">ZipFlags</span> = ushort,\n                        <span class=\"hljs-title class_\">CompressionMethod</span> = ushort,\n                        <span class=\"hljs-title class_\">FileModificationTime</span> = ushort,\n                        <span class=\"hljs-title class_\">FileModificationDate</span> = ushort,\n                        <span class=\"hljs-title class_\">CRC32</span> = uint, \n                        <span class=\"hljs-title class_\">BinarySize</span> = uint,\n                        <span class=\"hljs-title class_\">FileSize</span>   = uint,\n                        <span class=\"hljs-title class_\">FileName</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Choice</span>(\n                            <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Record</span>(\n                                [\n                                    <span class=\"hljs-title class_\">Len</span> = ushort,\n                                    <span class=\"hljs-title class_\">FieldsLen</span> = ushort\n                                ]),\n                            <span class=\"hljs-function\">(<span class=\"hljs-params\">fileInfo</span>) =></span> <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Record</span>(\n                                [\n                                    <span class=\"hljs-title class_\">FileName</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Text</span>(fileInfo[<span class=\"hljs-title class_\">Len</span>], <span class=\"hljs-title class_\">TextEncoding</span>.<span class=\"hljs-property\">Ascii</span>),\n                                    <span class=\"hljs-title class_\">Fields</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Binary</span>(fileInfo[<span class=\"hljs-title class_\">FieldsLen</span>])\n                                ]) \n                        ),\n                        <span class=\"hljs-title class_\">FileContent</span> = <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Transform</span>(\n                            <span class=\"hljs-title class_\">BinaryFormat</span>.<span class=\"hljs-title class_\">Binary</span>(cdEntry[<span class=\"hljs-title class_\">BinarySize</span>]), \n                            each <span class=\"hljs-title class_\">Binary</span>.<span class=\"hljs-title class_\">Decompress</span>(_, <span class=\"hljs-title class_\">Compression</span>.<span class=\"hljs-property\">Deflate</span>)\n                        )\n                    ])(<span class=\"hljs-variable constant_\">ZIP</span> 파일)\n                <span class=\"hljs-keyword\">in</span>\n                    [<span class=\"hljs-title class_\">FileName</span>=<span class=\"hljs-title class_\">ZipEntry</span>[<span class=\"hljs-title class_\">FileName</span>][<span class=\"hljs-title class_\">FileName</span>], <span class=\"hljs-title class_\">Content</span>=<span class=\"hljs-title class_\">ZipEntry</span>[<span class=\"hljs-title class_\">FileContent</span>]]\n    )\n<span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-title class_\">Contents</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>코드 설명:</h2>\n<ul>\n<li>ZIP 파일 추출: 이 코드는 ZIP 파일의 내용을 추출하는 데 사용됩니다.</li>\n<li>이진 포맷 정의: 16비트 및 32비트 부호 없는 정수에 대한 이진 포맷을 정의합니다.</li>\n<li>중앙 디렉터리의 끝 (EDOC) 레코드: 이 코드는 ZIP 파일의 EDOC 레코드를 구성합니다.</li>\n<li>중앙 디렉터리 읽기: ZIP 파일의 중앙 디렉터리를 읽어 ZIP 파일의 각 파일에 대한 메타데이터를 포함합니다.</li>\n<li>파일 헤더 읽기: 각 파일에 대해 코드는 파일 헤더를 읽고 파일 이름과 압축된 내용을 추출합니다.</li>\n<li>내용 압축 해제: 압축된 내용은 그런 다음 Deflate 알고리즘을 사용하여 압축 해제됩니다.</li>\n<li>레코드 목록 반환: 함수는 최종적으로 각 파일의 파일 이름과 압축 해제된 내용이 포함된 레코드 목록을 반환합니다.</li>\n<li>효율적인 데이터 추출: 이 과정을 통해 압축 된 파일에서 데이터를 효과적으로 추출 및 변환할 수 있습니다.</li>\n</ul>\n<h1>결론:</h1>\n<p>Blob 저장소에서 파일을 추출하고 압축 해제하는 데 Power Query Editor를 사용하는 것은 초강력한 데이터 변환기를 사용하는 것과 같습니다. 이는 엉망인 데이터를 깔끔하고 조직적인 형식으로 변환하여 Power BI가 쉽게 이해할 수 있도록합니다. 이는 우리가 명확한 이야기를 전하는 아름다운 차트와 그래프를 만들 수 있도록 도와줍니다. 따라서 이 방법을 사용함으로써, 우리는 기본적으로 데이터가 더 똑똑하게, 더 열심히 일하도록 만드는 것입니다!</p>\n<div class=\"content-ad\"></div>\n<h1>회사 소개</h1>\n<p>Bi3는 호주에서 가장 빠르게 성장하는 기업 중 하나로 인정받고 있습니다. 저희 팀은 전 세계의 주요 기관들을 위해 상당하고 복잡한 프로젝트를 완수해 왔으며, 우수한 성과로 잘 알려진 브랜드를 빠르게 구축하고 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}