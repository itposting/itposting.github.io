{"pageProps":{"post":{"title":"FreeRTOS  이벤트 그룹을 사용하여 간단한 세마포어 구현 방법","description":"","date":"2024-06-23 17:31","slug":"2024-06-23-FreeRTOSSimplesemaphoreimplementationusingeventgroup","content":"\n\n\n![Image](/assets/img/2024-06-23-FreeRTOSSimplesemaphoreimplementationusingeventgroup_0.png)\n\n웹 소프트웨어 엔지니어인 저와 같은 경우에는 실시간 프로그래밍 개념을 이해하기 어려울 수 있습니다. \n이 짧은 기사에서는 여러 멀티스레딩 작업의 완료를 기다리기 위한 세마포어 패턴을 구현하는 쉬운 기술을 소개하겠습니다.\n\n# 정의\n\n- FreeRTOS 작업\nFreeRTOS 작업은 FreeRTOS 실시간 운영 체제 내에서 실행되는 작고 독립적인 프로그램 세그먼트입니다. 각 작업은 특정 작업을 수행하도록 설계되었으며 FreeRTOS 스케줄러에 의해 관리되는 다른 작업과 준동시에 작동합니다. FreeRTOS의 작업은 우선 순위를 부여할 수 있어, 스케줄러가 작업 우선 순위에 따라 실행 흐름을 관리하고 시간에 민감한 작업을 효과적으로 처리할 수 있게 합니다. 이를 통해 응용 프로그램은 여러 작업 간에 작업을 나누어 다루므로 다양한 응용 프로그램 요구 사항을 처리할 수 있습니다.\n\n- 카운팅 세마포어\nFreeRTOS의 카운팅 세마포어는 공유 리소스에 대한 액세스를 관리하거나 가용성에 따라 작업을 동기화하는 동기화 메커니즘입니다. 두 가지 상태만을 갖는 이진 세마포어와 달리 카운팅 세마포어는 가용 리소스의 개수나 이벤트가 발생하기 전에 실행 흐름을 차단/해제하는 횟수를 나타내는 값을 유지합니다.\n\n\n<div class=\"content-ad\"></div>\n\n# TL;DR — The code\n\n데모 코드는 \"xTaskCreate\"를 사용하여 세 가지 작업을 실행하며 \"xEventGroupCreate\"로 생성된 이벤트 그룹을 사용하여 카운팅 세마포어를 구현합니다. 메인 작업은 생성된 모든 작업이 실행된 후에만 종료되도록 기다립니다.\n\n```js\n#include <Arduino.h>\n\n// 카운팅 세마포어를 구현하는 그룹 핸들\nstatic EventGroupHandle_t eventGroup;\n\n// 각 작업에 대한 비트 마스크 정의\nconst EventBits_t TASK_1_BIT = (1 << 0); // 00000001\nconst EventBits_t TASK_2_BIT = (1 << 1); // 00000010\nconst EventBits_t TASK_3_BIT = (1 << 2); // 00000100\n\nvoid taskFunction(void *pvParameters) {\n    int taskNumber = ((int)pvParameters);\n    // 작업 번호를 기반으로 설정할 비트 계산\n    EventBits_t taskBit = (1 << (taskNumber - 1));\n\n    for(int i = 0; i < 5; i++) {\n        Serial.printf(\"Task %d is executing...\\n\", taskNumber);\n        vTaskDelay(pdMS_TO_TICKS(1000)); // 작업 활동 시뮬레이션\n    }\n\n    // 이 작업을 위해 이벤트 그룹에 적합한 비트 설정\n    Serial.printf(\"Task %d completed and bit set.\\n\", taskNumber);\n    xEventGroupSetBits(eventGroup, taskBit);\n    // 완료되면 이 작업 삭제\n    vTaskDelete(NULL);\n}\n\nvoid setup() {\n    Serial.begin(115200);\n    while (!Serial);\n\n     // 이벤트 그룹 생성\n    eventGroup = xEventGroupCreate();\n    if (eventGroup == NULL) {\n        Serial.println(\"이벤트 그룹 생성 실패. 힙 부족일 수 있습니다.\");\n        return;\n    }\n\n    // 작업에 전달할 매개변수, 작업 번호를 나타냄\n    static int taskParams[3] = {1, 2, 3};\n    for (int i = 0; i < 3; i++) {\n        xTaskCreate(\n            taskFunction,            // 작업 함수\n            \"Task\",                  // 작업 이름\n            2048,                    // 스택 크기\n            &taskParams[i],          // 매개변수 (작업 번호)\n            1,                       // 우선순위\n            NULL                     // 사용하지 않는 작업 핸들\n        );\n    }\n\n    // 모든 작업이 비트를 설정할 때까지 기다림\n    Serial.println(\"작업 완료 대기 중...\");\n    xEventGroupWaitBits(\n        eventGroup,                          // 테스트할 이벤트 그룹.\n        TASK_1_BIT | TASK_2_BIT | TASK_3_BIT, // 기다릴 이벤트 그룹 내 비트.\n        pdTRUE,                              // 종료 시 비트 지우기.\n        pdTRUE,                              // 모든 비트를 기다림.\n        portMAX_DELAY                        // 무기한 대기.\n    );\n\n    Serial.println(\"모든 작업 완료됨.\");\n    // 이벤트 그룹 정리\n    vEventGroupDelete(eventGroup);\n}\n\nvoid loop() {}\n```\n\n# 자세한 설명\n\n<div class=\"content-ad\"></div>\n\n- 이벤트 그룹 핸들이 선언되었습니다.\n\n```js\n// 카운팅 세마포어를 구현하는 그룹 핸들\nstatic EventGroupHandle_t eventGroup;\n```\n\n- 각 작업은 숫자 ID에 연결되며, 이는 비트 시퀀스의 인덱스를 나타냅니다. 작업이 완료되었는지 확인하는 데 세 개의 비트 마스크가 사용됩니다.\n\n```js\n// 각 작업을 위한 비트 마스크 정의\nconst EventBits_t TASK_1_BIT = (1 << 0); // 00000001\nconst EventBits_t TASK_2_BIT = (1 << 1); // 00000010\nconst EventBits_t TASK_3_BIT = (1 << 2); // 00000100\n```\n\n<div class=\"content-ad\"></div>\n\n- 주요 작업은 작업 번호를 매개변수로 전달하여 세 가지 작업을 생성합니다.\n\n```js\n// 작업에 전달할 매개변수, 작업 번호를 나타냄\nstatic int taskParams[3] = {1, 2, 3};\nfor (int i = 0; i < 3; i++) {\n    xTaskCreate(\n        taskFunction,            // 작업 함수\n        \"Task\",                  // 작업 이름\n        2048,                    // 스택 크기\n        &taskParams[i],          // 매개변수 (작업 번호)\n        1,                       // 우선 순위\n        NULL                     // 작업 핸들은 사용하지 않음\n    );\n}\n```\n\n- 작업 번호는 \"EventBits_t\" 변수를 생성하는 데 사용되며 해당하는 양 만큼 비트를 왼쪽으로 이동시킵니다.\n\n```js\nint taskNumber = ((int)pvParameters);\n// 작업 번호를 기반으로 설정할 비트를 계산\nEventBits_t taskBit = (1 << (taskNumber - 1));\n```\n\n<div class=\"content-ad\"></div>\n\n- 작업이 완료되면 그룹에 신호를 보내고 자체를 삭제합니다.\n\n```js\n// 이벤트 그룹에서이 작업에 대한 적절한 비트 설정\nSerial.printf(\"작업 %d가 완료되었고 비트가 설정되었습니다.\\n\", taskNumber);\nxEventGroupSetBits(eventGroup, taskBit);\n// 완료되면이 작업 삭제\nvTaskDelete(NULL);\n```\n\n- 주 작업은 비트 마스크를 사용하여 그룹 내 세 개의 비트가 1로 설정될 때까지 기다리고 즉시 실행을 다시 시작합니다.\n\n```js\n// 모든 작업이 비트를 설정 할 때까지 대기\nSerial.println(\"작업이 완료 될 때까지 대기 중 ...\");\nxEventGroupWaitBits(\n    eventGroup,                          // 테스트되는 이벤트 그룹.\n    TASK_1_BIT | TASK_2_BIT | TASK_3_BIT, // 대기해야 하는 이벤트 그룹 내의 비트.\n    pdTRUE,                              // 종료시 비트 지우기.\n    pdTRUE,                              // 모든 비트를 대기합니다.\n    portMAX_DELAY                        // 무기한 대기.\n);\n```\n\n<div class=\"content-ad\"></div>\n\n- 마침내 이벤트 그룹이 삭제되었습니다.\n\n```js\nSerial.println(\"모든 작업이 완료되었습니다.\");\n// 이벤트 그룹 정리\nvEventGroupDelete(eventGroup);\n```\n\n# 결론\n\n이 유용한 기술은 FreeRTOS 기능만을 사용하여 동기화를 강제하는 간단한 방법입니다. 따라서 무분별한 코드 부하를 피할 수 있습니다. 여러분의 프로젝트에 유용하게 활용하시기를 바랍니다. 읽어주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-06-23-FreeRTOSSimplesemaphoreimplementationusingeventgroup_0.png"},"coverImage":"/assets/img/2024-06-23-FreeRTOSSimplesemaphoreimplementationusingeventgroup_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-FreeRTOSSimplesemaphoreimplementationusingeventgroup_0.png\" alt=\"Image\"></p>\n<p>웹 소프트웨어 엔지니어인 저와 같은 경우에는 실시간 프로그래밍 개념을 이해하기 어려울 수 있습니다.\n이 짧은 기사에서는 여러 멀티스레딩 작업의 완료를 기다리기 위한 세마포어 패턴을 구현하는 쉬운 기술을 소개하겠습니다.</p>\n<h1>정의</h1>\n<ul>\n<li>\n<p>FreeRTOS 작업\nFreeRTOS 작업은 FreeRTOS 실시간 운영 체제 내에서 실행되는 작고 독립적인 프로그램 세그먼트입니다. 각 작업은 특정 작업을 수행하도록 설계되었으며 FreeRTOS 스케줄러에 의해 관리되는 다른 작업과 준동시에 작동합니다. FreeRTOS의 작업은 우선 순위를 부여할 수 있어, 스케줄러가 작업 우선 순위에 따라 실행 흐름을 관리하고 시간에 민감한 작업을 효과적으로 처리할 수 있게 합니다. 이를 통해 응용 프로그램은 여러 작업 간에 작업을 나누어 다루므로 다양한 응용 프로그램 요구 사항을 처리할 수 있습니다.</p>\n</li>\n<li>\n<p>카운팅 세마포어\nFreeRTOS의 카운팅 세마포어는 공유 리소스에 대한 액세스를 관리하거나 가용성에 따라 작업을 동기화하는 동기화 메커니즘입니다. 두 가지 상태만을 갖는 이진 세마포어와 달리 카운팅 세마포어는 가용 리소스의 개수나 이벤트가 발생하기 전에 실행 흐름을 차단/해제하는 횟수를 나타내는 값을 유지합니다.</p>\n</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>TL;DR — The code</h1>\n<p>데모 코드는 \"xTaskCreate\"를 사용하여 세 가지 작업을 실행하며 \"xEventGroupCreate\"로 생성된 이벤트 그룹을 사용하여 카운팅 세마포어를 구현합니다. 메인 작업은 생성된 모든 작업이 실행된 후에만 종료되도록 기다립니다.</p>\n<pre><code class=\"hljs language-js\">#include &#x3C;<span class=\"hljs-title class_\">Arduino</span>.<span class=\"hljs-property\">h</span>>\n\n<span class=\"hljs-comment\">// 카운팅 세마포어를 구현하는 그룹 핸들</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">EventGroupHandle</span>_t eventGroup;\n\n<span class=\"hljs-comment\">// 각 작업에 대한 비트 마스크 정의</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EventBits</span>_t <span class=\"hljs-variable constant_\">TASK_1_BIT</span> = (<span class=\"hljs-number\">1</span> &#x3C;&#x3C; <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// 00000001</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EventBits</span>_t <span class=\"hljs-variable constant_\">TASK_2_BIT</span> = (<span class=\"hljs-number\">1</span> &#x3C;&#x3C; <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 00000010</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EventBits</span>_t <span class=\"hljs-variable constant_\">TASK_3_BIT</span> = (<span class=\"hljs-number\">1</span> &#x3C;&#x3C; <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 00000100</span>\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">taskFunction</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">void</span> *pvParameters</span>) {\n    int taskNumber = ((int)pvParameters);\n    <span class=\"hljs-comment\">// 작업 번호를 기반으로 설정할 비트 계산</span>\n    <span class=\"hljs-title class_\">EventBits</span>_t taskBit = (<span class=\"hljs-number\">1</span> &#x3C;&#x3C; (taskNumber - <span class=\"hljs-number\">1</span>));\n\n    <span class=\"hljs-keyword\">for</span>(int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">5</span>; i++) {\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">\"Task %d is executing...\\n\"</span>, taskNumber);\n        <span class=\"hljs-title function_\">vTaskDelay</span>(<span class=\"hljs-title function_\">pdMS_TO_TICKS</span>(<span class=\"hljs-number\">1000</span>)); <span class=\"hljs-comment\">// 작업 활동 시뮬레이션</span>\n    }\n\n    <span class=\"hljs-comment\">// 이 작업을 위해 이벤트 그룹에 적합한 비트 설정</span>\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">\"Task %d completed and bit set.\\n\"</span>, taskNumber);\n    <span class=\"hljs-title function_\">xEventGroupSetBits</span>(eventGroup, taskBit);\n    <span class=\"hljs-comment\">// 완료되면 이 작업 삭제</span>\n    <span class=\"hljs-title function_\">vTaskDelete</span>(<span class=\"hljs-variable constant_\">NULL</span>);\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">115200</span>);\n    <span class=\"hljs-keyword\">while</span> (!<span class=\"hljs-title class_\">Serial</span>);\n\n     <span class=\"hljs-comment\">// 이벤트 그룹 생성</span>\n    eventGroup = <span class=\"hljs-title function_\">xEventGroupCreate</span>();\n    <span class=\"hljs-keyword\">if</span> (eventGroup == <span class=\"hljs-variable constant_\">NULL</span>) {\n        <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"이벤트 그룹 생성 실패. 힙 부족일 수 있습니다.\"</span>);\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// 작업에 전달할 매개변수, 작업 번호를 나타냄</span>\n    <span class=\"hljs-keyword\">static</span> int taskParams[<span class=\"hljs-number\">3</span>] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>};\n    <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++) {\n        <span class=\"hljs-title function_\">xTaskCreate</span>(\n            taskFunction,            <span class=\"hljs-comment\">// 작업 함수</span>\n            <span class=\"hljs-string\">\"Task\"</span>,                  <span class=\"hljs-comment\">// 작업 이름</span>\n            <span class=\"hljs-number\">2048</span>,                    <span class=\"hljs-comment\">// 스택 크기</span>\n            &#x26;taskParams[i],          <span class=\"hljs-comment\">// 매개변수 (작업 번호)</span>\n            <span class=\"hljs-number\">1</span>,                       <span class=\"hljs-comment\">// 우선순위</span>\n            <span class=\"hljs-variable constant_\">NULL</span>                     <span class=\"hljs-comment\">// 사용하지 않는 작업 핸들</span>\n        );\n    }\n\n    <span class=\"hljs-comment\">// 모든 작업이 비트를 설정할 때까지 기다림</span>\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"작업 완료 대기 중...\"</span>);\n    <span class=\"hljs-title function_\">xEventGroupWaitBits</span>(\n        eventGroup,                          <span class=\"hljs-comment\">// 테스트할 이벤트 그룹.</span>\n        <span class=\"hljs-variable constant_\">TASK_1_BIT</span> | <span class=\"hljs-variable constant_\">TASK_2_BIT</span> | <span class=\"hljs-variable constant_\">TASK_3_BIT</span>, <span class=\"hljs-comment\">// 기다릴 이벤트 그룹 내 비트.</span>\n        pdTRUE,                              <span class=\"hljs-comment\">// 종료 시 비트 지우기.</span>\n        pdTRUE,                              <span class=\"hljs-comment\">// 모든 비트를 기다림.</span>\n        portMAX_DELAY                        <span class=\"hljs-comment\">// 무기한 대기.</span>\n    );\n\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"모든 작업 완료됨.\"</span>);\n    <span class=\"hljs-comment\">// 이벤트 그룹 정리</span>\n    <span class=\"hljs-title function_\">vEventGroupDelete</span>(eventGroup);\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>) {}\n</code></pre>\n<h1>자세한 설명</h1>\n<div class=\"content-ad\"></div>\n<ul>\n<li>이벤트 그룹 핸들이 선언되었습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 카운팅 세마포어를 구현하는 그룹 핸들</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-title class_\">EventGroupHandle</span>_t eventGroup;\n</code></pre>\n<ul>\n<li>각 작업은 숫자 ID에 연결되며, 이는 비트 시퀀스의 인덱스를 나타냅니다. 작업이 완료되었는지 확인하는 데 세 개의 비트 마스크가 사용됩니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 각 작업을 위한 비트 마스크 정의</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EventBits</span>_t <span class=\"hljs-variable constant_\">TASK_1_BIT</span> = (<span class=\"hljs-number\">1</span> &#x3C;&#x3C; <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// 00000001</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EventBits</span>_t <span class=\"hljs-variable constant_\">TASK_2_BIT</span> = (<span class=\"hljs-number\">1</span> &#x3C;&#x3C; <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 00000010</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">EventBits</span>_t <span class=\"hljs-variable constant_\">TASK_3_BIT</span> = (<span class=\"hljs-number\">1</span> &#x3C;&#x3C; <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 00000100</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<ul>\n<li>주요 작업은 작업 번호를 매개변수로 전달하여 세 가지 작업을 생성합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 작업에 전달할 매개변수, 작업 번호를 나타냄</span>\n<span class=\"hljs-keyword\">static</span> int taskParams[<span class=\"hljs-number\">3</span>] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>};\n<span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++) {\n    <span class=\"hljs-title function_\">xTaskCreate</span>(\n        taskFunction,            <span class=\"hljs-comment\">// 작업 함수</span>\n        <span class=\"hljs-string\">\"Task\"</span>,                  <span class=\"hljs-comment\">// 작업 이름</span>\n        <span class=\"hljs-number\">2048</span>,                    <span class=\"hljs-comment\">// 스택 크기</span>\n        &#x26;taskParams[i],          <span class=\"hljs-comment\">// 매개변수 (작업 번호)</span>\n        <span class=\"hljs-number\">1</span>,                       <span class=\"hljs-comment\">// 우선 순위</span>\n        <span class=\"hljs-variable constant_\">NULL</span>                     <span class=\"hljs-comment\">// 작업 핸들은 사용하지 않음</span>\n    );\n}\n</code></pre>\n<ul>\n<li>작업 번호는 \"EventBits_t\" 변수를 생성하는 데 사용되며 해당하는 양 만큼 비트를 왼쪽으로 이동시킵니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">int taskNumber = ((int)pvParameters);\n<span class=\"hljs-comment\">// 작업 번호를 기반으로 설정할 비트를 계산</span>\n<span class=\"hljs-title class_\">EventBits</span>_t taskBit = (<span class=\"hljs-number\">1</span> &#x3C;&#x3C; (taskNumber - <span class=\"hljs-number\">1</span>));\n</code></pre>\n<div class=\"content-ad\"></div>\n<ul>\n<li>작업이 완료되면 그룹에 신호를 보내고 자체를 삭제합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 이벤트 그룹에서이 작업에 대한 적절한 비트 설정</span>\n<span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">\"작업 %d가 완료되었고 비트가 설정되었습니다.\\n\"</span>, taskNumber);\n<span class=\"hljs-title function_\">xEventGroupSetBits</span>(eventGroup, taskBit);\n<span class=\"hljs-comment\">// 완료되면이 작업 삭제</span>\n<span class=\"hljs-title function_\">vTaskDelete</span>(<span class=\"hljs-variable constant_\">NULL</span>);\n</code></pre>\n<ul>\n<li>주 작업은 비트 마스크를 사용하여 그룹 내 세 개의 비트가 1로 설정될 때까지 기다리고 즉시 실행을 다시 시작합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 모든 작업이 비트를 설정 할 때까지 대기</span>\n<span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"작업이 완료 될 때까지 대기 중 ...\"</span>);\n<span class=\"hljs-title function_\">xEventGroupWaitBits</span>(\n    eventGroup,                          <span class=\"hljs-comment\">// 테스트되는 이벤트 그룹.</span>\n    <span class=\"hljs-variable constant_\">TASK_1_BIT</span> | <span class=\"hljs-variable constant_\">TASK_2_BIT</span> | <span class=\"hljs-variable constant_\">TASK_3_BIT</span>, <span class=\"hljs-comment\">// 대기해야 하는 이벤트 그룹 내의 비트.</span>\n    pdTRUE,                              <span class=\"hljs-comment\">// 종료시 비트 지우기.</span>\n    pdTRUE,                              <span class=\"hljs-comment\">// 모든 비트를 대기합니다.</span>\n    portMAX_DELAY                        <span class=\"hljs-comment\">// 무기한 대기.</span>\n);\n</code></pre>\n<div class=\"content-ad\"></div>\n<ul>\n<li>마침내 이벤트 그룹이 삭제되었습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"모든 작업이 완료되었습니다.\"</span>);\n<span class=\"hljs-comment\">// 이벤트 그룹 정리</span>\n<span class=\"hljs-title function_\">vEventGroupDelete</span>(eventGroup);\n</code></pre>\n<h1>결론</h1>\n<p>이 유용한 기술은 FreeRTOS 기능만을 사용하여 동기화를 강제하는 간단한 방법입니다. 따라서 무분별한 코드 부하를 피할 수 있습니다. 여러분의 프로젝트에 유용하게 활용하시기를 바랍니다. 읽어주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}