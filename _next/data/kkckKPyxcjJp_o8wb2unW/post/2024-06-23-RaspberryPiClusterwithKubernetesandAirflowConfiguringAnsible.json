{"pageProps":{"post":{"title":"라즈베리 파이 클러스터 설정 Kubernetes와 Airflow, Ansible 사용 방법","description":"","date":"2024-06-23 18:09","slug":"2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible","content":"\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_0.png\" />\n\n아래는 Ansible을 Raspberry Pi 클러스터에서 작동시키기 위해 취한 단계를 요약한 것입니다. 이 프로젝트의 동기는 Kubernetes 및 Airflow를 실행하는 작은 규모이면서 효율적이고 유연한 클러스터 환경을 만드는 것입니다. 목표는 다양한 웹 스크래핑 스크립트를 자동으로 예약하고 서핑 조건을 확인하는 스크래핑을 포함한 DAG 스케줄링을 자동화하는 것입니다.\n\n시작하기 전에 필요한 하드웨어 구성 요소를 모두 준비했는지 확인해 주세요. 자세한 목록 및 설정 지침은 다음에서 확인할 수 있습니다:\n\n# 시작하기\n\n<div class=\"content-ad\"></div>\n\n## 초기화 스크립트에 접근하기 위해 Git 저장소를 복제하세요\n\n- 저장소를 복제하고 해당 폴더로 이동하세요:\n\n```js\ngit clone https://github.com/robronayne/PiClusterFlow.git\ncd PiClusterFlow\n```\n\n## microSD 카드에 Raspberry Pi OS 설치하기\n\n<div class=\"content-ad\"></div>\n\n1. Raspberry Pi Imager 다운로드하기:\n\n- 먼저 raspberrypi.org/software에서 Raspberry Pi Imager를 다운로드하세요.\n\n2. Imager를 사용하여 OS 설치하기:\n\n- SanDisk 32GB microSD 카드를 컴퓨터에 삽입하세요.\n- microSD 카드를 boot로 이름을 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_1.png\" />\n  \n- Raspberry Pi Imager를 열고 Raspberry Pi OS (32비트)를 선택합니다.\n- 삽입된 SD 카드를 선택합니다.\n\n3. 호스트, 사용자 이름 및 비밀번호 구성:\n\n- Pi OS의 최근 변경 사항은 SSH용 비밀번호 설정을 필요로 합니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_2.png\" />\n\n- OS 맞춤 설정 메뉴에서 호스트 이름, 사용자 이름 및 암호 구성하세요.\n- 모든 Raspberry Pi 노드의 사용자 이름을 \"pi\"로 설정하고 각각의 암호를 일관되게 유지하세요. 호스트 이름도 노드의 의도된 역할과 일치하도록 설정해주세요.\n- 프롬프트가 나타날 때 기존 데이터를 지울 것인지 확인하세요.\n- 각각의 microSD 카드에 대해 이 프로세스를 반복하세요.\n\n## Prepare microSD Cards\n\n1. microSD 카드 장착:\n\n<div class=\"content-ad\"></div>\n\n- 컴퓨터에 microSD 카드를 삽입하세요.\n- diskutil list를 사용하여 디스크 식별자(/dev/diskX)를 확인하세요.\n\n![이미지](/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_3.png)\n\n- /Volumes/에 카드의 부트 파티션을 마운트하세요. 다음 명령어를 사용하여 마운트하고 마운트를 확인할 수 있습니다:\n\n```js\ndiskutil mountDisk /dev/diskX\nls /Volumes\n```\n\n<div class=\"content-ad\"></div>\n\n2. setup_node.sh 스크립트 실행\n\n- setup_node.sh에 실행 권한을 부여하세요:\n\n```js\nchmod +x setup_node.sh\n```\n\n- 각 microSD 카드가 어떤 노드에 해당하는 지에 따라 스크립트를 한 번씩 실행하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n# 마스터 노드 마이크로SD 카드용\nsudo ./setup_node.sh master \n```\n\n```js\n# 워커 노드 마이크로SD 카드용\nsudo ./setup_node.sh worker1 \nsudo ./setup_node.sh worker2 \nsudo ./setup_node.sh worker3\n```\n\n![이미지](/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_4.png)\n\n3. 마이크로SD 카드를 추출하세요.\n\n<div class=\"content-ad\"></div>\n\n- 스크립트가 완료되면 마이크로SD 카드를 제거해 주세요\n\n```js\ndiskutil unmountDisk /dev/diskX\n```\n\n## 라즈베리 파이 기기에 마이크로SD 카드 삽입\n\n- 각 준비된 마이크로SD 카드를 해당 라즈베리 파이 기기에 넣어주세요.\n- 각 라즈베리 파이를 켜고 이더넷으로 네트워크에 연결해 주세요.\n\n<div class=\"content-ad\"></div>\n\n# 의존성 설치\n\n1. Homebrew 설치: Homebrew가 설치되어 있지 않은 경우, Homebrew를 설치하세요:\n\n```js\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n2. Ansible 설치:\n\n<div class=\"content-ad\"></div>\n\n```js\nbrew install ansible\n```\n\n3. 라즈베리 파이 IP 주소를 가져 오기 위해 nmap 설치:\n\n```js\nbrew install nmap\n```\n\n3. Ansible과의 SSH 인증을 위해 sshpass 설치하기:\n\n<div class=\"content-ad\"></div>\n\n```js\nbrew install sshpass\n```\n\n4. Ansible을 초기화합니다:\n\n- 각 Raspberry Pi에 대한 Ansible 호스트 파일 및 SSH 액세스를 구성해야 합니다.\n- init_ansible.sh 스크립트를 실행해주세요.\n\n```js\nchmod +x ./init_ansible.sh\nsudo ./init_ansible.sh\n```\n\n<div class=\"content-ad\"></div>\n\n- 이 스크립트는 Pi의 IP 주소를 동적으로 검색하여 ansible/hosts 파일에 저장합니다. 또한 각 IP 주소의 SSH 키를 ~/.ssh/known_hosts 파일에 추가합니다.\n\n![이미지](/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_5.png)\n\n- 마지막으로, 우리가 만든 Raspberry Pi 암호를 환경 변수에 추가할 수 있습니다. 스크립트는 이미 ansible/hosts 파일이 SSH 암호를 위한 환경 변수를 참조하도록 하였습니다. 이렇게 함으로써 Ansible 명령을 실행할 때마다 암호를 입력할 필요가 없어집니다.\n\n```js\nexport ANSIBLE_SSH_PASS='여러분의_ssh_암호_여기에'\n```\n\n<div class=\"content-ad\"></div>\n\n# 확인\n\n## 모든 노드에 핑 보내기\n\n- 이제 Ansible이 구성되었으므로 호스트 파일에 존재하는 모든 노드에 핑을 시도할 수 있습니다. 다음 명령어를 사용하여 디렉토리로 이동한 후 노드에 핑을 보낼 수 있습니다:\n\n```js\ncd ansible\nansible all -m ping\n```\n\n<div class=\"content-ad\"></div>\n\n\n아래는 마크다운 형식으로 변경한 표입니다.\n\n\n![Raspberry Pi Cluster](/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_6.png)\n\n지금까지 여러 Pi 노드를 구성하고 Ansible을 사용하여 설정 작업을 자동화하여 Raspberry Pi Cluster를 성공적으로 구축했습니다. 이러한 단계를 따라, 추가적인 사용자 정의 및 자동화를 위한 준비가 된 일관된 클러스터 환경을 만들었습니다. 각 Raspberry Pi 노드는 협력하여 작동할 수 있도록 준비되었으며, 분산 컴퓨팅 및 자동화에 대한 미래 프로젝트와 실험을 위한 길을 열었습니다.\n\n이 프로젝트의 현재 상태는 GitHub에서 확인할 수 있습니다:\n","ogImage":{"url":"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_0.png"},"coverImage":"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_0.png\">\n<p>아래는 Ansible을 Raspberry Pi 클러스터에서 작동시키기 위해 취한 단계를 요약한 것입니다. 이 프로젝트의 동기는 Kubernetes 및 Airflow를 실행하는 작은 규모이면서 효율적이고 유연한 클러스터 환경을 만드는 것입니다. 목표는 다양한 웹 스크래핑 스크립트를 자동으로 예약하고 서핑 조건을 확인하는 스크래핑을 포함한 DAG 스케줄링을 자동화하는 것입니다.</p>\n<p>시작하기 전에 필요한 하드웨어 구성 요소를 모두 준비했는지 확인해 주세요. 자세한 목록 및 설정 지침은 다음에서 확인할 수 있습니다:</p>\n<h1>시작하기</h1>\n<div class=\"content-ad\"></div>\n<h2>초기화 스크립트에 접근하기 위해 Git 저장소를 복제하세요</h2>\n<ul>\n<li>저장소를 복제하고 해당 폴더로 이동하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">git clone <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/robronayne/PiClusterFlow.git</span>\ncd <span class=\"hljs-title class_\">PiClusterFlow</span>\n</code></pre>\n<h2>microSD 카드에 Raspberry Pi OS 설치하기</h2>\n<div class=\"content-ad\"></div>\n<ol>\n<li>Raspberry Pi Imager 다운로드하기:</li>\n</ol>\n<ul>\n<li>먼저 raspberrypi.org/software에서 Raspberry Pi Imager를 다운로드하세요.</li>\n</ul>\n<ol start=\"2\">\n<li>Imager를 사용하여 OS 설치하기:</li>\n</ol>\n<ul>\n<li>SanDisk 32GB microSD 카드를 컴퓨터에 삽입하세요.</li>\n<li>microSD 카드를 boot로 이름을 변경하세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_1.png\">\n<ul>\n<li>Raspberry Pi Imager를 열고 Raspberry Pi OS (32비트)를 선택합니다.</li>\n<li>삽입된 SD 카드를 선택합니다.</li>\n</ul>\n<ol start=\"3\">\n<li>호스트, 사용자 이름 및 비밀번호 구성:</li>\n</ol>\n<ul>\n<li>Pi OS의 최근 변경 사항은 SSH용 비밀번호 설정을 필요로 합니다.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_2.png\">\n<ul>\n<li>OS 맞춤 설정 메뉴에서 호스트 이름, 사용자 이름 및 암호 구성하세요.</li>\n<li>모든 Raspberry Pi 노드의 사용자 이름을 \"pi\"로 설정하고 각각의 암호를 일관되게 유지하세요. 호스트 이름도 노드의 의도된 역할과 일치하도록 설정해주세요.</li>\n<li>프롬프트가 나타날 때 기존 데이터를 지울 것인지 확인하세요.</li>\n<li>각각의 microSD 카드에 대해 이 프로세스를 반복하세요.</li>\n</ul>\n<h2>Prepare microSD Cards</h2>\n<ol>\n<li>microSD 카드 장착:</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ul>\n<li>컴퓨터에 microSD 카드를 삽입하세요.</li>\n<li>diskutil list를 사용하여 디스크 식별자(/dev/diskX)를 확인하세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_3.png\" alt=\"이미지\"></p>\n<ul>\n<li>/Volumes/에 카드의 부트 파티션을 마운트하세요. 다음 명령어를 사용하여 마운트하고 마운트를 확인할 수 있습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">diskutil mountDisk /dev/diskX\nls /<span class=\"hljs-title class_\">Volumes</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<ol start=\"2\">\n<li>setup_node.sh 스크립트 실행</li>\n</ol>\n<ul>\n<li>setup_node.sh에 실행 권한을 부여하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">chmod +x setup_node.<span class=\"hljs-property\">sh</span>\n</code></pre>\n<ul>\n<li>각 microSD 카드가 어떤 노드에 해당하는 지에 따라 스크립트를 한 번씩 실행하세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\"># 마스터 노드 마이크로<span class=\"hljs-variable constant_\">SD</span> 카드용\nsudo ./setup_node.<span class=\"hljs-property\">sh</span> master \n</code></pre>\n<pre><code class=\"hljs language-js\"># 워커 노드 마이크로<span class=\"hljs-variable constant_\">SD</span> 카드용\nsudo ./setup_node.<span class=\"hljs-property\">sh</span> worker1 \nsudo ./setup_node.<span class=\"hljs-property\">sh</span> worker2 \nsudo ./setup_node.<span class=\"hljs-property\">sh</span> worker3\n</code></pre>\n<p><img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_4.png\" alt=\"이미지\"></p>\n<ol start=\"3\">\n<li>마이크로SD 카드를 추출하세요.</li>\n</ol>\n<div class=\"content-ad\"></div>\n<ul>\n<li>스크립트가 완료되면 마이크로SD 카드를 제거해 주세요</li>\n</ul>\n<pre><code class=\"hljs language-js\">diskutil unmountDisk /dev/diskX\n</code></pre>\n<h2>라즈베리 파이 기기에 마이크로SD 카드 삽입</h2>\n<ul>\n<li>각 준비된 마이크로SD 카드를 해당 라즈베리 파이 기기에 넣어주세요.</li>\n<li>각 라즈베리 파이를 켜고 이더넷으로 네트워크에 연결해 주세요.</li>\n</ul>\n<div class=\"content-ad\"></div>\n<h1>의존성 설치</h1>\n<ol>\n<li>Homebrew 설치: Homebrew가 설치되어 있지 않은 경우, Homebrew를 설치하세요:</li>\n</ol>\n<pre><code class=\"hljs language-js\">/bin/bash -c <span class=\"hljs-string\">\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</span>\n</code></pre>\n<ol start=\"2\">\n<li>Ansible 설치:</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">brew install ansible\n</code></pre>\n<ol start=\"3\">\n<li>라즈베리 파이 IP 주소를 가져 오기 위해 nmap 설치:</li>\n</ol>\n<pre><code class=\"hljs language-js\">brew install nmap\n</code></pre>\n<ol start=\"3\">\n<li>Ansible과의 SSH 인증을 위해 sshpass 설치하기:</li>\n</ol>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">brew install sshpass\n</code></pre>\n<ol start=\"4\">\n<li>Ansible을 초기화합니다:</li>\n</ol>\n<ul>\n<li>각 Raspberry Pi에 대한 Ansible 호스트 파일 및 SSH 액세스를 구성해야 합니다.</li>\n<li>init_ansible.sh 스크립트를 실행해주세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">chmod +x ./init_ansible.<span class=\"hljs-property\">sh</span>\nsudo ./init_ansible.<span class=\"hljs-property\">sh</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<ul>\n<li>이 스크립트는 Pi의 IP 주소를 동적으로 검색하여 ansible/hosts 파일에 저장합니다. 또한 각 IP 주소의 SSH 키를 ~/.ssh/known_hosts 파일에 추가합니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_5.png\" alt=\"이미지\"></p>\n<ul>\n<li>마지막으로, 우리가 만든 Raspberry Pi 암호를 환경 변수에 추가할 수 있습니다. 스크립트는 이미 ansible/hosts 파일이 SSH 암호를 위한 환경 변수를 참조하도록 하였습니다. 이렇게 함으로써 Ansible 명령을 실행할 때마다 암호를 입력할 필요가 없어집니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-variable constant_\">ANSIBLE_SSH_PASS</span>=<span class=\"hljs-string\">'여러분의_ssh_암호_여기에'</span>\n</code></pre>\n<div class=\"content-ad\"></div>\n<h1>확인</h1>\n<h2>모든 노드에 핑 보내기</h2>\n<ul>\n<li>이제 Ansible이 구성되었으므로 호스트 파일에 존재하는 모든 노드에 핑을 시도할 수 있습니다. 다음 명령어를 사용하여 디렉토리로 이동한 후 노드에 핑을 보낼 수 있습니다:</li>\n</ul>\n<pre><code class=\"hljs language-js\">cd ansible\nansible all -m ping\n</code></pre>\n<div class=\"content-ad\"></div>\n<p>아래는 마크다운 형식으로 변경한 표입니다.</p>\n<p><img src=\"/assets/img/2024-06-23-RaspberryPiClusterwithKubernetesandAirflowConfiguringAnsible_6.png\" alt=\"Raspberry Pi Cluster\"></p>\n<p>지금까지 여러 Pi 노드를 구성하고 Ansible을 사용하여 설정 작업을 자동화하여 Raspberry Pi Cluster를 성공적으로 구축했습니다. 이러한 단계를 따라, 추가적인 사용자 정의 및 자동화를 위한 준비가 된 일관된 클러스터 환경을 만들었습니다. 각 Raspberry Pi 노드는 협력하여 작동할 수 있도록 준비되었으며, 분산 컴퓨팅 및 자동화에 대한 미래 프로젝트와 실험을 위한 길을 열었습니다.</p>\n<p>이 프로젝트의 현재 상태는 GitHub에서 확인할 수 있습니다:</p>\n</body>\n</html>\n"},"__N_SSG":true}